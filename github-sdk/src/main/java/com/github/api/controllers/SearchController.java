/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.SearchCode403ErrorException;
import com.github.api.exceptions.SearchCode422ErrorException;
import com.github.api.exceptions.SearchIssues403ErrorException;
import com.github.api.exceptions.SearchIssues422ErrorException;
import com.github.api.exceptions.SearchLabels403ErrorException;
import com.github.api.exceptions.SearchLabels404ErrorException;
import com.github.api.exceptions.SearchLabels422ErrorException;
import com.github.api.exceptions.SearchRepositories422ErrorException;
import com.github.api.exceptions.SearchUsers422ErrorException;
import com.github.api.exceptions.ServiceUnavailable1Exception;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.Order1Enum;
import com.github.api.models.SearchCodeResponse;
import com.github.api.models.SearchCommitsResponse;
import com.github.api.models.SearchIssuesResponse;
import com.github.api.models.SearchLabelsResponse;
import com.github.api.models.SearchRepositoriesResponse;
import com.github.api.models.SearchTopicsResponse;
import com.github.api.models.SearchUsersResponse;
import com.github.api.models.Sort151Enum;
import com.github.api.models.Sort161Enum;
import com.github.api.models.Sort171Enum;
import com.github.api.models.Sort191Enum;
import com.github.api.models.Sort201Enum;
import com.github.api.models.Sort29Enum;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SearchController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SearchController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Searches for query terms inside of a file. This method returns up to 100 results [per
     * page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When
     * searching for code, you can get text match metadata for the file **content** and file
     * **path** fields when you pass the `text-match` media type. For more details about how to
     * receive highlighted search results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if
     * you want to find the definition of the `addClass` function inside
     * [jQuery](https://github.com/jquery/jquery) repository, your query would look something like
     * this: `q=addClass+in:file+language:js+repo:jquery/jquery` This query searches for the keyword
     * `addClass` within a file's contents. The query limits the search to files where the language
     * is JavaScript in the `jquery/jquery` repository. #### Considerations for code search Due to
     * the complexity of searching code, there are a few restrictions on how searches are performed:
     * * Only the _default branch_ is considered. In most cases, this will be the `master` branch. *
     * Only files smaller than 384 KB are searchable. * You must always include at least one search
     * term when searching source code. For example, searching for
     * [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not
     * valid, while [`amazing
     * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
     * @param  q  Required parameter: The query contains one or more search keywords and qualifiers.
     *         Qualifiers allow you to limit your search to specific areas of GitHub. The REST API
     *         supports the same qualifiers as the web interface for GitHub. To learn more about the
     *         format of the query, see [Constructing a search
     *         query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     *         See "[Searching
     *         code](https://docs.github.com/search-github/searching-on-github/searching-code)" for
     *         a detailed list of qualifiers.
     * @param  sort  Optional parameter: Sorts the results of your query. Can only be `indexed`,
     *         which indicates how recently a file has been indexed by the GitHub search
     *         infrastructure. Default: [best
     *         match](https://docs.github.com/rest/reference/search#ranking-search-results)
     * @param  order  Optional parameter: Determines whether the first search result returned is the
     *         highest number of matches (`desc`) or lowest number of matches (`asc`). This
     *         parameter is ignored unless you provide `sort`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the SearchCodeResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SearchCodeResponse searchCode(
            final String q,
            final Sort151Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareSearchCodeRequest(q, sort, order, perPage, page).execute();
    }

    /**
     * Searches for query terms inside of a file. This method returns up to 100 results [per
     * page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When
     * searching for code, you can get text match metadata for the file **content** and file
     * **path** fields when you pass the `text-match` media type. For more details about how to
     * receive highlighted search results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if
     * you want to find the definition of the `addClass` function inside
     * [jQuery](https://github.com/jquery/jquery) repository, your query would look something like
     * this: `q=addClass+in:file+language:js+repo:jquery/jquery` This query searches for the keyword
     * `addClass` within a file's contents. The query limits the search to files where the language
     * is JavaScript in the `jquery/jquery` repository. #### Considerations for code search Due to
     * the complexity of searching code, there are a few restrictions on how searches are performed:
     * * Only the _default branch_ is considered. In most cases, this will be the `master` branch. *
     * Only files smaller than 384 KB are searchable. * You must always include at least one search
     * term when searching source code. For example, searching for
     * [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not
     * valid, while [`amazing
     * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
     * @param  q  Required parameter: The query contains one or more search keywords and qualifiers.
     *         Qualifiers allow you to limit your search to specific areas of GitHub. The REST API
     *         supports the same qualifiers as the web interface for GitHub. To learn more about the
     *         format of the query, see [Constructing a search
     *         query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     *         See "[Searching
     *         code](https://docs.github.com/search-github/searching-on-github/searching-code)" for
     *         a detailed list of qualifiers.
     * @param  sort  Optional parameter: Sorts the results of your query. Can only be `indexed`,
     *         which indicates how recently a file has been indexed by the GitHub search
     *         infrastructure. Default: [best
     *         match](https://docs.github.com/rest/reference/search#ranking-search-results)
     * @param  order  Optional parameter: Determines whether the first search result returned is the
     *         highest number of matches (`desc`) or lowest number of matches (`asc`). This
     *         parameter is ignored unless you provide `sort`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the SearchCodeResponse response from the API call
     */
    public CompletableFuture<SearchCodeResponse> searchCodeAsync(
            final String q,
            final Sort151Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareSearchCodeRequest(q, sort, order, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for searchCode.
     */
    private ApiCall<SearchCodeResponse, ApiException> prepareSearchCodeRequest(
            final String q,
            final Sort151Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<SearchCodeResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/search/code")
                        .queryParam(param -> param.key("q")
                                .value(q))
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .queryParam(param -> param.key("order")
                                .value((order != null) ? order.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SearchCodeResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new SearchCode403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new SearchCode422ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Find commits via various criteria on the default branch (usually `main`). This method returns
     * up to 100 results [per
     * page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When
     * searching for commits, you can get text match metadata for the **message** field when you
     * provide the `text-match` media type. For more details about how to receive highlighted search
     * results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if
     * you want to find commits related to CSS in the
     * [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would
     * look something like this: `q=repo:octocat/Spoon-Knife+css`.
     * @param  q  Required parameter: The query contains one or more search keywords and qualifiers.
     *         Qualifiers allow you to limit your search to specific areas of GitHub. The REST API
     *         supports the same qualifiers as the web interface for GitHub. To learn more about the
     *         format of the query, see [Constructing a search
     *         query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     *         See "[Searching
     *         commits](https://docs.github.com/search-github/searching-on-github/searching-commits)"
     *         for a detailed list of qualifiers.
     * @param  sort  Optional parameter: Sorts the results of your query by `author-date` or
     *         `committer-date`. Default: [best
     *         match](https://docs.github.com/rest/reference/search#ranking-search-results)
     * @param  order  Optional parameter: Determines whether the first search result returned is the
     *         highest number of matches (`desc`) or lowest number of matches (`asc`). This
     *         parameter is ignored unless you provide `sort`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the SearchCommitsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SearchCommitsResponse searchCommits(
            final String q,
            final Sort161Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareSearchCommitsRequest(q, sort, order, perPage, page).execute();
    }

    /**
     * Find commits via various criteria on the default branch (usually `main`). This method returns
     * up to 100 results [per
     * page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When
     * searching for commits, you can get text match metadata for the **message** field when you
     * provide the `text-match` media type. For more details about how to receive highlighted search
     * results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if
     * you want to find commits related to CSS in the
     * [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would
     * look something like this: `q=repo:octocat/Spoon-Knife+css`.
     * @param  q  Required parameter: The query contains one or more search keywords and qualifiers.
     *         Qualifiers allow you to limit your search to specific areas of GitHub. The REST API
     *         supports the same qualifiers as the web interface for GitHub. To learn more about the
     *         format of the query, see [Constructing a search
     *         query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     *         See "[Searching
     *         commits](https://docs.github.com/search-github/searching-on-github/searching-commits)"
     *         for a detailed list of qualifiers.
     * @param  sort  Optional parameter: Sorts the results of your query by `author-date` or
     *         `committer-date`. Default: [best
     *         match](https://docs.github.com/rest/reference/search#ranking-search-results)
     * @param  order  Optional parameter: Determines whether the first search result returned is the
     *         highest number of matches (`desc`) or lowest number of matches (`asc`). This
     *         parameter is ignored unless you provide `sort`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the SearchCommitsResponse response from the API call
     */
    public CompletableFuture<SearchCommitsResponse> searchCommitsAsync(
            final String q,
            final Sort161Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareSearchCommitsRequest(q, sort, order, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for searchCommits.
     */
    private ApiCall<SearchCommitsResponse, ApiException> prepareSearchCommitsRequest(
            final String q,
            final Sort161Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<SearchCommitsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/search/commits")
                        .queryParam(param -> param.key("q")
                                .value(q))
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .queryParam(param -> param.key("order")
                                .value((order != null) ? order.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SearchCommitsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Find issues by state and keyword. This method returns up to 100 results [per
     * page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When
     * searching for issues, you can get text match metadata for the issue **title**, issue
     * **body**, and issue **comment body** fields when you pass the `text-match` media type. For
     * more details about how to receive highlighted search results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if
     * you want to find the oldest unresolved Python bugs on Windows. Your query might look
     * something like this. `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
     * This query searches for the keyword `windows`, within any open issue that is labeled as
     * `bug`. The search runs across repositories whose primary language is Python. The results are
     * sorted by creation date in ascending order, which means the oldest issues appear first in the
     * search results. **Note:** For
     * [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests)
     * GitHub App requests, you can't retrieve a combination of issues and pull requests in a single
     * query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive
     * an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull
     * requests, you must send separate queries for issues and pull requests. For more information
     * about the `is` qualifier, see "[Searching only issues or pull
     * requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests).".
     * @param  q  Required parameter: The query contains one or more search keywords and qualifiers.
     *         Qualifiers allow you to limit your search to specific areas of GitHub. The REST API
     *         supports the same qualifiers as the web interface for GitHub. To learn more about the
     *         format of the query, see [Constructing a search
     *         query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     *         See "[Searching issues and pull
     *         requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)"
     *         for a detailed list of qualifiers.
     * @param  sort  Optional parameter: Sorts the results of your query by the number of
     *         `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`,
     *         `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`.
     *         You can also sort results by how recently the items were `created` or `updated`,
     *         Default: [best
     *         match](https://docs.github.com/rest/reference/search#ranking-search-results)
     * @param  order  Optional parameter: Determines whether the first search result returned is the
     *         highest number of matches (`desc`) or lowest number of matches (`asc`). This
     *         parameter is ignored unless you provide `sort`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the SearchIssuesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SearchIssuesResponse searchIssuesAndPullRequests(
            final String q,
            final Sort171Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareSearchIssuesAndPullRequestsRequest(q, sort, order, perPage, page).execute();
    }

    /**
     * Find issues by state and keyword. This method returns up to 100 results [per
     * page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When
     * searching for issues, you can get text match metadata for the issue **title**, issue
     * **body**, and issue **comment body** fields when you pass the `text-match` media type. For
     * more details about how to receive highlighted search results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if
     * you want to find the oldest unresolved Python bugs on Windows. Your query might look
     * something like this. `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
     * This query searches for the keyword `windows`, within any open issue that is labeled as
     * `bug`. The search runs across repositories whose primary language is Python. The results are
     * sorted by creation date in ascending order, which means the oldest issues appear first in the
     * search results. **Note:** For
     * [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests)
     * GitHub App requests, you can't retrieve a combination of issues and pull requests in a single
     * query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive
     * an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull
     * requests, you must send separate queries for issues and pull requests. For more information
     * about the `is` qualifier, see "[Searching only issues or pull
     * requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests).".
     * @param  q  Required parameter: The query contains one or more search keywords and qualifiers.
     *         Qualifiers allow you to limit your search to specific areas of GitHub. The REST API
     *         supports the same qualifiers as the web interface for GitHub. To learn more about the
     *         format of the query, see [Constructing a search
     *         query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     *         See "[Searching issues and pull
     *         requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)"
     *         for a detailed list of qualifiers.
     * @param  sort  Optional parameter: Sorts the results of your query by the number of
     *         `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`,
     *         `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`.
     *         You can also sort results by how recently the items were `created` or `updated`,
     *         Default: [best
     *         match](https://docs.github.com/rest/reference/search#ranking-search-results)
     * @param  order  Optional parameter: Determines whether the first search result returned is the
     *         highest number of matches (`desc`) or lowest number of matches (`asc`). This
     *         parameter is ignored unless you provide `sort`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the SearchIssuesResponse response from the API call
     */
    public CompletableFuture<SearchIssuesResponse> searchIssuesAndPullRequestsAsync(
            final String q,
            final Sort171Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareSearchIssuesAndPullRequestsRequest(q, sort, order, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for searchIssuesAndPullRequests.
     */
    private ApiCall<SearchIssuesResponse, ApiException> prepareSearchIssuesAndPullRequestsRequest(
            final String q,
            final Sort171Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<SearchIssuesResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/search/issues")
                        .queryParam(param -> param.key("q")
                                .value(q))
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .queryParam(param -> param.key("order")
                                .value((order != null) ? order.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SearchIssuesResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new SearchIssues403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new SearchIssues422ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Find labels in a repository with names or descriptions that match search keywords. Returns up
     * to 100 results [per
     * page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When
     * searching for labels, you can get text match metadata for the label **name** and
     * **description** fields when you pass the `text-match` media type. For more details about how
     * to receive highlighted search results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if
     * you want to find labels in the `linguist` repository that match `bug`, `defect`, or
     * `enhancement`. Your query might look like this:
     * `q=bug+defect+enhancement&repository_id=64778136` The labels that best match the query appear
     * first in the search results.
     * @param  repositoryId  Required parameter: The id of the repository.
     * @param  q  Required parameter: The search keywords. This endpoint does not accept qualifiers
     *         in the query. To learn more about the format of the query, see [Constructing a search
     *         query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     * @param  sort  Optional parameter: Sorts the results of your query by when the label was
     *         `created` or `updated`. Default: [best
     *         match](https://docs.github.com/rest/reference/search#ranking-search-results)
     * @param  order  Optional parameter: Determines whether the first search result returned is the
     *         highest number of matches (`desc`) or lowest number of matches (`asc`). This
     *         parameter is ignored unless you provide `sort`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the SearchLabelsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SearchLabelsResponse searchLabels(
            final int repositoryId,
            final String q,
            final Sort29Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareSearchLabelsRequest(repositoryId, q, sort, order, perPage, page).execute();
    }

    /**
     * Find labels in a repository with names or descriptions that match search keywords. Returns up
     * to 100 results [per
     * page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When
     * searching for labels, you can get text match metadata for the label **name** and
     * **description** fields when you pass the `text-match` media type. For more details about how
     * to receive highlighted search results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if
     * you want to find labels in the `linguist` repository that match `bug`, `defect`, or
     * `enhancement`. Your query might look like this:
     * `q=bug+defect+enhancement&repository_id=64778136` The labels that best match the query appear
     * first in the search results.
     * @param  repositoryId  Required parameter: The id of the repository.
     * @param  q  Required parameter: The search keywords. This endpoint does not accept qualifiers
     *         in the query. To learn more about the format of the query, see [Constructing a search
     *         query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     * @param  sort  Optional parameter: Sorts the results of your query by when the label was
     *         `created` or `updated`. Default: [best
     *         match](https://docs.github.com/rest/reference/search#ranking-search-results)
     * @param  order  Optional parameter: Determines whether the first search result returned is the
     *         highest number of matches (`desc`) or lowest number of matches (`asc`). This
     *         parameter is ignored unless you provide `sort`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the SearchLabelsResponse response from the API call
     */
    public CompletableFuture<SearchLabelsResponse> searchLabelsAsync(
            final int repositoryId,
            final String q,
            final Sort29Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareSearchLabelsRequest(repositoryId, q, sort, order, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for searchLabels.
     */
    private ApiCall<SearchLabelsResponse, ApiException> prepareSearchLabelsRequest(
            final int repositoryId,
            final String q,
            final Sort29Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<SearchLabelsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/search/labels")
                        .queryParam(param -> param.key("repository_id")
                                .value(repositoryId).isRequired(false))
                        .queryParam(param -> param.key("q")
                                .value(q))
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .queryParam(param -> param.key("order")
                                .value((order != null) ? order.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SearchLabelsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new SearchLabels403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new SearchLabels404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new SearchLabels422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Find repositories via various criteria. This method returns up to 100 results [per
     * page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When
     * searching for repositories, you can get text match metadata for the **name** and
     * **description** fields when you pass the `text-match` media type. For more details about how
     * to receive highlighted search results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if
     * you want to search for popular Tetris repositories written in assembly code, your query might
     * look like this: `q=tetris+language:assembly&sort=stars&order=desc` This query searches for
     * repositories with the word `tetris` in the name, the description, or the README. The results
     * are limited to repositories where the primary language is assembly. The results are sorted by
     * stars in descending order, so that the most popular repositories appear first in the search
     * results.
     * @param  q  Required parameter: The query contains one or more search keywords and qualifiers.
     *         Qualifiers allow you to limit your search to specific areas of GitHub. The REST API
     *         supports the same qualifiers as the web interface for GitHub. To learn more about the
     *         format of the query, see [Constructing a search
     *         query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     *         See "[Searching for
     *         repositories](https://docs.github.com/articles/searching-for-repositories/)" for a
     *         detailed list of qualifiers.
     * @param  sort  Optional parameter: Sorts the results of your query by number of `stars`,
     *         `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default:
     *         [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
     * @param  order  Optional parameter: Determines whether the first search result returned is the
     *         highest number of matches (`desc`) or lowest number of matches (`asc`). This
     *         parameter is ignored unless you provide `sort`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the SearchRepositoriesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SearchRepositoriesResponse searchRepos(
            final String q,
            final Sort191Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareSearchReposRequest(q, sort, order, perPage, page).execute();
    }

    /**
     * Find repositories via various criteria. This method returns up to 100 results [per
     * page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When
     * searching for repositories, you can get text match metadata for the **name** and
     * **description** fields when you pass the `text-match` media type. For more details about how
     * to receive highlighted search results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if
     * you want to search for popular Tetris repositories written in assembly code, your query might
     * look like this: `q=tetris+language:assembly&sort=stars&order=desc` This query searches for
     * repositories with the word `tetris` in the name, the description, or the README. The results
     * are limited to repositories where the primary language is assembly. The results are sorted by
     * stars in descending order, so that the most popular repositories appear first in the search
     * results.
     * @param  q  Required parameter: The query contains one or more search keywords and qualifiers.
     *         Qualifiers allow you to limit your search to specific areas of GitHub. The REST API
     *         supports the same qualifiers as the web interface for GitHub. To learn more about the
     *         format of the query, see [Constructing a search
     *         query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     *         See "[Searching for
     *         repositories](https://docs.github.com/articles/searching-for-repositories/)" for a
     *         detailed list of qualifiers.
     * @param  sort  Optional parameter: Sorts the results of your query by number of `stars`,
     *         `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default:
     *         [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
     * @param  order  Optional parameter: Determines whether the first search result returned is the
     *         highest number of matches (`desc`) or lowest number of matches (`asc`). This
     *         parameter is ignored unless you provide `sort`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the SearchRepositoriesResponse response from the API call
     */
    public CompletableFuture<SearchRepositoriesResponse> searchReposAsync(
            final String q,
            final Sort191Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareSearchReposRequest(q, sort, order, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for searchRepos.
     */
    private ApiCall<SearchRepositoriesResponse, ApiException> prepareSearchReposRequest(
            final String q,
            final Sort191Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<SearchRepositoriesResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/search/repositories")
                        .queryParam(param -> param.key("q")
                                .value(q))
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .queryParam(param -> param.key("order")
                                .value((order != null) ? order.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SearchRepositoriesResponse.class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new SearchRepositories422ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Find topics via various criteria. Results are sorted by best match. This method returns up to
     * 100 results [per
     * page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See
     * "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list
     * of qualifiers. When searching for topics, you can get text match metadata for the topic's
     * **short\_description**, **description**, **name**, or **display\_name** field when you pass
     * the `text-match` media type. For more details about how to receive highlighted search
     * results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if
     * you want to search for topics related to Ruby that are featured on https://github.com/topics.
     * Your query might look like this: `q=ruby+is:featured` This query searches for topics with the
     * keyword `ruby` and limits the results to find only topics that are featured. The topics that
     * are the best match for the query appear first in the search results.
     * @param  q  Required parameter: The query contains one or more search keywords and qualifiers.
     *         Qualifiers allow you to limit your search to specific areas of GitHub. The REST API
     *         supports the same qualifiers as the web interface for GitHub. To learn more about the
     *         format of the query, see [Constructing a search
     *         query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the SearchTopicsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SearchTopicsResponse searchTopics(
            final String q,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareSearchTopicsRequest(q, perPage, page).execute();
    }

    /**
     * Find topics via various criteria. Results are sorted by best match. This method returns up to
     * 100 results [per
     * page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See
     * "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list
     * of qualifiers. When searching for topics, you can get text match metadata for the topic's
     * **short\_description**, **description**, **name**, or **display\_name** field when you pass
     * the `text-match` media type. For more details about how to receive highlighted search
     * results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if
     * you want to search for topics related to Ruby that are featured on https://github.com/topics.
     * Your query might look like this: `q=ruby+is:featured` This query searches for topics with the
     * keyword `ruby` and limits the results to find only topics that are featured. The topics that
     * are the best match for the query appear first in the search results.
     * @param  q  Required parameter: The query contains one or more search keywords and qualifiers.
     *         Qualifiers allow you to limit your search to specific areas of GitHub. The REST API
     *         supports the same qualifiers as the web interface for GitHub. To learn more about the
     *         format of the query, see [Constructing a search
     *         query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the SearchTopicsResponse response from the API call
     */
    public CompletableFuture<SearchTopicsResponse> searchTopicsAsync(
            final String q,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareSearchTopicsRequest(q, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for searchTopics.
     */
    private ApiCall<SearchTopicsResponse, ApiException> prepareSearchTopicsRequest(
            final String q,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<SearchTopicsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/search/topics")
                        .queryParam(param -> param.key("q")
                                .value(q))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SearchTopicsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Find users via various criteria. This method returns up to 100 results [per
     * page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When
     * searching for users, you can get text match metadata for the issue **login**, public
     * **email**, and **name** fields when you pass the `text-match` media type. For more details
     * about highlighting search results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more
     * details about how to receive highlighted search results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if
     * you're looking for a list of popular users, you might try this query:
     * `q=tom+repos:%3E42+followers:%3E1000` This query searches for users with the name `tom`. The
     * results are restricted to users with more than 42 repositories and over 1,000 followers.
     * @param  q  Required parameter: The query contains one or more search keywords and qualifiers.
     *         Qualifiers allow you to limit your search to specific areas of GitHub. The REST API
     *         supports the same qualifiers as the web interface for GitHub. To learn more about the
     *         format of the query, see [Constructing a search
     *         query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     *         See "[Searching
     *         users](https://docs.github.com/search-github/searching-on-github/searching-users)"
     *         for a detailed list of qualifiers.
     * @param  sort  Optional parameter: Sorts the results of your query by number of `followers` or
     *         `repositories`, or when the person `joined` GitHub. Default: [best
     *         match](https://docs.github.com/rest/reference/search#ranking-search-results)
     * @param  order  Optional parameter: Determines whether the first search result returned is the
     *         highest number of matches (`desc`) or lowest number of matches (`asc`). This
     *         parameter is ignored unless you provide `sort`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the SearchUsersResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SearchUsersResponse searchUsers(
            final String q,
            final Sort201Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareSearchUsersRequest(q, sort, order, perPage, page).execute();
    }

    /**
     * Find users via various criteria. This method returns up to 100 results [per
     * page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When
     * searching for users, you can get text match metadata for the issue **login**, public
     * **email**, and **name** fields when you pass the `text-match` media type. For more details
     * about highlighting search results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more
     * details about how to receive highlighted search results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if
     * you're looking for a list of popular users, you might try this query:
     * `q=tom+repos:%3E42+followers:%3E1000` This query searches for users with the name `tom`. The
     * results are restricted to users with more than 42 repositories and over 1,000 followers.
     * @param  q  Required parameter: The query contains one or more search keywords and qualifiers.
     *         Qualifiers allow you to limit your search to specific areas of GitHub. The REST API
     *         supports the same qualifiers as the web interface for GitHub. To learn more about the
     *         format of the query, see [Constructing a search
     *         query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     *         See "[Searching
     *         users](https://docs.github.com/search-github/searching-on-github/searching-users)"
     *         for a detailed list of qualifiers.
     * @param  sort  Optional parameter: Sorts the results of your query by number of `followers` or
     *         `repositories`, or when the person `joined` GitHub. Default: [best
     *         match](https://docs.github.com/rest/reference/search#ranking-search-results)
     * @param  order  Optional parameter: Determines whether the first search result returned is the
     *         highest number of matches (`desc`) or lowest number of matches (`asc`). This
     *         parameter is ignored unless you provide `sort`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the SearchUsersResponse response from the API call
     */
    public CompletableFuture<SearchUsersResponse> searchUsersAsync(
            final String q,
            final Sort201Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareSearchUsersRequest(q, sort, order, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for searchUsers.
     */
    private ApiCall<SearchUsersResponse, ApiException> prepareSearchUsersRequest(
            final String q,
            final Sort201Enum sort,
            final Order1Enum order,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<SearchUsersResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/search/users")
                        .queryParam(param -> param.key("q")
                                .value(q))
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .queryParam(param -> param.key("order")
                                .value((order != null) ? order.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SearchUsersResponse.class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new SearchUsers422ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
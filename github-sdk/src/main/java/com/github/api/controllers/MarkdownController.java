/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.MarkdownRequest;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class MarkdownController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public MarkdownController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Render a Markdown document.
     * @param  body  Required parameter: Example:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public String markdownRender(
            final MarkdownRequest body) throws ApiException, IOException {
        return prepareMarkdownRenderRequest(body).execute();
    }

    /**
     * Render a Markdown document.
     * @param  body  Required parameter: Example:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> markdownRenderAsync(
            final MarkdownRequest body) {
        try { 
            return prepareMarkdownRenderRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for markdownRender.
     */
    private ApiCall<String, ApiException> prepareMarkdownRenderRequest(
            final MarkdownRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<String, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/markdown")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> new String(response))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or
     * `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub
     * Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be
     * rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
     * @param  body  Optional parameter: Example:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public String markdownRenderRaw(
            final String body) throws ApiException, IOException {
        return prepareMarkdownRenderRawRequest(body).execute();
    }

    /**
     * You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or
     * `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub
     * Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be
     * rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
     * @param  body  Optional parameter: Example:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> markdownRenderRawAsync(
            final String body) {
        try { 
            return prepareMarkdownRenderRawRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for markdownRenderRaw.
     */
    private ApiCall<String, ApiException> prepareMarkdownRenderRawRequest(
            final String body) throws IOException {
        return new ApiCall.Builder<String, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/markdown/raw")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("text/plain").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> new String(response))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.ReposCheckRunsCheckRunIdRerequest403ErrorException;
import com.github.api.exceptions.ReposCheckRunsCheckRunIdRerequest404ErrorException;
import com.github.api.exceptions.ReposCheckRunsCheckRunIdRerequest422ErrorException;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.CheckAnnotation;
import com.github.api.models.Filter42Enum;
import com.github.api.models.ReposCheckRunsCheckRunIdRequest3;
import com.github.api.models.ReposCheckRunsCheckRunIdResponse;
import com.github.api.models.ReposCheckRunsResponse;
import com.github.api.models.ReposCheckSuitesCheckSuiteIdCheckRunsResponse;
import com.github.api.models.ReposCheckSuitesCheckSuiteIdResponse;
import com.github.api.models.ReposCheckSuitesPreferencesRequest;
import com.github.api.models.ReposCheckSuitesPreferencesResponse;
import com.github.api.models.ReposCheckSuitesRequest;
import com.github.api.models.ReposCheckSuitesResponse;
import com.github.api.models.ReposCommitsRefCheckSuitesResponse;
import com.github.api.models.Status71Enum;
import com.github.api.models.containers.ChecksCreateBody;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ChecksController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public ChecksController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array. Creates a new check run for a specific commit in a
     * repository. Your GitHub App must have the `checks:write` permission to create check runs. In
     * a check suite, GitHub limits the number of check runs with the same name to 1000. Once these
     * check runs exceed 1000, GitHub will start to automatically delete older check runs.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposCheckRunsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposCheckRunsResponse checksCreate(
            final String owner,
            final String repo,
            final ChecksCreateBody body) throws ApiException, IOException {
        return prepareChecksCreateRequest(owner, repo, body).execute();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array. Creates a new check run for a specific commit in a
     * repository. Your GitHub App must have the `checks:write` permission to create check runs. In
     * a check suite, GitHub limits the number of check runs with the same name to 1000. Once these
     * check runs exceed 1000, GitHub will start to automatically delete older check runs.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposCheckRunsResponse response from the API call
     */
    public CompletableFuture<ReposCheckRunsResponse> checksCreateAsync(
            final String owner,
            final String repo,
            final ChecksCreateBody body) {
        try { 
            return prepareChecksCreateRequest(owner, repo, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checksCreate.
     */
    private ApiCall<ReposCheckRunsResponse, ApiException> prepareChecksCreateRequest(
            final String owner,
            final String repo,
            final ChecksCreateBody body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposCheckRunsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/check-runs")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serializeTypeCombinator(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposCheckRunsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array. Gets a single check run using its `id`. GitHub Apps must have
     * the `checks:read` permission on a private repository or pull access to a public repository to
     * get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check
     * runs in a private repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  checkRunId  Required parameter: The unique identifier of the check run.
     * @return    Returns the ReposCheckRunsCheckRunIdResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposCheckRunsCheckRunIdResponse checksGet(
            final String owner,
            final String repo,
            final int checkRunId) throws ApiException, IOException {
        return prepareChecksGetRequest(owner, repo, checkRunId).execute();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array. Gets a single check run using its `id`. GitHub Apps must have
     * the `checks:read` permission on a private repository or pull access to a public repository to
     * get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check
     * runs in a private repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  checkRunId  Required parameter: The unique identifier of the check run.
     * @return    Returns the ReposCheckRunsCheckRunIdResponse response from the API call
     */
    public CompletableFuture<ReposCheckRunsCheckRunIdResponse> checksGetAsync(
            final String owner,
            final String repo,
            final int checkRunId) {
        try { 
            return prepareChecksGetRequest(owner, repo, checkRunId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checksGet.
     */
    private ApiCall<ReposCheckRunsCheckRunIdResponse, ApiException> prepareChecksGetRequest(
            final String owner,
            final String repo,
            final int checkRunId) throws IOException {
        return new ApiCall.Builder<ReposCheckRunsCheckRunIdResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/check-runs/{check_run_id}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("check_run_id").value(checkRunId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposCheckRunsCheckRunIdResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array. Updates a check run for a specific commit in a repository.
     * Your GitHub App must have the `checks:write` permission to edit check runs.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  checkRunId  Required parameter: The unique identifier of the check run.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposCheckRunsCheckRunIdResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposCheckRunsCheckRunIdResponse checksUpdate(
            final String owner,
            final String repo,
            final int checkRunId,
            final ReposCheckRunsCheckRunIdRequest3 body) throws ApiException, IOException {
        return prepareChecksUpdateRequest(owner, repo, checkRunId, body).execute();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array. Updates a check run for a specific commit in a repository.
     * Your GitHub App must have the `checks:write` permission to edit check runs.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  checkRunId  Required parameter: The unique identifier of the check run.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposCheckRunsCheckRunIdResponse response from the API call
     */
    public CompletableFuture<ReposCheckRunsCheckRunIdResponse> checksUpdateAsync(
            final String owner,
            final String repo,
            final int checkRunId,
            final ReposCheckRunsCheckRunIdRequest3 body) {
        try { 
            return prepareChecksUpdateRequest(owner, repo, checkRunId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checksUpdate.
     */
    private ApiCall<ReposCheckRunsCheckRunIdResponse, ApiException> prepareChecksUpdateRequest(
            final String owner,
            final String repo,
            final int checkRunId,
            final ReposCheckRunsCheckRunIdRequest3 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposCheckRunsCheckRunIdResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/check-runs/{check_run_id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serializeTypeCombinator(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("check_run_id").value(checkRunId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposCheckRunsCheckRunIdResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the
     * `checks:read` permission on a private repository or pull access to a public repository to get
     * annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to
     * get annotations for a check run in a private repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  checkRunId  Required parameter: The unique identifier of the check run.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of CheckAnnotation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<CheckAnnotation> checksListAnnotations(
            final String owner,
            final String repo,
            final int checkRunId,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareChecksListAnnotationsRequest(owner, repo, checkRunId, perPage,
                page).execute();
    }

    /**
     * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the
     * `checks:read` permission on a private repository or pull access to a public repository to get
     * annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to
     * get annotations for a check run in a private repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  checkRunId  Required parameter: The unique identifier of the check run.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of CheckAnnotation response from the API call
     */
    public CompletableFuture<List<CheckAnnotation>> checksListAnnotationsAsync(
            final String owner,
            final String repo,
            final int checkRunId,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareChecksListAnnotationsRequest(owner, repo, checkRunId, perPage,
            page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checksListAnnotations.
     */
    private ApiCall<List<CheckAnnotation>, ApiException> prepareChecksListAnnotationsRequest(
            final String owner,
            final String repo,
            final int checkRunId,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<CheckAnnotation>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("check_run_id").value(checkRunId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        CheckAnnotation[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Triggers GitHub to rerequest an existing check run, without pushing new code to a repository.
     * This endpoint will trigger the [`check_run`
     * webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action
     * `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the
     * `conclusion` is cleared. To rerequest a check run, your GitHub App must have the
     * `checks:read` permission on a private repository or pull access to a public repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  checkRunId  Required parameter: The unique identifier of the check run.
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object checksRerequestRun(
            final String owner,
            final String repo,
            final int checkRunId) throws ApiException, IOException {
        return prepareChecksRerequestRunRequest(owner, repo, checkRunId).execute();
    }

    /**
     * Triggers GitHub to rerequest an existing check run, without pushing new code to a repository.
     * This endpoint will trigger the [`check_run`
     * webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action
     * `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the
     * `conclusion` is cleared. To rerequest a check run, your GitHub App must have the
     * `checks:read` permission on a private repository or pull access to a public repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  checkRunId  Required parameter: The unique identifier of the check run.
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> checksRerequestRunAsync(
            final String owner,
            final String repo,
            final int checkRunId) {
        try { 
            return prepareChecksRerequestRunRequest(owner, repo, checkRunId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checksRerequestRun.
     */
    private ApiCall<Object, ApiException> prepareChecksRerequestRunRequest(
            final String owner,
            final String repo,
            final int checkRunId) throws IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("check_run_id").value(checkRunId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden if the check run is not rerequestable or doesn't belong to the authenticated GitHub App",
                                (reason, context) -> new ReposCheckRunsCheckRunIdRerequest403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposCheckRunsCheckRunIdRerequest404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation error if the check run is not rerequestable",
                                (reason, context) -> new ReposCheckRunsCheckRunIdRerequest422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array and a `null` value for `head_branch`. By default, check suites
     * are automatically created when you create a [check
     * run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this
     * endpoint for manually creating check suites when you've disabled automatic creation using
     * "[Update repository preferences for check
     * suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)".
     * Your GitHub App must have the `checks:write` permission to create check suites.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposCheckSuitesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposCheckSuitesResponse checksCreateSuite(
            final String owner,
            final String repo,
            final ReposCheckSuitesRequest body) throws ApiException, IOException {
        return prepareChecksCreateSuiteRequest(owner, repo, body).execute();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array and a `null` value for `head_branch`. By default, check suites
     * are automatically created when you create a [check
     * run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this
     * endpoint for manually creating check suites when you've disabled automatic creation using
     * "[Update repository preferences for check
     * suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)".
     * Your GitHub App must have the `checks:write` permission to create check suites.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposCheckSuitesResponse response from the API call
     */
    public CompletableFuture<ReposCheckSuitesResponse> checksCreateSuiteAsync(
            final String owner,
            final String repo,
            final ReposCheckSuitesRequest body) {
        try { 
            return prepareChecksCreateSuiteRequest(owner, repo, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checksCreateSuite.
     */
    private ApiCall<ReposCheckSuitesResponse, ApiException> prepareChecksCreateSuiteRequest(
            final String owner,
            final String repo,
            final ReposCheckSuitesRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposCheckSuitesResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/check-suites")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposCheckSuitesResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Changes the default automatic flow when creating check suites. By default, a check suite is
     * automatically created each time code is pushed to a repository. When you disable the
     * automatic creation of check suites, you can manually [Create a check
     * suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have
     * admin permissions in the repository to set preferences for check suites.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposCheckSuitesPreferencesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposCheckSuitesPreferencesResponse checksSetSuitesPreferences(
            final String owner,
            final String repo,
            final ReposCheckSuitesPreferencesRequest body) throws ApiException, IOException {
        return prepareChecksSetSuitesPreferencesRequest(owner, repo, body).execute();
    }

    /**
     * Changes the default automatic flow when creating check suites. By default, a check suite is
     * automatically created each time code is pushed to a repository. When you disable the
     * automatic creation of check suites, you can manually [Create a check
     * suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have
     * admin permissions in the repository to set preferences for check suites.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposCheckSuitesPreferencesResponse response from the API call
     */
    public CompletableFuture<ReposCheckSuitesPreferencesResponse> checksSetSuitesPreferencesAsync(
            final String owner,
            final String repo,
            final ReposCheckSuitesPreferencesRequest body) {
        try { 
            return prepareChecksSetSuitesPreferencesRequest(owner, repo, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checksSetSuitesPreferences.
     */
    private ApiCall<ReposCheckSuitesPreferencesResponse, ApiException> prepareChecksSetSuitesPreferencesRequest(
            final String owner,
            final String repo,
            final ReposCheckSuitesPreferencesRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposCheckSuitesPreferencesResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/check-suites/preferences")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposCheckSuitesPreferencesResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array and a `null` value for `head_branch`. Gets a single check
     * suite using its `id`. GitHub Apps must have the `checks:read` permission on a private
     * repository or pull access to a public repository to get check suites. OAuth Apps and
     * authenticated users must have the `repo` scope to get check suites in a private repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  checkSuiteId  Required parameter: The unique identifier of the check suite.
     * @return    Returns the ReposCheckSuitesCheckSuiteIdResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposCheckSuitesCheckSuiteIdResponse checksGetSuite(
            final String owner,
            final String repo,
            final int checkSuiteId) throws ApiException, IOException {
        return prepareChecksGetSuiteRequest(owner, repo, checkSuiteId).execute();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array and a `null` value for `head_branch`. Gets a single check
     * suite using its `id`. GitHub Apps must have the `checks:read` permission on a private
     * repository or pull access to a public repository to get check suites. OAuth Apps and
     * authenticated users must have the `repo` scope to get check suites in a private repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  checkSuiteId  Required parameter: The unique identifier of the check suite.
     * @return    Returns the ReposCheckSuitesCheckSuiteIdResponse response from the API call
     */
    public CompletableFuture<ReposCheckSuitesCheckSuiteIdResponse> checksGetSuiteAsync(
            final String owner,
            final String repo,
            final int checkSuiteId) {
        try { 
            return prepareChecksGetSuiteRequest(owner, repo, checkSuiteId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checksGetSuite.
     */
    private ApiCall<ReposCheckSuitesCheckSuiteIdResponse, ApiException> prepareChecksGetSuiteRequest(
            final String owner,
            final String repo,
            final int checkSuiteId) throws IOException {
        return new ApiCall.Builder<ReposCheckSuitesCheckSuiteIdResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/check-suites/{check_suite_id}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("check_suite_id").value(checkSuiteId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposCheckSuitesCheckSuiteIdResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array. Lists check runs for a check suite using its `id`. GitHub
     * Apps must have the `checks:read` permission on a private repository or pull access to a
     * public repository to get check runs. OAuth Apps and authenticated users must have the `repo`
     * scope to get check runs in a private repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  checkSuiteId  Required parameter: The unique identifier of the check suite.
     * @param  checkName  Optional parameter: Returns check runs with the specified `name`.
     * @param  status  Optional parameter: Returns check runs with the specified `status`.
     * @param  filter  Optional parameter: Filters check runs by their `completed_at` timestamp.
     *         `latest` returns the most recent check runs.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the ReposCheckSuitesCheckSuiteIdCheckRunsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposCheckSuitesCheckSuiteIdCheckRunsResponse checksListForSuite(
            final String owner,
            final String repo,
            final int checkSuiteId,
            final String checkName,
            final Status71Enum status,
            final Filter42Enum filter,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareChecksListForSuiteRequest(owner, repo, checkSuiteId, checkName, status,
                filter, perPage, page).execute();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array. Lists check runs for a check suite using its `id`. GitHub
     * Apps must have the `checks:read` permission on a private repository or pull access to a
     * public repository to get check runs. OAuth Apps and authenticated users must have the `repo`
     * scope to get check runs in a private repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  checkSuiteId  Required parameter: The unique identifier of the check suite.
     * @param  checkName  Optional parameter: Returns check runs with the specified `name`.
     * @param  status  Optional parameter: Returns check runs with the specified `status`.
     * @param  filter  Optional parameter: Filters check runs by their `completed_at` timestamp.
     *         `latest` returns the most recent check runs.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the ReposCheckSuitesCheckSuiteIdCheckRunsResponse response from the API call
     */
    public CompletableFuture<ReposCheckSuitesCheckSuiteIdCheckRunsResponse> checksListForSuiteAsync(
            final String owner,
            final String repo,
            final int checkSuiteId,
            final String checkName,
            final Status71Enum status,
            final Filter42Enum filter,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareChecksListForSuiteRequest(owner, repo, checkSuiteId, checkName, status, filter,
            perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checksListForSuite.
     */
    private ApiCall<ReposCheckSuitesCheckSuiteIdCheckRunsResponse, ApiException> prepareChecksListForSuiteRequest(
            final String owner,
            final String repo,
            final int checkSuiteId,
            final String checkName,
            final Status71Enum status,
            final Filter42Enum filter,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<ReposCheckSuitesCheckSuiteIdCheckRunsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs")
                        .queryParam(param -> param.key("check_name")
                                .value(checkName).isRequired(false))
                        .queryParam(param -> param.key("status")
                                .value((status != null) ? status.value() : null).isRequired(false))
                        .queryParam(param -> param.key("filter")
                                .value((filter != null) ? filter.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("check_suite_id").value(checkSuiteId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposCheckSuitesCheckSuiteIdCheckRunsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Triggers GitHub to rerequest an existing check suite, without pushing new code to a
     * repository. This endpoint will trigger the [`check_suite`
     * webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action
     * `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the
     * `conclusion` is cleared. To rerequest a check suite, your GitHub App must have the
     * `checks:read` permission on a private repository or pull access to a public repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  checkSuiteId  Required parameter: The unique identifier of the check suite.
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object checksRerequestSuite(
            final String owner,
            final String repo,
            final int checkSuiteId) throws ApiException, IOException {
        return prepareChecksRerequestSuiteRequest(owner, repo, checkSuiteId).execute();
    }

    /**
     * Triggers GitHub to rerequest an existing check suite, without pushing new code to a
     * repository. This endpoint will trigger the [`check_suite`
     * webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action
     * `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the
     * `conclusion` is cleared. To rerequest a check suite, your GitHub App must have the
     * `checks:read` permission on a private repository or pull access to a public repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  checkSuiteId  Required parameter: The unique identifier of the check suite.
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> checksRerequestSuiteAsync(
            final String owner,
            final String repo,
            final int checkSuiteId) {
        try { 
            return prepareChecksRerequestSuiteRequest(owner, repo, checkSuiteId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checksRerequestSuite.
     */
    private ApiCall<Object, ApiException> prepareChecksRerequestSuiteRequest(
            final String owner,
            final String repo,
            final int checkSuiteId) throws IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("check_suite_id").value(checkSuiteId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array. Lists check runs for a commit ref. The `ref` can be a SHA,
     * branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private
     * repository or pull access to a public repository to get check runs. OAuth Apps and
     * authenticated users must have the `repo` scope to get check runs in a private repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  ref  Required parameter: ref parameter
     * @param  checkName  Optional parameter: Returns check runs with the specified `name`.
     * @param  status  Optional parameter: Returns check runs with the specified `status`.
     * @param  filter  Optional parameter: Filters check runs by their `completed_at` timestamp.
     *         `latest` returns the most recent check runs.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  appId  Optional parameter: Example:
     * @return    Returns the ReposCheckSuitesCheckSuiteIdCheckRunsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposCheckSuitesCheckSuiteIdCheckRunsResponse checksListForRef(
            final String owner,
            final String repo,
            final String ref,
            final String checkName,
            final Status71Enum status,
            final Filter42Enum filter,
            final Integer perPage,
            final Integer page,
            final Integer appId) throws ApiException, IOException {
        return prepareChecksListForRefRequest(owner, repo, ref, checkName, status, filter, perPage,
                page, appId).execute();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array. Lists check runs for a commit ref. The `ref` can be a SHA,
     * branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private
     * repository or pull access to a public repository to get check runs. OAuth Apps and
     * authenticated users must have the `repo` scope to get check runs in a private repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  ref  Required parameter: ref parameter
     * @param  checkName  Optional parameter: Returns check runs with the specified `name`.
     * @param  status  Optional parameter: Returns check runs with the specified `status`.
     * @param  filter  Optional parameter: Filters check runs by their `completed_at` timestamp.
     *         `latest` returns the most recent check runs.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  appId  Optional parameter: Example:
     * @return    Returns the ReposCheckSuitesCheckSuiteIdCheckRunsResponse response from the API call
     */
    public CompletableFuture<ReposCheckSuitesCheckSuiteIdCheckRunsResponse> checksListForRefAsync(
            final String owner,
            final String repo,
            final String ref,
            final String checkName,
            final Status71Enum status,
            final Filter42Enum filter,
            final Integer perPage,
            final Integer page,
            final Integer appId) {
        try { 
            return prepareChecksListForRefRequest(owner, repo, ref, checkName, status, filter, perPage,
            page, appId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checksListForRef.
     */
    private ApiCall<ReposCheckSuitesCheckSuiteIdCheckRunsResponse, ApiException> prepareChecksListForRefRequest(
            final String owner,
            final String repo,
            final String ref,
            final String checkName,
            final Status71Enum status,
            final Filter42Enum filter,
            final Integer perPage,
            final Integer page,
            final Integer appId) throws IOException {
        return new ApiCall.Builder<ReposCheckSuitesCheckSuiteIdCheckRunsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/commits/{ref}/check-runs")
                        .queryParam(param -> param.key("check_name")
                                .value(checkName).isRequired(false))
                        .queryParam(param -> param.key("status")
                                .value((status != null) ? status.value() : null).isRequired(false))
                        .queryParam(param -> param.key("filter")
                                .value((filter != null) ? filter.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .queryParam(param -> param.key("app_id")
                                .value(appId).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("ref").value(ref)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposCheckSuitesCheckSuiteIdCheckRunsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array and a `null` value for `head_branch`. Lists check suites for a
     * commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the
     * `checks:read` permission on a private repository or pull access to a public repository to
     * list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check
     * suites in a private repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  ref  Required parameter: ref parameter
     * @param  appId  Optional parameter: Filters check suites by GitHub App `id`.
     * @param  checkName  Optional parameter: Returns check runs with the specified `name`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the ReposCommitsRefCheckSuitesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposCommitsRefCheckSuitesResponse checksListSuitesForRef(
            final String owner,
            final String repo,
            final String ref,
            final Integer appId,
            final String checkName,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareChecksListSuitesForRefRequest(owner, repo, ref, appId, checkName, perPage,
                page).execute();
    }

    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or
     * check run were created. Pushes to a branch in a forked repository are not detected and return
     * an empty `pull_requests` array and a `null` value for `head_branch`. Lists check suites for a
     * commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the
     * `checks:read` permission on a private repository or pull access to a public repository to
     * list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check
     * suites in a private repository.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  ref  Required parameter: ref parameter
     * @param  appId  Optional parameter: Filters check suites by GitHub App `id`.
     * @param  checkName  Optional parameter: Returns check runs with the specified `name`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the ReposCommitsRefCheckSuitesResponse response from the API call
     */
    public CompletableFuture<ReposCommitsRefCheckSuitesResponse> checksListSuitesForRefAsync(
            final String owner,
            final String repo,
            final String ref,
            final Integer appId,
            final String checkName,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareChecksListSuitesForRefRequest(owner, repo, ref, appId, checkName, perPage,
            page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checksListSuitesForRef.
     */
    private ApiCall<ReposCommitsRefCheckSuitesResponse, ApiException> prepareChecksListSuitesForRefRequest(
            final String owner,
            final String repo,
            final String ref,
            final Integer appId,
            final String checkName,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<ReposCommitsRefCheckSuitesResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/commits/{ref}/check-suites")
                        .queryParam(param -> param.key("app_id")
                                .value(appId).isRequired(false))
                        .queryParam(param -> param.key("check_name")
                                .value(checkName).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("ref").value(ref)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposCommitsRefCheckSuitesResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
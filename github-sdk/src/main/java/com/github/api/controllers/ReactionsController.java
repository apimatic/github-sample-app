/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.ReposCommentsCommentIdReactions404ErrorException;
import com.github.api.exceptions.ReposCommentsCommentIdReactions422ErrorException;
import com.github.api.exceptions.ReposIssuesCommentsCommentIdReactions404ErrorException;
import com.github.api.exceptions.ReposIssuesCommentsCommentIdReactions422ErrorException;
import com.github.api.exceptions.ReposIssuesIssueNumberReactions404ErrorException;
import com.github.api.exceptions.ReposIssuesIssueNumberReactions410ErrorException;
import com.github.api.exceptions.ReposIssuesIssueNumberReactions422ErrorException;
import com.github.api.exceptions.ReposPullsCommentsCommentIdReactions404ErrorException;
import com.github.api.exceptions.ReposPullsCommentsCommentIdReactions422ErrorException;
import com.github.api.exceptions.ReposReleasesReleaseIdReactions404ErrorException;
import com.github.api.exceptions.ReposReleasesReleaseIdReactions422ErrorException;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.Content141Enum;
import com.github.api.models.Content21Enum;
import com.github.api.models.Content22Enum;
import com.github.api.models.Content23Enum;
import com.github.api.models.Content24Enum;
import com.github.api.models.Content25Enum;
import com.github.api.models.Content27Enum;
import com.github.api.models.OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsRequest;
import com.github.api.models.OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsResponse;
import com.github.api.models.OrgsTeamsDiscussionsDiscussionNumberReactionsRequest;
import com.github.api.models.OrgsTeamsDiscussionsDiscussionNumberReactionsResponse;
import com.github.api.models.Reaction;
import com.github.api.models.ReposCommentsCommentIdReactionsRequest;
import com.github.api.models.ReposCommentsCommentIdReactionsResponse;
import com.github.api.models.ReposIssuesCommentsCommentIdReactionsRequest;
import com.github.api.models.ReposIssuesCommentsCommentIdReactionsResponse;
import com.github.api.models.ReposIssuesIssueNumberReactionsRequest;
import com.github.api.models.ReposIssuesIssueNumberReactionsResponse;
import com.github.api.models.ReposPullsCommentsCommentIdReactionsRequest;
import com.github.api.models.ReposPullsCommentsCommentIdReactionsResponse;
import com.github.api.models.ReposReleasesReleaseIdReactionsRequest;
import com.github.api.models.ReposReleasesReleaseIdReactionsResponse;
import com.github.api.models.TeamsDiscussionsCommentsCommentNumberReactionsResponse;
import com.github.api.models.TeamsDiscussionsReactionsResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ReactionsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public ReactionsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * List the reactions to a [team discussion
     * comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access
     * tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to a team discussion comment.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Reaction> reactionsListForTeamDiscussionCommentInOrg(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber,
            final Content21Enum content,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareReactionsListForTeamDiscussionCommentInOrgRequest(org, teamSlug,
                discussionNumber, commentNumber, content, perPage, page).execute();
    }

    /**
     * List the reactions to a [team discussion
     * comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access
     * tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to a team discussion comment.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     */
    public CompletableFuture<List<Reaction>> reactionsListForTeamDiscussionCommentInOrgAsync(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber,
            final Content21Enum content,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareReactionsListForTeamDiscussionCommentInOrgRequest(org, teamSlug, discussionNumber,
            commentNumber, content, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsListForTeamDiscussionCommentInOrg.
     */
    private ApiCall<List<Reaction>, ApiException> prepareReactionsListForTeamDiscussionCommentInOrgRequest(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber,
            final Content21Enum content,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Reaction>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions")
                        .queryParam(param -> param.key("content")
                                .value((content != null) ? content.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_number").value(commentNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Reaction[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a reaction to a [team discussion
     * comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access
     * tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * A response with an HTTP `200` status means that you already added the reaction type to this
     * team discussion comment. **Note:** You can also specify a team by `org_id` and `team_id`
     * using the route `POST
     * /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsResponse reactionsCreateForTeamDiscussionCommentInOrg(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsRequest body) throws ApiException, IOException {
        return prepareReactionsCreateForTeamDiscussionCommentInOrgRequest(org, teamSlug,
                discussionNumber, commentNumber, body).execute();
    }

    /**
     * Create a reaction to a [team discussion
     * comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access
     * tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * A response with an HTTP `200` status means that you already added the reaction type to this
     * team discussion comment. **Note:** You can also specify a team by `org_id` and `team_id`
     * using the route `POST
     * /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsResponse> reactionsCreateForTeamDiscussionCommentInOrgAsync(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsRequest body) {
        try { 
            return prepareReactionsCreateForTeamDiscussionCommentInOrgRequest(org, teamSlug,
            discussionNumber, commentNumber, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsCreateForTeamDiscussionCommentInOrg.
     */
    private ApiCall<OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsResponse, ApiException> prepareReactionsCreateForTeamDiscussionCommentInOrgRequest(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_number").value(commentNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the
     * route `DELETE
     * /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
     * Delete a reaction to a [team discussion
     * comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access
     * tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @param  reactionId  Required parameter: The unique identifier of the reaction.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void reactionsDeleteForTeamDiscussionComment(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber,
            final int reactionId) throws ApiException, IOException {
        prepareReactionsDeleteForTeamDiscussionCommentRequest(org, teamSlug, discussionNumber,
                commentNumber, reactionId).execute();
    }

    /**
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the
     * route `DELETE
     * /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
     * Delete a reaction to a [team discussion
     * comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access
     * tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @param  reactionId  Required parameter: The unique identifier of the reaction.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> reactionsDeleteForTeamDiscussionCommentAsync(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber,
            final int reactionId) {
        try { 
            return prepareReactionsDeleteForTeamDiscussionCommentRequest(org, teamSlug, discussionNumber,
            commentNumber, reactionId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsDeleteForTeamDiscussionComment.
     */
    private ApiCall<Void, ApiException> prepareReactionsDeleteForTeamDiscussionCommentRequest(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber,
            final int reactionId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_number").value(commentNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("reaction_id").value(reactionId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List the reactions to a [team
     * discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens
     * require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to a team discussion.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Reaction> reactionsListForTeamDiscussionInOrg(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final Content22Enum content,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareReactionsListForTeamDiscussionInOrgRequest(org, teamSlug, discussionNumber,
                content, perPage, page).execute();
    }

    /**
     * List the reactions to a [team
     * discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens
     * require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to a team discussion.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     */
    public CompletableFuture<List<Reaction>> reactionsListForTeamDiscussionInOrgAsync(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final Content22Enum content,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareReactionsListForTeamDiscussionInOrgRequest(org, teamSlug, discussionNumber,
            content, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsListForTeamDiscussionInOrg.
     */
    private ApiCall<List<Reaction>, ApiException> prepareReactionsListForTeamDiscussionInOrgRequest(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final Content22Enum content,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Reaction>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions")
                        .queryParam(param -> param.key("content")
                                .value((content != null) ? content.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Reaction[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a reaction to a [team
     * discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens
     * require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * A response with an HTTP `200` status means that you already added the reaction type to this
     * team discussion. **Note:** You can also specify a team by `org_id` and `team_id` using the
     * route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsTeamsDiscussionsDiscussionNumberReactionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsDiscussionsDiscussionNumberReactionsResponse reactionsCreateForTeamDiscussionInOrg(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberReactionsRequest body) throws ApiException, IOException {
        return prepareReactionsCreateForTeamDiscussionInOrgRequest(org, teamSlug, discussionNumber,
                body).execute();
    }

    /**
     * Create a reaction to a [team
     * discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens
     * require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * A response with an HTTP `200` status means that you already added the reaction type to this
     * team discussion. **Note:** You can also specify a team by `org_id` and `team_id` using the
     * route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsTeamsDiscussionsDiscussionNumberReactionsResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsDiscussionsDiscussionNumberReactionsResponse> reactionsCreateForTeamDiscussionInOrgAsync(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberReactionsRequest body) {
        try { 
            return prepareReactionsCreateForTeamDiscussionInOrgRequest(org, teamSlug, discussionNumber,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsCreateForTeamDiscussionInOrg.
     */
    private ApiCall<OrgsTeamsDiscussionsDiscussionNumberReactionsResponse, ApiException> prepareReactionsCreateForTeamDiscussionInOrgRequest(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberReactionsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsTeamsDiscussionsDiscussionNumberReactionsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsDiscussionsDiscussionNumberReactionsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the
     * route `DELETE
     * /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
     * Delete a reaction to a [team
     * discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens
     * require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  reactionId  Required parameter: The unique identifier of the reaction.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void reactionsDeleteForTeamDiscussion(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int reactionId) throws ApiException, IOException {
        prepareReactionsDeleteForTeamDiscussionRequest(org, teamSlug, discussionNumber,
                reactionId).execute();
    }

    /**
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the
     * route `DELETE
     * /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
     * Delete a reaction to a [team
     * discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens
     * require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  reactionId  Required parameter: The unique identifier of the reaction.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> reactionsDeleteForTeamDiscussionAsync(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int reactionId) {
        try { 
            return prepareReactionsDeleteForTeamDiscussionRequest(org, teamSlug, discussionNumber,
            reactionId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsDeleteForTeamDiscussion.
     */
    private ApiCall<Void, ApiException> prepareReactionsDeleteForTeamDiscussionRequest(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int reactionId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("reaction_id").value(reactionId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List the reactions to a [commit
     * comment](https://docs.github.com/rest/reference/repos#comments).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to a commit comment.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Reaction> reactionsListForCommitComment(
            final String owner,
            final String repo,
            final int commentId,
            final Content23Enum content,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareReactionsListForCommitCommentRequest(owner, repo, commentId, content, perPage,
                page).execute();
    }

    /**
     * List the reactions to a [commit
     * comment](https://docs.github.com/rest/reference/repos#comments).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to a commit comment.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     */
    public CompletableFuture<List<Reaction>> reactionsListForCommitCommentAsync(
            final String owner,
            final String repo,
            final int commentId,
            final Content23Enum content,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareReactionsListForCommitCommentRequest(owner, repo, commentId, content, perPage,
            page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsListForCommitComment.
     */
    private ApiCall<List<Reaction>, ApiException> prepareReactionsListForCommitCommentRequest(
            final String owner,
            final String repo,
            final int commentId,
            final Content23Enum content,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Reaction>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/comments/{comment_id}/reactions")
                        .queryParam(param -> param.key("content")
                                .value((content != null) ? content.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Reaction[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposCommentsCommentIdReactions404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a reaction to a [commit
     * comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP
     * `200` status means that you already added the reaction type to this commit comment.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposCommentsCommentIdReactionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposCommentsCommentIdReactionsResponse reactionsCreateForCommitComment(
            final String owner,
            final String repo,
            final int commentId,
            final ReposCommentsCommentIdReactionsRequest body) throws ApiException, IOException {
        return prepareReactionsCreateForCommitCommentRequest(owner, repo, commentId,
                body).execute();
    }

    /**
     * Create a reaction to a [commit
     * comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP
     * `200` status means that you already added the reaction type to this commit comment.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposCommentsCommentIdReactionsResponse response from the API call
     */
    public CompletableFuture<ReposCommentsCommentIdReactionsResponse> reactionsCreateForCommitCommentAsync(
            final String owner,
            final String repo,
            final int commentId,
            final ReposCommentsCommentIdReactionsRequest body) {
        try { 
            return prepareReactionsCreateForCommitCommentRequest(owner, repo, commentId,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsCreateForCommitComment.
     */
    private ApiCall<ReposCommentsCommentIdReactionsResponse, ApiException> prepareReactionsCreateForCommitCommentRequest(
            final String owner,
            final String repo,
            final int commentId,
            final ReposCommentsCommentIdReactionsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposCommentsCommentIdReactionsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/comments/{comment_id}/reactions")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposCommentsCommentIdReactionsResponse.class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposCommentsCommentIdReactions422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE
     * /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`. Delete a reaction
     * to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  reactionId  Required parameter: The unique identifier of the reaction.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void reactionsDeleteForCommitComment(
            final String owner,
            final String repo,
            final int commentId,
            final int reactionId) throws ApiException, IOException {
        prepareReactionsDeleteForCommitCommentRequest(owner, repo, commentId, reactionId).execute();
    }

    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE
     * /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`. Delete a reaction
     * to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  reactionId  Required parameter: The unique identifier of the reaction.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> reactionsDeleteForCommitCommentAsync(
            final String owner,
            final String repo,
            final int commentId,
            final int reactionId) {
        try { 
            return prepareReactionsDeleteForCommitCommentRequest(owner, repo, commentId,
            reactionId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsDeleteForCommitComment.
     */
    private ApiCall<Void, ApiException> prepareReactionsDeleteForCommitCommentRequest(
            final String owner,
            final String repo,
            final int commentId,
            final int reactionId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("reaction_id").value(reactionId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List the reactions to an [issue
     * comment](https://docs.github.com/rest/reference/issues#comments).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to an issue comment.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Reaction> reactionsListForIssueComment(
            final String owner,
            final String repo,
            final int commentId,
            final Content24Enum content,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareReactionsListForIssueCommentRequest(owner, repo, commentId, content, perPage,
                page).execute();
    }

    /**
     * List the reactions to an [issue
     * comment](https://docs.github.com/rest/reference/issues#comments).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to an issue comment.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     */
    public CompletableFuture<List<Reaction>> reactionsListForIssueCommentAsync(
            final String owner,
            final String repo,
            final int commentId,
            final Content24Enum content,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareReactionsListForIssueCommentRequest(owner, repo, commentId, content, perPage,
            page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsListForIssueComment.
     */
    private ApiCall<List<Reaction>, ApiException> prepareReactionsListForIssueCommentRequest(
            final String owner,
            final String repo,
            final int commentId,
            final Content24Enum content,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Reaction>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions")
                        .queryParam(param -> param.key("content")
                                .value((content != null) ? content.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Reaction[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposIssuesCommentsCommentIdReactions404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a reaction to an [issue
     * comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP
     * `200` status means that you already added the reaction type to this issue comment.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposIssuesCommentsCommentIdReactionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposIssuesCommentsCommentIdReactionsResponse reactionsCreateForIssueComment(
            final String owner,
            final String repo,
            final int commentId,
            final ReposIssuesCommentsCommentIdReactionsRequest body) throws ApiException, IOException {
        return prepareReactionsCreateForIssueCommentRequest(owner, repo, commentId, body).execute();
    }

    /**
     * Create a reaction to an [issue
     * comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP
     * `200` status means that you already added the reaction type to this issue comment.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposIssuesCommentsCommentIdReactionsResponse response from the API call
     */
    public CompletableFuture<ReposIssuesCommentsCommentIdReactionsResponse> reactionsCreateForIssueCommentAsync(
            final String owner,
            final String repo,
            final int commentId,
            final ReposIssuesCommentsCommentIdReactionsRequest body) {
        try { 
            return prepareReactionsCreateForIssueCommentRequest(owner, repo, commentId,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsCreateForIssueComment.
     */
    private ApiCall<ReposIssuesCommentsCommentIdReactionsResponse, ApiException> prepareReactionsCreateForIssueCommentRequest(
            final String owner,
            final String repo,
            final int commentId,
            final ReposIssuesCommentsCommentIdReactionsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposIssuesCommentsCommentIdReactionsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposIssuesCommentsCommentIdReactionsResponse.class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposIssuesCommentsCommentIdReactions422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete
     * /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`. Delete a
     * reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  reactionId  Required parameter: The unique identifier of the reaction.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void reactionsDeleteForIssueComment(
            final String owner,
            final String repo,
            final int commentId,
            final int reactionId) throws ApiException, IOException {
        prepareReactionsDeleteForIssueCommentRequest(owner, repo, commentId, reactionId).execute();
    }

    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete
     * /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`. Delete a
     * reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  reactionId  Required parameter: The unique identifier of the reaction.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> reactionsDeleteForIssueCommentAsync(
            final String owner,
            final String repo,
            final int commentId,
            final int reactionId) {
        try { 
            return prepareReactionsDeleteForIssueCommentRequest(owner, repo, commentId,
            reactionId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsDeleteForIssueComment.
     */
    private ApiCall<Void, ApiException> prepareReactionsDeleteForIssueCommentRequest(
            final String owner,
            final String repo,
            final int commentId,
            final int reactionId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("reaction_id").value(reactionId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  issueNumber  Required parameter: The number that identifies the issue.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to an issue.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Reaction> reactionsListForIssue(
            final String owner,
            final String repo,
            final int issueNumber,
            final Content25Enum content,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareReactionsListForIssueRequest(owner, repo, issueNumber, content, perPage,
                page).execute();
    }

    /**
     * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  issueNumber  Required parameter: The number that identifies the issue.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to an issue.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     */
    public CompletableFuture<List<Reaction>> reactionsListForIssueAsync(
            final String owner,
            final String repo,
            final int issueNumber,
            final Content25Enum content,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareReactionsListForIssueRequest(owner, repo, issueNumber, content, perPage,
            page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsListForIssue.
     */
    private ApiCall<List<Reaction>, ApiException> prepareReactionsListForIssueRequest(
            final String owner,
            final String repo,
            final int issueNumber,
            final Content25Enum content,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Reaction>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/issues/{issue_number}/reactions")
                        .queryParam(param -> param.key("content")
                                .value((content != null) ? content.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("issue_number").value(issueNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Reaction[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposIssuesIssueNumberReactions404ErrorException(reason, context)))
                        .localErrorCase("410",
                                 ErrorCase.create("Gone",
                                (reason, context) -> new ReposIssuesIssueNumberReactions410ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response
     * with an HTTP `200` status means that you already added the reaction type to this issue.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  issueNumber  Required parameter: The number that identifies the issue.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposIssuesIssueNumberReactionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposIssuesIssueNumberReactionsResponse reactionsCreateForIssue(
            final String owner,
            final String repo,
            final int issueNumber,
            final ReposIssuesIssueNumberReactionsRequest body) throws ApiException, IOException {
        return prepareReactionsCreateForIssueRequest(owner, repo, issueNumber, body).execute();
    }

    /**
     * Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response
     * with an HTTP `200` status means that you already added the reaction type to this issue.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  issueNumber  Required parameter: The number that identifies the issue.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposIssuesIssueNumberReactionsResponse response from the API call
     */
    public CompletableFuture<ReposIssuesIssueNumberReactionsResponse> reactionsCreateForIssueAsync(
            final String owner,
            final String repo,
            final int issueNumber,
            final ReposIssuesIssueNumberReactionsRequest body) {
        try { 
            return prepareReactionsCreateForIssueRequest(owner, repo, issueNumber, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsCreateForIssue.
     */
    private ApiCall<ReposIssuesIssueNumberReactionsResponse, ApiException> prepareReactionsCreateForIssueRequest(
            final String owner,
            final String repo,
            final int issueNumber,
            final ReposIssuesIssueNumberReactionsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposIssuesIssueNumberReactionsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/issues/{issue_number}/reactions")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("issue_number").value(issueNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposIssuesIssueNumberReactionsResponse.class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposIssuesIssueNumberReactions422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE
     * /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`. Delete a reaction
     * to an [issue](https://docs.github.com/rest/reference/issues/).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  issueNumber  Required parameter: The number that identifies the issue.
     * @param  reactionId  Required parameter: The unique identifier of the reaction.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void reactionsDeleteForIssue(
            final String owner,
            final String repo,
            final int issueNumber,
            final int reactionId) throws ApiException, IOException {
        prepareReactionsDeleteForIssueRequest(owner, repo, issueNumber, reactionId).execute();
    }

    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE
     * /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`. Delete a reaction
     * to an [issue](https://docs.github.com/rest/reference/issues/).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  issueNumber  Required parameter: The number that identifies the issue.
     * @param  reactionId  Required parameter: The unique identifier of the reaction.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> reactionsDeleteForIssueAsync(
            final String owner,
            final String repo,
            final int issueNumber,
            final int reactionId) {
        try { 
            return prepareReactionsDeleteForIssueRequest(owner, repo, issueNumber,
            reactionId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsDeleteForIssue.
     */
    private ApiCall<Void, ApiException> prepareReactionsDeleteForIssueRequest(
            final String owner,
            final String repo,
            final int issueNumber,
            final int reactionId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("issue_number").value(issueNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("reaction_id").value(reactionId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List the reactions to a [pull request review
     * comment](https://docs.github.com/rest/reference/pulls#review-comments).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to a pull request review comment.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Reaction> reactionsListForPullRequestReviewComment(
            final String owner,
            final String repo,
            final int commentId,
            final Content27Enum content,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareReactionsListForPullRequestReviewCommentRequest(owner, repo, commentId,
                content, perPage, page).execute();
    }

    /**
     * List the reactions to a [pull request review
     * comment](https://docs.github.com/rest/reference/pulls#review-comments).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to a pull request review comment.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     */
    public CompletableFuture<List<Reaction>> reactionsListForPullRequestReviewCommentAsync(
            final String owner,
            final String repo,
            final int commentId,
            final Content27Enum content,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareReactionsListForPullRequestReviewCommentRequest(owner, repo, commentId, content,
            perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsListForPullRequestReviewComment.
     */
    private ApiCall<List<Reaction>, ApiException> prepareReactionsListForPullRequestReviewCommentRequest(
            final String owner,
            final String repo,
            final int commentId,
            final Content27Enum content,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Reaction>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions")
                        .queryParam(param -> param.key("content")
                                .value((content != null) ? content.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Reaction[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposPullsCommentsCommentIdReactions404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a reaction to a [pull request review
     * comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP
     * `200` status means that you already added the reaction type to this pull request review
     * comment.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsCommentsCommentIdReactionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsCommentsCommentIdReactionsResponse reactionsCreateForPullRequestReviewComment(
            final String owner,
            final String repo,
            final int commentId,
            final ReposPullsCommentsCommentIdReactionsRequest body) throws ApiException, IOException {
        return prepareReactionsCreateForPullRequestReviewCommentRequest(owner, repo, commentId,
                body).execute();
    }

    /**
     * Create a reaction to a [pull request review
     * comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP
     * `200` status means that you already added the reaction type to this pull request review
     * comment.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsCommentsCommentIdReactionsResponse response from the API call
     */
    public CompletableFuture<ReposPullsCommentsCommentIdReactionsResponse> reactionsCreateForPullRequestReviewCommentAsync(
            final String owner,
            final String repo,
            final int commentId,
            final ReposPullsCommentsCommentIdReactionsRequest body) {
        try { 
            return prepareReactionsCreateForPullRequestReviewCommentRequest(owner, repo, commentId,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsCreateForPullRequestReviewComment.
     */
    private ApiCall<ReposPullsCommentsCommentIdReactionsResponse, ApiException> prepareReactionsCreateForPullRequestReviewCommentRequest(
            final String owner,
            final String repo,
            final int commentId,
            final ReposPullsCommentsCommentIdReactionsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposPullsCommentsCommentIdReactionsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsCommentsCommentIdReactionsResponse.class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposPullsCommentsCommentIdReactions422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE
     * /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.` Delete a
     * reaction to a [pull request review
     * comment](https://docs.github.com/rest/reference/pulls#review-comments).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  reactionId  Required parameter: The unique identifier of the reaction.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void reactionsDeleteForPullRequestComment(
            final String owner,
            final String repo,
            final int commentId,
            final int reactionId) throws ApiException, IOException {
        prepareReactionsDeleteForPullRequestCommentRequest(owner, repo, commentId,
                reactionId).execute();
    }

    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE
     * /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.` Delete a
     * reaction to a [pull request review
     * comment](https://docs.github.com/rest/reference/pulls#review-comments).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  reactionId  Required parameter: The unique identifier of the reaction.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> reactionsDeleteForPullRequestCommentAsync(
            final String owner,
            final String repo,
            final int commentId,
            final int reactionId) {
        try { 
            return prepareReactionsDeleteForPullRequestCommentRequest(owner, repo, commentId,
            reactionId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsDeleteForPullRequestComment.
     */
    private ApiCall<Void, ApiException> prepareReactionsDeleteForPullRequestCommentRequest(
            final String owner,
            final String repo,
            final int commentId,
            final int reactionId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("reaction_id").value(reactionId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List the reactions to a [release](https://docs.github.com/rest/reference/repos#releases).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  releaseId  Required parameter: The unique identifier of the release.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to a release.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Reaction> reactionsListForRelease(
            final String owner,
            final String repo,
            final int releaseId,
            final Content141Enum content,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareReactionsListForReleaseRequest(owner, repo, releaseId, content, perPage,
                page).execute();
    }

    /**
     * List the reactions to a [release](https://docs.github.com/rest/reference/repos#releases).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  releaseId  Required parameter: The unique identifier of the release.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to a release.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     */
    public CompletableFuture<List<Reaction>> reactionsListForReleaseAsync(
            final String owner,
            final String repo,
            final int releaseId,
            final Content141Enum content,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareReactionsListForReleaseRequest(owner, repo, releaseId, content, perPage,
            page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsListForRelease.
     */
    private ApiCall<List<Reaction>, ApiException> prepareReactionsListForReleaseRequest(
            final String owner,
            final String repo,
            final int releaseId,
            final Content141Enum content,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Reaction>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/releases/{release_id}/reactions")
                        .queryParam(param -> param.key("content")
                                .value((content != null) ? content.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("release_id").value(releaseId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Reaction[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposReleasesReleaseIdReactions404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A
     * response with a `Status: 200 OK` means that you already added the reaction type to this
     * release.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  releaseId  Required parameter: The unique identifier of the release.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposReleasesReleaseIdReactionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposReleasesReleaseIdReactionsResponse reactionsCreateForRelease(
            final String owner,
            final String repo,
            final int releaseId,
            final ReposReleasesReleaseIdReactionsRequest body) throws ApiException, IOException {
        return prepareReactionsCreateForReleaseRequest(owner, repo, releaseId, body).execute();
    }

    /**
     * Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A
     * response with a `Status: 200 OK` means that you already added the reaction type to this
     * release.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  releaseId  Required parameter: The unique identifier of the release.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposReleasesReleaseIdReactionsResponse response from the API call
     */
    public CompletableFuture<ReposReleasesReleaseIdReactionsResponse> reactionsCreateForReleaseAsync(
            final String owner,
            final String repo,
            final int releaseId,
            final ReposReleasesReleaseIdReactionsRequest body) {
        try { 
            return prepareReactionsCreateForReleaseRequest(owner, repo, releaseId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsCreateForRelease.
     */
    private ApiCall<ReposReleasesReleaseIdReactionsResponse, ApiException> prepareReactionsCreateForReleaseRequest(
            final String owner,
            final String repo,
            final int releaseId,
            final ReposReleasesReleaseIdReactionsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposReleasesReleaseIdReactionsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/releases/{release_id}/reactions")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("release_id").value(releaseId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposReleasesReleaseIdReactionsResponse.class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposReleasesReleaseIdReactions422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete
     * /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`. Delete a reaction
     * to a [release](https://docs.github.com/rest/reference/repos#releases).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  releaseId  Required parameter: The unique identifier of the release.
     * @param  reactionId  Required parameter: The unique identifier of the reaction.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void reactionsDeleteForRelease(
            final String owner,
            final String repo,
            final int releaseId,
            final int reactionId) throws ApiException, IOException {
        prepareReactionsDeleteForReleaseRequest(owner, repo, releaseId, reactionId).execute();
    }

    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete
     * /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`. Delete a reaction
     * to a [release](https://docs.github.com/rest/reference/repos#releases).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  releaseId  Required parameter: The unique identifier of the release.
     * @param  reactionId  Required parameter: The unique identifier of the reaction.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> reactionsDeleteForReleaseAsync(
            final String owner,
            final String repo,
            final int releaseId,
            final int reactionId) {
        try { 
            return prepareReactionsDeleteForReleaseRequest(owner, repo, releaseId,
            reactionId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsDeleteForRelease.
     */
    private ApiCall<Void, ApiException> prepareReactionsDeleteForReleaseRequest(
            final String owner,
            final String repo,
            final int releaseId,
            final int reactionId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("release_id").value(releaseId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("reaction_id").value(reactionId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`List reactions for a team
     * discussion
     * comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment)
     * endpoint. List the reactions to a [team discussion
     * comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access
     * tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to a team discussion comment.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public List<Reaction> reactionsListForTeamDiscussionCommentLegacy(
            final int teamId,
            final int discussionNumber,
            final int commentNumber,
            final Content21Enum content,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareReactionsListForTeamDiscussionCommentLegacyRequest(teamId, discussionNumber,
                commentNumber, content, perPage, page).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`List reactions for a team
     * discussion
     * comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment)
     * endpoint. List the reactions to a [team discussion
     * comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access
     * tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to a team discussion comment.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     */
    @Deprecated
    public CompletableFuture<List<Reaction>> reactionsListForTeamDiscussionCommentLegacyAsync(
            final int teamId,
            final int discussionNumber,
            final int commentNumber,
            final Content21Enum content,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareReactionsListForTeamDiscussionCommentLegacyRequest(teamId, discussionNumber,
            commentNumber, content, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsListForTeamDiscussionCommentLegacy.
     */
    private ApiCall<List<Reaction>, ApiException> prepareReactionsListForTeamDiscussionCommentLegacyRequest(
            final int teamId,
            final int discussionNumber,
            final int commentNumber,
            final Content21Enum content,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Reaction>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions")
                        .queryParam(param -> param.key("content")
                                .value((content != null) ? content.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_number").value(commentNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Reaction[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new "[Create reaction for a team
     * discussion
     * comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)"
     * endpoint. Create a reaction to a [team discussion
     * comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access
     * tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * A response with an HTTP `200` status means that you already added the reaction type to this
     * team discussion comment.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the TeamsDiscussionsCommentsCommentNumberReactionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public TeamsDiscussionsCommentsCommentNumberReactionsResponse reactionsCreateForTeamDiscussionCommentLegacy(
            final int teamId,
            final int discussionNumber,
            final int commentNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsRequest body) throws ApiException, IOException {
        return prepareReactionsCreateForTeamDiscussionCommentLegacyRequest(teamId, discussionNumber,
                commentNumber, body).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new "[Create reaction for a team
     * discussion
     * comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)"
     * endpoint. Create a reaction to a [team discussion
     * comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access
     * tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * A response with an HTTP `200` status means that you already added the reaction type to this
     * team discussion comment.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the TeamsDiscussionsCommentsCommentNumberReactionsResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<TeamsDiscussionsCommentsCommentNumberReactionsResponse> reactionsCreateForTeamDiscussionCommentLegacyAsync(
            final int teamId,
            final int discussionNumber,
            final int commentNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsRequest body) {
        try { 
            return prepareReactionsCreateForTeamDiscussionCommentLegacyRequest(teamId, discussionNumber,
            commentNumber, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsCreateForTeamDiscussionCommentLegacy.
     */
    private ApiCall<TeamsDiscussionsCommentsCommentNumberReactionsResponse, ApiException> prepareReactionsCreateForTeamDiscussionCommentLegacyRequest(
            final int teamId,
            final int discussionNumber,
            final int commentNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberReactionsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<TeamsDiscussionsCommentsCommentNumberReactionsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_number").value(commentNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TeamsDiscussionsCommentsCommentNumberReactionsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`List reactions for a team
     * discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion)
     * endpoint. List the reactions to a [team
     * discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens
     * require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to a team discussion.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public List<Reaction> reactionsListForTeamDiscussionLegacy(
            final int teamId,
            final int discussionNumber,
            final Content22Enum content,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareReactionsListForTeamDiscussionLegacyRequest(teamId, discussionNumber, content,
                perPage, page).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`List reactions for a team
     * discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion)
     * endpoint. List the reactions to a [team
     * discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens
     * require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  content  Optional parameter: Returns a single [reaction
     *         type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this
     *         parameter to list all reactions to a team discussion.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Reaction response from the API call
     */
    @Deprecated
    public CompletableFuture<List<Reaction>> reactionsListForTeamDiscussionLegacyAsync(
            final int teamId,
            final int discussionNumber,
            final Content22Enum content,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareReactionsListForTeamDiscussionLegacyRequest(teamId, discussionNumber, content,
            perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsListForTeamDiscussionLegacy.
     */
    private ApiCall<List<Reaction>, ApiException> prepareReactionsListForTeamDiscussionLegacyRequest(
            final int teamId,
            final int discussionNumber,
            final Content22Enum content,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Reaction>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/discussions/{discussion_number}/reactions")
                        .queryParam(param -> param.key("content")
                                .value((content != null) ? content.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Reaction[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`Create reaction for a team
     * discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion)
     * endpoint. Create a reaction to a [team
     * discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens
     * require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * A response with an HTTP `200` status means that you already added the reaction type to this
     * team discussion.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  body  Required parameter: Example:
     * @return    Returns the TeamsDiscussionsReactionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public TeamsDiscussionsReactionsResponse reactionsCreateForTeamDiscussionLegacy(
            final int teamId,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberReactionsRequest body) throws ApiException, IOException {
        return prepareReactionsCreateForTeamDiscussionLegacyRequest(teamId, discussionNumber,
                body).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`Create reaction for a team
     * discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion)
     * endpoint. Create a reaction to a [team
     * discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens
     * require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * A response with an HTTP `200` status means that you already added the reaction type to this
     * team discussion.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  body  Required parameter: Example:
     * @return    Returns the TeamsDiscussionsReactionsResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<TeamsDiscussionsReactionsResponse> reactionsCreateForTeamDiscussionLegacyAsync(
            final int teamId,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberReactionsRequest body) {
        try { 
            return prepareReactionsCreateForTeamDiscussionLegacyRequest(teamId, discussionNumber,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reactionsCreateForTeamDiscussionLegacy.
     */
    private ApiCall<TeamsDiscussionsReactionsResponse, ApiException> prepareReactionsCreateForTeamDiscussionLegacyRequest(
            final int teamId,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberReactionsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<TeamsDiscussionsReactionsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/discussions/{discussion_number}/reactions")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TeamsDiscussionsReactionsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
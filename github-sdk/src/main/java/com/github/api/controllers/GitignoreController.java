/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.GitignoreTemplatesResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class GitignoreController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public GitignoreController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * List all templates available to pass as an option when [creating a
     * repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
     * @return    Returns the List of String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<String> gitignoreGetAllTemplates() throws ApiException, IOException {
        return prepareGitignoreGetAllTemplatesRequest().execute();
    }

    /**
     * List all templates available to pass as an option when [creating a
     * repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
     * @return    Returns the List of String response from the API call
     */
    public CompletableFuture<List<String>> gitignoreGetAllTemplatesAsync() {
        try { 
            return prepareGitignoreGetAllTemplatesRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gitignoreGetAllTemplates.
     */
    private ApiCall<List<String>, ApiException> prepareGitignoreGetAllTemplatesRequest() throws IOException {
        return new ApiCall.Builder<List<String>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gitignore/templates")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        String[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * The API also allows fetching the source of a single template. Use the raw [media
     * type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
     * @param  name  Required parameter: Example:
     * @return    Returns the GitignoreTemplatesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GitignoreTemplatesResponse gitignoreGetTemplate(
            final String name) throws ApiException, IOException {
        return prepareGitignoreGetTemplateRequest(name).execute();
    }

    /**
     * The API also allows fetching the source of a single template. Use the raw [media
     * type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
     * @param  name  Required parameter: Example:
     * @return    Returns the GitignoreTemplatesResponse response from the API call
     */
    public CompletableFuture<GitignoreTemplatesResponse> gitignoreGetTemplateAsync(
            final String name) {
        try { 
            return prepareGitignoreGetTemplateRequest(name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gitignoreGetTemplate.
     */
    private ApiCall<GitignoreTemplatesResponse, ApiException> prepareGitignoreGetTemplateRequest(
            final String name) throws IOException {
        return new ApiCall.Builder<GitignoreTemplatesResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gitignore/templates/{name}")
                        .templateParam(param -> param.key("name").value(name)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GitignoreTemplatesResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.Orgs404ErrorException;
import com.github.api.exceptions.Orgs409ErrorException;
import com.github.api.exceptions.OrgsBlocks404ErrorException;
import com.github.api.exceptions.OrgsBlocks422ErrorException;
import com.github.api.exceptions.OrgsFailedInvitations404ErrorException;
import com.github.api.exceptions.OrgsHooks404ErrorException;
import com.github.api.exceptions.OrgsHooks422ErrorException;
import com.github.api.exceptions.OrgsHooksDeliveries400ErrorException;
import com.github.api.exceptions.OrgsHooksDeliveries422ErrorException;
import com.github.api.exceptions.OrgsHooksDeliveriesDeliveryId400ErrorException;
import com.github.api.exceptions.OrgsHooksDeliveriesDeliveryId422ErrorException;
import com.github.api.exceptions.OrgsHooksDeliveriesDeliveryIdAttempts400ErrorException;
import com.github.api.exceptions.OrgsHooksDeliveriesDeliveryIdAttempts422ErrorException;
import com.github.api.exceptions.OrgsHooksPings404ErrorException;
import com.github.api.exceptions.OrgsInvitations404ErrorException;
import com.github.api.exceptions.OrgsInvitations422ErrorException;
import com.github.api.exceptions.OrgsInvitationsTeams404ErrorException;
import com.github.api.exceptions.OrgsMembers403ErrorException;
import com.github.api.exceptions.OrgsMembers422ErrorException;
import com.github.api.exceptions.OrgsMemberships403ErrorException;
import com.github.api.exceptions.OrgsMemberships404ErrorException;
import com.github.api.exceptions.OrgsMemberships422ErrorException;
import com.github.api.exceptions.OrgsOutsideCollaborators404ErrorException;
import com.github.api.exceptions.OrgsOutsideCollaborators422ErrorException;
import com.github.api.exceptions.OrgsPublicMembers403ErrorException;
import com.github.api.exceptions.UserMembershipsOrgs401ErrorException;
import com.github.api.exceptions.UserMembershipsOrgs403ErrorException;
import com.github.api.exceptions.UserMembershipsOrgs404ErrorException;
import com.github.api.exceptions.UserMembershipsOrgs422ErrorException;
import com.github.api.exceptions.UserOrgs401ErrorException;
import com.github.api.exceptions.UserOrgs403ErrorException;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.AppHookConfigRequest;
import com.github.api.models.Enablement2Enum;
import com.github.api.models.Filter21Enum;
import com.github.api.models.Filter22Enum;
import com.github.api.models.OrgHook;
import com.github.api.models.OrgMembership;
import com.github.api.models.OrganizationInvitation;
import com.github.api.models.OrganizationSimple;
import com.github.api.models.OrgsHooksDeliveriesDeliveryIdResponse;
import com.github.api.models.OrgsHooksRequest;
import com.github.api.models.OrgsHooksRequest1;
import com.github.api.models.OrgsHooksResponse;
import com.github.api.models.OrgsInstallationsResponse;
import com.github.api.models.OrgsInvitationsRequest;
import com.github.api.models.OrgsInvitationsResponse;
import com.github.api.models.OrgsMembershipsRequest;
import com.github.api.models.OrgsMembershipsResponse;
import com.github.api.models.OrgsOutsideCollaboratorsRequest;
import com.github.api.models.OrgsRequest;
import com.github.api.models.OrgsResponse;
import com.github.api.models.Role31Enum;
import com.github.api.models.SecurityProduct11Enum;
import com.github.api.models.SimpleUser;
import com.github.api.models.Simplewebhookdelivery;
import com.github.api.models.State1841Enum;
import com.github.api.models.Team;
import com.github.api.models.TeamSimple;
import com.github.api.models.UserMembershipsOrgsRequest;
import com.github.api.models.UserMembershipsOrgsResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class OrgsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public OrgsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Lists all organizations, in the order that they were created on GitHub. **Note:** Pagination
     * is powered exclusively by the `since` parameter. Use the [Link
     * header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get
     * the URL for the next page of organizations.
     * @param  since  Optional parameter: An organization ID. Only return organizations with an ID
     *         greater than this ID.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @return    Returns the List of OrganizationSimple response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<OrganizationSimple> orgsList(
            final Integer since,
            final Integer perPage) throws ApiException, IOException {
        return prepareOrgsListRequest(since, perPage).execute();
    }

    /**
     * Lists all organizations, in the order that they were created on GitHub. **Note:** Pagination
     * is powered exclusively by the `since` parameter. Use the [Link
     * header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get
     * the URL for the next page of organizations.
     * @param  since  Optional parameter: An organization ID. Only return organizations with an ID
     *         greater than this ID.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @return    Returns the List of OrganizationSimple response from the API call
     */
    public CompletableFuture<List<OrganizationSimple>> orgsListAsync(
            final Integer since,
            final Integer perPage) {
        try { 
            return prepareOrgsListRequest(since, perPage).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsList.
     */
    private ApiCall<List<OrganizationSimple>, ApiException> prepareOrgsListRequest(
            final Integer since,
            final Integer perPage) throws IOException {
        return new ApiCall.Builder<List<OrganizationSimple>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/organizations")
                        .queryParam(param -> param.key("since")
                                .value(since).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        OrganizationSimple[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * To see many of the organization response values, you need to be an authenticated organization
     * owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is
     * `true`, the organization requires all members, billing managers, and outside collaborators to
     * enable [two-factor
     * authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
     * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve
     * information about an organization's GitHub plan. See "[Authenticating with GitHub
     * Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)"
     * for details. For an example response, see 'Response with GitHub plan information' below.".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @return    Returns the OrgsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsResponse orgsGet(
            final String org) throws ApiException, IOException {
        return prepareOrgsGetRequest(org).execute();
    }

    /**
     * To see many of the organization response values, you need to be an authenticated organization
     * owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is
     * `true`, the organization requires all members, billing managers, and outside collaborators to
     * enable [two-factor
     * authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
     * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve
     * information about an organization's GitHub plan. See "[Authenticating with GitHub
     * Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)"
     * for details. For an example response, see 'Response with GitHub plan information' below.".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @return    Returns the OrgsResponse response from the API call
     */
    public CompletableFuture<OrgsResponse> orgsGetAsync(
            final String org) {
        try { 
            return prepareOrgsGetRequest(org).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsGet.
     */
    private ApiCall<OrgsResponse, ApiException> prepareOrgsGetRequest(
            final String org) throws IOException {
        return new ApiCall.Builder<OrgsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new Orgs404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Parameter Deprecation Notice:** GitHub will replace and discontinue
     * `members_allowed_repository_creation_type` in favor of more granular permissions. The new
     * input parameters are `members_can_create_public_repositories`,
     * `members_can_create_private_repositories` for all organizations and
     * `members_can_create_internal_repositories` for organizations associated with an enterprise
     * account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more
     * information, see the [blog
     * post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes). Enables
     * an authenticated organization owner with the `admin:org` scope to update the organization's
     * profile and member privileges.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrgsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsResponse orgsUpdate(
            final String org,
            final OrgsRequest body) throws ApiException, IOException {
        return prepareOrgsUpdateRequest(org, body).execute();
    }

    /**
     * **Parameter Deprecation Notice:** GitHub will replace and discontinue
     * `members_allowed_repository_creation_type` in favor of more granular permissions. The new
     * input parameters are `members_can_create_public_repositories`,
     * `members_can_create_private_repositories` for all organizations and
     * `members_can_create_internal_repositories` for organizations associated with an enterprise
     * account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more
     * information, see the [blog
     * post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes). Enables
     * an authenticated organization owner with the `admin:org` scope to update the organization's
     * profile and member privileges.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrgsResponse response from the API call
     */
    public CompletableFuture<OrgsResponse> orgsUpdateAsync(
            final String org,
            final OrgsRequest body) {
        try { 
            return prepareOrgsUpdateRequest(org, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsUpdate.
     */
    private ApiCall<OrgsResponse, ApiException> prepareOrgsUpdateRequest(
            final String org,
            final OrgsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsResponse.class))
                        .nullify404(false)
                        .localErrorCase("409",
                                 ErrorCase.create("Conflict",
                                (reason, context) -> new Orgs409ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List the users blocked by an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of SimpleUser response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<SimpleUser> orgsListBlockedUsers(
            final String org,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareOrgsListBlockedUsersRequest(org, perPage, page).execute();
    }

    /**
     * List the users blocked by an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of SimpleUser response from the API call
     */
    public CompletableFuture<List<SimpleUser>> orgsListBlockedUsersAsync(
            final String org,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareOrgsListBlockedUsersRequest(org, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsListBlockedUsers.
     */
    private ApiCall<List<SimpleUser>, ApiException> prepareOrgsListBlockedUsersRequest(
            final String org,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<SimpleUser>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/blocks")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        SimpleUser[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Check if a user is blocked by an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsCheckBlockedUser(
            final String org,
            final String username) throws ApiException, IOException {
        prepareOrgsCheckBlockedUserRequest(org, username).execute();
    }

    /**
     * Check if a user is blocked by an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsCheckBlockedUserAsync(
            final String org,
            final String username) {
        try { 
            return prepareOrgsCheckBlockedUserRequest(org, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsCheckBlockedUser.
     */
    private ApiCall<Void, ApiException> prepareOrgsCheckBlockedUserRequest(
            final String org,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/blocks/{username}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("If the user is not blocked",
                                (reason, context) -> new OrgsBlocks404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Block a user from an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsBlockUser(
            final String org,
            final String username) throws ApiException, IOException {
        prepareOrgsBlockUserRequest(org, username).execute();
    }

    /**
     * Block a user from an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsBlockUserAsync(
            final String org,
            final String username) {
        try { 
            return prepareOrgsBlockUserRequest(org, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsBlockUser.
     */
    private ApiCall<Void, ApiException> prepareOrgsBlockUserRequest(
            final String org,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/blocks/{username}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new OrgsBlocks422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Unblock a user from an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsUnblockUser(
            final String org,
            final String username) throws ApiException, IOException {
        prepareOrgsUnblockUserRequest(org, username).execute();
    }

    /**
     * Unblock a user from an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsUnblockUserAsync(
            final String org,
            final String username) {
        try { 
            return prepareOrgsUnblockUserRequest(org, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsUnblockUser.
     */
    private ApiCall<Void, ApiException> prepareOrgsUnblockUserRequest(
            final String org,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/blocks/{username}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * The return hash contains `failed_at` and `failed_reason` fields which represent the time at
     * which the invitation failed and the reason for the failure.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrganizationInvitation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<OrganizationInvitation> orgsListFailedInvitations(
            final String org,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareOrgsListFailedInvitationsRequest(org, perPage, page).execute();
    }

    /**
     * The return hash contains `failed_at` and `failed_reason` fields which represent the time at
     * which the invitation failed and the reason for the failure.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrganizationInvitation response from the API call
     */
    public CompletableFuture<List<OrganizationInvitation>> orgsListFailedInvitationsAsync(
            final String org,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareOrgsListFailedInvitationsRequest(org, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsListFailedInvitations.
     */
    private ApiCall<List<OrganizationInvitation>, ApiException> prepareOrgsListFailedInvitationsRequest(
            final String org,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<OrganizationInvitation>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/failed_invitations")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        OrganizationInvitation[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsFailedInvitations404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List organization webhooks.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrgHook response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<OrgHook> orgsListWebhooks(
            final String org,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareOrgsListWebhooksRequest(org, perPage, page).execute();
    }

    /**
     * List organization webhooks.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrgHook response from the API call
     */
    public CompletableFuture<List<OrgHook>> orgsListWebhooksAsync(
            final String org,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareOrgsListWebhooksRequest(org, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsListWebhooks.
     */
    private ApiCall<List<OrgHook>, ApiException> prepareOrgsListWebhooksRequest(
            final String org,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<OrgHook>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/hooks")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        OrgHook[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsHooks404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Here's how you can create a hook that posts payloads in JSON format:.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsHooksResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsHooksResponse orgsCreateWebhook(
            final String org,
            final OrgsHooksRequest body) throws ApiException, IOException {
        return prepareOrgsCreateWebhookRequest(org, body).execute();
    }

    /**
     * Here's how you can create a hook that posts payloads in JSON format:.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsHooksResponse response from the API call
     */
    public CompletableFuture<OrgsHooksResponse> orgsCreateWebhookAsync(
            final String org,
            final OrgsHooksRequest body) {
        try { 
            return prepareOrgsCreateWebhookRequest(org, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsCreateWebhook.
     */
    private ApiCall<OrgsHooksResponse, ApiException> prepareOrgsCreateWebhookRequest(
            final String org,
            final OrgsHooksRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsHooksResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/hooks")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsHooksResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsHooks404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new OrgsHooks422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns a webhook configured in an organization. To get only the webhook `config` properties,
     * see "[Get a webhook configuration for an
     * organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization).".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @return    Returns the OrgsHooksResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsHooksResponse orgsGetWebhook(
            final String org,
            final int hookId) throws ApiException, IOException {
        return prepareOrgsGetWebhookRequest(org, hookId).execute();
    }

    /**
     * Returns a webhook configured in an organization. To get only the webhook `config` properties,
     * see "[Get a webhook configuration for an
     * organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization).".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @return    Returns the OrgsHooksResponse response from the API call
     */
    public CompletableFuture<OrgsHooksResponse> orgsGetWebhookAsync(
            final String org,
            final int hookId) {
        try { 
            return prepareOrgsGetWebhookRequest(org, hookId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsGetWebhook.
     */
    private ApiCall<OrgsHooksResponse, ApiException> prepareOrgsGetWebhookRequest(
            final String org,
            final int hookId) throws IOException {
        return new ApiCall.Builder<OrgsHooksResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/hooks/{hook_id}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("hook_id").value(hookId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsHooksResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsHooks404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates a webhook configured in an organization. When you update a webhook, the `secret` will
     * be overwritten. If you previously had a `secret` set, you must provide the same `secret` or
     * set a new `secret` or the secret will be removed. If you are only updating individual webhook
     * `config` properties, use "[Update a webhook configuration for an
     * organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization).".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrgsHooksResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsHooksResponse orgsUpdateWebhook(
            final String org,
            final int hookId,
            final OrgsHooksRequest1 body) throws ApiException, IOException {
        return prepareOrgsUpdateWebhookRequest(org, hookId, body).execute();
    }

    /**
     * Updates a webhook configured in an organization. When you update a webhook, the `secret` will
     * be overwritten. If you previously had a `secret` set, you must provide the same `secret` or
     * set a new `secret` or the secret will be removed. If you are only updating individual webhook
     * `config` properties, use "[Update a webhook configuration for an
     * organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization).".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrgsHooksResponse response from the API call
     */
    public CompletableFuture<OrgsHooksResponse> orgsUpdateWebhookAsync(
            final String org,
            final int hookId,
            final OrgsHooksRequest1 body) {
        try { 
            return prepareOrgsUpdateWebhookRequest(org, hookId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsUpdateWebhook.
     */
    private ApiCall<OrgsHooksResponse, ApiException> prepareOrgsUpdateWebhookRequest(
            final String org,
            final int hookId,
            final OrgsHooksRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsHooksResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/hooks/{hook_id}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("hook_id").value(hookId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsHooksResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsHooks404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new OrgsHooks422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete an organization webhook.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsDeleteWebhook(
            final String org,
            final int hookId) throws ApiException, IOException {
        prepareOrgsDeleteWebhookRequest(org, hookId).execute();
    }

    /**
     * Delete an organization webhook.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsDeleteWebhookAsync(
            final String org,
            final int hookId) {
        try { 
            return prepareOrgsDeleteWebhookRequest(org, hookId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsDeleteWebhook.
     */
    private ApiCall<Void, ApiException> prepareOrgsDeleteWebhookRequest(
            final String org,
            final int hookId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/hooks/{hook_id}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("hook_id").value(hookId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsHooks404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns the webhook configuration for an organization. To get more information about the
     * webhook, including the `active` state and `events`, use "[Get an organization webhook
     * ](/rest/reference/orgs#get-an-organization-webhook)." Access tokens must have the
     * `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @return    Returns the AppHookConfigRequest response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AppHookConfigRequest orgsGetWebhookConfigForOrg(
            final String org,
            final int hookId) throws ApiException, IOException {
        return prepareOrgsGetWebhookConfigForOrgRequest(org, hookId).execute();
    }

    /**
     * Returns the webhook configuration for an organization. To get more information about the
     * webhook, including the `active` state and `events`, use "[Get an organization webhook
     * ](/rest/reference/orgs#get-an-organization-webhook)." Access tokens must have the
     * `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @return    Returns the AppHookConfigRequest response from the API call
     */
    public CompletableFuture<AppHookConfigRequest> orgsGetWebhookConfigForOrgAsync(
            final String org,
            final int hookId) {
        try { 
            return prepareOrgsGetWebhookConfigForOrgRequest(org, hookId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsGetWebhookConfigForOrg.
     */
    private ApiCall<AppHookConfigRequest, ApiException> prepareOrgsGetWebhookConfigForOrgRequest(
            final String org,
            final int hookId) throws IOException {
        return new ApiCall.Builder<AppHookConfigRequest, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/hooks/{hook_id}/config")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("hook_id").value(hookId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AppHookConfigRequest.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates the webhook configuration for an organization. To update more information about the
     * webhook, including the `active` state and `events`, use "[Update an organization webhook
     * ](/rest/reference/orgs#update-an-organization-webhook)." Access tokens must have the
     * `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @param  body  Optional parameter: Example:
     * @return    Returns the AppHookConfigRequest response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AppHookConfigRequest orgsUpdateWebhookConfigForOrg(
            final String org,
            final int hookId,
            final AppHookConfigRequest body) throws ApiException, IOException {
        return prepareOrgsUpdateWebhookConfigForOrgRequest(org, hookId, body).execute();
    }

    /**
     * Updates the webhook configuration for an organization. To update more information about the
     * webhook, including the `active` state and `events`, use "[Update an organization webhook
     * ](/rest/reference/orgs#update-an-organization-webhook)." Access tokens must have the
     * `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @param  body  Optional parameter: Example:
     * @return    Returns the AppHookConfigRequest response from the API call
     */
    public CompletableFuture<AppHookConfigRequest> orgsUpdateWebhookConfigForOrgAsync(
            final String org,
            final int hookId,
            final AppHookConfigRequest body) {
        try { 
            return prepareOrgsUpdateWebhookConfigForOrgRequest(org, hookId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsUpdateWebhookConfigForOrg.
     */
    private ApiCall<AppHookConfigRequest, ApiException> prepareOrgsUpdateWebhookConfigForOrgRequest(
            final String org,
            final int hookId,
            final AppHookConfigRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<AppHookConfigRequest, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/hooks/{hook_id}/config")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("hook_id").value(hookId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AppHookConfigRequest.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns a list of webhook deliveries for a webhook configured in an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  cursor  Optional parameter: Used for pagination: the starting delivery from which the
     *         page of deliveries is fetched. Refer to the `link` header for the next and previous
     *         page cursors.
     * @param  redelivery  Optional parameter: Example:
     * @return    Returns the List of Simplewebhookdelivery response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Simplewebhookdelivery> orgsListWebhookDeliveries(
            final String org,
            final int hookId,
            final Integer perPage,
            final String cursor,
            final Boolean redelivery) throws ApiException, IOException {
        return prepareOrgsListWebhookDeliveriesRequest(org, hookId, perPage, cursor,
                redelivery).execute();
    }

    /**
     * Returns a list of webhook deliveries for a webhook configured in an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  cursor  Optional parameter: Used for pagination: the starting delivery from which the
     *         page of deliveries is fetched. Refer to the `link` header for the next and previous
     *         page cursors.
     * @param  redelivery  Optional parameter: Example:
     * @return    Returns the List of Simplewebhookdelivery response from the API call
     */
    public CompletableFuture<List<Simplewebhookdelivery>> orgsListWebhookDeliveriesAsync(
            final String org,
            final int hookId,
            final Integer perPage,
            final String cursor,
            final Boolean redelivery) {
        try { 
            return prepareOrgsListWebhookDeliveriesRequest(org, hookId, perPage, cursor,
            redelivery).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsListWebhookDeliveries.
     */
    private ApiCall<List<Simplewebhookdelivery>, ApiException> prepareOrgsListWebhookDeliveriesRequest(
            final String org,
            final int hookId,
            final Integer perPage,
            final String cursor,
            final Boolean redelivery) throws IOException {
        return new ApiCall.Builder<List<Simplewebhookdelivery>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/hooks/{hook_id}/deliveries")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("cursor")
                                .value(cursor).isRequired(false))
                        .queryParam(param -> param.key("redelivery")
                                .value(redelivery).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("hook_id").value(hookId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Simplewebhookdelivery[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.create("Bad Request",
                                (reason, context) -> new OrgsHooksDeliveries400ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new OrgsHooksDeliveries422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns a delivery for a webhook configured in an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @param  deliveryId  Required parameter: Example:
     * @return    Returns the OrgsHooksDeliveriesDeliveryIdResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsHooksDeliveriesDeliveryIdResponse orgsGetWebhookDelivery(
            final String org,
            final int hookId,
            final int deliveryId) throws ApiException, IOException {
        return prepareOrgsGetWebhookDeliveryRequest(org, hookId, deliveryId).execute();
    }

    /**
     * Returns a delivery for a webhook configured in an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @param  deliveryId  Required parameter: Example:
     * @return    Returns the OrgsHooksDeliveriesDeliveryIdResponse response from the API call
     */
    public CompletableFuture<OrgsHooksDeliveriesDeliveryIdResponse> orgsGetWebhookDeliveryAsync(
            final String org,
            final int hookId,
            final int deliveryId) {
        try { 
            return prepareOrgsGetWebhookDeliveryRequest(org, hookId, deliveryId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsGetWebhookDelivery.
     */
    private ApiCall<OrgsHooksDeliveriesDeliveryIdResponse, ApiException> prepareOrgsGetWebhookDeliveryRequest(
            final String org,
            final int hookId,
            final int deliveryId) throws IOException {
        return new ApiCall.Builder<OrgsHooksDeliveriesDeliveryIdResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("hook_id").value(hookId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("delivery_id").value(deliveryId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsHooksDeliveriesDeliveryIdResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.create("Bad Request",
                                (reason, context) -> new OrgsHooksDeliveriesDeliveryId400ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new OrgsHooksDeliveriesDeliveryId422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Redeliver a delivery for a webhook configured in an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @param  deliveryId  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object orgsRedeliverWebhookDelivery(
            final String org,
            final int hookId,
            final int deliveryId) throws ApiException, IOException {
        return prepareOrgsRedeliverWebhookDeliveryRequest(org, hookId, deliveryId).execute();
    }

    /**
     * Redeliver a delivery for a webhook configured in an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @param  deliveryId  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> orgsRedeliverWebhookDeliveryAsync(
            final String org,
            final int hookId,
            final int deliveryId) {
        try { 
            return prepareOrgsRedeliverWebhookDeliveryRequest(org, hookId, deliveryId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsRedeliverWebhookDelivery.
     */
    private ApiCall<Object, ApiException> prepareOrgsRedeliverWebhookDeliveryRequest(
            final String org,
            final int hookId,
            final int deliveryId) throws IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("hook_id").value(hookId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("delivery_id").value(deliveryId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.create("Bad Request",
                                (reason, context) -> new OrgsHooksDeliveriesDeliveryIdAttempts400ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new OrgsHooksDeliveriesDeliveryIdAttempts422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to
     * the hook.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsPingWebhook(
            final String org,
            final int hookId) throws ApiException, IOException {
        prepareOrgsPingWebhookRequest(org, hookId).execute();
    }

    /**
     * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to
     * the hook.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  hookId  Required parameter: The unique identifier of the hook.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsPingWebhookAsync(
            final String org,
            final int hookId) {
        try { 
            return prepareOrgsPingWebhookRequest(org, hookId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsPingWebhook.
     */
    private ApiCall<Void, ApiException> prepareOrgsPingWebhookRequest(
            final String org,
            final int hookId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/hooks/{hook_id}/pings")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("hook_id").value(hookId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsHooksPings404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps
     * installed on repositories in the organization. You must be an organization owner with
     * `admin:read` scope to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the OrgsInstallationsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsInstallationsResponse orgsListAppInstallations(
            final String org,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareOrgsListAppInstallationsRequest(org, perPage, page).execute();
    }

    /**
     * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps
     * installed on repositories in the organization. You must be an organization owner with
     * `admin:read` scope to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the OrgsInstallationsResponse response from the API call
     */
    public CompletableFuture<OrgsInstallationsResponse> orgsListAppInstallationsAsync(
            final String org,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareOrgsListAppInstallationsRequest(org, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsListAppInstallations.
     */
    private ApiCall<OrgsInstallationsResponse, ApiException> prepareOrgsListAppInstallationsRequest(
            final String org,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<OrgsInstallationsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/installations")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsInstallationsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * The return hash contains a `role` field which refers to the Organization Invitation role and
     * will be one of the following values: `direct_member`, `admin`, `billing_manager`,
     * `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in
     * the return hash will be `null`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrganizationInvitation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<OrganizationInvitation> orgsListPendingInvitations(
            final String org,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareOrgsListPendingInvitationsRequest(org, perPage, page).execute();
    }

    /**
     * The return hash contains a `role` field which refers to the Organization Invitation role and
     * will be one of the following values: `direct_member`, `admin`, `billing_manager`,
     * `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in
     * the return hash will be `null`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrganizationInvitation response from the API call
     */
    public CompletableFuture<List<OrganizationInvitation>> orgsListPendingInvitationsAsync(
            final String org,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareOrgsListPendingInvitationsRequest(org, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsListPendingInvitations.
     */
    private ApiCall<List<OrganizationInvitation>, ApiException> prepareOrgsListPendingInvitationsRequest(
            final String org,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<OrganizationInvitation>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/invitations")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        OrganizationInvitation[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsInvitations404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Invite people to an organization by using their GitHub user ID or their email address. In
     * order to create invitations in an organization, the authenticated user must be an
     * organization owner. This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrgsInvitationsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsInvitationsResponse orgsCreateInvitation(
            final String org,
            final OrgsInvitationsRequest body) throws ApiException, IOException {
        return prepareOrgsCreateInvitationRequest(org, body).execute();
    }

    /**
     * Invite people to an organization by using their GitHub user ID or their email address. In
     * order to create invitations in an organization, the authenticated user must be an
     * organization owner. This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrgsInvitationsResponse response from the API call
     */
    public CompletableFuture<OrgsInvitationsResponse> orgsCreateInvitationAsync(
            final String org,
            final OrgsInvitationsRequest body) {
        try { 
            return prepareOrgsCreateInvitationRequest(org, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsCreateInvitation.
     */
    private ApiCall<OrgsInvitationsResponse, ApiException> prepareOrgsCreateInvitationRequest(
            final String org,
            final OrgsInvitationsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsInvitationsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/invitations")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsInvitationsResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsInvitations404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new OrgsInvitations422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Cancel an organization invitation. In order to cancel an organization invitation, the
     * authenticated user must be an organization owner. This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  invitationId  Required parameter: The unique identifier of the invitation.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsCancelInvitation(
            final String org,
            final int invitationId) throws ApiException, IOException {
        prepareOrgsCancelInvitationRequest(org, invitationId).execute();
    }

    /**
     * Cancel an organization invitation. In order to cancel an organization invitation, the
     * authenticated user must be an organization owner. This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  invitationId  Required parameter: The unique identifier of the invitation.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsCancelInvitationAsync(
            final String org,
            final int invitationId) {
        try { 
            return prepareOrgsCancelInvitationRequest(org, invitationId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsCancelInvitation.
     */
    private ApiCall<Void, ApiException> prepareOrgsCancelInvitationRequest(
            final String org,
            final int invitationId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/invitations/{invitation_id}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("invitation_id").value(invitationId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsInvitations404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new OrgsInvitations422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List all teams associated with an invitation. In order to see invitations in an organization,
     * the authenticated user must be an organization owner.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  invitationId  Required parameter: The unique identifier of the invitation.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Team response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Team> orgsListInvitationTeams(
            final String org,
            final int invitationId,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareOrgsListInvitationTeamsRequest(org, invitationId, perPage, page).execute();
    }

    /**
     * List all teams associated with an invitation. In order to see invitations in an organization,
     * the authenticated user must be an organization owner.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  invitationId  Required parameter: The unique identifier of the invitation.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Team response from the API call
     */
    public CompletableFuture<List<Team>> orgsListInvitationTeamsAsync(
            final String org,
            final int invitationId,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareOrgsListInvitationTeamsRequest(org, invitationId, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsListInvitationTeams.
     */
    private ApiCall<List<Team>, ApiException> prepareOrgsListInvitationTeamsRequest(
            final String org,
            final int invitationId,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Team>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/invitations/{invitation_id}/teams")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("invitation_id").value(invitationId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Team[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsInvitationsTeams404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List all users who are members of an organization. If the authenticated user is also a member
     * of this organization then both concealed and public members will be returned.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  filter  Optional parameter: Filter members returned in the list. `2fa_disabled` means
     *         that only members without [two-factor
     *         authentication](https://github.com/blog/1614-two-factor-authentication) enabled will
     *         be returned. This options is only available for organization owners.
     * @param  role  Optional parameter: Filter members returned by their role.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of SimpleUser response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<SimpleUser> orgsListMembers(
            final String org,
            final Filter21Enum filter,
            final Role31Enum role,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareOrgsListMembersRequest(org, filter, role, perPage, page).execute();
    }

    /**
     * List all users who are members of an organization. If the authenticated user is also a member
     * of this organization then both concealed and public members will be returned.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  filter  Optional parameter: Filter members returned in the list. `2fa_disabled` means
     *         that only members without [two-factor
     *         authentication](https://github.com/blog/1614-two-factor-authentication) enabled will
     *         be returned. This options is only available for organization owners.
     * @param  role  Optional parameter: Filter members returned by their role.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of SimpleUser response from the API call
     */
    public CompletableFuture<List<SimpleUser>> orgsListMembersAsync(
            final String org,
            final Filter21Enum filter,
            final Role31Enum role,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareOrgsListMembersRequest(org, filter, role, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsListMembers.
     */
    private ApiCall<List<SimpleUser>, ApiException> prepareOrgsListMembersRequest(
            final String org,
            final Filter21Enum filter,
            final Role31Enum role,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<SimpleUser>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/members")
                        .queryParam(param -> param.key("filter")
                                .value((filter != null) ? filter.value() : null).isRequired(false))
                        .queryParam(param -> param.key("role")
                                .value((role != null) ? role.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        SimpleUser[].class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new OrgsMembers422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Check if a user is, publicly or privately, a member of the organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsCheckMembershipForUser(
            final String org,
            final String username) throws ApiException, IOException {
        prepareOrgsCheckMembershipForUserRequest(org, username).execute();
    }

    /**
     * Check if a user is, publicly or privately, a member of the organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsCheckMembershipForUserAsync(
            final String org,
            final String username) {
        try { 
            return prepareOrgsCheckMembershipForUserRequest(org, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsCheckMembershipForUser.
     */
    private ApiCall<Void, ApiException> prepareOrgsCheckMembershipForUserRequest(
            final String org,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/members/{username}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found if requester is an organization member and user is not a member",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Removing a user from this list will remove them from all teams and they will no longer have
     * any access to the organization's repositories.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsRemoveMember(
            final String org,
            final String username) throws ApiException, IOException {
        prepareOrgsRemoveMemberRequest(org, username).execute();
    }

    /**
     * Removing a user from this list will remove them from all teams and they will no longer have
     * any access to the organization's repositories.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsRemoveMemberAsync(
            final String org,
            final String username) {
        try { 
            return prepareOrgsRemoveMemberRequest(org, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsRemoveMember.
     */
    private ApiCall<Void, ApiException> prepareOrgsRemoveMemberRequest(
            final String org,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/members/{username}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new OrgsMembers403ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * In order to get a user's membership with an organization, the authenticated user must be an
     * organization member. The `state` parameter in the response can be used to identify the user's
     * membership status.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the OrgsMembershipsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsMembershipsResponse orgsGetMembershipForUser(
            final String org,
            final String username) throws ApiException, IOException {
        return prepareOrgsGetMembershipForUserRequest(org, username).execute();
    }

    /**
     * In order to get a user's membership with an organization, the authenticated user must be an
     * organization member. The `state` parameter in the response can be used to identify the user's
     * membership status.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the OrgsMembershipsResponse response from the API call
     */
    public CompletableFuture<OrgsMembershipsResponse> orgsGetMembershipForUserAsync(
            final String org,
            final String username) {
        try { 
            return prepareOrgsGetMembershipForUserRequest(org, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsGetMembershipForUser.
     */
    private ApiCall<OrgsMembershipsResponse, ApiException> prepareOrgsGetMembershipForUserRequest(
            final String org,
            final String username) throws IOException {
        return new ApiCall.Builder<OrgsMembershipsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/memberships/{username}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsMembershipsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new OrgsMemberships403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsMemberships404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Only authenticated organization owners can add a member to the organization or update the
     * member's role. * If the authenticated user is _adding_ a member to the organization, the
     * invited user will receive an email inviting them to the organization. The user's [membership
     * status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user)
     * will be `pending` until they accept the invitation. * Authenticated users can _update_ a
     * user's membership by passing the `role` parameter. If the authenticated user changes a
     * member's role to `admin`, the affected user will receive an email notifying them that they've
     * been made an organization owner. If the authenticated user changes an owner's role to
     * `member`, no email will be sent. **Rate limits** To prevent abuse, the authenticated user is
     * limited to 50 organization invitations per 24 hour period. If the organization is more than
     * one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrgsMembershipsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsMembershipsResponse orgsSetMembershipForUser(
            final String org,
            final String username,
            final OrgsMembershipsRequest body) throws ApiException, IOException {
        return prepareOrgsSetMembershipForUserRequest(org, username, body).execute();
    }

    /**
     * Only authenticated organization owners can add a member to the organization or update the
     * member's role. * If the authenticated user is _adding_ a member to the organization, the
     * invited user will receive an email inviting them to the organization. The user's [membership
     * status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user)
     * will be `pending` until they accept the invitation. * Authenticated users can _update_ a
     * user's membership by passing the `role` parameter. If the authenticated user changes a
     * member's role to `admin`, the affected user will receive an email notifying them that they've
     * been made an organization owner. If the authenticated user changes an owner's role to
     * `member`, no email will be sent. **Rate limits** To prevent abuse, the authenticated user is
     * limited to 50 organization invitations per 24 hour period. If the organization is more than
     * one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrgsMembershipsResponse response from the API call
     */
    public CompletableFuture<OrgsMembershipsResponse> orgsSetMembershipForUserAsync(
            final String org,
            final String username,
            final OrgsMembershipsRequest body) {
        try { 
            return prepareOrgsSetMembershipForUserRequest(org, username, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsSetMembershipForUser.
     */
    private ApiCall<OrgsMembershipsResponse, ApiException> prepareOrgsSetMembershipForUserRequest(
            final String org,
            final String username,
            final OrgsMembershipsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsMembershipsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/memberships/{username}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsMembershipsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new OrgsMemberships403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new OrgsMemberships422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * In order to remove a user's membership with an organization, the authenticated user must be
     * an organization owner. If the specified user is an active member of the organization, this
     * will remove them from the organization. If the specified user has been invited to the
     * organization, this will cancel their invitation. The specified user will receive an email
     * notification in both cases.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsRemoveMembershipForUser(
            final String org,
            final String username) throws ApiException, IOException {
        prepareOrgsRemoveMembershipForUserRequest(org, username).execute();
    }

    /**
     * In order to remove a user's membership with an organization, the authenticated user must be
     * an organization owner. If the specified user is an active member of the organization, this
     * will remove them from the organization. If the specified user has been invited to the
     * organization, this will cancel their invitation. The specified user will receive an email
     * notification in both cases.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsRemoveMembershipForUserAsync(
            final String org,
            final String username) {
        try { 
            return prepareOrgsRemoveMembershipForUserRequest(org, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsRemoveMembershipForUser.
     */
    private ApiCall<Void, ApiException> prepareOrgsRemoveMembershipForUserRequest(
            final String org,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/memberships/{username}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new OrgsMemberships403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsMemberships404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List all users who are outside collaborators of an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  filter  Optional parameter: Filter the list of outside collaborators. `2fa_disabled`
     *         means that only outside collaborators without [two-factor
     *         authentication](https://github.com/blog/1614-two-factor-authentication) enabled will
     *         be returned.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of SimpleUser response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<SimpleUser> orgsListOutsideCollaborators(
            final String org,
            final Filter22Enum filter,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareOrgsListOutsideCollaboratorsRequest(org, filter, perPage, page).execute();
    }

    /**
     * List all users who are outside collaborators of an organization.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  filter  Optional parameter: Filter the list of outside collaborators. `2fa_disabled`
     *         means that only outside collaborators without [two-factor
     *         authentication](https://github.com/blog/1614-two-factor-authentication) enabled will
     *         be returned.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of SimpleUser response from the API call
     */
    public CompletableFuture<List<SimpleUser>> orgsListOutsideCollaboratorsAsync(
            final String org,
            final Filter22Enum filter,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareOrgsListOutsideCollaboratorsRequest(org, filter, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsListOutsideCollaborators.
     */
    private ApiCall<List<SimpleUser>, ApiException> prepareOrgsListOutsideCollaboratorsRequest(
            final String org,
            final Filter22Enum filter,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<SimpleUser>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/outside_collaborators")
                        .queryParam(param -> param.key("filter")
                                .value((filter != null) ? filter.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        SimpleUser[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * When an organization member is converted to an outside collaborator, they'll only have access
     * to the repositories that their current team membership allows. The user will no longer be a
     * member of the organization. For more information, see "[Converting an organization member to
     * an outside
     * collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
     * Converting an organization member to an outside collaborator may be restricted by enterprise
     * administrators. For more information, see "[Enforcing repository management policies in your
     * enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  body  Optional parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object orgsConvertMemberToOutsideCollaborator(
            final String org,
            final String username,
            final OrgsOutsideCollaboratorsRequest body) throws ApiException, IOException {
        return prepareOrgsConvertMemberToOutsideCollaboratorRequest(org, username, body).execute();
    }

    /**
     * When an organization member is converted to an outside collaborator, they'll only have access
     * to the repositories that their current team membership allows. The user will no longer be a
     * member of the organization. For more information, see "[Converting an organization member to
     * an outside
     * collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
     * Converting an organization member to an outside collaborator may be restricted by enterprise
     * administrators. For more information, see "[Enforcing repository management policies in your
     * enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  body  Optional parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> orgsConvertMemberToOutsideCollaboratorAsync(
            final String org,
            final String username,
            final OrgsOutsideCollaboratorsRequest body) {
        try { 
            return prepareOrgsConvertMemberToOutsideCollaboratorRequest(org, username, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsConvertMemberToOutsideCollaborator.
     */
    private ApiCall<Object, ApiException> prepareOrgsConvertMemberToOutsideCollaboratorRequest(
            final String org,
            final String username,
            final OrgsOutsideCollaboratorsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/outside_collaborators/{username}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden if user is the last owner of the organization, not a member of the organization, or if the enterprise enforces a policy for inviting outside collaborators. For more information, see \"[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\"",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsOutsideCollaborators404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Removing a user from this list will remove them from all the organization's repositories.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsRemoveOutsideCollaborator(
            final String org,
            final String username) throws ApiException, IOException {
        prepareOrgsRemoveOutsideCollaboratorRequest(org, username).execute();
    }

    /**
     * Removing a user from this list will remove them from all the organization's repositories.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsRemoveOutsideCollaboratorAsync(
            final String org,
            final String username) {
        try { 
            return prepareOrgsRemoveOutsideCollaboratorRequest(org, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsRemoveOutsideCollaborator.
     */
    private ApiCall<Void, ApiException> prepareOrgsRemoveOutsideCollaboratorRequest(
            final String org,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/outside_collaborators/{username}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Unprocessable Entity if user is a member of the organization",
                                (reason, context) -> new OrgsOutsideCollaborators422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Members of an organization can choose to have their membership publicized or not.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of SimpleUser response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<SimpleUser> orgsListPublicMembers(
            final String org,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareOrgsListPublicMembersRequest(org, perPage, page).execute();
    }

    /**
     * Members of an organization can choose to have their membership publicized or not.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of SimpleUser response from the API call
     */
    public CompletableFuture<List<SimpleUser>> orgsListPublicMembersAsync(
            final String org,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareOrgsListPublicMembersRequest(org, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsListPublicMembers.
     */
    private ApiCall<List<SimpleUser>, ApiException> prepareOrgsListPublicMembersRequest(
            final String org,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<SimpleUser>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/public_members")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        SimpleUser[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Check public organization membership for a user.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsCheckPublicMembershipForUser(
            final String org,
            final String username) throws ApiException, IOException {
        prepareOrgsCheckPublicMembershipForUserRequest(org, username).execute();
    }

    /**
     * Check public organization membership for a user.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsCheckPublicMembershipForUserAsync(
            final String org,
            final String username) {
        try { 
            return prepareOrgsCheckPublicMembershipForUserRequest(org, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsCheckPublicMembershipForUser.
     */
    private ApiCall<Void, ApiException> prepareOrgsCheckPublicMembershipForUserRequest(
            final String org,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/public_members/{username}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found if user is not a public member",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * The user can publicize their own membership. (A user cannot publicize the membership for
     * another user.) Note that you'll need to set `Content-Length` to zero when calling out to this
     * endpoint. For more information, see "[HTTP
     * verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsSetPublicMembershipForAuthenticatedUser(
            final String org,
            final String username) throws ApiException, IOException {
        prepareOrgsSetPublicMembershipForAuthenticatedUserRequest(org, username).execute();
    }

    /**
     * The user can publicize their own membership. (A user cannot publicize the membership for
     * another user.) Note that you'll need to set `Content-Length` to zero when calling out to this
     * endpoint. For more information, see "[HTTP
     * verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsSetPublicMembershipForAuthenticatedUserAsync(
            final String org,
            final String username) {
        try { 
            return prepareOrgsSetPublicMembershipForAuthenticatedUserRequest(org, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsSetPublicMembershipForAuthenticatedUser.
     */
    private ApiCall<Void, ApiException> prepareOrgsSetPublicMembershipForAuthenticatedUserRequest(
            final String org,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/public_members/{username}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new OrgsPublicMembers403ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Remove public organization membership for the authenticated user.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsRemovePublicMembershipForAuthenticatedUser(
            final String org,
            final String username) throws ApiException, IOException {
        prepareOrgsRemovePublicMembershipForAuthenticatedUserRequest(org, username).execute();
    }

    /**
     * Remove public organization membership for the authenticated user.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsRemovePublicMembershipForAuthenticatedUserAsync(
            final String org,
            final String username) {
        try { 
            return prepareOrgsRemovePublicMembershipForAuthenticatedUserRequest(org,
            username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsRemovePublicMembershipForAuthenticatedUser.
     */
    private ApiCall<Void, ApiException> prepareOrgsRemovePublicMembershipForAuthenticatedUserRequest(
            final String org,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/public_members/{username}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists teams that are security managers for an organization. For more information, see
     * "[Managing security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * To use this endpoint, you must be an administrator or security manager for the organization,
     * and you must use an access token with the `read:org` scope. GitHub Apps must have the
     * `administration` organization read permission to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @return    Returns the List of TeamSimple response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<TeamSimple> orgsListSecurityManagerTeams(
            final String org) throws ApiException, IOException {
        return prepareOrgsListSecurityManagerTeamsRequest(org).execute();
    }

    /**
     * Lists teams that are security managers for an organization. For more information, see
     * "[Managing security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * To use this endpoint, you must be an administrator or security manager for the organization,
     * and you must use an access token with the `read:org` scope. GitHub Apps must have the
     * `administration` organization read permission to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @return    Returns the List of TeamSimple response from the API call
     */
    public CompletableFuture<List<TeamSimple>> orgsListSecurityManagerTeamsAsync(
            final String org) {
        try { 
            return prepareOrgsListSecurityManagerTeamsRequest(org).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsListSecurityManagerTeams.
     */
    private ApiCall<List<TeamSimple>, ApiException> prepareOrgsListSecurityManagerTeamsRequest(
            final String org) throws IOException {
        return new ApiCall.Builder<List<TeamSimple>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/security-managers")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        TeamSimple[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Adds a team as a security manager for an organization. For more information, see "[Managing
     * security for an
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)
     * for an organization." To use this endpoint, you must be an administrator for the
     * organization, and you must use an access token with the `write:org` scope. GitHub Apps must
     * have the `administration` organization read-write permission to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsAddSecurityManagerTeam(
            final String org,
            final String teamSlug) throws ApiException, IOException {
        prepareOrgsAddSecurityManagerTeamRequest(org, teamSlug).execute();
    }

    /**
     * Adds a team as a security manager for an organization. For more information, see "[Managing
     * security for an
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)
     * for an organization." To use this endpoint, you must be an administrator for the
     * organization, and you must use an access token with the `write:org` scope. GitHub Apps must
     * have the `administration` organization read-write permission to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsAddSecurityManagerTeamAsync(
            final String org,
            final String teamSlug) {
        try { 
            return prepareOrgsAddSecurityManagerTeamRequest(org, teamSlug).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsAddSecurityManagerTeam.
     */
    private ApiCall<Void, ApiException> prepareOrgsAddSecurityManagerTeamRequest(
            final String org,
            final String teamSlug) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/security-managers/teams/{team_slug}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("409",
                                 ErrorCase.create("The organization has reached the maximum number of security manager teams.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Removes the security manager role from a team for an organization. For more information, see
     * "[Managing security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)
     * team from an organization." To use this endpoint, you must be an administrator for the
     * organization, and you must use an access token with the `admin:org` scope. GitHub Apps must
     * have the `administration` organization read-write permission to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsRemoveSecurityManagerTeam(
            final String org,
            final String teamSlug) throws ApiException, IOException {
        prepareOrgsRemoveSecurityManagerTeamRequest(org, teamSlug).execute();
    }

    /**
     * Removes the security manager role from a team for an organization. For more information, see
     * "[Managing security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)
     * team from an organization." To use this endpoint, you must be an administrator for the
     * organization, and you must use an access token with the `admin:org` scope. GitHub Apps must
     * have the `administration` organization read-write permission to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsRemoveSecurityManagerTeamAsync(
            final String org,
            final String teamSlug) {
        try { 
            return prepareOrgsRemoveSecurityManagerTeamRequest(org, teamSlug).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsRemoveSecurityManagerTeam.
     */
    private ApiCall<Void, ApiException> prepareOrgsRemoveSecurityManagerTeamRequest(
            final String org,
            final String teamSlug) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/security-managers/teams/{team_slug}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Enables or disables the specified security feature for all repositories in an organization.
     * To use this endpoint, you must be an organization owner or be member of a team with the
     * security manager role. A token with the 'write:org' scope is also required. GitHub Apps must
     * have the `organization_administration:write` permission to use this endpoint. For more
     * information, see "[Managing security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  securityProduct  Required parameter: The security feature to enable or disable.
     * @param  enablement  Required parameter: The action to take. `enable_all` means to enable the
     *         specified security feature for all repositories in the organization. `disable_all`
     *         means to disable the specified security feature for all repositories in the
     *         organization.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void orgsEnableOrDisableSecurityProductOnAllOrgRepos(
            final String org,
            final SecurityProduct11Enum securityProduct,
            final Enablement2Enum enablement) throws ApiException, IOException {
        prepareOrgsEnableOrDisableSecurityProductOnAllOrgReposRequest(org, securityProduct,
                enablement).execute();
    }

    /**
     * Enables or disables the specified security feature for all repositories in an organization.
     * To use this endpoint, you must be an organization owner or be member of a team with the
     * security manager role. A token with the 'write:org' scope is also required. GitHub Apps must
     * have the `organization_administration:write` permission to use this endpoint. For more
     * information, see "[Managing security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  securityProduct  Required parameter: The security feature to enable or disable.
     * @param  enablement  Required parameter: The action to take. `enable_all` means to enable the
     *         specified security feature for all repositories in the organization. `disable_all`
     *         means to disable the specified security feature for all repositories in the
     *         organization.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> orgsEnableOrDisableSecurityProductOnAllOrgReposAsync(
            final String org,
            final SecurityProduct11Enum securityProduct,
            final Enablement2Enum enablement) {
        try { 
            return prepareOrgsEnableOrDisableSecurityProductOnAllOrgReposRequest(org, securityProduct,
            enablement).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsEnableOrDisableSecurityProductOnAllOrgRepos.
     */
    private ApiCall<Void, ApiException> prepareOrgsEnableOrDisableSecurityProductOnAllOrgReposRequest(
            final String org,
            final SecurityProduct11Enum securityProduct,
            final Enablement2Enum enablement) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/{security_product}/{enablement}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("security_product").value((securityProduct != null) ? securityProduct.value() : null)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("enablement").value((enablement != null) ? enablement.value() : null)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("The action could not be taken due to an in progress enablement, or a policy is preventing enablement",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List organization memberships for the authenticated user.
     * @param  state  Optional parameter: Indicates the state of the memberships to return. If not
     *         specified, the API returns both active and pending memberships.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrgMembership response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<OrgMembership> orgsListMembershipsForAuthenticatedUser(
            final State1841Enum state,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareOrgsListMembershipsForAuthenticatedUserRequest(state, perPage,
                page).execute();
    }

    /**
     * List organization memberships for the authenticated user.
     * @param  state  Optional parameter: Indicates the state of the memberships to return. If not
     *         specified, the API returns both active and pending memberships.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrgMembership response from the API call
     */
    public CompletableFuture<List<OrgMembership>> orgsListMembershipsForAuthenticatedUserAsync(
            final State1841Enum state,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareOrgsListMembershipsForAuthenticatedUserRequest(state, perPage,
            page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsListMembershipsForAuthenticatedUser.
     */
    private ApiCall<List<OrgMembership>, ApiException> prepareOrgsListMembershipsForAuthenticatedUserRequest(
            final State1841Enum state,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<OrgMembership>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/user/memberships/orgs")
                        .queryParam(param -> param.key("state")
                                .value((state != null) ? state.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        OrgMembership[].class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new UserMembershipsOrgs401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new UserMembershipsOrgs403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new UserMembershipsOrgs422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get an organization membership for the authenticated user.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @return    Returns the UserMembershipsOrgsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UserMembershipsOrgsResponse orgsGetMembershipForAuthenticatedUser(
            final String org) throws ApiException, IOException {
        return prepareOrgsGetMembershipForAuthenticatedUserRequest(org).execute();
    }

    /**
     * Get an organization membership for the authenticated user.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @return    Returns the UserMembershipsOrgsResponse response from the API call
     */
    public CompletableFuture<UserMembershipsOrgsResponse> orgsGetMembershipForAuthenticatedUserAsync(
            final String org) {
        try { 
            return prepareOrgsGetMembershipForAuthenticatedUserRequest(org).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsGetMembershipForAuthenticatedUser.
     */
    private ApiCall<UserMembershipsOrgsResponse, ApiException> prepareOrgsGetMembershipForAuthenticatedUserRequest(
            final String org) throws IOException {
        return new ApiCall.Builder<UserMembershipsOrgsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/user/memberships/orgs/{org}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, UserMembershipsOrgsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new UserMembershipsOrgs403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new UserMembershipsOrgs404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update an organization membership for the authenticated user.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the UserMembershipsOrgsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UserMembershipsOrgsResponse orgsUpdateMembershipForAuthenticatedUser(
            final String org,
            final UserMembershipsOrgsRequest body) throws ApiException, IOException {
        return prepareOrgsUpdateMembershipForAuthenticatedUserRequest(org, body).execute();
    }

    /**
     * Update an organization membership for the authenticated user.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the UserMembershipsOrgsResponse response from the API call
     */
    public CompletableFuture<UserMembershipsOrgsResponse> orgsUpdateMembershipForAuthenticatedUserAsync(
            final String org,
            final UserMembershipsOrgsRequest body) {
        try { 
            return prepareOrgsUpdateMembershipForAuthenticatedUserRequest(org, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsUpdateMembershipForAuthenticatedUser.
     */
    private ApiCall<UserMembershipsOrgsResponse, ApiException> prepareOrgsUpdateMembershipForAuthenticatedUserRequest(
            final String org,
            final UserMembershipsOrgsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<UserMembershipsOrgsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/user/memberships/orgs/{org}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, UserMembershipsOrgsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new UserMembershipsOrgs403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new UserMembershipsOrgs404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new UserMembershipsOrgs422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List organizations for the authenticated user. **OAuth scope requirements** This only lists
     * organizations that your authorization allows you to operate on in some way (e.g., you can
     * list teams with `read:org` scope, you can publicize your organization membership with `user`
     * scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth
     * requests with insufficient scope receive a `403 Forbidden` response.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrganizationSimple response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<OrganizationSimple> orgsListForAuthenticatedUser(
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareOrgsListForAuthenticatedUserRequest(perPage, page).execute();
    }

    /**
     * List organizations for the authenticated user. **OAuth scope requirements** This only lists
     * organizations that your authorization allows you to operate on in some way (e.g., you can
     * list teams with `read:org` scope, you can publicize your organization membership with `user`
     * scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth
     * requests with insufficient scope receive a `403 Forbidden` response.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrganizationSimple response from the API call
     */
    public CompletableFuture<List<OrganizationSimple>> orgsListForAuthenticatedUserAsync(
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareOrgsListForAuthenticatedUserRequest(perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsListForAuthenticatedUser.
     */
    private ApiCall<List<OrganizationSimple>, ApiException> prepareOrgsListForAuthenticatedUserRequest(
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<OrganizationSimple>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/user/orgs")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        OrganizationSimple[].class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new UserOrgs401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new UserOrgs403ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List [public organization
     * memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership)
     * for the specified user. This method only lists _public_ memberships, regardless of
     * authentication. If you need to fetch all of the organization memberships (public and private)
     * for the authenticated user, use the [List organizations for the authenticated
     * user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user)
     * API instead.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrganizationSimple response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<OrganizationSimple> orgsListForUser(
            final String username,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareOrgsListForUserRequest(username, perPage, page).execute();
    }

    /**
     * List [public organization
     * memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership)
     * for the specified user. This method only lists _public_ memberships, regardless of
     * authentication. If you need to fetch all of the organization memberships (public and private)
     * for the authenticated user, use the [List organizations for the authenticated
     * user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user)
     * API instead.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrganizationSimple response from the API call
     */
    public CompletableFuture<List<OrganizationSimple>> orgsListForUserAsync(
            final String username,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareOrgsListForUserRequest(username, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for orgsListForUser.
     */
    private ApiCall<List<OrganizationSimple>, ApiException> prepareOrgsListForUserRequest(
            final String username,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<OrganizationSimple>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/users/{username}/orgs")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        OrganizationSimple[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
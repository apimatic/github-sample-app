/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.ReposDependencyGraphCompareBasehead403ErrorException;
import com.github.api.exceptions.ReposDependencyGraphCompareBasehead404ErrorException;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.DependencyGraphDiff;
import com.github.api.models.ReposDependencyGraphSnapshotsRequest;
import com.github.api.models.ReposDependencyGraphSnapshotsResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DependencyGraphController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DependencyGraphController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Gets the diff of the dependency changes between two commits of a repository, based on the
     * changes to the dependency manifests made in those commits.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  basehead  Required parameter: The base and head Git revisions to compare. The Git
     *         revisions will be resolved to commit SHAs. Named revisions will be resolved to their
     *         corresponding HEAD commits, and an appropriate merge base will be determined. This
     *         parameter expects the format `{base}...{head}`.
     * @param  name  Optional parameter: The full path, relative to the repository root, of the
     *         dependency manifest file.
     * @return    Returns the List of DependencyGraphDiff response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<DependencyGraphDiff> dependencyGraphDiffRange(
            final String owner,
            final String repo,
            final String basehead,
            final String name) throws ApiException, IOException {
        return prepareDependencyGraphDiffRangeRequest(owner, repo, basehead, name).execute();
    }

    /**
     * Gets the diff of the dependency changes between two commits of a repository, based on the
     * changes to the dependency manifests made in those commits.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  basehead  Required parameter: The base and head Git revisions to compare. The Git
     *         revisions will be resolved to commit SHAs. Named revisions will be resolved to their
     *         corresponding HEAD commits, and an appropriate merge base will be determined. This
     *         parameter expects the format `{base}...{head}`.
     * @param  name  Optional parameter: The full path, relative to the repository root, of the
     *         dependency manifest file.
     * @return    Returns the List of DependencyGraphDiff response from the API call
     */
    public CompletableFuture<List<DependencyGraphDiff>> dependencyGraphDiffRangeAsync(
            final String owner,
            final String repo,
            final String basehead,
            final String name) {
        try { 
            return prepareDependencyGraphDiffRangeRequest(owner, repo, basehead, name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for dependencyGraphDiffRange.
     */
    private ApiCall<List<DependencyGraphDiff>, ApiException> prepareDependencyGraphDiffRangeRequest(
            final String owner,
            final String repo,
            final String basehead,
            final String name) throws IOException {
        return new ApiCall.Builder<List<DependencyGraphDiff>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/dependency-graph/compare/{basehead}")
                        .queryParam(param -> param.key("name")
                                .value(name).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("basehead").value(basehead)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        DependencyGraphDiff[].class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ReposDependencyGraphCompareBasehead403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposDependencyGraphCompareBasehead404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a new snapshot of a repository's dependencies. You must authenticate using an access
     * token with the `repo` scope to use this endpoint for a repository that the requesting user
     * has access to.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposDependencyGraphSnapshotsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposDependencyGraphSnapshotsResponse dependencyGraphCreateRepositorySnapshot(
            final String owner,
            final String repo,
            final ReposDependencyGraphSnapshotsRequest body) throws ApiException, IOException {
        return prepareDependencyGraphCreateRepositorySnapshotRequest(owner, repo, body).execute();
    }

    /**
     * Create a new snapshot of a repository's dependencies. You must authenticate using an access
     * token with the `repo` scope to use this endpoint for a repository that the requesting user
     * has access to.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposDependencyGraphSnapshotsResponse response from the API call
     */
    public CompletableFuture<ReposDependencyGraphSnapshotsResponse> dependencyGraphCreateRepositorySnapshotAsync(
            final String owner,
            final String repo,
            final ReposDependencyGraphSnapshotsRequest body) {
        try { 
            return prepareDependencyGraphCreateRepositorySnapshotRequest(owner, repo, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for dependencyGraphCreateRepositorySnapshot.
     */
    private ApiCall<ReposDependencyGraphSnapshotsResponse, ApiException> prepareDependencyGraphCreateRepositorySnapshotRequest(
            final String owner,
            final String repo,
            final ReposDependencyGraphSnapshotsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposDependencyGraphSnapshotsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/dependency-graph/snapshots")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposDependencyGraphSnapshotsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.CodesOfConduct404ErrorException;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.CodeOfConduct;
import com.github.api.models.CodesOfConductResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class CodesOfConductController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public CodesOfConductController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Get all codes of conduct.
     * @return    Returns the List of CodeOfConduct response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<CodeOfConduct> codesOfConductGetAllCodesOfConduct() throws ApiException, IOException {
        return prepareCodesOfConductGetAllCodesOfConductRequest().execute();
    }

    /**
     * Get all codes of conduct.
     * @return    Returns the List of CodeOfConduct response from the API call
     */
    public CompletableFuture<List<CodeOfConduct>> codesOfConductGetAllCodesOfConductAsync() {
        try { 
            return prepareCodesOfConductGetAllCodesOfConductRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for codesOfConductGetAllCodesOfConduct.
     */
    private ApiCall<List<CodeOfConduct>, ApiException> prepareCodesOfConductGetAllCodesOfConductRequest() throws IOException {
        return new ApiCall.Builder<List<CodeOfConduct>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/codes_of_conduct")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        CodeOfConduct[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a code of conduct.
     * @param  key  Required parameter: Example:
     * @return    Returns the CodesOfConductResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CodesOfConductResponse codesOfConductGetConductCode(
            final String key) throws ApiException, IOException {
        return prepareCodesOfConductGetConductCodeRequest(key).execute();
    }

    /**
     * Get a code of conduct.
     * @param  key  Required parameter: Example:
     * @return    Returns the CodesOfConductResponse response from the API call
     */
    public CompletableFuture<CodesOfConductResponse> codesOfConductGetConductCodeAsync(
            final String key) {
        try { 
            return prepareCodesOfConductGetConductCodeRequest(key).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for codesOfConductGetConductCode.
     */
    private ApiCall<CodesOfConductResponse, ApiException> prepareCodesOfConductGetConductCodeRequest(
            final String key) throws IOException {
        return new ApiCall.Builder<CodesOfConductResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/codes_of_conduct/{key}")
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, CodesOfConductResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new CodesOfConduct404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
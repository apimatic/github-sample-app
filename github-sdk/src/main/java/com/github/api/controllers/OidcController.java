/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.OrgsActionsOidcCustomizationSub403ErrorException;
import com.github.api.exceptions.OrgsActionsOidcCustomizationSub404ErrorException;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.OrgsActionsOidcCustomizationSubRequest;
import com.github.api.models.OrgsActionsOidcCustomizationSubResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class OidcController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public OidcController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Gets the customization template for an OpenID Connect (OIDC) subject claim. You must
     * authenticate using an access token with the `read:org` scope to use this endpoint. GitHub
     * Apps must have the `organization_administration:write` permission to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @return    Returns the OrgsActionsOidcCustomizationSubResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsActionsOidcCustomizationSubResponse oidcGetOidcCustomSubTemplateForOrg(
            final String org) throws ApiException, IOException {
        return prepareOidcGetOidcCustomSubTemplateForOrgRequest(org).execute();
    }

    /**
     * Gets the customization template for an OpenID Connect (OIDC) subject claim. You must
     * authenticate using an access token with the `read:org` scope to use this endpoint. GitHub
     * Apps must have the `organization_administration:write` permission to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @return    Returns the OrgsActionsOidcCustomizationSubResponse response from the API call
     */
    public CompletableFuture<OrgsActionsOidcCustomizationSubResponse> oidcGetOidcCustomSubTemplateForOrgAsync(
            final String org) {
        try { 
            return prepareOidcGetOidcCustomSubTemplateForOrgRequest(org).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for oidcGetOidcCustomSubTemplateForOrg.
     */
    private ApiCall<OrgsActionsOidcCustomizationSubResponse, ApiException> prepareOidcGetOidcCustomSubTemplateForOrgRequest(
            final String org) throws IOException {
        return new ApiCall.Builder<OrgsActionsOidcCustomizationSubResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/actions/oidc/customization/sub")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsActionsOidcCustomizationSubResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates or updates the customization template for an OpenID Connect (OIDC) subject claim. You
     * must authenticate using an access token with the `write:org` scope to use this endpoint.
     * GitHub Apps must have the `admin:org` permission to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object oidcUpdateOidcCustomSubTemplateForOrg(
            final String org,
            final OrgsActionsOidcCustomizationSubRequest body) throws ApiException, IOException {
        return prepareOidcUpdateOidcCustomSubTemplateForOrgRequest(org, body).execute();
    }

    /**
     * Creates or updates the customization template for an OpenID Connect (OIDC) subject claim. You
     * must authenticate using an access token with the `write:org` scope to use this endpoint.
     * GitHub Apps must have the `admin:org` permission to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> oidcUpdateOidcCustomSubTemplateForOrgAsync(
            final String org,
            final OrgsActionsOidcCustomizationSubRequest body) {
        try { 
            return prepareOidcUpdateOidcCustomSubTemplateForOrgRequest(org, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for oidcUpdateOidcCustomSubTemplateForOrg.
     */
    private ApiCall<Object, ApiException> prepareOidcUpdateOidcCustomSubTemplateForOrgRequest(
            final String org,
            final OrgsActionsOidcCustomizationSubRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/actions/oidc/customization/sub")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new OrgsActionsOidcCustomizationSub403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsActionsOidcCustomizationSub404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
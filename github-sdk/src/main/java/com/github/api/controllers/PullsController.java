/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.github.api.ApiHelper;
import com.github.api.DateTimeHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.ReposPulls403ErrorException;
import com.github.api.exceptions.ReposPulls422ErrorException;
import com.github.api.exceptions.ReposPullsCommentsCommentId404ErrorException;
import com.github.api.exceptions.ReposPullsPullNumber403ErrorException;
import com.github.api.exceptions.ReposPullsPullNumber404ErrorException;
import com.github.api.exceptions.ReposPullsPullNumber422ErrorException;
import com.github.api.exceptions.ReposPullsPullNumber500ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberComments403ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberComments422ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberCommentsCommentIdReplies404ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberFiles422ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberFiles500ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberMerge403ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberMerge404ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberMerge405ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberMerge409ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberMerge422ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberRequestedReviewers403ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberRequestedReviewers422ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberReviews403ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberReviews422ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberReviewsReviewId404ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberReviewsReviewId422ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberReviewsReviewIdComments404ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberReviewsReviewIdDismissals404ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberReviewsReviewIdDismissals422ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberReviewsReviewIdEvents403ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberReviewsReviewIdEvents404ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberReviewsReviewIdEvents422ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberUpdateBranch403ErrorException;
import com.github.api.exceptions.ReposPullsPullNumberUpdateBranch422ErrorException;
import com.github.api.exceptions.ServiceUnavailable1Exception;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.Commit;
import com.github.api.models.ContentType3Enum;
import com.github.api.models.DiffEntry;
import com.github.api.models.Direction18Enum;
import com.github.api.models.Direction19Enum;
import com.github.api.models.LegacyReviewComment;
import com.github.api.models.PullRequestReview;
import com.github.api.models.PullRequestReviewComment;
import com.github.api.models.PullRequestSimple;
import com.github.api.models.ReposNotificationsResponse;
import com.github.api.models.ReposPullsCommentsCommentIdRequest;
import com.github.api.models.ReposPullsCommentsCommentIdResponse;
import com.github.api.models.ReposPullsPullNumberCommentsCommentIdRepliesRequest;
import com.github.api.models.ReposPullsPullNumberCommentsCommentIdRepliesResponse;
import com.github.api.models.ReposPullsPullNumberCommentsRequest;
import com.github.api.models.ReposPullsPullNumberCommentsResponse;
import com.github.api.models.ReposPullsPullNumberMergeResponse;
import com.github.api.models.ReposPullsPullNumberRequest;
import com.github.api.models.ReposPullsPullNumberRequestedReviewersRequest2;
import com.github.api.models.ReposPullsPullNumberRequestedReviewersResponse;
import com.github.api.models.ReposPullsPullNumberRequestedReviewersResponse1;
import com.github.api.models.ReposPullsPullNumberResponse;
import com.github.api.models.ReposPullsPullNumberReviewsRequest;
import com.github.api.models.ReposPullsPullNumberReviewsResponse;
import com.github.api.models.ReposPullsPullNumberReviewsReviewIdDismissalsRequest;
import com.github.api.models.ReposPullsPullNumberReviewsReviewIdDismissalsResponse;
import com.github.api.models.ReposPullsPullNumberReviewsReviewIdEventsRequest;
import com.github.api.models.ReposPullsPullNumberReviewsReviewIdEventsResponse;
import com.github.api.models.ReposPullsPullNumberReviewsReviewIdRequest;
import com.github.api.models.ReposPullsPullNumberReviewsReviewIdResponse;
import com.github.api.models.ReposPullsRequest;
import com.github.api.models.ReposPullsResponse;
import com.github.api.models.Sort131Enum;
import com.github.api.models.Sort14Enum;
import com.github.api.models.Sort1Enum;
import com.github.api.models.State1679Enum;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;

/**
 * This class lists all the endpoints of the groups.
 */
public final class PullsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public PullsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for
     * organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private
     * repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see
     * [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  state  Optional parameter: Either `open`, `closed`, or `all` to filter by state.
     * @param  head  Optional parameter: Filter pulls by head user or head organization and branch
     *         name in the format of `user:ref-name` or `organization:ref-name`. For example:
     *         `github:new-script-format` or `octocat:test-branch`.
     * @param  base  Optional parameter: Filter pulls by base branch name. Example: `gh-pages`.
     * @param  sort  Optional parameter: What to sort results by. `popularity` will sort by the
     *         number of comments. `long-running` will sort by date created and will limit the
     *         results to pull requests that have been open for more than a month and have had
     *         activity within the past month.
     * @param  direction  Optional parameter: The direction of the sort. Default: `desc` when sort
     *         is `created` or sort is not specified, otherwise `asc`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of PullRequestSimple response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<PullRequestSimple> pullsList(
            final String owner,
            final String repo,
            final State1679Enum state,
            final String head,
            final String base,
            final Sort131Enum sort,
            final Direction18Enum direction,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return preparePullsListRequest(owner, repo, state, head, base, sort, direction, perPage,
                page).execute();
    }

    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for
     * organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private
     * repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see
     * [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  state  Optional parameter: Either `open`, `closed`, or `all` to filter by state.
     * @param  head  Optional parameter: Filter pulls by head user or head organization and branch
     *         name in the format of `user:ref-name` or `organization:ref-name`. For example:
     *         `github:new-script-format` or `octocat:test-branch`.
     * @param  base  Optional parameter: Filter pulls by base branch name. Example: `gh-pages`.
     * @param  sort  Optional parameter: What to sort results by. `popularity` will sort by the
     *         number of comments. `long-running` will sort by date created and will limit the
     *         results to pull requests that have been open for more than a month and have had
     *         activity within the past month.
     * @param  direction  Optional parameter: The direction of the sort. Default: `desc` when sort
     *         is `created` or sort is not specified, otherwise `asc`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of PullRequestSimple response from the API call
     */
    public CompletableFuture<List<PullRequestSimple>> pullsListAsync(
            final String owner,
            final String repo,
            final State1679Enum state,
            final String head,
            final String base,
            final Sort131Enum sort,
            final Direction18Enum direction,
            final Integer perPage,
            final Integer page) {
        try { 
            return preparePullsListRequest(owner, repo, state, head, base, sort, direction, perPage,
            page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsList.
     */
    private ApiCall<List<PullRequestSimple>, ApiException> preparePullsListRequest(
            final String owner,
            final String repo,
            final State1679Enum state,
            final String head,
            final String base,
            final Sort131Enum sort,
            final Direction18Enum direction,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<PullRequestSimple>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls")
                        .queryParam(param -> param.key("state")
                                .value((state != null) ? state.value() : null).isRequired(false))
                        .queryParam(param -> param.key("head")
                                .value(head).isRequired(false))
                        .queryParam(param -> param.key("base")
                                .value(base).isRequired(false))
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .queryParam(param -> param.key("direction")
                                .value((direction != null) ? direction.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        PullRequestSimple[].class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposPulls422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for
     * organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private
     * repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see
     * [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. To open or update a pull request in a public repository, you must
     * have write access to the head or the source branch. For organization-owned repositories, you
     * must be a member of the organization that owns the repository to open or update a pull
     * request. This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)"
     * for details.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsResponse pullsCreate(
            final String owner,
            final String repo,
            final ReposPullsRequest body) throws ApiException, IOException {
        return preparePullsCreateRequest(owner, repo, body).execute();
    }

    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for
     * organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private
     * repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see
     * [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. To open or update a pull request in a public repository, you must
     * have write access to the head or the source branch. For organization-owned repositories, you
     * must be a member of the organization that owns the repository to open or update a pull
     * request. This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)"
     * for details.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsResponse response from the API call
     */
    public CompletableFuture<ReposPullsResponse> pullsCreateAsync(
            final String owner,
            final String repo,
            final ReposPullsRequest body) {
        try { 
            return preparePullsCreateRequest(owner, repo, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsCreate.
     */
    private ApiCall<ReposPullsResponse, ApiException> preparePullsCreateRequest(
            final String owner,
            final String repo,
            final ReposPullsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposPullsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ReposPulls403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposPulls422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists review comments for all pull requests in a repository. By default, review comments are
     * in ascending order by ID.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  sort  Optional parameter: Example:
     * @param  direction  Optional parameter: The direction to sort results. Ignored without `sort`
     *         parameter.
     * @param  since  Optional parameter: Only show notifications updated after the given time. This
     *         is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
     *         `YYYY-MM-DDTHH:MM:SSZ`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of PullRequestReviewComment response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<PullRequestReviewComment> pullsListReviewCommentsForRepo(
            final String owner,
            final String repo,
            final Sort14Enum sort,
            final Direction19Enum direction,
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return preparePullsListReviewCommentsForRepoRequest(owner, repo, sort, direction, since,
                perPage, page).execute();
    }

    /**
     * Lists review comments for all pull requests in a repository. By default, review comments are
     * in ascending order by ID.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  sort  Optional parameter: Example:
     * @param  direction  Optional parameter: The direction to sort results. Ignored without `sort`
     *         parameter.
     * @param  since  Optional parameter: Only show notifications updated after the given time. This
     *         is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
     *         `YYYY-MM-DDTHH:MM:SSZ`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of PullRequestReviewComment response from the API call
     */
    public CompletableFuture<List<PullRequestReviewComment>> pullsListReviewCommentsForRepoAsync(
            final String owner,
            final String repo,
            final Sort14Enum sort,
            final Direction19Enum direction,
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) {
        try { 
            return preparePullsListReviewCommentsForRepoRequest(owner, repo, sort, direction, since,
            perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsListReviewCommentsForRepo.
     */
    private ApiCall<List<PullRequestReviewComment>, ApiException> preparePullsListReviewCommentsForRepoRequest(
            final String owner,
            final String repo,
            final Sort14Enum sort,
            final Direction19Enum direction,
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<PullRequestReviewComment>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/comments")
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .queryParam(param -> param.key("direction")
                                .value((direction != null) ? direction.value() : null).isRequired(false))
                        .queryParam(param -> param.key("since")
                                .value(DateTimeHelper.toRfc8601DateTime(since)).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        PullRequestReviewComment[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Provides details for a review comment.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @return    Returns the ReposPullsCommentsCommentIdResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsCommentsCommentIdResponse pullsGetReviewComment(
            final String owner,
            final String repo,
            final int commentId) throws ApiException, IOException {
        return preparePullsGetReviewCommentRequest(owner, repo, commentId).execute();
    }

    /**
     * Provides details for a review comment.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @return    Returns the ReposPullsCommentsCommentIdResponse response from the API call
     */
    public CompletableFuture<ReposPullsCommentsCommentIdResponse> pullsGetReviewCommentAsync(
            final String owner,
            final String repo,
            final int commentId) {
        try { 
            return preparePullsGetReviewCommentRequest(owner, repo, commentId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsGetReviewComment.
     */
    private ApiCall<ReposPullsCommentsCommentIdResponse, ApiException> preparePullsGetReviewCommentRequest(
            final String owner,
            final String repo,
            final int commentId) throws IOException {
        return new ApiCall.Builder<ReposPullsCommentsCommentIdResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/comments/{comment_id}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsCommentsCommentIdResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposPullsCommentsCommentId404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Enables you to edit a review comment.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsCommentsCommentIdResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsCommentsCommentIdResponse pullsUpdateReviewComment(
            final String owner,
            final String repo,
            final int commentId,
            final ReposPullsCommentsCommentIdRequest body) throws ApiException, IOException {
        return preparePullsUpdateReviewCommentRequest(owner, repo, commentId, body).execute();
    }

    /**
     * Enables you to edit a review comment.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsCommentsCommentIdResponse response from the API call
     */
    public CompletableFuture<ReposPullsCommentsCommentIdResponse> pullsUpdateReviewCommentAsync(
            final String owner,
            final String repo,
            final int commentId,
            final ReposPullsCommentsCommentIdRequest body) {
        try { 
            return preparePullsUpdateReviewCommentRequest(owner, repo, commentId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsUpdateReviewComment.
     */
    private ApiCall<ReposPullsCommentsCommentIdResponse, ApiException> preparePullsUpdateReviewCommentRequest(
            final String owner,
            final String repo,
            final int commentId,
            final ReposPullsCommentsCommentIdRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposPullsCommentsCommentIdResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/comments/{comment_id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsCommentsCommentIdResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deletes a review comment.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void pullsDeleteReviewComment(
            final String owner,
            final String repo,
            final int commentId) throws ApiException, IOException {
        preparePullsDeleteReviewCommentRequest(owner, repo, commentId).execute();
    }

    /**
     * Deletes a review comment.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> pullsDeleteReviewCommentAsync(
            final String owner,
            final String repo,
            final int commentId) {
        try { 
            return preparePullsDeleteReviewCommentRequest(owner, repo, commentId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsDeleteReviewComment.
     */
    private ApiCall<Void, ApiException> preparePullsDeleteReviewCommentRequest(
            final String owner,
            final String repo,
            final int commentId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/comments/{comment_id}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposPullsCommentsCommentId404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for
     * organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private
     * repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see
     * [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. Lists details of a pull request by providing its number. When you
     * get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or
     * [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request,
     * GitHub creates a merge commit to test whether the pull request can be automatically merged
     * into the base branch. This test commit is not added to the base branch or the head branch.
     * You can review the status of the test commit using the `mergeable` key. For more information,
     * see "[Checking mergeability of pull
     * requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
     * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is
     * `null`, then GitHub has started a background job to compute the mergeability. After giving
     * the job time to complete, resubmit the request. When the job finishes, you will see a
     * non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`,
     * then `merge_commit_sha` will be the SHA of the _test_ merge commit. The value of the
     * `merge_commit_sha` attribute changes depending on the state of the pull request. Before
     * merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge
     * commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on
     * how you merged the pull request: * If merged as a [merge
     * commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha`
     * represents the SHA of the merge commit. * If merged via a
     * [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits),
     * `merge_commit_sha` represents the SHA of the squashed commit on the base branch. * If
     * [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits),
     * `merge_commit_sha` represents the commit that the base branch was updated to. Pass the
     * appropriate [media
     * type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests)
     * to fetch diff and patch formats.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @return    Returns the ReposPullsPullNumberResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsPullNumberResponse pullsGet(
            final String owner,
            final String repo,
            final int pullNumber) throws ApiException, IOException {
        return preparePullsGetRequest(owner, repo, pullNumber).execute();
    }

    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for
     * organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private
     * repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see
     * [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. Lists details of a pull request by providing its number. When you
     * get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or
     * [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request,
     * GitHub creates a merge commit to test whether the pull request can be automatically merged
     * into the base branch. This test commit is not added to the base branch or the head branch.
     * You can review the status of the test commit using the `mergeable` key. For more information,
     * see "[Checking mergeability of pull
     * requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
     * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is
     * `null`, then GitHub has started a background job to compute the mergeability. After giving
     * the job time to complete, resubmit the request. When the job finishes, you will see a
     * non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`,
     * then `merge_commit_sha` will be the SHA of the _test_ merge commit. The value of the
     * `merge_commit_sha` attribute changes depending on the state of the pull request. Before
     * merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge
     * commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on
     * how you merged the pull request: * If merged as a [merge
     * commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha`
     * represents the SHA of the merge commit. * If merged via a
     * [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits),
     * `merge_commit_sha` represents the SHA of the squashed commit on the base branch. * If
     * [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits),
     * `merge_commit_sha` represents the commit that the base branch was updated to. Pass the
     * appropriate [media
     * type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests)
     * to fetch diff and patch formats.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @return    Returns the ReposPullsPullNumberResponse response from the API call
     */
    public CompletableFuture<ReposPullsPullNumberResponse> pullsGetAsync(
            final String owner,
            final String repo,
            final int pullNumber) {
        try { 
            return preparePullsGetRequest(owner, repo, pullNumber).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsGet.
     */
    private ApiCall<ReposPullsPullNumberResponse, ApiException> preparePullsGetRequest(
            final String owner,
            final String repo,
            final int pullNumber) throws IOException {
        return new ApiCall.Builder<ReposPullsPullNumberResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsPullNumberResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposPullsPullNumber404ErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.create("Internal Error",
                                (reason, context) -> new ReposPullsPullNumber500ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for
     * organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private
     * repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see
     * [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. To open or update a pull request in a public repository, you must
     * have write access to the head or the source branch. For organization-owned repositories, you
     * must be a member of the organization that owns the repository to open or update a pull
     * request.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  body  Optional parameter: Example:
     * @return    Returns the ReposPullsPullNumberResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsPullNumberResponse pullsUpdate(
            final String owner,
            final String repo,
            final int pullNumber,
            final ReposPullsPullNumberRequest body) throws ApiException, IOException {
        return preparePullsUpdateRequest(owner, repo, pullNumber, body).execute();
    }

    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for
     * organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private
     * repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see
     * [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. To open or update a pull request in a public repository, you must
     * have write access to the head or the source branch. For organization-owned repositories, you
     * must be a member of the organization that owns the repository to open or update a pull
     * request.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  body  Optional parameter: Example:
     * @return    Returns the ReposPullsPullNumberResponse response from the API call
     */
    public CompletableFuture<ReposPullsPullNumberResponse> pullsUpdateAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final ReposPullsPullNumberRequest body) {
        try { 
            return preparePullsUpdateRequest(owner, repo, pullNumber, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsUpdate.
     */
    private ApiCall<ReposPullsPullNumberResponse, ApiException> preparePullsUpdateRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final ReposPullsPullNumberRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposPullsPullNumberResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsPullNumberResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ReposPullsPullNumber403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposPullsPullNumber422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists all review comments for a pull request. By default, review comments are in ascending
     * order by ID.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  sort  Optional parameter: The property to sort the results by. `created` means when
     *         the repository was starred. `updated` means when the repository was last pushed to.
     * @param  direction  Optional parameter: The direction to sort results. Ignored without `sort`
     *         parameter.
     * @param  since  Optional parameter: Only show notifications updated after the given time. This
     *         is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
     *         `YYYY-MM-DDTHH:MM:SSZ`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of PullRequestReviewComment response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<PullRequestReviewComment> pullsListReviewComments(
            final String owner,
            final String repo,
            final int pullNumber,
            final Sort1Enum sort,
            final Direction19Enum direction,
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return preparePullsListReviewCommentsRequest(owner, repo, pullNumber, sort, direction,
                since, perPage, page).execute();
    }

    /**
     * Lists all review comments for a pull request. By default, review comments are in ascending
     * order by ID.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  sort  Optional parameter: The property to sort the results by. `created` means when
     *         the repository was starred. `updated` means when the repository was last pushed to.
     * @param  direction  Optional parameter: The direction to sort results. Ignored without `sort`
     *         parameter.
     * @param  since  Optional parameter: Only show notifications updated after the given time. This
     *         is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
     *         `YYYY-MM-DDTHH:MM:SSZ`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of PullRequestReviewComment response from the API call
     */
    public CompletableFuture<List<PullRequestReviewComment>> pullsListReviewCommentsAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final Sort1Enum sort,
            final Direction19Enum direction,
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) {
        try { 
            return preparePullsListReviewCommentsRequest(owner, repo, pullNumber, sort, direction, since,
            perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsListReviewComments.
     */
    private ApiCall<List<PullRequestReviewComment>, ApiException> preparePullsListReviewCommentsRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final Sort1Enum sort,
            final Direction19Enum direction,
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<PullRequestReviewComment>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/comments")
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .queryParam(param -> param.key("direction")
                                .value((direction != null) ? direction.value() : null).isRequired(false))
                        .queryParam(param -> param.key("since")
                                .value(DateTimeHelper.toRfc8601DateTime(since)).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        PullRequestReviewComment[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a review comment in the pull request diff. To add a regular comment to a pull request
     * timeline, see "[Create an issue
     * comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We
     * recommend creating a review comment using `line`, `side`, and optionally `start_line` and
     * `start_side` if your comment applies to more than one line in the pull request diff. The
     * `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`,
     * and `start_side` parameters are not required. **Note:** The position value equals the number
     * of lines down from the first "@@" hunk header in the file you want to add a comment. The line
     * just below the "@@" line is position 1, the next line is position 2, and so on. The position
     * in the diff continues to increase through lines of whitespace and additional hunks until the
     * beginning of a new file. This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsPullNumberCommentsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsPullNumberCommentsResponse pullsCreateReviewComment(
            final String owner,
            final String repo,
            final int pullNumber,
            final ReposPullsPullNumberCommentsRequest body) throws ApiException, IOException {
        return preparePullsCreateReviewCommentRequest(owner, repo, pullNumber, body).execute();
    }

    /**
     * Creates a review comment in the pull request diff. To add a regular comment to a pull request
     * timeline, see "[Create an issue
     * comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We
     * recommend creating a review comment using `line`, `side`, and optionally `start_line` and
     * `start_side` if your comment applies to more than one line in the pull request diff. The
     * `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`,
     * and `start_side` parameters are not required. **Note:** The position value equals the number
     * of lines down from the first "@@" hunk header in the file you want to add a comment. The line
     * just below the "@@" line is position 1, the next line is position 2, and so on. The position
     * in the diff continues to increase through lines of whitespace and additional hunks until the
     * beginning of a new file. This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsPullNumberCommentsResponse response from the API call
     */
    public CompletableFuture<ReposPullsPullNumberCommentsResponse> pullsCreateReviewCommentAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final ReposPullsPullNumberCommentsRequest body) {
        try { 
            return preparePullsCreateReviewCommentRequest(owner, repo, pullNumber, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsCreateReviewComment.
     */
    private ApiCall<ReposPullsPullNumberCommentsResponse, ApiException> preparePullsCreateReviewCommentRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final ReposPullsPullNumberCommentsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposPullsPullNumberCommentsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/comments")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsPullNumberCommentsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ReposPullsPullNumberComments403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposPullsPullNumberComments422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID
     * of the review comment you are replying to. This must be the ID of a _top-level review
     * comment_, not a reply to that comment. Replies to replies are not supported. This endpoint
     * triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsPullNumberCommentsCommentIdRepliesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsPullNumberCommentsCommentIdRepliesResponse pullsCreateReplyForReviewComment(
            final String owner,
            final String repo,
            final int pullNumber,
            final int commentId,
            final ReposPullsPullNumberCommentsCommentIdRepliesRequest body) throws ApiException, IOException {
        return preparePullsCreateReplyForReviewCommentRequest(owner, repo, pullNumber, commentId,
                body).execute();
    }

    /**
     * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID
     * of the review comment you are replying to. This must be the ID of a _top-level review
     * comment_, not a reply to that comment. Replies to replies are not supported. This endpoint
     * triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsPullNumberCommentsCommentIdRepliesResponse response from the API call
     */
    public CompletableFuture<ReposPullsPullNumberCommentsCommentIdRepliesResponse> pullsCreateReplyForReviewCommentAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final int commentId,
            final ReposPullsPullNumberCommentsCommentIdRepliesRequest body) {
        try { 
            return preparePullsCreateReplyForReviewCommentRequest(owner, repo, pullNumber, commentId,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsCreateReplyForReviewComment.
     */
    private ApiCall<ReposPullsPullNumberCommentsCommentIdRepliesResponse, ApiException> preparePullsCreateReplyForReviewCommentRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final int commentId,
            final ReposPullsPullNumberCommentsCommentIdRepliesRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposPullsPullNumberCommentsCommentIdRepliesResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsPullNumberCommentsCommentIdRepliesResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposPullsPullNumberCommentsCommentIdReplies404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull
     * requests with more than 250 commits, use the [List
     * commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Commit response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Commit> pullsListCommits(
            final String owner,
            final String repo,
            final int pullNumber,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return preparePullsListCommitsRequest(owner, repo, pullNumber, perPage, page).execute();
    }

    /**
     * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull
     * requests with more than 250 commits, use the [List
     * commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Commit response from the API call
     */
    public CompletableFuture<List<Commit>> pullsListCommitsAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final Integer perPage,
            final Integer page) {
        try { 
            return preparePullsListCommitsRequest(owner, repo, pullNumber, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsListCommits.
     */
    private ApiCall<List<Commit>, ApiException> preparePullsListCommitsRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Commit>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/commits")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Commit[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files
     * per page by default.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of DiffEntry response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<DiffEntry> pullsListFiles(
            final String owner,
            final String repo,
            final int pullNumber,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return preparePullsListFilesRequest(owner, repo, pullNumber, perPage, page).execute();
    }

    /**
     * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files
     * per page by default.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of DiffEntry response from the API call
     */
    public CompletableFuture<List<DiffEntry>> pullsListFilesAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final Integer perPage,
            final Integer page) {
        try { 
            return preparePullsListFilesRequest(owner, repo, pullNumber, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsListFiles.
     */
    private ApiCall<List<DiffEntry>, ApiException> preparePullsListFilesRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<DiffEntry>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/files")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        DiffEntry[].class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposPullsPullNumberFiles422ErrorException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.create("Internal Error",
                                (reason, context) -> new ReposPullsPullNumberFiles500ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Check if a pull request has been merged.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void pullsCheckIfMerged(
            final String owner,
            final String repo,
            final int pullNumber) throws ApiException, IOException {
        preparePullsCheckIfMergedRequest(owner, repo, pullNumber).execute();
    }

    /**
     * Check if a pull request has been merged.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> pullsCheckIfMergedAsync(
            final String owner,
            final String repo,
            final int pullNumber) {
        try { 
            return preparePullsCheckIfMergedRequest(owner, repo, pullNumber).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsCheckIfMerged.
     */
    private ApiCall<Void, ApiException> preparePullsCheckIfMergedRequest(
            final String owner,
            final String repo,
            final int pullNumber) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/merge")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found if pull request has not been merged",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  body  Optional parameter: Example:
     * @return    Returns the ReposPullsPullNumberMergeResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsPullNumberMergeResponse pullsMerge(
            final String owner,
            final String repo,
            final int pullNumber,
            final Object body) throws ApiException, IOException {
        return preparePullsMergeRequest(owner, repo, pullNumber, body).execute();
    }

    /**
     * This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  body  Optional parameter: Example:
     * @return    Returns the ReposPullsPullNumberMergeResponse response from the API call
     */
    public CompletableFuture<ReposPullsPullNumberMergeResponse> pullsMergeAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final Object body) {
        try { 
            return preparePullsMergeRequest(owner, repo, pullNumber, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsMerge.
     */
    private ApiCall<ReposPullsPullNumberMergeResponse, ApiException> preparePullsMergeRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final Object body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposPullsPullNumberMergeResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/merge")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsPullNumberMergeResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ReposPullsPullNumberMerge403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposPullsPullNumberMerge404ErrorException(reason, context)))
                        .localErrorCase("405",
                                 ErrorCase.create("Method Not Allowed if merge cannot be performed",
                                (reason, context) -> new ReposPullsPullNumberMerge405ErrorException(reason, context)))
                        .localErrorCase("409",
                                 ErrorCase.create("Conflict if sha was provided and pull request head did not match",
                                (reason, context) -> new ReposPullsPullNumberMerge409ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposPullsPullNumberMerge422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets the users or teams whose review is requested for a pull request. Once a requested
     * reviewer submits a review, they are no longer considered a requested reviewer. Their review
     * will instead be returned by the [List reviews for a pull
     * request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request)
     * operation.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @return    Returns the ReposPullsPullNumberRequestedReviewersResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsPullNumberRequestedReviewersResponse pullsListRequestedReviewers(
            final String owner,
            final String repo,
            final int pullNumber) throws ApiException, IOException {
        return preparePullsListRequestedReviewersRequest(owner, repo, pullNumber).execute();
    }

    /**
     * Gets the users or teams whose review is requested for a pull request. Once a requested
     * reviewer submits a review, they are no longer considered a requested reviewer. Their review
     * will instead be returned by the [List reviews for a pull
     * request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request)
     * operation.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @return    Returns the ReposPullsPullNumberRequestedReviewersResponse response from the API call
     */
    public CompletableFuture<ReposPullsPullNumberRequestedReviewersResponse> pullsListRequestedReviewersAsync(
            final String owner,
            final String repo,
            final int pullNumber) {
        try { 
            return preparePullsListRequestedReviewersRequest(owner, repo, pullNumber).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsListRequestedReviewers.
     */
    private ApiCall<ReposPullsPullNumberRequestedReviewersResponse, ApiException> preparePullsListRequestedReviewersRequest(
            final String owner,
            final String repo,
            final int pullNumber) throws IOException {
        return new ApiCall.Builder<ReposPullsPullNumberRequestedReviewersResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsPullNumberRequestedReviewersResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  body  Optional parameter: Example:
     * @return    Returns the ReposPullsPullNumberRequestedReviewersResponse1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsPullNumberRequestedReviewersResponse1 pullsRequestReviewers(
            final String owner,
            final String repo,
            final int pullNumber,
            final ReposPullsPullNumberRequestedReviewersRequest2 body) throws ApiException, IOException {
        return preparePullsRequestReviewersRequest(owner, repo, pullNumber, body).execute();
    }

    /**
     * This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  body  Optional parameter: Example:
     * @return    Returns the ReposPullsPullNumberRequestedReviewersResponse1 response from the API call
     */
    public CompletableFuture<ReposPullsPullNumberRequestedReviewersResponse1> pullsRequestReviewersAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final ReposPullsPullNumberRequestedReviewersRequest2 body) {
        try { 
            return preparePullsRequestReviewersRequest(owner, repo, pullNumber, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsRequestReviewers.
     */
    private ApiCall<ReposPullsPullNumberRequestedReviewersResponse1, ApiException> preparePullsRequestReviewersRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final ReposPullsPullNumberRequestedReviewersRequest2 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposPullsPullNumberRequestedReviewersResponse1, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serializeTypeCombinator(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsPullNumberRequestedReviewersResponse1.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ReposPullsPullNumberRequestedReviewers403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Unprocessable Entity if user is not a collaborator",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Remove requested reviewers from a pull request.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  contentType  Required parameter: Example:
     * @return    Returns the ReposPullsPullNumberRequestedReviewersResponse1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsPullNumberRequestedReviewersResponse1 pullsRemoveRequestedReviewers(
            final String owner,
            final String repo,
            final int pullNumber,
            final ContentType3Enum contentType) throws ApiException, IOException {
        return preparePullsRemoveRequestedReviewersRequest(owner, repo, pullNumber,
                contentType).execute();
    }

    /**
     * Remove requested reviewers from a pull request.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  contentType  Required parameter: Example:
     * @return    Returns the ReposPullsPullNumberRequestedReviewersResponse1 response from the API call
     */
    public CompletableFuture<ReposPullsPullNumberRequestedReviewersResponse1> pullsRemoveRequestedReviewersAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final ContentType3Enum contentType) {
        try { 
            return preparePullsRemoveRequestedReviewersRequest(owner, repo, pullNumber,
            contentType).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsRemoveRequestedReviewers.
     */
    private ApiCall<ReposPullsPullNumberRequestedReviewersResponse1, ApiException> preparePullsRemoveRequestedReviewersRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final ContentType3Enum contentType) throws IOException {
        return new ApiCall.Builder<ReposPullsPullNumberRequestedReviewersResponse1, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value((contentType != null) ? contentType.value() : null).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsPullNumberRequestedReviewersResponse1.class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposPullsPullNumberRequestedReviewers422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * The list of reviews returns in chronological order.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of PullRequestReview response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<PullRequestReview> pullsListReviews(
            final String owner,
            final String repo,
            final int pullNumber,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return preparePullsListReviewsRequest(owner, repo, pullNumber, perPage, page).execute();
    }

    /**
     * The list of reviews returns in chronological order.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of PullRequestReview response from the API call
     */
    public CompletableFuture<List<PullRequestReview>> pullsListReviewsAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final Integer perPage,
            final Integer page) {
        try { 
            return preparePullsListReviewsRequest(owner, repo, pullNumber, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsListReviews.
     */
    private ApiCall<List<PullRequestReview>, ApiException> preparePullsListReviewsRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<PullRequestReview>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/reviews")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        PullRequestReview[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details. Pull request reviews created in the `PENDING` state are not submitted and
     * therefore do not include the `submitted_at` property in the response. To create a pending
     * review for a pull request, leave the `event` parameter blank. For more information about
     * submitting a `PENDING` review, see "[Submit a review for a pull
     * request](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request)." **Note:**
     * To comment on a specific line in a file, you need to first determine the _position_ of that
     * line in the diff. The GitHub REST API offers the `application/vnd.github.v3.diff` [media
     * type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests).
     * To see a pull request diff, add this media type to the `Accept` header of a call to the
     * [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request)
     * endpoint. The `position` value equals the number of lines down from the first "@@" hunk
     * header in the file you want to add a comment. The line just below the "@@" line is position
     * 1, the next line is position 2, and so on. The position in the diff continues to increase
     * through lines of whitespace and additional hunks until the beginning of a new file.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  body  Optional parameter: Example:
     * @return    Returns the ReposPullsPullNumberReviewsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsPullNumberReviewsResponse pullsCreateReview(
            final String owner,
            final String repo,
            final int pullNumber,
            final ReposPullsPullNumberReviewsRequest body) throws ApiException, IOException {
        return preparePullsCreateReviewRequest(owner, repo, pullNumber, body).execute();
    }

    /**
     * This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details. Pull request reviews created in the `PENDING` state are not submitted and
     * therefore do not include the `submitted_at` property in the response. To create a pending
     * review for a pull request, leave the `event` parameter blank. For more information about
     * submitting a `PENDING` review, see "[Submit a review for a pull
     * request](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request)." **Note:**
     * To comment on a specific line in a file, you need to first determine the _position_ of that
     * line in the diff. The GitHub REST API offers the `application/vnd.github.v3.diff` [media
     * type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests).
     * To see a pull request diff, add this media type to the `Accept` header of a call to the
     * [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request)
     * endpoint. The `position` value equals the number of lines down from the first "@@" hunk
     * header in the file you want to add a comment. The line just below the "@@" line is position
     * 1, the next line is position 2, and so on. The position in the diff continues to increase
     * through lines of whitespace and additional hunks until the beginning of a new file.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  body  Optional parameter: Example:
     * @return    Returns the ReposPullsPullNumberReviewsResponse response from the API call
     */
    public CompletableFuture<ReposPullsPullNumberReviewsResponse> pullsCreateReviewAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final ReposPullsPullNumberReviewsRequest body) {
        try { 
            return preparePullsCreateReviewRequest(owner, repo, pullNumber, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsCreateReview.
     */
    private ApiCall<ReposPullsPullNumberReviewsResponse, ApiException> preparePullsCreateReviewRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final ReposPullsPullNumberReviewsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposPullsPullNumberReviewsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/reviews")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsPullNumberReviewsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ReposPullsPullNumberReviews403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposPullsPullNumberReviews422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a review for a pull request.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  reviewId  Required parameter: The unique identifier of the review.
     * @return    Returns the ReposPullsPullNumberReviewsReviewIdResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsPullNumberReviewsReviewIdResponse pullsGetReview(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId) throws ApiException, IOException {
        return preparePullsGetReviewRequest(owner, repo, pullNumber, reviewId).execute();
    }

    /**
     * Get a review for a pull request.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  reviewId  Required parameter: The unique identifier of the review.
     * @return    Returns the ReposPullsPullNumberReviewsReviewIdResponse response from the API call
     */
    public CompletableFuture<ReposPullsPullNumberReviewsReviewIdResponse> pullsGetReviewAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId) {
        try { 
            return preparePullsGetReviewRequest(owner, repo, pullNumber, reviewId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsGetReview.
     */
    private ApiCall<ReposPullsPullNumberReviewsReviewIdResponse, ApiException> preparePullsGetReviewRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId) throws IOException {
        return new ApiCall.Builder<ReposPullsPullNumberReviewsReviewIdResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("review_id").value(reviewId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsPullNumberReviewsReviewIdResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposPullsPullNumberReviewsReviewId404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update the review summary comment with new text.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  reviewId  Required parameter: The unique identifier of the review.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsPullNumberReviewsReviewIdResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsPullNumberReviewsReviewIdResponse pullsUpdateReview(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId,
            final ReposPullsPullNumberReviewsReviewIdRequest body) throws ApiException, IOException {
        return preparePullsUpdateReviewRequest(owner, repo, pullNumber, reviewId, body).execute();
    }

    /**
     * Update the review summary comment with new text.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  reviewId  Required parameter: The unique identifier of the review.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsPullNumberReviewsReviewIdResponse response from the API call
     */
    public CompletableFuture<ReposPullsPullNumberReviewsReviewIdResponse> pullsUpdateReviewAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId,
            final ReposPullsPullNumberReviewsReviewIdRequest body) {
        try { 
            return preparePullsUpdateReviewRequest(owner, repo, pullNumber, reviewId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsUpdateReview.
     */
    private ApiCall<ReposPullsPullNumberReviewsReviewIdResponse, ApiException> preparePullsUpdateReviewRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId,
            final ReposPullsPullNumberReviewsReviewIdRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposPullsPullNumberReviewsReviewIdResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("review_id").value(reviewId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsPullNumberReviewsReviewIdResponse.class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposPullsPullNumberReviewsReviewId422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete a pending review for a pull request.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  reviewId  Required parameter: The unique identifier of the review.
     * @return    Returns the ReposPullsPullNumberReviewsReviewIdResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsPullNumberReviewsReviewIdResponse pullsDeletePendingReview(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId) throws ApiException, IOException {
        return preparePullsDeletePendingReviewRequest(owner, repo, pullNumber, reviewId).execute();
    }

    /**
     * Delete a pending review for a pull request.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  reviewId  Required parameter: The unique identifier of the review.
     * @return    Returns the ReposPullsPullNumberReviewsReviewIdResponse response from the API call
     */
    public CompletableFuture<ReposPullsPullNumberReviewsReviewIdResponse> pullsDeletePendingReviewAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId) {
        try { 
            return preparePullsDeletePendingReviewRequest(owner, repo, pullNumber, reviewId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsDeletePendingReview.
     */
    private ApiCall<ReposPullsPullNumberReviewsReviewIdResponse, ApiException> preparePullsDeletePendingReviewRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId) throws IOException {
        return new ApiCall.Builder<ReposPullsPullNumberReviewsReviewIdResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("review_id").value(reviewId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsPullNumberReviewsReviewIdResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposPullsPullNumberReviewsReviewId404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposPullsPullNumberReviewsReviewId422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List comments for a specific pull request review.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  reviewId  Required parameter: The unique identifier of the review.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of LegacyReviewComment response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<LegacyReviewComment> pullsListCommentsForReview(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return preparePullsListCommentsForReviewRequest(owner, repo, pullNumber, reviewId, perPage,
                page).execute();
    }

    /**
     * List comments for a specific pull request review.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  reviewId  Required parameter: The unique identifier of the review.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of LegacyReviewComment response from the API call
     */
    public CompletableFuture<List<LegacyReviewComment>> pullsListCommentsForReviewAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId,
            final Integer perPage,
            final Integer page) {
        try { 
            return preparePullsListCommentsForReviewRequest(owner, repo, pullNumber, reviewId, perPage,
            page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsListCommentsForReview.
     */
    private ApiCall<List<LegacyReviewComment>, ApiException> preparePullsListCommentsForReviewRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<LegacyReviewComment>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("review_id").value(reviewId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        LegacyReviewComment[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposPullsPullNumberReviewsReviewIdComments404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note:** To dismiss a pull request review on a [protected
     * branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository
     * administrator or be included in the list of people or teams who can dismiss pull request
     * reviews.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  reviewId  Required parameter: The unique identifier of the review.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsPullNumberReviewsReviewIdDismissalsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsPullNumberReviewsReviewIdDismissalsResponse pullsDismissReview(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId,
            final ReposPullsPullNumberReviewsReviewIdDismissalsRequest body) throws ApiException, IOException {
        return preparePullsDismissReviewRequest(owner, repo, pullNumber, reviewId, body).execute();
    }

    /**
     * **Note:** To dismiss a pull request review on a [protected
     * branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository
     * administrator or be included in the list of people or teams who can dismiss pull request
     * reviews.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  reviewId  Required parameter: The unique identifier of the review.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsPullNumberReviewsReviewIdDismissalsResponse response from the API call
     */
    public CompletableFuture<ReposPullsPullNumberReviewsReviewIdDismissalsResponse> pullsDismissReviewAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId,
            final ReposPullsPullNumberReviewsReviewIdDismissalsRequest body) {
        try { 
            return preparePullsDismissReviewRequest(owner, repo, pullNumber, reviewId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsDismissReview.
     */
    private ApiCall<ReposPullsPullNumberReviewsReviewIdDismissalsResponse, ApiException> preparePullsDismissReviewRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId,
            final ReposPullsPullNumberReviewsReviewIdDismissalsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposPullsPullNumberReviewsReviewIdDismissalsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("review_id").value(reviewId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsPullNumberReviewsReviewIdDismissalsResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposPullsPullNumberReviewsReviewIdDismissals404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposPullsPullNumberReviewsReviewIdDismissals422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Submits a pending review for a pull request. For more information about creating a pending
     * review for a pull request, see "[Create a review for a pull
     * request](https://docs.github.com/rest/pulls#create-a-review-for-a-pull-request).".
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  reviewId  Required parameter: The unique identifier of the review.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsPullNumberReviewsReviewIdEventsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposPullsPullNumberReviewsReviewIdEventsResponse pullsSubmitReview(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId,
            final ReposPullsPullNumberReviewsReviewIdEventsRequest body) throws ApiException, IOException {
        return preparePullsSubmitReviewRequest(owner, repo, pullNumber, reviewId, body).execute();
    }

    /**
     * Submits a pending review for a pull request. For more information about creating a pending
     * review for a pull request, see "[Create a review for a pull
     * request](https://docs.github.com/rest/pulls#create-a-review-for-a-pull-request).".
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  reviewId  Required parameter: The unique identifier of the review.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposPullsPullNumberReviewsReviewIdEventsResponse response from the API call
     */
    public CompletableFuture<ReposPullsPullNumberReviewsReviewIdEventsResponse> pullsSubmitReviewAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId,
            final ReposPullsPullNumberReviewsReviewIdEventsRequest body) {
        try { 
            return preparePullsSubmitReviewRequest(owner, repo, pullNumber, reviewId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsSubmitReview.
     */
    private ApiCall<ReposPullsPullNumberReviewsReviewIdEventsResponse, ApiException> preparePullsSubmitReviewRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final int reviewId,
            final ReposPullsPullNumberReviewsReviewIdEventsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposPullsPullNumberReviewsReviewIdEventsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("review_id").value(reviewId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposPullsPullNumberReviewsReviewIdEventsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ReposPullsPullNumberReviewsReviewIdEvents403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposPullsPullNumberReviewsReviewIdEvents404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposPullsPullNumberReviewsReviewIdEvents422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates the pull request branch with the latest upstream changes by merging HEAD from the
     * base branch into the pull request branch.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  body  Optional parameter: Example:
     * @return    Returns the ReposNotificationsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposNotificationsResponse pullsUpdateBranch(
            final String owner,
            final String repo,
            final int pullNumber,
            final Object body) throws ApiException, IOException {
        return preparePullsUpdateBranchRequest(owner, repo, pullNumber, body).execute();
    }

    /**
     * Updates the pull request branch with the latest upstream changes by merging HEAD from the
     * base branch into the pull request branch.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  pullNumber  Required parameter: The number that identifies the pull request.
     * @param  body  Optional parameter: Example:
     * @return    Returns the ReposNotificationsResponse response from the API call
     */
    public CompletableFuture<ReposNotificationsResponse> pullsUpdateBranchAsync(
            final String owner,
            final String repo,
            final int pullNumber,
            final Object body) {
        try { 
            return preparePullsUpdateBranchRequest(owner, repo, pullNumber, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pullsUpdateBranch.
     */
    private ApiCall<ReposNotificationsResponse, ApiException> preparePullsUpdateBranchRequest(
            final String owner,
            final String repo,
            final int pullNumber,
            final Object body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposNotificationsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/pulls/{pull_number}/update-branch")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("pull_number").value(pullNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposNotificationsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ReposPullsPullNumberUpdateBranch403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposPullsPullNumberUpdateBranch422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
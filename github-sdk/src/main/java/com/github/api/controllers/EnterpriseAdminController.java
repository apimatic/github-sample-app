/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.EnterprisesActionsRunnersLabels404ErrorException;
import com.github.api.exceptions.EnterprisesActionsRunnersLabels422ErrorException;
import com.github.api.exceptions.EnterprisesCodeSecurityAndAnalysis404ErrorException;
import com.github.api.exceptions.EnterprisesEnablement404ErrorException;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.ActionsRunnerLabels;
import com.github.api.models.Enablement1Enum;
import com.github.api.models.EnterpriseSecurityAnalysisSettings;
import com.github.api.models.EnterprisesActionsRunnerGroupsRequest;
import com.github.api.models.EnterprisesActionsRunnerGroupsResponse;
import com.github.api.models.EnterprisesActionsRunnersLabelsRequest;
import com.github.api.models.EnterprisesCodeSecurityAndAnalysisRequest;
import com.github.api.models.RunnerGroupsEnterprise;
import com.github.api.models.SecurityProduct2Enum;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class EnterpriseAdminController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public EnterpriseAdminController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Adds an organization to the list of selected organizations that are enabled for GitHub
     * Actions in an enterprise. To use this endpoint, the enterprise permission policy for
     * `enabled_organizations` must be configured to `selected`. For more information, see "[Set
     * GitHub Actions permissions for an
     * enterprise](#set-github-actions-permissions-for-an-enterprise)." You must authenticate using
     * an access token with the `admin:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  orgId  Required parameter: The unique identifier of the organization.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise(
            final String enterprise,
            final int orgId) throws ApiException, IOException {
        prepareEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest(enterprise,
                orgId).execute();
    }

    /**
     * Adds an organization to the list of selected organizations that are enabled for GitHub
     * Actions in an enterprise. To use this endpoint, the enterprise permission policy for
     * `enabled_organizations` must be configured to `selected`. For more information, see "[Set
     * GitHub Actions permissions for an
     * enterprise](#set-github-actions-permissions-for-an-enterprise)." You must authenticate using
     * an access token with the `admin:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  orgId  Required parameter: The unique identifier of the organization.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> enterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseAsync(
            final String enterprise,
            final int orgId) {
        try { 
            return prepareEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest(
            enterprise, orgId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise.
     */
    private ApiCall<Void, ApiException> prepareEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest(
            final String enterprise,
            final int orgId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/enterprises/{enterprise}/actions/permissions/organizations/{org_id}")
                        .templateParam(param -> param.key("enterprise").value(enterprise)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("org_id").value(orgId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists all self-hosted runner groups for an enterprise. You must authenticate using an access
     * token with the `manage_runners:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  visibleToOrganization  Optional parameter: Only return runner groups that are allowed
     *         to be used by this organization.
     * @return    Returns the EnterprisesActionsRunnerGroupsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public EnterprisesActionsRunnerGroupsResponse enterpriseAdminListSelfHostedRunnerGroupsForEnterprise(
            final String enterprise,
            final Integer perPage,
            final Integer page,
            final String visibleToOrganization) throws ApiException, IOException {
        return prepareEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest(enterprise,
                perPage, page, visibleToOrganization).execute();
    }

    /**
     * Lists all self-hosted runner groups for an enterprise. You must authenticate using an access
     * token with the `manage_runners:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  visibleToOrganization  Optional parameter: Only return runner groups that are allowed
     *         to be used by this organization.
     * @return    Returns the EnterprisesActionsRunnerGroupsResponse response from the API call
     */
    public CompletableFuture<EnterprisesActionsRunnerGroupsResponse> enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseAsync(
            final String enterprise,
            final Integer perPage,
            final Integer page,
            final String visibleToOrganization) {
        try { 
            return prepareEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest(enterprise, perPage,
            page, visibleToOrganization).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for enterpriseAdminListSelfHostedRunnerGroupsForEnterprise.
     */
    private ApiCall<EnterprisesActionsRunnerGroupsResponse, ApiException> prepareEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest(
            final String enterprise,
            final Integer perPage,
            final Integer page,
            final String visibleToOrganization) throws IOException {
        return new ApiCall.Builder<EnterprisesActionsRunnerGroupsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/enterprises/{enterprise}/actions/runner-groups")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .queryParam(param -> param.key("visible_to_organization")
                                .value(visibleToOrganization).isRequired(false))
                        .templateParam(param -> param.key("enterprise").value(enterprise)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, EnterprisesActionsRunnerGroupsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new self-hosted runner group for an enterprise. You must authenticate using an
     * access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  body  Required parameter: Example:
     * @return    Returns the RunnerGroupsEnterprise response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public RunnerGroupsEnterprise enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise(
            final String enterprise,
            final EnterprisesActionsRunnerGroupsRequest body) throws ApiException, IOException {
        return prepareEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest(enterprise,
                body).execute();
    }

    /**
     * Creates a new self-hosted runner group for an enterprise. You must authenticate using an
     * access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  body  Required parameter: Example:
     * @return    Returns the RunnerGroupsEnterprise response from the API call
     */
    public CompletableFuture<RunnerGroupsEnterprise> enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseAsync(
            final String enterprise,
            final EnterprisesActionsRunnerGroupsRequest body) {
        try { 
            return prepareEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest(enterprise,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise.
     */
    private ApiCall<RunnerGroupsEnterprise, ApiException> prepareEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest(
            final String enterprise,
            final EnterprisesActionsRunnerGroupsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<RunnerGroupsEnterprise, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/enterprises/{enterprise}/actions/runner-groups")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("enterprise").value(enterprise)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, RunnerGroupsEnterprise.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets a specific self-hosted runner group for an enterprise. You must authenticate using an
     * access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  runnerGroupId  Required parameter: Unique identifier of the self-hosted runner group.
     * @return    Returns the RunnerGroupsEnterprise response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public RunnerGroupsEnterprise enterpriseAdminGetSelfHostedRunnerGroupForEnterprise(
            final String enterprise,
            final int runnerGroupId) throws ApiException, IOException {
        return prepareEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest(enterprise,
                runnerGroupId).execute();
    }

    /**
     * Gets a specific self-hosted runner group for an enterprise. You must authenticate using an
     * access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  runnerGroupId  Required parameter: Unique identifier of the self-hosted runner group.
     * @return    Returns the RunnerGroupsEnterprise response from the API call
     */
    public CompletableFuture<RunnerGroupsEnterprise> enterpriseAdminGetSelfHostedRunnerGroupForEnterpriseAsync(
            final String enterprise,
            final int runnerGroupId) {
        try { 
            return prepareEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest(enterprise,
            runnerGroupId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for enterpriseAdminGetSelfHostedRunnerGroupForEnterprise.
     */
    private ApiCall<RunnerGroupsEnterprise, ApiException> prepareEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest(
            final String enterprise,
            final int runnerGroupId) throws IOException {
        return new ApiCall.Builder<RunnerGroupsEnterprise, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}")
                        .templateParam(param -> param.key("enterprise").value(enterprise)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("runner_group_id").value(runnerGroupId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, RunnerGroupsEnterprise.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Adds an organization to the list of selected organizations that can access a self-hosted
     * runner group. The runner group must have `visibility` set to `selected`. For more
     * information, see "[Create a self-hosted runner group for an
     * enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)." You must authenticate
     * using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  runnerGroupId  Required parameter: Unique identifier of the self-hosted runner group.
     * @param  orgId  Required parameter: The unique identifier of the organization.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise(
            final String enterprise,
            final int runnerGroupId,
            final int orgId) throws ApiException, IOException {
        prepareEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest(enterprise,
                runnerGroupId, orgId).execute();
    }

    /**
     * Adds an organization to the list of selected organizations that can access a self-hosted
     * runner group. The runner group must have `visibility` set to `selected`. For more
     * information, see "[Create a self-hosted runner group for an
     * enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)." You must authenticate
     * using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  runnerGroupId  Required parameter: Unique identifier of the self-hosted runner group.
     * @param  orgId  Required parameter: The unique identifier of the organization.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseAsync(
            final String enterprise,
            final int runnerGroupId,
            final int orgId) {
        try { 
            return prepareEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest(enterprise,
            runnerGroupId, orgId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise.
     */
    private ApiCall<Void, ApiException> prepareEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest(
            final String enterprise,
            final int runnerGroupId,
            final int orgId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}")
                        .templateParam(param -> param.key("enterprise").value(enterprise)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("runner_group_id").value(runnerGroupId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("org_id").value(orgId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Removes a self-hosted runner from a group configured in an enterprise. The runner is then
     * returned to the default group. You must authenticate using an access token with the
     * `manage_runners:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  runnerGroupId  Required parameter: Unique identifier of the self-hosted runner group.
     * @param  runnerId  Required parameter: Unique identifier of the self-hosted runner.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise(
            final String enterprise,
            final int runnerGroupId,
            final int runnerId) throws ApiException, IOException {
        prepareEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest(enterprise,
                runnerGroupId, runnerId).execute();
    }

    /**
     * Removes a self-hosted runner from a group configured in an enterprise. The runner is then
     * returned to the default group. You must authenticate using an access token with the
     * `manage_runners:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  runnerGroupId  Required parameter: Unique identifier of the self-hosted runner group.
     * @param  runnerId  Required parameter: Unique identifier of the self-hosted runner.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseAsync(
            final String enterprise,
            final int runnerGroupId,
            final int runnerId) {
        try { 
            return prepareEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest(enterprise,
            runnerGroupId, runnerId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise.
     */
    private ApiCall<Void, ApiException> prepareEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest(
            final String enterprise,
            final int runnerGroupId,
            final int runnerId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}")
                        .templateParam(param -> param.key("enterprise").value(enterprise)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("runner_group_id").value(runnerGroupId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("runner_id").value(runnerId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to
     * completely remove the runner when the machine you were using no longer exists. You must
     * authenticate using an access token with the `manage_runners:enterprise` scope to use this
     * endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  runnerId  Required parameter: Unique identifier of the self-hosted runner.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void enterpriseAdminDeleteSelfHostedRunnerFromEnterprise(
            final String enterprise,
            final int runnerId) throws ApiException, IOException {
        prepareEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest(enterprise,
                runnerId).execute();
    }

    /**
     * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to
     * completely remove the runner when the machine you were using no longer exists. You must
     * authenticate using an access token with the `manage_runners:enterprise` scope to use this
     * endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  runnerId  Required parameter: Unique identifier of the self-hosted runner.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> enterpriseAdminDeleteSelfHostedRunnerFromEnterpriseAsync(
            final String enterprise,
            final int runnerId) {
        try { 
            return prepareEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest(enterprise,
            runnerId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for enterpriseAdminDeleteSelfHostedRunnerFromEnterprise.
     */
    private ApiCall<Void, ApiException> prepareEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest(
            final String enterprise,
            final int runnerId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/enterprises/{enterprise}/actions/runners/{runner_id}")
                        .templateParam(param -> param.key("enterprise").value(enterprise)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("runner_id").value(runnerId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists all labels for a self-hosted runner configured in an enterprise. You must authenticate
     * using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  runnerId  Required parameter: Unique identifier of the self-hosted runner.
     * @return    Returns the ActionsRunnerLabels response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ActionsRunnerLabels enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise(
            final String enterprise,
            final int runnerId) throws ApiException, IOException {
        return prepareEnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseRequest(enterprise,
                runnerId).execute();
    }

    /**
     * Lists all labels for a self-hosted runner configured in an enterprise. You must authenticate
     * using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  runnerId  Required parameter: Unique identifier of the self-hosted runner.
     * @return    Returns the ActionsRunnerLabels response from the API call
     */
    public CompletableFuture<ActionsRunnerLabels> enterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseAsync(
            final String enterprise,
            final int runnerId) {
        try { 
            return prepareEnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseRequest(enterprise,
            runnerId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise.
     */
    private ApiCall<ActionsRunnerLabels, ApiException> prepareEnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseRequest(
            final String enterprise,
            final int runnerId) throws IOException {
        return new ApiCall.Builder<ActionsRunnerLabels, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/enterprises/{enterprise}/actions/runners/{runner_id}/labels")
                        .templateParam(param -> param.key("enterprise").value(enterprise)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("runner_id").value(runnerId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ActionsRunnerLabels.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new EnterprisesActionsRunnersLabels404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Add custom labels to a self-hosted runner configured in an enterprise. You must authenticate
     * using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  runnerId  Required parameter: Unique identifier of the self-hosted runner.
     * @param  body  Required parameter: Example:
     * @return    Returns the ActionsRunnerLabels response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ActionsRunnerLabels enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise(
            final String enterprise,
            final int runnerId,
            final EnterprisesActionsRunnersLabelsRequest body) throws ApiException, IOException {
        return prepareEnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest(
                enterprise, runnerId, body).execute();
    }

    /**
     * Add custom labels to a self-hosted runner configured in an enterprise. You must authenticate
     * using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  runnerId  Required parameter: Unique identifier of the self-hosted runner.
     * @param  body  Required parameter: Example:
     * @return    Returns the ActionsRunnerLabels response from the API call
     */
    public CompletableFuture<ActionsRunnerLabels> enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseAsync(
            final String enterprise,
            final int runnerId,
            final EnterprisesActionsRunnersLabelsRequest body) {
        try { 
            return prepareEnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest(enterprise,
            runnerId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise.
     */
    private ApiCall<ActionsRunnerLabels, ApiException> prepareEnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest(
            final String enterprise,
            final int runnerId,
            final EnterprisesActionsRunnersLabelsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ActionsRunnerLabels, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/enterprises/{enterprise}/actions/runners/{runner_id}/labels")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("enterprise").value(enterprise)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("runner_id").value(runnerId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ActionsRunnerLabels.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new EnterprisesActionsRunnersLabels404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new EnterprisesActionsRunnersLabels422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets code security and analysis settings for the specified enterprise. To use this endpoint,
     * you must be an administrator of the enterprise, and you must use an access token with the
     * `admin:enterprise` scope.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @return    Returns the EnterpriseSecurityAnalysisSettings response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public EnterpriseSecurityAnalysisSettings secretScanningGetSecurityAnalysisSettingsForEnterprise(
            final String enterprise) throws ApiException, IOException {
        return prepareSecretScanningGetSecurityAnalysisSettingsForEnterpriseRequest(
                enterprise).execute();
    }

    /**
     * Gets code security and analysis settings for the specified enterprise. To use this endpoint,
     * you must be an administrator of the enterprise, and you must use an access token with the
     * `admin:enterprise` scope.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @return    Returns the EnterpriseSecurityAnalysisSettings response from the API call
     */
    public CompletableFuture<EnterpriseSecurityAnalysisSettings> secretScanningGetSecurityAnalysisSettingsForEnterpriseAsync(
            final String enterprise) {
        try { 
            return prepareSecretScanningGetSecurityAnalysisSettingsForEnterpriseRequest(
            enterprise).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for secretScanningGetSecurityAnalysisSettingsForEnterprise.
     */
    private ApiCall<EnterpriseSecurityAnalysisSettings, ApiException> prepareSecretScanningGetSecurityAnalysisSettingsForEnterpriseRequest(
            final String enterprise) throws IOException {
        return new ApiCall.Builder<EnterpriseSecurityAnalysisSettings, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/enterprises/{enterprise}/code_security_and_analysis")
                        .templateParam(param -> param.key("enterprise").value(enterprise)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, EnterpriseSecurityAnalysisSettings.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new EnterprisesCodeSecurityAndAnalysis404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates the settings for advanced security, secret scanning, and push protection for new
     * repositories in an enterprise. To use this endpoint, you must be an administrator of the
     * enterprise, and you must use an access token with the `admin:enterprise` scope.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void secretScanningPatchSecurityAnalysisSettingsForEnterprise(
            final String enterprise,
            final EnterprisesCodeSecurityAndAnalysisRequest body) throws ApiException, IOException {
        prepareSecretScanningPatchSecurityAnalysisSettingsForEnterpriseRequest(enterprise,
                body).execute();
    }

    /**
     * Updates the settings for advanced security, secret scanning, and push protection for new
     * repositories in an enterprise. To use this endpoint, you must be an administrator of the
     * enterprise, and you must use an access token with the `admin:enterprise` scope.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> secretScanningPatchSecurityAnalysisSettingsForEnterpriseAsync(
            final String enterprise,
            final EnterprisesCodeSecurityAndAnalysisRequest body) {
        try { 
            return prepareSecretScanningPatchSecurityAnalysisSettingsForEnterpriseRequest(enterprise,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for secretScanningPatchSecurityAnalysisSettingsForEnterprise.
     */
    private ApiCall<Void, ApiException> prepareSecretScanningPatchSecurityAnalysisSettingsForEnterpriseRequest(
            final String enterprise,
            final EnterprisesCodeSecurityAndAnalysisRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/enterprises/{enterprise}/code_security_and_analysis")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("enterprise").value(enterprise)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new EnterprisesCodeSecurityAndAnalysis404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("The action could not be taken due to an in progress enablement, or a policy is preventing enablement",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Enables or disables the specified security feature for all repositories in an enterprise. To
     * use this endpoint, you must be an administrator of the enterprise, and you must use an access
     * token with the `admin:enterprise` scope.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  securityProduct  Required parameter: The security feature to enable or disable.
     * @param  enablement  Required parameter: The action to take. `enable_all` means to enable the
     *         specified security feature for all repositories in the enterprise. `disable_all`
     *         means to disable the specified security feature for all repositories in the
     *         enterprise.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void secretScanningPostSecurityProductEnablementForEnterprise(
            final String enterprise,
            final SecurityProduct2Enum securityProduct,
            final Enablement1Enum enablement) throws ApiException, IOException {
        prepareSecretScanningPostSecurityProductEnablementForEnterpriseRequest(enterprise,
                securityProduct, enablement).execute();
    }

    /**
     * Enables or disables the specified security feature for all repositories in an enterprise. To
     * use this endpoint, you must be an administrator of the enterprise, and you must use an access
     * token with the `admin:enterprise` scope.
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  securityProduct  Required parameter: The security feature to enable or disable.
     * @param  enablement  Required parameter: The action to take. `enable_all` means to enable the
     *         specified security feature for all repositories in the enterprise. `disable_all`
     *         means to disable the specified security feature for all repositories in the
     *         enterprise.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> secretScanningPostSecurityProductEnablementForEnterpriseAsync(
            final String enterprise,
            final SecurityProduct2Enum securityProduct,
            final Enablement1Enum enablement) {
        try { 
            return prepareSecretScanningPostSecurityProductEnablementForEnterpriseRequest(enterprise,
            securityProduct, enablement).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for secretScanningPostSecurityProductEnablementForEnterprise.
     */
    private ApiCall<Void, ApiException> prepareSecretScanningPostSecurityProductEnablementForEnterpriseRequest(
            final String enterprise,
            final SecurityProduct2Enum securityProduct,
            final Enablement1Enum enablement) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/enterprises/{enterprise}/{security_product}/{enablement}")
                        .templateParam(param -> param.key("enterprise").value(enterprise)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("security_product").value((securityProduct != null) ? securityProduct.value() : null)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("enablement").value((enablement != null) ? enablement.value() : null)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new EnterprisesEnablement404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("The action could not be taken due to an in progress enablement, or a policy is preventing enablement",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.fasterxml.jackson.core.type.TypeReference;
import com.github.api.ApiHelper;
import com.github.api.DateTimeHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.Versions404ErrorException;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.DynamicResponse;
import com.github.api.models.MetaResponse;
import com.github.api.models.Root;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class MetaController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public MetaController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Get Hypermedia links to resources accessible in GitHub's REST API.
     * @return    Returns the Root response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Root metaRoot() throws ApiException, IOException {
        return prepareMetaRootRequest().execute();
    }

    /**
     * Get Hypermedia links to resources accessible in GitHub's REST API.
     * @return    Returns the Root response from the API call
     */
    public CompletableFuture<Root> metaRootAsync() {
        try { 
            return prepareMetaRootRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for metaRoot.
     */
    private ApiCall<Root, ApiException> prepareMetaRootRequest() throws IOException {
        return new ApiCall.Builder<Root, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Root.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more
     * information, see "[About GitHub's IP
     * addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)." **Note:** The IP
     * addresses shown in the documentation's response are only example values. You must always
     * query the API directly to get the latest list of IP addresses.
     * @return    Returns the MetaResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MetaResponse metaGet() throws ApiException, IOException {
        return prepareMetaGetRequest().execute();
    }

    /**
     * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more
     * information, see "[About GitHub's IP
     * addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)." **Note:** The IP
     * addresses shown in the documentation's response are only example values. You must always
     * query the API directly to get the latest list of IP addresses.
     * @return    Returns the MetaResponse response from the API call
     */
    public CompletableFuture<MetaResponse> metaGetAsync() {
        try { 
            return prepareMetaGetRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for metaGet.
     */
    private ApiCall<MetaResponse, ApiException> prepareMetaGetRequest() throws IOException {
        return new ApiCall.Builder<MetaResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/meta")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, MetaResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get the octocat as ASCII art.
     * @param  s  Optional parameter: The words to show in Octocat's speech bubble
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse metaGetOctocat(
            final String s) throws ApiException, IOException {
        return prepareMetaGetOctocatRequest(s).execute();
    }

    /**
     * Get the octocat as ASCII art.
     * @param  s  Optional parameter: The words to show in Octocat's speech bubble
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> metaGetOctocatAsync(
            final String s) {
        try { 
            return prepareMetaGetOctocatRequest(s).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for metaGetOctocat.
     */
    private ApiCall<DynamicResponse, ApiException> prepareMetaGetOctocatRequest(
            final String s) throws IOException {
        return new ApiCall.Builder<DynamicResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/octocat")
                        .queryParam(param -> param.key("s")
                                .value(s).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.DYNAMIC_RESPONSE)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get all supported GitHub API versions.
     * @return    Returns the List of LocalDate response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<LocalDate> metaGetAllVersions() throws ApiException, IOException {
        return prepareMetaGetAllVersionsRequest().execute();
    }

    /**
     * Get all supported GitHub API versions.
     * @return    Returns the List of LocalDate response from the API call
     */
    public CompletableFuture<List<LocalDate>> metaGetAllVersionsAsync() {
        try { 
            return prepareMetaGetAllVersionsRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for metaGetAllVersions.
     */
    private ApiCall<List<LocalDate>, ApiException> prepareMetaGetAllVersionsRequest() throws IOException {
        return new ApiCall.Builder<List<LocalDate>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/versions")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response,
                                        new TypeReference<List<LocalDate>>(){},
                                        LocalDate.class,
                                        new DateTimeHelper.SimpleDateDeserializer()))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new Versions404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a random sentence from the Zen of GitHub.
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public String metaGetZen() throws ApiException, IOException {
        return prepareMetaGetZenRequest().execute();
    }

    /**
     * Get a random sentence from the Zen of GitHub.
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> metaGetZenAsync() {
        try { 
            return prepareMetaGetZenRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for metaGetZen.
     */
    private ApiCall<String, ApiException> prepareMetaGetZenRequest() throws IOException {
        return new ApiCall.Builder<String, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/zen")
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> new String(response))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
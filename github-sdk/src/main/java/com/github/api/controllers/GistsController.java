/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.github.api.ApiHelper;
import com.github.api.DateTimeHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.ForbiddenGist1Exception;
import com.github.api.exceptions.Gists403ErrorException;
import com.github.api.exceptions.Gists404ErrorException;
import com.github.api.exceptions.Gists422ErrorException;
import com.github.api.exceptions.GistsComments403ErrorException;
import com.github.api.exceptions.GistsComments404ErrorException;
import com.github.api.exceptions.GistsCommits403ErrorException;
import com.github.api.exceptions.GistsCommits404ErrorException;
import com.github.api.exceptions.GistsForks403ErrorException;
import com.github.api.exceptions.GistsForks404ErrorException;
import com.github.api.exceptions.GistsForks422ErrorException;
import com.github.api.exceptions.GistsPublic403ErrorException;
import com.github.api.exceptions.GistsPublic422ErrorException;
import com.github.api.exceptions.GistsStar403ErrorException;
import com.github.api.exceptions.GistsStar404ErrorException;
import com.github.api.exceptions.GistsStarred401ErrorException;
import com.github.api.exceptions.GistsStarred403ErrorException;
import com.github.api.exceptions.UsersGists422ErrorException;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.BaseGist;
import com.github.api.models.GistComment;
import com.github.api.models.GistCommit;
import com.github.api.models.GistSimple;
import com.github.api.models.GistsCommentsRequest;
import com.github.api.models.GistsCommentsResponse;
import com.github.api.models.GistsForksResponse;
import com.github.api.models.GistsRequest;
import com.github.api.models.GistsRequest3;
import com.github.api.models.GistsResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;

/**
 * This class lists all the endpoints of the groups.
 */
public final class GistsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public GistsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Lists the authenticated user's gists or if called anonymously, this endpoint returns all
     * public gists:.
     * @param  since  Optional parameter: Only show notifications updated after the given time. This
     *         is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
     *         `YYYY-MM-DDTHH:MM:SSZ`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of BaseGist response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<BaseGist> gistsList(
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareGistsListRequest(since, perPage, page).execute();
    }

    /**
     * Lists the authenticated user's gists or if called anonymously, this endpoint returns all
     * public gists:.
     * @param  since  Optional parameter: Only show notifications updated after the given time. This
     *         is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
     *         `YYYY-MM-DDTHH:MM:SSZ`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of BaseGist response from the API call
     */
    public CompletableFuture<List<BaseGist>> gistsListAsync(
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareGistsListRequest(since, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsList.
     */
    private ApiCall<List<BaseGist>, ApiException> prepareGistsListRequest(
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<BaseGist>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists")
                        .queryParam(param -> param.key("since")
                                .value(DateTimeHelper.toRfc8601DateTime(since)).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        BaseGist[].class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new Gists403ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Allows you to add a new gist with one or more files. **Note:** Don't name your files
     * "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that
     * Gist uses internally.
     * @param  body  Required parameter: Example:
     * @return    Returns the GistsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GistsResponse gistsCreate(
            final GistsRequest body) throws ApiException, IOException {
        return prepareGistsCreateRequest(body).execute();
    }

    /**
     * Allows you to add a new gist with one or more files. **Note:** Don't name your files
     * "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that
     * Gist uses internally.
     * @param  body  Required parameter: Example:
     * @return    Returns the GistsResponse response from the API call
     */
    public CompletableFuture<GistsResponse> gistsCreateAsync(
            final GistsRequest body) {
        try { 
            return prepareGistsCreateRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsCreate.
     */
    private ApiCall<GistsResponse, ApiException> prepareGistsCreateRequest(
            final GistsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GistsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GistsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new Gists403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new Gists404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new Gists422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List public gists sorted by most recently updated to least recently updated. Note: With
     * [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you
     * can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30
     * pages with 100 gists per page.
     * @param  since  Optional parameter: Only show notifications updated after the given time. This
     *         is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
     *         `YYYY-MM-DDTHH:MM:SSZ`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of BaseGist response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<BaseGist> gistsListPublic(
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareGistsListPublicRequest(since, perPage, page).execute();
    }

    /**
     * List public gists sorted by most recently updated to least recently updated. Note: With
     * [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you
     * can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30
     * pages with 100 gists per page.
     * @param  since  Optional parameter: Only show notifications updated after the given time. This
     *         is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
     *         `YYYY-MM-DDTHH:MM:SSZ`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of BaseGist response from the API call
     */
    public CompletableFuture<List<BaseGist>> gistsListPublicAsync(
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareGistsListPublicRequest(since, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsListPublic.
     */
    private ApiCall<List<BaseGist>, ApiException> prepareGistsListPublicRequest(
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<BaseGist>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/public")
                        .queryParam(param -> param.key("since")
                                .value(DateTimeHelper.toRfc8601DateTime(since)).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        BaseGist[].class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new GistsPublic403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new GistsPublic422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List the authenticated user's starred gists:.
     * @param  since  Optional parameter: Only show notifications updated after the given time. This
     *         is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
     *         `YYYY-MM-DDTHH:MM:SSZ`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of BaseGist response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<BaseGist> gistsListStarred(
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareGistsListStarredRequest(since, perPage, page).execute();
    }

    /**
     * List the authenticated user's starred gists:.
     * @param  since  Optional parameter: Only show notifications updated after the given time. This
     *         is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
     *         `YYYY-MM-DDTHH:MM:SSZ`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of BaseGist response from the API call
     */
    public CompletableFuture<List<BaseGist>> gistsListStarredAsync(
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareGistsListStarredRequest(since, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsListStarred.
     */
    private ApiCall<List<BaseGist>, ApiException> prepareGistsListStarredRequest(
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<BaseGist>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/starred")
                        .queryParam(param -> param.key("since")
                                .value(DateTimeHelper.toRfc8601DateTime(since)).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        BaseGist[].class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new GistsStarred401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new GistsStarred403ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a gist.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @return    Returns the GistsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GistsResponse gistsGet(
            final String gistId) throws ApiException, IOException {
        return prepareGistsGetRequest(gistId).execute();
    }

    /**
     * Get a gist.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @return    Returns the GistsResponse response from the API call
     */
    public CompletableFuture<GistsResponse> gistsGetAsync(
            final String gistId) {
        try { 
            return prepareGistsGetRequest(gistId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsGet.
     */
    private ApiCall<GistsResponse, ApiException> prepareGistsGetRequest(
            final String gistId) throws IOException {
        return new ApiCall.Builder<GistsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}")
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GistsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden Gist",
                                (reason, context) -> new ForbiddenGist1Exception(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new Gists404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Allows you to update a gist's description and to update, delete, or rename gist files. Files
     * from the previous version of the gist that aren't explicitly changed during an edit are
     * unchanged.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  body  Required parameter: Example:
     * @return    Returns the GistsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GistsResponse gistsUpdate(
            final String gistId,
            final GistsRequest3 body) throws ApiException, IOException {
        return prepareGistsUpdateRequest(gistId, body).execute();
    }

    /**
     * Allows you to update a gist's description and to update, delete, or rename gist files. Files
     * from the previous version of the gist that aren't explicitly changed during an edit are
     * unchanged.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  body  Required parameter: Example:
     * @return    Returns the GistsResponse response from the API call
     */
    public CompletableFuture<GistsResponse> gistsUpdateAsync(
            final String gistId,
            final GistsRequest3 body) {
        try { 
            return prepareGistsUpdateRequest(gistId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsUpdate.
     */
    private ApiCall<GistsResponse, ApiException> prepareGistsUpdateRequest(
            final String gistId,
            final GistsRequest3 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GistsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serializeTypeCombinator(body))
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GistsResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new Gists404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new Gists422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete a gist.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void gistsDelete(
            final String gistId) throws ApiException, IOException {
        prepareGistsDeleteRequest(gistId).execute();
    }

    /**
     * Delete a gist.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> gistsDeleteAsync(
            final String gistId) {
        try { 
            return prepareGistsDeleteRequest(gistId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsDelete.
     */
    private ApiCall<Void, ApiException> prepareGistsDeleteRequest(
            final String gistId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}")
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new Gists403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new Gists404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List gist comments.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of GistComment response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<GistComment> gistsListComments(
            final String gistId,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareGistsListCommentsRequest(gistId, perPage, page).execute();
    }

    /**
     * List gist comments.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of GistComment response from the API call
     */
    public CompletableFuture<List<GistComment>> gistsListCommentsAsync(
            final String gistId,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareGistsListCommentsRequest(gistId, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsListComments.
     */
    private ApiCall<List<GistComment>, ApiException> prepareGistsListCommentsRequest(
            final String gistId,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<GistComment>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}/comments")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        GistComment[].class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new GistsComments403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new GistsComments404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a gist comment.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  body  Required parameter: Example:
     * @return    Returns the GistsCommentsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GistsCommentsResponse gistsCreateComment(
            final String gistId,
            final GistsCommentsRequest body) throws ApiException, IOException {
        return prepareGistsCreateCommentRequest(gistId, body).execute();
    }

    /**
     * Create a gist comment.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  body  Required parameter: Example:
     * @return    Returns the GistsCommentsResponse response from the API call
     */
    public CompletableFuture<GistsCommentsResponse> gistsCreateCommentAsync(
            final String gistId,
            final GistsCommentsRequest body) {
        try { 
            return prepareGistsCreateCommentRequest(gistId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsCreateComment.
     */
    private ApiCall<GistsCommentsResponse, ApiException> prepareGistsCreateCommentRequest(
            final String gistId,
            final GistsCommentsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GistsCommentsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}/comments")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GistsCommentsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new GistsComments403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new GistsComments404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a gist comment.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @return    Returns the GistsCommentsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GistsCommentsResponse gistsGetComment(
            final String gistId,
            final int commentId) throws ApiException, IOException {
        return prepareGistsGetCommentRequest(gistId, commentId).execute();
    }

    /**
     * Get a gist comment.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @return    Returns the GistsCommentsResponse response from the API call
     */
    public CompletableFuture<GistsCommentsResponse> gistsGetCommentAsync(
            final String gistId,
            final int commentId) {
        try { 
            return prepareGistsGetCommentRequest(gistId, commentId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsGetComment.
     */
    private ApiCall<GistsCommentsResponse, ApiException> prepareGistsGetCommentRequest(
            final String gistId,
            final int commentId) throws IOException {
        return new ApiCall.Builder<GistsCommentsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}/comments/{comment_id}")
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GistsCommentsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden Gist",
                                (reason, context) -> new ForbiddenGist1Exception(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new GistsComments404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update a gist comment.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the GistsCommentsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GistsCommentsResponse gistsUpdateComment(
            final String gistId,
            final int commentId,
            final GistsCommentsRequest body) throws ApiException, IOException {
        return prepareGistsUpdateCommentRequest(gistId, commentId, body).execute();
    }

    /**
     * Update a gist comment.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the GistsCommentsResponse response from the API call
     */
    public CompletableFuture<GistsCommentsResponse> gistsUpdateCommentAsync(
            final String gistId,
            final int commentId,
            final GistsCommentsRequest body) {
        try { 
            return prepareGistsUpdateCommentRequest(gistId, commentId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsUpdateComment.
     */
    private ApiCall<GistsCommentsResponse, ApiException> prepareGistsUpdateCommentRequest(
            final String gistId,
            final int commentId,
            final GistsCommentsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GistsCommentsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}/comments/{comment_id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GistsCommentsResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new GistsComments404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete a gist comment.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void gistsDeleteComment(
            final String gistId,
            final int commentId) throws ApiException, IOException {
        prepareGistsDeleteCommentRequest(gistId, commentId).execute();
    }

    /**
     * Delete a gist comment.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  commentId  Required parameter: The unique identifier of the comment.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> gistsDeleteCommentAsync(
            final String gistId,
            final int commentId) {
        try { 
            return prepareGistsDeleteCommentRequest(gistId, commentId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsDeleteComment.
     */
    private ApiCall<Void, ApiException> prepareGistsDeleteCommentRequest(
            final String gistId,
            final int commentId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}/comments/{comment_id}")
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_id").value(commentId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new GistsComments403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new GistsComments404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List gist commits.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of GistCommit response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<GistCommit> gistsListCommits(
            final String gistId,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareGistsListCommitsRequest(gistId, perPage, page).execute();
    }

    /**
     * List gist commits.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of GistCommit response from the API call
     */
    public CompletableFuture<List<GistCommit>> gistsListCommitsAsync(
            final String gistId,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareGistsListCommitsRequest(gistId, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsListCommits.
     */
    private ApiCall<List<GistCommit>, ApiException> prepareGistsListCommitsRequest(
            final String gistId,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<GistCommit>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}/commits")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        GistCommit[].class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new GistsCommits403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new GistsCommits404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List gist forks.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of GistSimple response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<GistSimple> gistsListForks(
            final String gistId,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareGistsListForksRequest(gistId, perPage, page).execute();
    }

    /**
     * List gist forks.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of GistSimple response from the API call
     */
    public CompletableFuture<List<GistSimple>> gistsListForksAsync(
            final String gistId,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareGistsListForksRequest(gistId, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsListForks.
     */
    private ApiCall<List<GistSimple>, ApiException> prepareGistsListForksRequest(
            final String gistId,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<GistSimple>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}/forks")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        GistSimple[].class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new GistsForks403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new GistsForks404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Fork a gist.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @return    Returns the GistsForksResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GistsForksResponse gistsFork(
            final String gistId) throws ApiException, IOException {
        return prepareGistsForkRequest(gistId).execute();
    }

    /**
     * Fork a gist.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @return    Returns the GistsForksResponse response from the API call
     */
    public CompletableFuture<GistsForksResponse> gistsForkAsync(
            final String gistId) {
        try { 
            return prepareGistsForkRequest(gistId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsFork.
     */
    private ApiCall<GistsForksResponse, ApiException> prepareGistsForkRequest(
            final String gistId) throws IOException {
        return new ApiCall.Builder<GistsForksResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}/forks")
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GistsForksResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new GistsForks403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new GistsForks404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new GistsForks422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Check if a gist is starred.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void gistsCheckIsStarred(
            final String gistId) throws ApiException, IOException {
        prepareGistsCheckIsStarredRequest(gistId).execute();
    }

    /**
     * Check if a gist is starred.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> gistsCheckIsStarredAsync(
            final String gistId) {
        try { 
            return prepareGistsCheckIsStarredRequest(gistId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsCheckIsStarred.
     */
    private ApiCall<Void, ApiException> prepareGistsCheckIsStarredRequest(
            final String gistId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}/star")
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new GistsStar403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found if gist is not starred",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For
     * more information, see "[HTTP
     * verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void gistsStar(
            final String gistId) throws ApiException, IOException {
        prepareGistsStarRequest(gistId).execute();
    }

    /**
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For
     * more information, see "[HTTP
     * verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> gistsStarAsync(
            final String gistId) {
        try { 
            return prepareGistsStarRequest(gistId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsStar.
     */
    private ApiCall<Void, ApiException> prepareGistsStarRequest(
            final String gistId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}/star")
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new GistsStar403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new GistsStar404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Unstar a gist.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void gistsUnstar(
            final String gistId) throws ApiException, IOException {
        prepareGistsUnstarRequest(gistId).execute();
    }

    /**
     * Unstar a gist.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> gistsUnstarAsync(
            final String gistId) {
        try { 
            return prepareGistsUnstarRequest(gistId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsUnstar.
     */
    private ApiCall<Void, ApiException> prepareGistsUnstarRequest(
            final String gistId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}/star")
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new GistsStar403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new GistsStar404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a gist revision.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  sha  Required parameter: Example:
     * @return    Returns the GistsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GistsResponse gistsGetRevision(
            final String gistId,
            final String sha) throws ApiException, IOException {
        return prepareGistsGetRevisionRequest(gistId, sha).execute();
    }

    /**
     * Get a gist revision.
     * @param  gistId  Required parameter: The unique identifier of the gist.
     * @param  sha  Required parameter: Example:
     * @return    Returns the GistsResponse response from the API call
     */
    public CompletableFuture<GistsResponse> gistsGetRevisionAsync(
            final String gistId,
            final String sha) {
        try { 
            return prepareGistsGetRevisionRequest(gistId, sha).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsGetRevision.
     */
    private ApiCall<GistsResponse, ApiException> prepareGistsGetRevisionRequest(
            final String gistId,
            final String sha) throws IOException {
        return new ApiCall.Builder<GistsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/gists/{gist_id}/{sha}")
                        .templateParam(param -> param.key("gist_id").value(gistId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("sha").value(sha)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GistsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new Gists403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new Gists404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new Gists422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists public gists for the specified user:.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  since  Optional parameter: Only show notifications updated after the given time. This
     *         is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
     *         `YYYY-MM-DDTHH:MM:SSZ`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of BaseGist response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<BaseGist> gistsListForUser(
            final String username,
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareGistsListForUserRequest(username, since, perPage, page).execute();
    }

    /**
     * Lists public gists for the specified user:.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  since  Optional parameter: Only show notifications updated after the given time. This
     *         is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
     *         `YYYY-MM-DDTHH:MM:SSZ`.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of BaseGist response from the API call
     */
    public CompletableFuture<List<BaseGist>> gistsListForUserAsync(
            final String username,
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareGistsListForUserRequest(username, since, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gistsListForUser.
     */
    private ApiCall<List<BaseGist>, ApiException> prepareGistsListForUserRequest(
            final String username,
            final LocalDateTime since,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<BaseGist>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/users/{username}/gists")
                        .queryParam(param -> param.key("since")
                                .value(DateTimeHelper.toRfc8601DateTime(since)).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        BaseGist[].class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new UsersGists422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
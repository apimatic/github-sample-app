/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.OrgsTeams403ErrorException;
import com.github.api.exceptions.OrgsTeams404ErrorException;
import com.github.api.exceptions.OrgsTeams422ErrorException;
import com.github.api.exceptions.OrgsTeamsProjectsProjectId403ErrorException;
import com.github.api.exceptions.Teams403ErrorException;
import com.github.api.exceptions.Teams404ErrorException;
import com.github.api.exceptions.Teams422ErrorException;
import com.github.api.exceptions.TeamsMembers403ErrorException;
import com.github.api.exceptions.TeamsMembers404ErrorException;
import com.github.api.exceptions.TeamsMemberships404ErrorException;
import com.github.api.exceptions.TeamsProjects403ErrorException;
import com.github.api.exceptions.TeamsProjects404ErrorException;
import com.github.api.exceptions.TeamsProjects422ErrorException;
import com.github.api.exceptions.TeamsRepos404ErrorException;
import com.github.api.exceptions.TeamsReposRepo403ErrorException;
import com.github.api.exceptions.TeamsReposRepo422ErrorException;
import com.github.api.exceptions.TeamsTeams403ErrorException;
import com.github.api.exceptions.TeamsTeams404ErrorException;
import com.github.api.exceptions.TeamsTeams422ErrorException;
import com.github.api.exceptions.UserTeams403ErrorException;
import com.github.api.exceptions.UserTeams404ErrorException;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.Direction1Enum;
import com.github.api.models.FullTeam;
import com.github.api.models.MinimalRepository;
import com.github.api.models.OrganizationInvitation;
import com.github.api.models.OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberRequest;
import com.github.api.models.OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse;
import com.github.api.models.OrgsTeamsDiscussionsDiscussionNumberCommentsResponse;
import com.github.api.models.OrgsTeamsDiscussionsDiscussionNumberRequest;
import com.github.api.models.OrgsTeamsDiscussionsDiscussionNumberResponse;
import com.github.api.models.OrgsTeamsDiscussionsRequest;
import com.github.api.models.OrgsTeamsDiscussionsResponse;
import com.github.api.models.OrgsTeamsMembershipsUsernameResponse;
import com.github.api.models.OrgsTeamsProjectsProjectIdResponse;
import com.github.api.models.OrgsTeamsReposOwnerRepoRequest;
import com.github.api.models.OrgsTeamsReposOwnerRepoResponse;
import com.github.api.models.OrgsTeamsRequest;
import com.github.api.models.OrgsTeamsRequest1;
import com.github.api.models.OrgsTeamsResponse;
import com.github.api.models.Role51Enum;
import com.github.api.models.SimpleUser;
import com.github.api.models.Team;
import com.github.api.models.TeamDiscussion;
import com.github.api.models.TeamDiscussionComment;
import com.github.api.models.TeamProject;
import com.github.api.models.TeamsDiscussionsCommentsCommentNumberResponse;
import com.github.api.models.TeamsDiscussionsCommentsResponse;
import com.github.api.models.TeamsDiscussionsResponse;
import com.github.api.models.TeamsMembershipsRequest;
import com.github.api.models.TeamsMembershipsResponse;
import com.github.api.models.TeamsProjectsRequest;
import com.github.api.models.TeamsProjectsResponse;
import com.github.api.models.TeamsReposRepoRequest;
import com.github.api.models.TeamsReposRepoResponse;
import com.github.api.models.TeamsRequest;
import com.github.api.models.TeamsResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class TeamsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public TeamsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Lists all teams in an organization that are visible to the authenticated user.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Team response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Team> teamsList(
            final String org,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListRequest(org, perPage, page).execute();
    }

    /**
     * Lists all teams in an organization that are visible to the authenticated user.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Team response from the API call
     */
    public CompletableFuture<List<Team>> teamsListAsync(
            final String org,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListRequest(org, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsList.
     */
    private ApiCall<List<Team>, ApiException> prepareTeamsListRequest(
            final String org,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Team>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Team[].class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new OrgsTeams403ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * To create a team, the authenticated user must be a member or owner of `{org}`. By default,
     * organization members can create teams. Organization owners can limit team creation to
     * organization owners. For more information, see "[Setting team creation
     * permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."
     * When you create a new team, you automatically become a team maintainer without explicitly
     * adding yourself to the optional array of `maintainers`. For more information, see "[About
     * teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsTeamsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsResponse teamsCreate(
            final String org,
            final OrgsTeamsRequest body) throws ApiException, IOException {
        return prepareTeamsCreateRequest(org, body).execute();
    }

    /**
     * To create a team, the authenticated user must be a member or owner of `{org}`. By default,
     * organization members can create teams. Organization owners can limit team creation to
     * organization owners. For more information, see "[Setting team creation
     * permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."
     * When you create a new team, you automatically become a team maintainer without explicitly
     * adding yourself to the optional array of `maintainers`. For more information, see "[About
     * teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsTeamsResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsResponse> teamsCreateAsync(
            final String org,
            final OrgsTeamsRequest body) {
        try { 
            return prepareTeamsCreateRequest(org, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsCreate.
     */
    private ApiCall<OrgsTeamsResponse, ApiException> prepareTeamsCreateRequest(
            final String org,
            final OrgsTeamsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsTeamsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new OrgsTeams403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new OrgsTeams422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @return    Returns the OrgsTeamsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsResponse teamsGetByName(
            final String org,
            final String teamSlug) throws ApiException, IOException {
        return prepareTeamsGetByNameRequest(org, teamSlug).execute();
    }

    /**
     * Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @return    Returns the OrgsTeamsResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsResponse> teamsGetByNameAsync(
            final String org,
            final String teamSlug) {
        try { 
            return prepareTeamsGetByNameRequest(org, teamSlug).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsGetByName.
     */
    private ApiCall<OrgsTeamsResponse, ApiException> prepareTeamsGetByNameRequest(
            final String org,
            final String teamSlug) throws IOException {
        return new ApiCall.Builder<OrgsTeamsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsTeams404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * To edit a team, the authenticated user must either be an organization owner or a team
     * maintainer. **Note:** You can also specify a team by `org_id` and `team_id` using the route
     * `PATCH /organizations/{org_id}/team/{team_id}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrgsTeamsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsResponse teamsUpdateInOrg(
            final String org,
            final String teamSlug,
            final OrgsTeamsRequest1 body) throws ApiException, IOException {
        return prepareTeamsUpdateInOrgRequest(org, teamSlug, body).execute();
    }

    /**
     * To edit a team, the authenticated user must either be an organization owner or a team
     * maintainer. **Note:** You can also specify a team by `org_id` and `team_id` using the route
     * `PATCH /organizations/{org_id}/team/{team_id}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrgsTeamsResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsResponse> teamsUpdateInOrgAsync(
            final String org,
            final String teamSlug,
            final OrgsTeamsRequest1 body) {
        try { 
            return prepareTeamsUpdateInOrgRequest(org, teamSlug, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsUpdateInOrg.
     */
    private ApiCall<OrgsTeamsResponse, ApiException> prepareTeamsUpdateInOrgRequest(
            final String org,
            final String teamSlug,
            final OrgsTeamsRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsTeamsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new OrgsTeams403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsTeams404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new OrgsTeams422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * To delete a team, the authenticated user must be an organization owner or team maintainer. If
     * you are an organization owner, deleting a parent team will delete all of its child teams as
     * well. **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE
     * /organizations/{org_id}/team/{team_id}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void teamsDeleteInOrg(
            final String org,
            final String teamSlug) throws ApiException, IOException {
        prepareTeamsDeleteInOrgRequest(org, teamSlug).execute();
    }

    /**
     * To delete a team, the authenticated user must be an organization owner or team maintainer. If
     * you are an organization owner, deleting a parent team will delete all of its child teams as
     * well. **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE
     * /organizations/{org_id}/team/{team_id}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> teamsDeleteInOrgAsync(
            final String org,
            final String teamSlug) {
        try { 
            return prepareTeamsDeleteInOrgRequest(org, teamSlug).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsDeleteInOrg.
     */
    private ApiCall<Void, ApiException> prepareTeamsDeleteInOrgRequest(
            final String org,
            final String teamSlug) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List all discussions on a team's page. OAuth access tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/discussions`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  pinned  Optional parameter: Pinned discussions only filter
     * @return    Returns the List of TeamDiscussion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<TeamDiscussion> teamsListDiscussionsInOrg(
            final String org,
            final String teamSlug,
            final Direction1Enum direction,
            final Integer perPage,
            final Integer page,
            final String pinned) throws ApiException, IOException {
        return prepareTeamsListDiscussionsInOrgRequest(org, teamSlug, direction, perPage, page,
                pinned).execute();
    }

    /**
     * List all discussions on a team's page. OAuth access tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/discussions`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  pinned  Optional parameter: Pinned discussions only filter
     * @return    Returns the List of TeamDiscussion response from the API call
     */
    public CompletableFuture<List<TeamDiscussion>> teamsListDiscussionsInOrgAsync(
            final String org,
            final String teamSlug,
            final Direction1Enum direction,
            final Integer perPage,
            final Integer page,
            final String pinned) {
        try { 
            return prepareTeamsListDiscussionsInOrgRequest(org, teamSlug, direction, perPage, page,
            pinned).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListDiscussionsInOrg.
     */
    private ApiCall<List<TeamDiscussion>, ApiException> prepareTeamsListDiscussionsInOrgRequest(
            final String org,
            final String teamSlug,
            final Direction1Enum direction,
            final Integer perPage,
            final Integer page,
            final String pinned) throws IOException {
        return new ApiCall.Builder<List<TeamDiscussion>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions")
                        .queryParam(param -> param.key("direction")
                                .value((direction != null) ? direction.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .queryParam(param -> param.key("pinned")
                                .value(pinned).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        TeamDiscussion[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new discussion post on a team's page. OAuth access tokens require the
     * `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details. **Note:** You can also specify a team by `org_id` and `team_id` using the route
     * `POST /organizations/{org_id}/team/{team_id}/discussions`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsTeamsDiscussionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsDiscussionsResponse teamsCreateDiscussionInOrg(
            final String org,
            final String teamSlug,
            final OrgsTeamsDiscussionsRequest body) throws ApiException, IOException {
        return prepareTeamsCreateDiscussionInOrgRequest(org, teamSlug, body).execute();
    }

    /**
     * Creates a new discussion post on a team's page. OAuth access tokens require the
     * `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details. **Note:** You can also specify a team by `org_id` and `team_id` using the route
     * `POST /organizations/{org_id}/team/{team_id}/discussions`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsTeamsDiscussionsResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsDiscussionsResponse> teamsCreateDiscussionInOrgAsync(
            final String org,
            final String teamSlug,
            final OrgsTeamsDiscussionsRequest body) {
        try { 
            return prepareTeamsCreateDiscussionInOrgRequest(org, teamSlug, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsCreateDiscussionInOrg.
     */
    private ApiCall<OrgsTeamsDiscussionsResponse, ApiException> prepareTeamsCreateDiscussionInOrgRequest(
            final String org,
            final String teamSlug,
            final OrgsTeamsDiscussionsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsTeamsDiscussionsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsDiscussionsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @return    Returns the OrgsTeamsDiscussionsDiscussionNumberResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsDiscussionsDiscussionNumberResponse teamsGetDiscussionInOrg(
            final String org,
            final String teamSlug,
            final int discussionNumber) throws ApiException, IOException {
        return prepareTeamsGetDiscussionInOrgRequest(org, teamSlug, discussionNumber).execute();
    }

    /**
     * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @return    Returns the OrgsTeamsDiscussionsDiscussionNumberResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsDiscussionsDiscussionNumberResponse> teamsGetDiscussionInOrgAsync(
            final String org,
            final String teamSlug,
            final int discussionNumber) {
        try { 
            return prepareTeamsGetDiscussionInOrgRequest(org, teamSlug, discussionNumber).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsGetDiscussionInOrg.
     */
    private ApiCall<OrgsTeamsDiscussionsDiscussionNumberResponse, ApiException> prepareTeamsGetDiscussionInOrgRequest(
            final String org,
            final String teamSlug,
            final int discussionNumber) throws IOException {
        return new ApiCall.Builder<OrgsTeamsDiscussionsDiscussionNumberResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsDiscussionsDiscussionNumberResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Edits the title and body text of a discussion post. Only the parameters you provide are
     * updated. OAuth access tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH
     * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrgsTeamsDiscussionsDiscussionNumberResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsDiscussionsDiscussionNumberResponse teamsUpdateDiscussionInOrg(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberRequest body) throws ApiException, IOException {
        return prepareTeamsUpdateDiscussionInOrgRequest(org, teamSlug, discussionNumber,
                body).execute();
    }

    /**
     * Edits the title and body text of a discussion post. Only the parameters you provide are
     * updated. OAuth access tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH
     * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrgsTeamsDiscussionsDiscussionNumberResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsDiscussionsDiscussionNumberResponse> teamsUpdateDiscussionInOrgAsync(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberRequest body) {
        try { 
            return prepareTeamsUpdateDiscussionInOrgRequest(org, teamSlug, discussionNumber,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsUpdateDiscussionInOrg.
     */
    private ApiCall<OrgsTeamsDiscussionsDiscussionNumberResponse, ApiException> prepareTeamsUpdateDiscussionInOrgRequest(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsTeamsDiscussionsDiscussionNumberResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsDiscussionsDiscussionNumberResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE
     * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void teamsDeleteDiscussionInOrg(
            final String org,
            final String teamSlug,
            final int discussionNumber) throws ApiException, IOException {
        prepareTeamsDeleteDiscussionInOrgRequest(org, teamSlug, discussionNumber).execute();
    }

    /**
     * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE
     * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> teamsDeleteDiscussionInOrgAsync(
            final String org,
            final String teamSlug,
            final int discussionNumber) {
        try { 
            return prepareTeamsDeleteDiscussionInOrgRequest(org, teamSlug, discussionNumber).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsDeleteDiscussionInOrg.
     */
    private ApiCall<Void, ApiException> prepareTeamsDeleteDiscussionInOrgRequest(
            final String org,
            final String teamSlug,
            final int discussionNumber) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List all comments on a team discussion. OAuth access tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of TeamDiscussionComment response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<TeamDiscussionComment> teamsListDiscussionCommentsInOrg(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final Direction1Enum direction,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListDiscussionCommentsInOrgRequest(org, teamSlug, discussionNumber,
                direction, perPage, page).execute();
    }

    /**
     * List all comments on a team discussion. OAuth access tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of TeamDiscussionComment response from the API call
     */
    public CompletableFuture<List<TeamDiscussionComment>> teamsListDiscussionCommentsInOrgAsync(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final Direction1Enum direction,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListDiscussionCommentsInOrgRequest(org, teamSlug, discussionNumber,
            direction, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListDiscussionCommentsInOrg.
     */
    private ApiCall<List<TeamDiscussionComment>, ApiException> prepareTeamsListDiscussionCommentsInOrgRequest(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final Direction1Enum direction,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<TeamDiscussionComment>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments")
                        .queryParam(param -> param.key("direction")
                                .value((direction != null) ? direction.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        TeamDiscussionComment[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new comment on a team discussion. OAuth access tokens require the
     * `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details. **Note:** You can also specify a team by `org_id` and `team_id` using the route
     * `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsTeamsDiscussionsDiscussionNumberCommentsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsDiscussionsDiscussionNumberCommentsResponse teamsCreateDiscussionCommentInOrg(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberRequest body) throws ApiException, IOException {
        return prepareTeamsCreateDiscussionCommentInOrgRequest(org, teamSlug, discussionNumber,
                body).execute();
    }

    /**
     * Creates a new comment on a team discussion. OAuth access tokens require the
     * `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details. **Note:** You can also specify a team by `org_id` and `team_id` using the route
     * `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsTeamsDiscussionsDiscussionNumberCommentsResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsDiscussionsDiscussionNumberCommentsResponse> teamsCreateDiscussionCommentInOrgAsync(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberRequest body) {
        try { 
            return prepareTeamsCreateDiscussionCommentInOrgRequest(org, teamSlug, discussionNumber,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsCreateDiscussionCommentInOrg.
     */
    private ApiCall<OrgsTeamsDiscussionsDiscussionNumberCommentsResponse, ApiException> prepareTeamsCreateDiscussionCommentInOrgRequest(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsTeamsDiscussionsDiscussionNumberCommentsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsDiscussionsDiscussionNumberCommentsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a specific comment on a team discussion. OAuth access tokens require the
     * `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @return    Returns the OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse teamsGetDiscussionCommentInOrg(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber) throws ApiException, IOException {
        return prepareTeamsGetDiscussionCommentInOrgRequest(org, teamSlug, discussionNumber,
                commentNumber).execute();
    }

    /**
     * Get a specific comment on a team discussion. OAuth access tokens require the
     * `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @return    Returns the OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse> teamsGetDiscussionCommentInOrgAsync(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber) {
        try { 
            return prepareTeamsGetDiscussionCommentInOrgRequest(org, teamSlug, discussionNumber,
            commentNumber).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsGetDiscussionCommentInOrg.
     */
    private ApiCall<OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse, ApiException> prepareTeamsGetDiscussionCommentInOrgRequest(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber) throws IOException {
        return new ApiCall.Builder<OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_number").value(commentNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Edits the body text of a discussion comment. OAuth access tokens require the
     * `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH
     * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse teamsUpdateDiscussionCommentInOrg(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberRequest body) throws ApiException, IOException {
        return prepareTeamsUpdateDiscussionCommentInOrgRequest(org, teamSlug, discussionNumber,
                commentNumber, body).execute();
    }

    /**
     * Edits the body text of a discussion comment. OAuth access tokens require the
     * `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH
     * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse> teamsUpdateDiscussionCommentInOrgAsync(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberRequest body) {
        try { 
            return prepareTeamsUpdateDiscussionCommentInOrgRequest(org, teamSlug, discussionNumber,
            commentNumber, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsUpdateDiscussionCommentInOrg.
     */
    private ApiCall<OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse, ApiException> prepareTeamsUpdateDiscussionCommentInOrgRequest(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_number").value(commentNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE
     * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void teamsDeleteDiscussionCommentInOrg(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber) throws ApiException, IOException {
        prepareTeamsDeleteDiscussionCommentInOrgRequest(org, teamSlug, discussionNumber,
                commentNumber).execute();
    }

    /**
     * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE
     * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> teamsDeleteDiscussionCommentInOrgAsync(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber) {
        try { 
            return prepareTeamsDeleteDiscussionCommentInOrgRequest(org, teamSlug, discussionNumber,
            commentNumber).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsDeleteDiscussionCommentInOrg.
     */
    private ApiCall<Void, ApiException> prepareTeamsDeleteDiscussionCommentInOrgRequest(
            final String org,
            final String teamSlug,
            final int discussionNumber,
            final int commentNumber) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_number").value(commentNumber).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * The return hash contains a `role` field which refers to the Organization Invitation role and
     * will be one of the following values: `direct_member`, `admin`, `billing_manager`,
     * `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in
     * the return hash will be `null`. **Note:** You can also specify a team by `org_id` and
     * `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrganizationInvitation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<OrganizationInvitation> teamsListPendingInvitationsInOrg(
            final String org,
            final String teamSlug,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListPendingInvitationsInOrgRequest(org, teamSlug, perPage,
                page).execute();
    }

    /**
     * The return hash contains a `role` field which refers to the Organization Invitation role and
     * will be one of the following values: `direct_member`, `admin`, `billing_manager`,
     * `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in
     * the return hash will be `null`. **Note:** You can also specify a team by `org_id` and
     * `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrganizationInvitation response from the API call
     */
    public CompletableFuture<List<OrganizationInvitation>> teamsListPendingInvitationsInOrgAsync(
            final String org,
            final String teamSlug,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListPendingInvitationsInOrgRequest(org, teamSlug, perPage,
            page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListPendingInvitationsInOrg.
     */
    private ApiCall<List<OrganizationInvitation>, ApiException> prepareTeamsListPendingInvitationsInOrgRequest(
            final String org,
            final String teamSlug,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<OrganizationInvitation>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/invitations")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        OrganizationInvitation[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Team members will include the members of child teams. To list members in a team, the team
     * must be visible to the authenticated user.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  role  Optional parameter: Filters members returned by their role in the team.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of SimpleUser response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<SimpleUser> teamsListMembersInOrg(
            final String org,
            final String teamSlug,
            final Role51Enum role,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListMembersInOrgRequest(org, teamSlug, role, perPage, page).execute();
    }

    /**
     * Team members will include the members of child teams. To list members in a team, the team
     * must be visible to the authenticated user.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  role  Optional parameter: Filters members returned by their role in the team.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of SimpleUser response from the API call
     */
    public CompletableFuture<List<SimpleUser>> teamsListMembersInOrgAsync(
            final String org,
            final String teamSlug,
            final Role51Enum role,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListMembersInOrgRequest(org, teamSlug, role, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListMembersInOrg.
     */
    private ApiCall<List<SimpleUser>, ApiException> prepareTeamsListMembersInOrgRequest(
            final String org,
            final String teamSlug,
            final Role51Enum role,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<SimpleUser>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/members")
                        .queryParam(param -> param.key("role")
                                .value((role != null) ? role.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        SimpleUser[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Team members will include the members of child teams. To get a user's membership with a team,
     * the team must be visible to the authenticated user. **Note:** You can also specify a team by
     * `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/memberships/{username}`. **Note:** The response
     * contains the `state` of the membership and the member's `role`. The `role` for organization
     * owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create
     * a team](https://docs.github.com/rest/reference/teams#create-a-team).
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the OrgsTeamsMembershipsUsernameResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsMembershipsUsernameResponse teamsGetMembershipForUserInOrg(
            final String org,
            final String teamSlug,
            final String username) throws ApiException, IOException {
        return prepareTeamsGetMembershipForUserInOrgRequest(org, teamSlug, username).execute();
    }

    /**
     * Team members will include the members of child teams. To get a user's membership with a team,
     * the team must be visible to the authenticated user. **Note:** You can also specify a team by
     * `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/memberships/{username}`. **Note:** The response
     * contains the `state` of the membership and the member's `role`. The `role` for organization
     * owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create
     * a team](https://docs.github.com/rest/reference/teams#create-a-team).
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the OrgsTeamsMembershipsUsernameResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsMembershipsUsernameResponse> teamsGetMembershipForUserInOrgAsync(
            final String org,
            final String teamSlug,
            final String username) {
        try { 
            return prepareTeamsGetMembershipForUserInOrgRequest(org, teamSlug, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsGetMembershipForUserInOrg.
     */
    private ApiCall<OrgsTeamsMembershipsUsernameResponse, ApiException> prepareTeamsGetMembershipForUserInOrgRequest(
            final String org,
            final String teamSlug,
            final String username) throws IOException {
        return new ApiCall.Builder<OrgsTeamsMembershipsUsernameResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/memberships/{username}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsMembershipsUsernameResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("if user has no team membership",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Adds an organization member to a team. An authenticated organization owner or team maintainer
     * can add organization members to a team. Team synchronization is available for organizations
     * using GitHub Enterprise Cloud. For more information, see [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. **Note:** When you have team synchronization set up for a team
     * with your organization's identity provider (IdP), you will see an error if you attempt to use
     * the API for making changes to the team's membership. If you have access to manage group
     * membership in your IdP, you can manage GitHub team membership through your identity provider,
     * which automatically adds and removes team members in an organization. For more information,
     * see "[Synchronizing teams between your identity provider and
     * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     * An organization owner can add someone who is not part of the team's organization to a team.
     * When an organization owner adds someone to a team who is not an organization member, this
     * endpoint will send an invitation to the person via email. This newly-created membership will
     * be in the "pending" state until the person accepts the invitation, at which point the
     * membership will transition to the "active" state and the user will be added as a member of
     * the team. If the user is already a member of the team, this endpoint will update the role of
     * the team member's role. To update the membership of a team member, the authenticated user
     * must be an organization owner or a team maintainer. **Note:** You can also specify a team by
     * `org_id` and `team_id` using the route `PUT
     * /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrgsTeamsMembershipsUsernameResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsMembershipsUsernameResponse teamsAddOrUpdateMembershipForUserInOrg(
            final String org,
            final String teamSlug,
            final String username,
            final TeamsMembershipsRequest body) throws ApiException, IOException {
        return prepareTeamsAddOrUpdateMembershipForUserInOrgRequest(org, teamSlug, username,
                body).execute();
    }

    /**
     * Adds an organization member to a team. An authenticated organization owner or team maintainer
     * can add organization members to a team. Team synchronization is available for organizations
     * using GitHub Enterprise Cloud. For more information, see [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. **Note:** When you have team synchronization set up for a team
     * with your organization's identity provider (IdP), you will see an error if you attempt to use
     * the API for making changes to the team's membership. If you have access to manage group
     * membership in your IdP, you can manage GitHub team membership through your identity provider,
     * which automatically adds and removes team members in an organization. For more information,
     * see "[Synchronizing teams between your identity provider and
     * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     * An organization owner can add someone who is not part of the team's organization to a team.
     * When an organization owner adds someone to a team who is not an organization member, this
     * endpoint will send an invitation to the person via email. This newly-created membership will
     * be in the "pending" state until the person accepts the invitation, at which point the
     * membership will transition to the "active" state and the user will be added as a member of
     * the team. If the user is already a member of the team, this endpoint will update the role of
     * the team member's role. To update the membership of a team member, the authenticated user
     * must be an organization owner or a team maintainer. **Note:** You can also specify a team by
     * `org_id` and `team_id` using the route `PUT
     * /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrgsTeamsMembershipsUsernameResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsMembershipsUsernameResponse> teamsAddOrUpdateMembershipForUserInOrgAsync(
            final String org,
            final String teamSlug,
            final String username,
            final TeamsMembershipsRequest body) {
        try { 
            return prepareTeamsAddOrUpdateMembershipForUserInOrgRequest(org, teamSlug, username,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsAddOrUpdateMembershipForUserInOrg.
     */
    private ApiCall<OrgsTeamsMembershipsUsernameResponse, ApiException> prepareTeamsAddOrUpdateMembershipForUserInOrgRequest(
            final String org,
            final String teamSlug,
            final String username,
            final TeamsMembershipsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsTeamsMembershipsUsernameResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/memberships/{username}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsMembershipsUsernameResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden if team synchronization is set up",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Unprocessable Entity if you attempt to add an organization to a team",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * To remove a membership between a user and a team, the authenticated user must have 'admin'
     * permissions to the team or be an owner of the organization that the team is associated with.
     * Removing team membership does not delete the user, it just removes their membership from the
     * team. Team synchronization is available for organizations using GitHub Enterprise Cloud. For
     * more information, see [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. **Note:** When you have team synchronization set up for a team
     * with your organization's identity provider (IdP), you will see an error if you attempt to use
     * the API for making changes to the team's membership. If you have access to manage group
     * membership in your IdP, you can manage GitHub team membership through your identity provider,
     * which automatically adds and removes team members in an organization. For more information,
     * see "[Synchronizing teams between your identity provider and
     * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE
     * /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void teamsRemoveMembershipForUserInOrg(
            final String org,
            final String teamSlug,
            final String username) throws ApiException, IOException {
        prepareTeamsRemoveMembershipForUserInOrgRequest(org, teamSlug, username).execute();
    }

    /**
     * To remove a membership between a user and a team, the authenticated user must have 'admin'
     * permissions to the team or be an owner of the organization that the team is associated with.
     * Removing team membership does not delete the user, it just removes their membership from the
     * team. Team synchronization is available for organizations using GitHub Enterprise Cloud. For
     * more information, see [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. **Note:** When you have team synchronization set up for a team
     * with your organization's identity provider (IdP), you will see an error if you attempt to use
     * the API for making changes to the team's membership. If you have access to manage group
     * membership in your IdP, you can manage GitHub team membership through your identity provider,
     * which automatically adds and removes team members in an organization. For more information,
     * see "[Synchronizing teams between your identity provider and
     * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE
     * /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> teamsRemoveMembershipForUserInOrgAsync(
            final String org,
            final String teamSlug,
            final String username) {
        try { 
            return prepareTeamsRemoveMembershipForUserInOrgRequest(org, teamSlug, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsRemoveMembershipForUserInOrg.
     */
    private ApiCall<Void, ApiException> prepareTeamsRemoveMembershipForUserInOrgRequest(
            final String org,
            final String teamSlug,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/memberships/{username}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden if team synchronization is set up",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists the organization projects for a team. **Note:** You can also specify a team by `org_id`
     * and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of TeamProject response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<TeamProject> teamsListProjectsInOrg(
            final String org,
            final String teamSlug,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListProjectsInOrgRequest(org, teamSlug, perPage, page).execute();
    }

    /**
     * Lists the organization projects for a team. **Note:** You can also specify a team by `org_id`
     * and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of TeamProject response from the API call
     */
    public CompletableFuture<List<TeamProject>> teamsListProjectsInOrgAsync(
            final String org,
            final String teamSlug,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListProjectsInOrgRequest(org, teamSlug, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListProjectsInOrg.
     */
    private ApiCall<List<TeamProject>, ApiException> prepareTeamsListProjectsInOrgRequest(
            final String org,
            final String teamSlug,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<TeamProject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/projects")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        TeamProject[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Checks whether a team has `read`, `write`, or `admin` permissions for an organization
     * project. The response includes projects inherited from a parent team. **Note:** You can also
     * specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @return    Returns the OrgsTeamsProjectsProjectIdResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsProjectsProjectIdResponse teamsCheckPermissionsForProjectInOrg(
            final String org,
            final String teamSlug,
            final int projectId) throws ApiException, IOException {
        return prepareTeamsCheckPermissionsForProjectInOrgRequest(org, teamSlug,
                projectId).execute();
    }

    /**
     * Checks whether a team has `read`, `write`, or `admin` permissions for an organization
     * project. The response includes projects inherited from a parent team. **Note:** You can also
     * specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @return    Returns the OrgsTeamsProjectsProjectIdResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsProjectsProjectIdResponse> teamsCheckPermissionsForProjectInOrgAsync(
            final String org,
            final String teamSlug,
            final int projectId) {
        try { 
            return prepareTeamsCheckPermissionsForProjectInOrgRequest(org, teamSlug,
            projectId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsCheckPermissionsForProjectInOrg.
     */
    private ApiCall<OrgsTeamsProjectsProjectIdResponse, ApiException> prepareTeamsCheckPermissionsForProjectInOrgRequest(
            final String org,
            final String teamSlug,
            final int projectId) throws IOException {
        return new ApiCall.Builder<OrgsTeamsProjectsProjectIdResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/projects/{project_id}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsProjectsProjectIdResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found if project is not managed by this team",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Adds an organization project to a team. To add a project to a team or update the team's
     * permission on a project, the authenticated user must have `admin` permissions for the
     * project. The project and team must be part of the same organization. **Note:** You can also
     * specify a team by `org_id` and `team_id` using the route `PUT
     * /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void teamsAddOrUpdateProjectPermissionsInOrg(
            final String org,
            final String teamSlug,
            final int projectId,
            final Object body) throws ApiException, IOException {
        prepareTeamsAddOrUpdateProjectPermissionsInOrgRequest(org, teamSlug, projectId,
                body).execute();
    }

    /**
     * Adds an organization project to a team. To add a project to a team or update the team's
     * permission on a project, the authenticated user must have `admin` permissions for the
     * project. The project and team must be part of the same organization. **Note:** You can also
     * specify a team by `org_id` and `team_id` using the route `PUT
     * /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> teamsAddOrUpdateProjectPermissionsInOrgAsync(
            final String org,
            final String teamSlug,
            final int projectId,
            final Object body) {
        try { 
            return prepareTeamsAddOrUpdateProjectPermissionsInOrgRequest(org, teamSlug, projectId,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsAddOrUpdateProjectPermissionsInOrg.
     */
    private ApiCall<Void, ApiException> prepareTeamsAddOrUpdateProjectPermissionsInOrgRequest(
            final String org,
            final String teamSlug,
            final int projectId,
            final Object body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/projects/{project_id}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden if the project is not owned by the organization",
                                (reason, context) -> new OrgsTeamsProjectsProjectId403ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Removes an organization project from a team. An organization owner or a team maintainer can
     * remove any project from the team. To remove a project from a team as an organization member,
     * the authenticated user must have `read` access to both the team and project, or `admin`
     * access to the team or project. This endpoint removes the project from the team, but does not
     * delete the project. **Note:** You can also specify a team by `org_id` and `team_id` using the
     * route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void teamsRemoveProjectInOrg(
            final String org,
            final String teamSlug,
            final int projectId) throws ApiException, IOException {
        prepareTeamsRemoveProjectInOrgRequest(org, teamSlug, projectId).execute();
    }

    /**
     * Removes an organization project from a team. An organization owner or a team maintainer can
     * remove any project from the team. To remove a project from a team as an organization member,
     * the authenticated user must have `read` access to both the team and project, or `admin`
     * access to the team or project. This endpoint removes the project from the team, but does not
     * delete the project. **Note:** You can also specify a team by `org_id` and `team_id` using the
     * route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> teamsRemoveProjectInOrgAsync(
            final String org,
            final String teamSlug,
            final int projectId) {
        try { 
            return prepareTeamsRemoveProjectInOrgRequest(org, teamSlug, projectId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsRemoveProjectInOrg.
     */
    private ApiCall<Void, ApiException> prepareTeamsRemoveProjectInOrgRequest(
            final String org,
            final String teamSlug,
            final int projectId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/projects/{project_id}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists a team's repositories visible to the authenticated user. **Note:** You can also specify
     * a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/repos`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of MinimalRepository response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<MinimalRepository> teamsListReposInOrg(
            final String org,
            final String teamSlug,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListReposInOrgRequest(org, teamSlug, perPage, page).execute();
    }

    /**
     * Lists a team's repositories visible to the authenticated user. **Note:** You can also specify
     * a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/repos`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of MinimalRepository response from the API call
     */
    public CompletableFuture<List<MinimalRepository>> teamsListReposInOrgAsync(
            final String org,
            final String teamSlug,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListReposInOrgRequest(org, teamSlug, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListReposInOrg.
     */
    private ApiCall<List<MinimalRepository>, ApiException> prepareTeamsListReposInOrgRequest(
            final String org,
            final String teamSlug,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<MinimalRepository>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/repos")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        MinimalRepository[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a
     * repository. Repositories inherited through a parent team will also be checked. You can also
     * get information about the specified repository, including what permissions the team grants on
     * it, by passing the following custom [media
     * type](https://docs.github.com/rest/overview/media-types/) via the
     * `application/vnd.github.v3.repository+json` accept header. If a team doesn't have permission
     * for the repository, you will receive a `404 Not Found` response status. **Note:** You can
     * also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @return    Returns the OrgsTeamsReposOwnerRepoResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsTeamsReposOwnerRepoResponse teamsCheckPermissionsForRepoInOrg(
            final String org,
            final String teamSlug,
            final String owner,
            final String repo) throws ApiException, IOException {
        return prepareTeamsCheckPermissionsForRepoInOrgRequest(org, teamSlug, owner,
                repo).execute();
    }

    /**
     * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a
     * repository. Repositories inherited through a parent team will also be checked. You can also
     * get information about the specified repository, including what permissions the team grants on
     * it, by passing the following custom [media
     * type](https://docs.github.com/rest/overview/media-types/) via the
     * `application/vnd.github.v3.repository+json` accept header. If a team doesn't have permission
     * for the repository, you will receive a `404 Not Found` response status. **Note:** You can
     * also specify a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @return    Returns the OrgsTeamsReposOwnerRepoResponse response from the API call
     */
    public CompletableFuture<OrgsTeamsReposOwnerRepoResponse> teamsCheckPermissionsForRepoInOrgAsync(
            final String org,
            final String teamSlug,
            final String owner,
            final String repo) {
        try { 
            return prepareTeamsCheckPermissionsForRepoInOrgRequest(org, teamSlug, owner,
            repo).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsCheckPermissionsForRepoInOrg.
     */
    private ApiCall<OrgsTeamsReposOwnerRepoResponse, ApiException> prepareTeamsCheckPermissionsForRepoInOrgRequest(
            final String org,
            final String teamSlug,
            final String owner,
            final String repo) throws IOException {
        return new ApiCall.Builder<OrgsTeamsReposOwnerRepoResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsTeamsReposOwnerRepoResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found if team does not have permission for the repository",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * To add a repository to a team or update the team's permission on a repository, the
     * authenticated user must have admin access to the repository, and must be able to see the
     * team. The repository must be owned by the organization, or a direct fork of a repository
     * owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to
     * add a repository to a team that is not owned by the organization. Note that, if you choose
     * not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to
     * this endpoint. For more information, see "[HTTP
     * verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT
     * /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`. For more information about the
     * permission levels, see "[Repository permission levels for an
     * organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void teamsAddOrUpdateRepoPermissionsInOrg(
            final String org,
            final String teamSlug,
            final String owner,
            final String repo,
            final OrgsTeamsReposOwnerRepoRequest body) throws ApiException, IOException {
        prepareTeamsAddOrUpdateRepoPermissionsInOrgRequest(org, teamSlug, owner, repo,
                body).execute();
    }

    /**
     * To add a repository to a team or update the team's permission on a repository, the
     * authenticated user must have admin access to the repository, and must be able to see the
     * team. The repository must be owned by the organization, or a direct fork of a repository
     * owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to
     * add a repository to a team that is not owned by the organization. Note that, if you choose
     * not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to
     * this endpoint. For more information, see "[HTTP
     * verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT
     * /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`. For more information about the
     * permission levels, see "[Repository permission levels for an
     * organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> teamsAddOrUpdateRepoPermissionsInOrgAsync(
            final String org,
            final String teamSlug,
            final String owner,
            final String repo,
            final OrgsTeamsReposOwnerRepoRequest body) {
        try { 
            return prepareTeamsAddOrUpdateRepoPermissionsInOrgRequest(org, teamSlug, owner, repo,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsAddOrUpdateRepoPermissionsInOrg.
     */
    private ApiCall<Void, ApiException> prepareTeamsAddOrUpdateRepoPermissionsInOrgRequest(
            final String org,
            final String teamSlug,
            final String owner,
            final String repo,
            final OrgsTeamsReposOwnerRepoRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * If the authenticated user is an organization owner or a team maintainer, they can remove any
     * repositories from the team. To remove a repository from a team as an organization member, the
     * authenticated user must have admin access to the repository and must be able to see the team.
     * This does not delete the repository, it just removes it from the team. **Note:** You can also
     * specify a team by `org_id` and `team_id` using the route `DELETE
     * /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void teamsRemoveRepoInOrg(
            final String org,
            final String teamSlug,
            final String owner,
            final String repo) throws ApiException, IOException {
        prepareTeamsRemoveRepoInOrgRequest(org, teamSlug, owner, repo).execute();
    }

    /**
     * If the authenticated user is an organization owner or a team maintainer, they can remove any
     * repositories from the team. To remove a repository from a team as an organization member, the
     * authenticated user must have admin access to the repository and must be able to see the team.
     * This does not delete the repository, it just removes it from the team. **Note:** You can also
     * specify a team by `org_id` and `team_id` using the route `DELETE
     * /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> teamsRemoveRepoInOrgAsync(
            final String org,
            final String teamSlug,
            final String owner,
            final String repo) {
        try { 
            return prepareTeamsRemoveRepoInOrgRequest(org, teamSlug, owner, repo).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsRemoveRepoInOrg.
     */
    private ApiCall<Void, ApiException> prepareTeamsRemoveRepoInOrgRequest(
            final String org,
            final String teamSlug,
            final String owner,
            final String repo) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}")
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists the child teams of the team specified by `{team_slug}`. **Note:** You can also specify
     * a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/teams`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Team response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Team> teamsListChildInOrg(
            final String org,
            final String teamSlug,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListChildInOrgRequest(org, teamSlug, perPage, page).execute();
    }

    /**
     * Lists the child teams of the team specified by `{team_slug}`. **Note:** You can also specify
     * a team by `org_id` and `team_id` using the route `GET
     * /organizations/{org_id}/team/{team_id}/teams`.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  teamSlug  Required parameter: The slug of the team name.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Team response from the API call
     */
    public CompletableFuture<List<Team>> teamsListChildInOrgAsync(
            final String org,
            final String teamSlug,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListChildInOrgRequest(org, teamSlug, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListChildInOrg.
     */
    private ApiCall<List<Team>, ApiException> prepareTeamsListChildInOrgRequest(
            final String org,
            final String teamSlug,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Team>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/teams/{team_slug}/teams")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("team_slug").value(teamSlug)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Team[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the [Get a team by
     * name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @return    Returns the TeamsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public TeamsResponse teamsGetLegacy(
            final int teamId) throws ApiException, IOException {
        return prepareTeamsGetLegacyRequest(teamId).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the [Get a team by
     * name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @return    Returns the TeamsResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<TeamsResponse> teamsGetLegacyAsync(
            final int teamId) {
        try { 
            return prepareTeamsGetLegacyRequest(teamId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsGetLegacy.
     */
    private ApiCall<TeamsResponse, ApiException> prepareTeamsGetLegacyRequest(
            final int teamId) throws IOException {
        return new ApiCall.Builder<TeamsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TeamsResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new Teams404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Update a
     * team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint. To edit a team,
     * the authenticated user must either be an organization owner or a team maintainer. **Note:**
     * With nested teams, the `privacy` for parent teams cannot be `secret`.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  body  Required parameter: Example:
     * @return    Returns the TeamsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public TeamsResponse teamsUpdateLegacy(
            final int teamId,
            final TeamsRequest body) throws ApiException, IOException {
        return prepareTeamsUpdateLegacyRequest(teamId, body).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Update a
     * team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint. To edit a team,
     * the authenticated user must either be an organization owner or a team maintainer. **Note:**
     * With nested teams, the `privacy` for parent teams cannot be `secret`.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  body  Required parameter: Example:
     * @return    Returns the TeamsResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<TeamsResponse> teamsUpdateLegacyAsync(
            final int teamId,
            final TeamsRequest body) {
        try { 
            return prepareTeamsUpdateLegacyRequest(teamId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsUpdateLegacy.
     */
    private ApiCall<TeamsResponse, ApiException> prepareTeamsUpdateLegacyRequest(
            final int teamId,
            final TeamsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<TeamsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TeamsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new Teams403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new Teams404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new Teams422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Delete a
     * team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint. To delete a team,
     * the authenticated user must be an organization owner or team maintainer. If you are an
     * organization owner, deleting a parent team will delete all of its child teams as well.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public void teamsDeleteLegacy(
            final int teamId) throws ApiException, IOException {
        prepareTeamsDeleteLegacyRequest(teamId).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Delete a
     * team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint. To delete a team,
     * the authenticated user must be an organization owner or team maintainer. If you are an
     * organization owner, deleting a parent team will delete all of its child teams as well.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @return    Returns the void response from the API call
     */
    @Deprecated
    public CompletableFuture<Void> teamsDeleteLegacyAsync(
            final int teamId) {
        try { 
            return prepareTeamsDeleteLegacyRequest(teamId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsDeleteLegacy.
     */
    private ApiCall<Void, ApiException> prepareTeamsDeleteLegacyRequest(
            final int teamId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new Teams404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new Teams422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`List
     * discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint. List
     * all discussions on a team's page. OAuth access tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of TeamDiscussion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public List<TeamDiscussion> teamsListDiscussionsLegacy(
            final int teamId,
            final Direction1Enum direction,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListDiscussionsLegacyRequest(teamId, direction, perPage, page).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`List
     * discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint. List
     * all discussions on a team's page. OAuth access tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of TeamDiscussion response from the API call
     */
    @Deprecated
    public CompletableFuture<List<TeamDiscussion>> teamsListDiscussionsLegacyAsync(
            final int teamId,
            final Direction1Enum direction,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListDiscussionsLegacyRequest(teamId, direction, perPage,
            page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListDiscussionsLegacy.
     */
    private ApiCall<List<TeamDiscussion>, ApiException> prepareTeamsListDiscussionsLegacyRequest(
            final int teamId,
            final Direction1Enum direction,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<TeamDiscussion>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/discussions")
                        .queryParam(param -> param.key("direction")
                                .value((direction != null) ? direction.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        TeamDiscussion[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`Create a
     * discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
     * Creates a new discussion post on a team's page. OAuth access tokens require the
     * `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  body  Required parameter: Example:
     * @return    Returns the TeamsDiscussionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public TeamsDiscussionsResponse teamsCreateDiscussionLegacy(
            final int teamId,
            final OrgsTeamsDiscussionsRequest body) throws ApiException, IOException {
        return prepareTeamsCreateDiscussionLegacyRequest(teamId, body).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`Create a
     * discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
     * Creates a new discussion post on a team's page. OAuth access tokens require the
     * `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  body  Required parameter: Example:
     * @return    Returns the TeamsDiscussionsResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<TeamsDiscussionsResponse> teamsCreateDiscussionLegacyAsync(
            final int teamId,
            final OrgsTeamsDiscussionsRequest body) {
        try { 
            return prepareTeamsCreateDiscussionLegacyRequest(teamId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsCreateDiscussionLegacy.
     */
    private ApiCall<TeamsDiscussionsResponse, ApiException> prepareTeamsCreateDiscussionLegacyRequest(
            final int teamId,
            final OrgsTeamsDiscussionsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<TeamsDiscussionsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/discussions")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TeamsDiscussionsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Get a
     * discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint. Get a
     * specific discussion on a team's page. OAuth access tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @return    Returns the TeamsDiscussionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public TeamsDiscussionsResponse teamsGetDiscussionLegacy(
            final int teamId,
            final int discussionNumber) throws ApiException, IOException {
        return prepareTeamsGetDiscussionLegacyRequest(teamId, discussionNumber).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Get a
     * discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint. Get a
     * specific discussion on a team's page. OAuth access tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @return    Returns the TeamsDiscussionsResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<TeamsDiscussionsResponse> teamsGetDiscussionLegacyAsync(
            final int teamId,
            final int discussionNumber) {
        try { 
            return prepareTeamsGetDiscussionLegacyRequest(teamId, discussionNumber).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsGetDiscussionLegacy.
     */
    private ApiCall<TeamsDiscussionsResponse, ApiException> prepareTeamsGetDiscussionLegacyRequest(
            final int teamId,
            final int discussionNumber) throws IOException {
        return new ApiCall.Builder<TeamsDiscussionsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/discussions/{discussion_number}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TeamsDiscussionsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Update a
     * discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint. Edits
     * the title and body text of a discussion post. Only the parameters you provide are updated.
     * OAuth access tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  body  Optional parameter: Example:
     * @return    Returns the TeamsDiscussionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public TeamsDiscussionsResponse teamsUpdateDiscussionLegacy(
            final int teamId,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberRequest body) throws ApiException, IOException {
        return prepareTeamsUpdateDiscussionLegacyRequest(teamId, discussionNumber, body).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Update a
     * discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint. Edits
     * the title and body text of a discussion post. Only the parameters you provide are updated.
     * OAuth access tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  body  Optional parameter: Example:
     * @return    Returns the TeamsDiscussionsResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<TeamsDiscussionsResponse> teamsUpdateDiscussionLegacyAsync(
            final int teamId,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberRequest body) {
        try { 
            return prepareTeamsUpdateDiscussionLegacyRequest(teamId, discussionNumber, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsUpdateDiscussionLegacy.
     */
    private ApiCall<TeamsDiscussionsResponse, ApiException> prepareTeamsUpdateDiscussionLegacyRequest(
            final int teamId,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<TeamsDiscussionsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/discussions/{discussion_number}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TeamsDiscussionsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`Delete a
     * discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
     * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public void teamsDeleteDiscussionLegacy(
            final int teamId,
            final int discussionNumber) throws ApiException, IOException {
        prepareTeamsDeleteDiscussionLegacyRequest(teamId, discussionNumber).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`Delete a
     * discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
     * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @return    Returns the void response from the API call
     */
    @Deprecated
    public CompletableFuture<Void> teamsDeleteDiscussionLegacyAsync(
            final int teamId,
            final int discussionNumber) {
        try { 
            return prepareTeamsDeleteDiscussionLegacyRequest(teamId, discussionNumber).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsDeleteDiscussionLegacy.
     */
    private ApiCall<Void, ApiException> prepareTeamsDeleteDiscussionLegacyRequest(
            final int teamId,
            final int discussionNumber) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/discussions/{discussion_number}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [List discussion
     * comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
     * List all comments on a team discussion. OAuth access tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of TeamDiscussionComment response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public List<TeamDiscussionComment> teamsListDiscussionCommentsLegacy(
            final int teamId,
            final int discussionNumber,
            final Direction1Enum direction,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListDiscussionCommentsLegacyRequest(teamId, discussionNumber, direction,
                perPage, page).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [List discussion
     * comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
     * List all comments on a team discussion. OAuth access tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of TeamDiscussionComment response from the API call
     */
    @Deprecated
    public CompletableFuture<List<TeamDiscussionComment>> teamsListDiscussionCommentsLegacyAsync(
            final int teamId,
            final int discussionNumber,
            final Direction1Enum direction,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListDiscussionCommentsLegacyRequest(teamId, discussionNumber, direction,
            perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListDiscussionCommentsLegacy.
     */
    private ApiCall<List<TeamDiscussionComment>, ApiException> prepareTeamsListDiscussionCommentsLegacyRequest(
            final int teamId,
            final int discussionNumber,
            final Direction1Enum direction,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<TeamDiscussionComment>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/discussions/{discussion_number}/comments")
                        .queryParam(param -> param.key("direction")
                                .value((direction != null) ? direction.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        TeamDiscussionComment[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Create a discussion
     * comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
     * Creates a new comment on a team discussion. OAuth access tokens require the
     * `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  body  Required parameter: Example:
     * @return    Returns the TeamsDiscussionsCommentsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public TeamsDiscussionsCommentsResponse teamsCreateDiscussionCommentLegacy(
            final int teamId,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberRequest body) throws ApiException, IOException {
        return prepareTeamsCreateDiscussionCommentLegacyRequest(teamId, discussionNumber,
                body).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Create a discussion
     * comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
     * Creates a new comment on a team discussion. OAuth access tokens require the
     * `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * This endpoint triggers
     * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * Creating content too quickly using this endpoint may result in secondary rate limiting. See
     * "[Secondary rate
     * limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
     * and "[Dealing with secondary rate
     * limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
     * for details.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  body  Required parameter: Example:
     * @return    Returns the TeamsDiscussionsCommentsResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<TeamsDiscussionsCommentsResponse> teamsCreateDiscussionCommentLegacyAsync(
            final int teamId,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberRequest body) {
        try { 
            return prepareTeamsCreateDiscussionCommentLegacyRequest(teamId, discussionNumber,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsCreateDiscussionCommentLegacy.
     */
    private ApiCall<TeamsDiscussionsCommentsResponse, ApiException> prepareTeamsCreateDiscussionCommentLegacyRequest(
            final int teamId,
            final int discussionNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<TeamsDiscussionsCommentsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/discussions/{discussion_number}/comments")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TeamsDiscussionsCommentsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Get a discussion
     * comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint. Get
     * a specific comment on a team discussion. OAuth access tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @return    Returns the TeamsDiscussionsCommentsCommentNumberResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public TeamsDiscussionsCommentsCommentNumberResponse teamsGetDiscussionCommentLegacy(
            final int teamId,
            final int discussionNumber,
            final int commentNumber) throws ApiException, IOException {
        return prepareTeamsGetDiscussionCommentLegacyRequest(teamId, discussionNumber,
                commentNumber).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Get a discussion
     * comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint. Get
     * a specific comment on a team discussion. OAuth access tokens require the `read:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @return    Returns the TeamsDiscussionsCommentsCommentNumberResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<TeamsDiscussionsCommentsCommentNumberResponse> teamsGetDiscussionCommentLegacyAsync(
            final int teamId,
            final int discussionNumber,
            final int commentNumber) {
        try { 
            return prepareTeamsGetDiscussionCommentLegacyRequest(teamId, discussionNumber,
            commentNumber).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsGetDiscussionCommentLegacy.
     */
    private ApiCall<TeamsDiscussionsCommentsCommentNumberResponse, ApiException> prepareTeamsGetDiscussionCommentLegacyRequest(
            final int teamId,
            final int discussionNumber,
            final int commentNumber) throws IOException {
        return new ApiCall.Builder<TeamsDiscussionsCommentsCommentNumberResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_number").value(commentNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TeamsDiscussionsCommentsCommentNumberResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Update a discussion
     * comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
     * Edits the body text of a discussion comment. OAuth access tokens require the
     * `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the TeamsDiscussionsCommentsCommentNumberResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public TeamsDiscussionsCommentsCommentNumberResponse teamsUpdateDiscussionCommentLegacy(
            final int teamId,
            final int discussionNumber,
            final int commentNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberRequest body) throws ApiException, IOException {
        return prepareTeamsUpdateDiscussionCommentLegacyRequest(teamId, discussionNumber,
                commentNumber, body).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Update a discussion
     * comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
     * Edits the body text of a discussion comment. OAuth access tokens require the
     * `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @param  body  Required parameter: Example:
     * @return    Returns the TeamsDiscussionsCommentsCommentNumberResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<TeamsDiscussionsCommentsCommentNumberResponse> teamsUpdateDiscussionCommentLegacyAsync(
            final int teamId,
            final int discussionNumber,
            final int commentNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberRequest body) {
        try { 
            return prepareTeamsUpdateDiscussionCommentLegacyRequest(teamId, discussionNumber, commentNumber,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsUpdateDiscussionCommentLegacy.
     */
    private ApiCall<TeamsDiscussionsCommentsCommentNumberResponse, ApiException> prepareTeamsUpdateDiscussionCommentLegacyRequest(
            final int teamId,
            final int discussionNumber,
            final int commentNumber,
            final OrgsTeamsDiscussionsDiscussionNumberCommentsCommentNumberRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<TeamsDiscussionsCommentsCommentNumberResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_number").value(commentNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TeamsDiscussionsCommentsCommentNumberResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Delete a discussion
     * comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
     * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public void teamsDeleteDiscussionCommentLegacy(
            final int teamId,
            final int discussionNumber,
            final int commentNumber) throws ApiException, IOException {
        prepareTeamsDeleteDiscussionCommentLegacyRequest(teamId, discussionNumber,
                commentNumber).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Delete a discussion
     * comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
     * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  discussionNumber  Required parameter: The number that identifies the discussion.
     * @param  commentNumber  Required parameter: The number that identifies the comment.
     * @return    Returns the void response from the API call
     */
    @Deprecated
    public CompletableFuture<Void> teamsDeleteDiscussionCommentLegacyAsync(
            final int teamId,
            final int discussionNumber,
            final int commentNumber) {
        try { 
            return prepareTeamsDeleteDiscussionCommentLegacyRequest(teamId, discussionNumber,
            commentNumber).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsDeleteDiscussionCommentLegacy.
     */
    private ApiCall<Void, ApiException> prepareTeamsDeleteDiscussionCommentLegacyRequest(
            final int teamId,
            final int discussionNumber,
            final int commentNumber) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("discussion_number").value(discussionNumber).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("comment_number").value(commentNumber).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`List pending team
     * invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations)
     * endpoint. The return hash contains a `role` field which refers to the Organization Invitation
     * role and will be one of the following values: `direct_member`, `admin`, `billing_manager`,
     * `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in
     * the return hash will be `null`.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrganizationInvitation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public List<OrganizationInvitation> teamsListPendingInvitationsLegacy(
            final int teamId,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListPendingInvitationsLegacyRequest(teamId, perPage, page).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`List pending team
     * invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations)
     * endpoint. The return hash contains a `role` field which refers to the Organization Invitation
     * role and will be one of the following values: `direct_member`, `admin`, `billing_manager`,
     * `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in
     * the return hash will be `null`.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of OrganizationInvitation response from the API call
     */
    @Deprecated
    public CompletableFuture<List<OrganizationInvitation>> teamsListPendingInvitationsLegacyAsync(
            final int teamId,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListPendingInvitationsLegacyRequest(teamId, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListPendingInvitationsLegacy.
     */
    private ApiCall<List<OrganizationInvitation>, ApiException> prepareTeamsListPendingInvitationsLegacyRequest(
            final int teamId,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<OrganizationInvitation>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/invitations")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        OrganizationInvitation[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`List team
     * members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint. Team
     * members will include the members of child teams.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  role  Optional parameter: Filters members returned by their role in the team.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of SimpleUser response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public List<SimpleUser> teamsListMembersLegacy(
            final int teamId,
            final Role51Enum role,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListMembersLegacyRequest(teamId, role, perPage, page).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`List team
     * members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint. Team
     * members will include the members of child teams.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  role  Optional parameter: Filters members returned by their role in the team.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of SimpleUser response from the API call
     */
    @Deprecated
    public CompletableFuture<List<SimpleUser>> teamsListMembersLegacyAsync(
            final int teamId,
            final Role51Enum role,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListMembersLegacyRequest(teamId, role, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListMembersLegacy.
     */
    private ApiCall<List<SimpleUser>, ApiException> prepareTeamsListMembersLegacyRequest(
            final int teamId,
            final Role51Enum role,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<SimpleUser>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/members")
                        .queryParam(param -> param.key("role")
                                .value((role != null) ? role.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        SimpleUser[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new TeamsMembers404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * The "Get team member" endpoint (described below) is deprecated. We recommend using the [Get
     * team membership for a
     * user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint
     * instead. It allows you to get both active and pending memberships. To list members in a team,
     * the team must be visible to the authenticated user.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public void teamsGetMemberLegacy(
            final int teamId,
            final String username) throws ApiException, IOException {
        prepareTeamsGetMemberLegacyRequest(teamId, username).execute();
    }

    /**
     * The "Get team member" endpoint (described below) is deprecated. We recommend using the [Get
     * team membership for a
     * user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint
     * instead. It allows you to get both active and pending memberships. To list members in a team,
     * the team must be visible to the authenticated user.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    @Deprecated
    public CompletableFuture<Void> teamsGetMemberLegacyAsync(
            final int teamId,
            final String username) {
        try { 
            return prepareTeamsGetMemberLegacyRequest(teamId, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsGetMemberLegacy.
     */
    private ApiCall<Void, ApiException> prepareTeamsGetMemberLegacyRequest(
            final int teamId,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/members/{username}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("if user is not a member",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * The "Add team member" endpoint (described below) is deprecated. We recommend using the [Add
     * or update team membership for a
     * user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user)
     * endpoint instead. It allows you to invite new organization members to your teams. Team
     * synchronization is available for organizations using GitHub Enterprise Cloud. For more
     * information, see [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. To add someone to a team, the authenticated user must be an
     * organization owner or a team maintainer in the team they're changing. The person being added
     * to the team must be a member of the team's organization. **Note:** When you have team
     * synchronization set up for a team with your organization's identity provider (IdP), you will
     * see an error if you attempt to use the API for making changes to the team's membership. If
     * you have access to manage group membership in your IdP, you can manage GitHub team membership
     * through your identity provider, which automatically adds and removes team members in an
     * organization. For more information, see "[Synchronizing teams between your identity provider
     * and
     * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For
     * more information, see "[HTTP
     * verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public void teamsAddMemberLegacy(
            final int teamId,
            final String username) throws ApiException, IOException {
        prepareTeamsAddMemberLegacyRequest(teamId, username).execute();
    }

    /**
     * The "Add team member" endpoint (described below) is deprecated. We recommend using the [Add
     * or update team membership for a
     * user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user)
     * endpoint instead. It allows you to invite new organization members to your teams. Team
     * synchronization is available for organizations using GitHub Enterprise Cloud. For more
     * information, see [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. To add someone to a team, the authenticated user must be an
     * organization owner or a team maintainer in the team they're changing. The person being added
     * to the team must be a member of the team's organization. **Note:** When you have team
     * synchronization set up for a team with your organization's identity provider (IdP), you will
     * see an error if you attempt to use the API for making changes to the team's membership. If
     * you have access to manage group membership in your IdP, you can manage GitHub team membership
     * through your identity provider, which automatically adds and removes team members in an
     * organization. For more information, see "[Synchronizing teams between your identity provider
     * and
     * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For
     * more information, see "[HTTP
     * verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    @Deprecated
    public CompletableFuture<Void> teamsAddMemberLegacyAsync(
            final int teamId,
            final String username) {
        try { 
            return prepareTeamsAddMemberLegacyRequest(teamId, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsAddMemberLegacy.
     */
    private ApiCall<Void, ApiException> prepareTeamsAddMemberLegacyRequest(
            final int teamId,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/members/{username}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new TeamsMembers403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found if team synchronization is set up",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * The "Remove team member" endpoint (described below) is deprecated. We recommend using the
     * [Remove team membership for a
     * user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user)
     * endpoint instead. It allows you to remove both active and pending memberships. Team
     * synchronization is available for organizations using GitHub Enterprise Cloud. For more
     * information, see [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. To remove a team member, the authenticated user must have 'admin'
     * permissions to the team or be an owner of the org that the team is associated with. Removing
     * a team member does not delete the user, it just removes them from the team. **Note:** When
     * you have team synchronization set up for a team with your organization's identity provider
     * (IdP), you will see an error if you attempt to use the API for making changes to the team's
     * membership. If you have access to manage group membership in your IdP, you can manage GitHub
     * team membership through your identity provider, which automatically adds and removes team
     * members in an organization. For more information, see "[Synchronizing teams between your
     * identity provider and
     * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).".
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public void teamsRemoveMemberLegacy(
            final int teamId,
            final String username) throws ApiException, IOException {
        prepareTeamsRemoveMemberLegacyRequest(teamId, username).execute();
    }

    /**
     * The "Remove team member" endpoint (described below) is deprecated. We recommend using the
     * [Remove team membership for a
     * user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user)
     * endpoint instead. It allows you to remove both active and pending memberships. Team
     * synchronization is available for organizations using GitHub Enterprise Cloud. For more
     * information, see [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. To remove a team member, the authenticated user must have 'admin'
     * permissions to the team or be an owner of the org that the team is associated with. Removing
     * a team member does not delete the user, it just removes them from the team. **Note:** When
     * you have team synchronization set up for a team with your organization's identity provider
     * (IdP), you will see an error if you attempt to use the API for making changes to the team's
     * membership. If you have access to manage group membership in your IdP, you can manage GitHub
     * team membership through your identity provider, which automatically adds and removes team
     * members in an organization. For more information, see "[Synchronizing teams between your
     * identity provider and
     * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).".
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    @Deprecated
    public CompletableFuture<Void> teamsRemoveMemberLegacyAsync(
            final int teamId,
            final String username) {
        try { 
            return prepareTeamsRemoveMemberLegacyRequest(teamId, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsRemoveMemberLegacy.
     */
    private ApiCall<Void, ApiException> prepareTeamsRemoveMemberLegacyRequest(
            final int teamId,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/members/{username}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found if team synchronization is setup",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Get team membership for a
     * user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
     * Team members will include the members of child teams. To get a user's membership with a team,
     * the team must be visible to the authenticated user. **Note:** The response contains the
     * `state` of the membership and the member's `role`. The `role` for organization owners is set
     * to `maintainer`. For more information about `maintainer` roles, see [Create a
     * team](https://docs.github.com/rest/reference/teams#create-a-team).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the TeamsMembershipsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public TeamsMembershipsResponse teamsGetMembershipForUserLegacy(
            final int teamId,
            final String username) throws ApiException, IOException {
        return prepareTeamsGetMembershipForUserLegacyRequest(teamId, username).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Get team membership for a
     * user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
     * Team members will include the members of child teams. To get a user's membership with a team,
     * the team must be visible to the authenticated user. **Note:** The response contains the
     * `state` of the membership and the member's `role`. The `role` for organization owners is set
     * to `maintainer`. For more information about `maintainer` roles, see [Create a
     * team](https://docs.github.com/rest/reference/teams#create-a-team).
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the TeamsMembershipsResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<TeamsMembershipsResponse> teamsGetMembershipForUserLegacyAsync(
            final int teamId,
            final String username) {
        try { 
            return prepareTeamsGetMembershipForUserLegacyRequest(teamId, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsGetMembershipForUserLegacy.
     */
    private ApiCall<TeamsMembershipsResponse, ApiException> prepareTeamsGetMembershipForUserLegacyRequest(
            final int teamId,
            final String username) throws IOException {
        return new ApiCall.Builder<TeamsMembershipsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/memberships/{username}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TeamsMembershipsResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new TeamsMemberships404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Add or update team membership
     * for a
     * user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user)
     * endpoint. Team synchronization is available for organizations using GitHub Enterprise Cloud.
     * For more information, see [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. If the user is already a member of the team's organization, this
     * endpoint will add the user to the team. To add a membership between an organization member
     * and a team, the authenticated user must be an organization owner or a team maintainer.
     * **Note:** When you have team synchronization set up for a team with your organization's
     * identity provider (IdP), you will see an error if you attempt to use the API for making
     * changes to the team's membership. If you have access to manage group membership in your IdP,
     * you can manage GitHub team membership through your identity provider, which automatically
     * adds and removes team members in an organization. For more information, see "[Synchronizing
     * teams between your identity provider and
     * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     * If the user is unaffiliated with the team's organization, this endpoint will send an
     * invitation to the user via email. This newly-created membership will be in the "pending"
     * state until the user accepts the invitation, at which point the membership will transition to
     * the "active" state and the user will be added as a member of the team. To add a membership
     * between an unaffiliated user and a team, the authenticated user must be an organization
     * owner. If the user is already a member of the team, this endpoint will update the role of the
     * team member's role. To update the membership of a team member, the authenticated user must be
     * an organization owner or a team maintainer.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  body  Optional parameter: Example:
     * @return    Returns the TeamsMembershipsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public TeamsMembershipsResponse teamsAddOrUpdateMembershipForUserLegacy(
            final int teamId,
            final String username,
            final TeamsMembershipsRequest body) throws ApiException, IOException {
        return prepareTeamsAddOrUpdateMembershipForUserLegacyRequest(teamId, username,
                body).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Add or update team membership
     * for a
     * user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user)
     * endpoint. Team synchronization is available for organizations using GitHub Enterprise Cloud.
     * For more information, see [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. If the user is already a member of the team's organization, this
     * endpoint will add the user to the team. To add a membership between an organization member
     * and a team, the authenticated user must be an organization owner or a team maintainer.
     * **Note:** When you have team synchronization set up for a team with your organization's
     * identity provider (IdP), you will see an error if you attempt to use the API for making
     * changes to the team's membership. If you have access to manage group membership in your IdP,
     * you can manage GitHub team membership through your identity provider, which automatically
     * adds and removes team members in an organization. For more information, see "[Synchronizing
     * teams between your identity provider and
     * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     * If the user is unaffiliated with the team's organization, this endpoint will send an
     * invitation to the user via email. This newly-created membership will be in the "pending"
     * state until the user accepts the invitation, at which point the membership will transition to
     * the "active" state and the user will be added as a member of the team. To add a membership
     * between an unaffiliated user and a team, the authenticated user must be an organization
     * owner. If the user is already a member of the team, this endpoint will update the role of the
     * team member's role. To update the membership of a team member, the authenticated user must be
     * an organization owner or a team maintainer.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  body  Optional parameter: Example:
     * @return    Returns the TeamsMembershipsResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<TeamsMembershipsResponse> teamsAddOrUpdateMembershipForUserLegacyAsync(
            final int teamId,
            final String username,
            final TeamsMembershipsRequest body) {
        try { 
            return prepareTeamsAddOrUpdateMembershipForUserLegacyRequest(teamId, username,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsAddOrUpdateMembershipForUserLegacy.
     */
    private ApiCall<TeamsMembershipsResponse, ApiException> prepareTeamsAddOrUpdateMembershipForUserLegacyRequest(
            final int teamId,
            final String username,
            final TeamsMembershipsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<TeamsMembershipsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/memberships/{username}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TeamsMembershipsResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden if team synchronization is set up",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new TeamsMemberships404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Unprocessable Entity if you attempt to add an organization to a team",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Remove team membership for a
     * user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user)
     * endpoint. Team synchronization is available for organizations using GitHub Enterprise Cloud.
     * For more information, see [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. To remove a membership between a user and a team, the
     * authenticated user must have 'admin' permissions to the team or be an owner of the
     * organization that the team is associated with. Removing team membership does not delete the
     * user, it just removes their membership from the team. **Note:** When you have team
     * synchronization set up for a team with your organization's identity provider (IdP), you will
     * see an error if you attempt to use the API for making changes to the team's membership. If
     * you have access to manage group membership in your IdP, you can manage GitHub team membership
     * through your identity provider, which automatically adds and removes team members in an
     * organization. For more information, see "[Synchronizing teams between your identity provider
     * and
     * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).".
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public void teamsRemoveMembershipForUserLegacy(
            final int teamId,
            final String username) throws ApiException, IOException {
        prepareTeamsRemoveMembershipForUserLegacyRequest(teamId, username).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Remove team membership for a
     * user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user)
     * endpoint. Team synchronization is available for organizations using GitHub Enterprise Cloud.
     * For more information, see [GitHub's
     * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
     * GitHub Help documentation. To remove a membership between a user and a team, the
     * authenticated user must have 'admin' permissions to the team or be an owner of the
     * organization that the team is associated with. Removing team membership does not delete the
     * user, it just removes their membership from the team. **Note:** When you have team
     * synchronization set up for a team with your organization's identity provider (IdP), you will
     * see an error if you attempt to use the API for making changes to the team's membership. If
     * you have access to manage group membership in your IdP, you can manage GitHub team membership
     * through your identity provider, which automatically adds and removes team members in an
     * organization. For more information, see "[Synchronizing teams between your identity provider
     * and
     * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).".
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    @Deprecated
    public CompletableFuture<Void> teamsRemoveMembershipForUserLegacyAsync(
            final int teamId,
            final String username) {
        try { 
            return prepareTeamsRemoveMembershipForUserLegacyRequest(teamId, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsRemoveMembershipForUserLegacy.
     */
    private ApiCall<Void, ApiException> prepareTeamsRemoveMembershipForUserLegacyRequest(
            final int teamId,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/memberships/{username}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("if team synchronization is set up",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`List team
     * projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint. Lists
     * the organization projects for a team.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of TeamProject response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public List<TeamProject> teamsListProjectsLegacy(
            final int teamId,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListProjectsLegacyRequest(teamId, perPage, page).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`List team
     * projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint. Lists
     * the organization projects for a team.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of TeamProject response from the API call
     */
    @Deprecated
    public CompletableFuture<List<TeamProject>> teamsListProjectsLegacyAsync(
            final int teamId,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListProjectsLegacyRequest(teamId, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListProjectsLegacy.
     */
    private ApiCall<List<TeamProject>, ApiException> prepareTeamsListProjectsLegacyRequest(
            final int teamId,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<TeamProject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/projects")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        TeamProject[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new TeamsProjects404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Check team permissions for a
     * project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project)
     * endpoint. Checks whether a team has `read`, `write`, or `admin` permissions for an
     * organization project. The response includes projects inherited from a parent team.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @return    Returns the TeamsProjectsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public TeamsProjectsResponse teamsCheckPermissionsForProjectLegacy(
            final int teamId,
            final int projectId) throws ApiException, IOException {
        return prepareTeamsCheckPermissionsForProjectLegacyRequest(teamId, projectId).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Check team permissions for a
     * project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project)
     * endpoint. Checks whether a team has `read`, `write`, or `admin` permissions for an
     * organization project. The response includes projects inherited from a parent team.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @return    Returns the TeamsProjectsResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<TeamsProjectsResponse> teamsCheckPermissionsForProjectLegacyAsync(
            final int teamId,
            final int projectId) {
        try { 
            return prepareTeamsCheckPermissionsForProjectLegacyRequest(teamId, projectId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsCheckPermissionsForProjectLegacy.
     */
    private ApiCall<TeamsProjectsResponse, ApiException> prepareTeamsCheckPermissionsForProjectLegacyRequest(
            final int teamId,
            final int projectId) throws IOException {
        return new ApiCall.Builder<TeamsProjectsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/projects/{project_id}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TeamsProjectsResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found if project is not managed by this team",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Add or update team project
     * permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions)
     * endpoint. Adds an organization project to a team. To add a project to a team or update the
     * team's permission on a project, the authenticated user must have `admin` permissions for the
     * project. The project and team must be part of the same organization.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public void teamsAddOrUpdateProjectPermissionsLegacy(
            final int teamId,
            final int projectId,
            final TeamsProjectsRequest body) throws ApiException, IOException {
        prepareTeamsAddOrUpdateProjectPermissionsLegacyRequest(teamId, projectId, body).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Add or update team project
     * permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions)
     * endpoint. Adds an organization project to a team. To add a project to a team or update the
     * team's permission on a project, the authenticated user must have `admin` permissions for the
     * project. The project and team must be part of the same organization.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    @Deprecated
    public CompletableFuture<Void> teamsAddOrUpdateProjectPermissionsLegacyAsync(
            final int teamId,
            final int projectId,
            final TeamsProjectsRequest body) {
        try { 
            return prepareTeamsAddOrUpdateProjectPermissionsLegacyRequest(teamId, projectId,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsAddOrUpdateProjectPermissionsLegacy.
     */
    private ApiCall<Void, ApiException> prepareTeamsAddOrUpdateProjectPermissionsLegacyRequest(
            final int teamId,
            final int projectId,
            final TeamsProjectsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/projects/{project_id}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden if the project is not owned by the organization",
                                (reason, context) -> new TeamsProjects403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new TeamsProjects404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new TeamsProjects422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Remove a project from a
     * team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
     * Removes an organization project from a team. An organization owner or a team maintainer can
     * remove any project from the team. To remove a project from a team as an organization member,
     * the authenticated user must have `read` access to both the team and project, or `admin`
     * access to the team or project. **Note:** This endpoint removes the project from the team, but
     * does not delete it.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public void teamsRemoveProjectLegacy(
            final int teamId,
            final int projectId) throws ApiException, IOException {
        prepareTeamsRemoveProjectLegacyRequest(teamId, projectId).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Remove a project from a
     * team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
     * Removes an organization project from a team. An organization owner or a team maintainer can
     * remove any project from the team. To remove a project from a team as an organization member,
     * the authenticated user must have `read` access to both the team and project, or `admin`
     * access to the team or project. **Note:** This endpoint removes the project from the team, but
     * does not delete it.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @return    Returns the void response from the API call
     */
    @Deprecated
    public CompletableFuture<Void> teamsRemoveProjectLegacyAsync(
            final int teamId,
            final int projectId) {
        try { 
            return prepareTeamsRemoveProjectLegacyRequest(teamId, projectId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsRemoveProjectLegacy.
     */
    private ApiCall<Void, ApiException> prepareTeamsRemoveProjectLegacyRequest(
            final int teamId,
            final int projectId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/projects/{project_id}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new TeamsProjects404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new TeamsProjects422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [List team
     * repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of MinimalRepository response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public List<MinimalRepository> teamsListReposLegacy(
            final int teamId,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListReposLegacyRequest(teamId, perPage, page).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [List team
     * repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of MinimalRepository response from the API call
     */
    @Deprecated
    public CompletableFuture<List<MinimalRepository>> teamsListReposLegacyAsync(
            final int teamId,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListReposLegacyRequest(teamId, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListReposLegacy.
     */
    private ApiCall<List<MinimalRepository>, ApiException> prepareTeamsListReposLegacyRequest(
            final int teamId,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<MinimalRepository>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/repos")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        MinimalRepository[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new TeamsRepos404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Note**: Repositories inherited through a parent team will also be checked. **Deprecation
     * Notice:** This endpoint route is deprecated and will be removed from the Teams API. We
     * recommend migrating your existing code to use the new [Check team permissions for a
     * repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository)
     * endpoint. You can also get information about the specified repository, including what
     * permissions the team grants on it, by passing the following custom [media
     * type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @return    Returns the TeamsReposRepoResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public TeamsReposRepoResponse teamsCheckPermissionsForRepoLegacy(
            final int teamId,
            final String owner,
            final String repo) throws ApiException, IOException {
        return prepareTeamsCheckPermissionsForRepoLegacyRequest(teamId, owner, repo).execute();
    }

    /**
     * **Note**: Repositories inherited through a parent team will also be checked. **Deprecation
     * Notice:** This endpoint route is deprecated and will be removed from the Teams API. We
     * recommend migrating your existing code to use the new [Check team permissions for a
     * repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository)
     * endpoint. You can also get information about the specified repository, including what
     * permissions the team grants on it, by passing the following custom [media
     * type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @return    Returns the TeamsReposRepoResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<TeamsReposRepoResponse> teamsCheckPermissionsForRepoLegacyAsync(
            final int teamId,
            final String owner,
            final String repo) {
        try { 
            return prepareTeamsCheckPermissionsForRepoLegacyRequest(teamId, owner, repo).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsCheckPermissionsForRepoLegacy.
     */
    private ApiCall<TeamsReposRepoResponse, ApiException> prepareTeamsCheckPermissionsForRepoLegacyRequest(
            final int teamId,
            final String owner,
            final String repo) throws IOException {
        return new ApiCall.Builder<TeamsReposRepoResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/repos/{owner}/{repo}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TeamsReposRepoResponse.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found if repository is not managed by this team",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new "[Add or update team repository
     * permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)"
     * endpoint. To add a repository to a team or update the team's permission on a repository, the
     * authenticated user must have admin access to the repository, and must be able to see the
     * team. The repository must be owned by the organization, or a direct fork of a repository
     * owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to
     * add a repository to a team that is not owned by the organization. Note that, if you choose
     * not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to
     * this endpoint. For more information, see "[HTTP
     * verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public void teamsAddOrUpdateRepoPermissionsLegacy(
            final int teamId,
            final String owner,
            final String repo,
            final TeamsReposRepoRequest body) throws ApiException, IOException {
        prepareTeamsAddOrUpdateRepoPermissionsLegacyRequest(teamId, owner, repo, body).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new "[Add or update team repository
     * permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)"
     * endpoint. To add a repository to a team or update the team's permission on a repository, the
     * authenticated user must have admin access to the repository, and must be able to see the
     * team. The repository must be owned by the organization, or a direct fork of a repository
     * owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to
     * add a repository to a team that is not owned by the organization. Note that, if you choose
     * not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to
     * this endpoint. For more information, see "[HTTP
     * verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    @Deprecated
    public CompletableFuture<Void> teamsAddOrUpdateRepoPermissionsLegacyAsync(
            final int teamId,
            final String owner,
            final String repo,
            final TeamsReposRepoRequest body) {
        try { 
            return prepareTeamsAddOrUpdateRepoPermissionsLegacyRequest(teamId, owner, repo,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsAddOrUpdateRepoPermissionsLegacy.
     */
    private ApiCall<Void, ApiException> prepareTeamsAddOrUpdateRepoPermissionsLegacyRequest(
            final int teamId,
            final String owner,
            final String repo,
            final TeamsReposRepoRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/repos/{owner}/{repo}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new TeamsReposRepo403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new TeamsReposRepo422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Remove a repository from a
     * team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
     * If the authenticated user is an organization owner or a team maintainer, they can remove any
     * repositories from the team. To remove a repository from a team as an organization member, the
     * authenticated user must have admin access to the repository and must be able to see the team.
     * NOTE: This does not delete the repository, it just removes it from the team.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public void teamsRemoveRepoLegacy(
            final int teamId,
            final String owner,
            final String repo) throws ApiException, IOException {
        prepareTeamsRemoveRepoLegacyRequest(teamId, owner, repo).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [Remove a repository from a
     * team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
     * If the authenticated user is an organization owner or a team maintainer, they can remove any
     * repositories from the team. To remove a repository from a team as an organization member, the
     * authenticated user must have admin access to the repository and must be able to see the team.
     * NOTE: This does not delete the repository, it just removes it from the team.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @return    Returns the void response from the API call
     */
    @Deprecated
    public CompletableFuture<Void> teamsRemoveRepoLegacyAsync(
            final int teamId,
            final String owner,
            final String repo) {
        try { 
            return prepareTeamsRemoveRepoLegacyRequest(teamId, owner, repo).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsRemoveRepoLegacy.
     */
    private ApiCall<Void, ApiException> prepareTeamsRemoveRepoLegacyRequest(
            final int teamId,
            final String owner,
            final String repo) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/repos/{owner}/{repo}")
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`List child
     * teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Team response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public List<Team> teamsListChildLegacy(
            final int teamId,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListChildLegacyRequest(teamId, perPage, page).execute();
    }

    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams
     * API. We recommend migrating your existing code to use the new [`List child
     * teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
     * @deprecated
     * 
     * @param  teamId  Required parameter: The unique identifier of the team.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Team response from the API call
     */
    @Deprecated
    public CompletableFuture<List<Team>> teamsListChildLegacyAsync(
            final int teamId,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListChildLegacyRequest(teamId, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListChildLegacy.
     */
    private ApiCall<List<Team>, ApiException> prepareTeamsListChildLegacyRequest(
            final int teamId,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Team>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/teams/{team_id}/teams")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("team_id").value(teamId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Team[].class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new TeamsTeams403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new TeamsTeams404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new TeamsTeams422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List all of the teams across all of the organizations to which the authenticated user
     * belongs. This method requires `user`, `repo`, or `read:org`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)
     * when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of FullTeam response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<FullTeam> teamsListForAuthenticatedUser(
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareTeamsListForAuthenticatedUserRequest(perPage, page).execute();
    }

    /**
     * List all of the teams across all of the organizations to which the authenticated user
     * belongs. This method requires `user`, `repo`, or `read:org`
     * [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)
     * when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of FullTeam response from the API call
     */
    public CompletableFuture<List<FullTeam>> teamsListForAuthenticatedUserAsync(
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareTeamsListForAuthenticatedUserRequest(perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for teamsListForAuthenticatedUser.
     */
    private ApiCall<List<FullTeam>, ApiException> prepareTeamsListForAuthenticatedUserRequest(
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<FullTeam>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/user/teams")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        FullTeam[].class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new UserTeams403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new UserTeams404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.EnterprisesSecretScanningAlerts404ErrorException;
import com.github.api.exceptions.OrgsSecretScanningAlerts404ErrorException;
import com.github.api.exceptions.ServiceUnavailable1Exception;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.Direction1Enum;
import com.github.api.models.OrganizationSecretScanningAlert;
import com.github.api.models.ReposSecretScanningAlertsAlertNumberRequest;
import com.github.api.models.SecretScanningAlert;
import com.github.api.models.SecretScanningLocation;
import com.github.api.models.Sort30Enum;
import com.github.api.models.State1661Enum;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SecretScanningController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SecretScanningController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to
     * oldest. To use this endpoint, you must be a member of the enterprise, and you must use an
     * access token with the `repo` scope or `security_events` scope. Alerts are only returned for
     * organizations in the enterprise for which you are an organization owner or a [security
     * manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  state  Optional parameter: Set to `open` or `resolved` to only list secret scanning
     *         alerts in a specific state.
     * @param  secretType  Optional parameter: A comma-separated list of secret types to return. By
     *         default all secret types are returned. See "[Secret scanning
     *         patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
     *         for a complete list of secret types.
     * @param  resolution  Optional parameter: A comma-separated list of resolutions. Only secret
     *         scanning alerts with one of these resolutions are listed. Valid resolutions are
     *         `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or
     *         `used_in_tests`.
     * @param  sort  Optional parameter: The property to sort the results by. `created` means when
     *         the alert was created. `updated` means when the alert was updated or resolved.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  before  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for results before this cursor.
     * @param  after  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for results after this cursor.
     * @return    Returns the List of OrganizationSecretScanningAlert response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<OrganizationSecretScanningAlert> secretScanningListAlertsForEnterprise(
            final String enterprise,
            final State1661Enum state,
            final String secretType,
            final String resolution,
            final Sort30Enum sort,
            final Direction1Enum direction,
            final Integer perPage,
            final String before,
            final String after) throws ApiException, IOException {
        return prepareSecretScanningListAlertsForEnterpriseRequest(enterprise, state, secretType,
                resolution, sort, direction, perPage, before, after).execute();
    }

    /**
     * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to
     * oldest. To use this endpoint, you must be a member of the enterprise, and you must use an
     * access token with the `repo` scope or `security_events` scope. Alerts are only returned for
     * organizations in the enterprise for which you are an organization owner or a [security
     * manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
     * @param  enterprise  Required parameter: The slug version of the enterprise name. You can also
     *         substitute this value with the enterprise id.
     * @param  state  Optional parameter: Set to `open` or `resolved` to only list secret scanning
     *         alerts in a specific state.
     * @param  secretType  Optional parameter: A comma-separated list of secret types to return. By
     *         default all secret types are returned. See "[Secret scanning
     *         patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
     *         for a complete list of secret types.
     * @param  resolution  Optional parameter: A comma-separated list of resolutions. Only secret
     *         scanning alerts with one of these resolutions are listed. Valid resolutions are
     *         `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or
     *         `used_in_tests`.
     * @param  sort  Optional parameter: The property to sort the results by. `created` means when
     *         the alert was created. `updated` means when the alert was updated or resolved.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  before  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for results before this cursor.
     * @param  after  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for results after this cursor.
     * @return    Returns the List of OrganizationSecretScanningAlert response from the API call
     */
    public CompletableFuture<List<OrganizationSecretScanningAlert>> secretScanningListAlertsForEnterpriseAsync(
            final String enterprise,
            final State1661Enum state,
            final String secretType,
            final String resolution,
            final Sort30Enum sort,
            final Direction1Enum direction,
            final Integer perPage,
            final String before,
            final String after) {
        try { 
            return prepareSecretScanningListAlertsForEnterpriseRequest(enterprise, state, secretType,
            resolution, sort, direction, perPage, before, after).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for secretScanningListAlertsForEnterprise.
     */
    private ApiCall<List<OrganizationSecretScanningAlert>, ApiException> prepareSecretScanningListAlertsForEnterpriseRequest(
            final String enterprise,
            final State1661Enum state,
            final String secretType,
            final String resolution,
            final Sort30Enum sort,
            final Direction1Enum direction,
            final Integer perPage,
            final String before,
            final String after) throws IOException {
        return new ApiCall.Builder<List<OrganizationSecretScanningAlert>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/enterprises/{enterprise}/secret-scanning/alerts")
                        .queryParam(param -> param.key("state")
                                .value((state != null) ? state.value() : null).isRequired(false))
                        .queryParam(param -> param.key("secret_type")
                                .value(secretType).isRequired(false))
                        .queryParam(param -> param.key("resolution")
                                .value(resolution).isRequired(false))
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .queryParam(param -> param.key("direction")
                                .value((direction != null) ? direction.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("before")
                                .value(before).isRequired(false))
                        .queryParam(param -> param.key("after")
                                .value(after).isRequired(false))
                        .templateParam(param -> param.key("enterprise").value(enterprise)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        OrganizationSecretScanningAlert[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new EnterprisesSecretScanningAlerts404ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists secret scanning alerts for eligible repositories in an organization, from newest to
     * oldest. To use this endpoint, you must be an administrator or security manager for the
     * organization, and you must use an access token with the `repo` scope or `security_events`
     * scope. For public repositories, you may instead use the `public_repo` scope. GitHub Apps must
     * have the `secret_scanning_alerts` read permission to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  state  Optional parameter: Set to `open` or `resolved` to only list secret scanning
     *         alerts in a specific state.
     * @param  secretType  Optional parameter: A comma-separated list of secret types to return. By
     *         default all secret types are returned. See "[Secret scanning
     *         patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
     *         for a complete list of secret types.
     * @param  resolution  Optional parameter: A comma-separated list of resolutions. Only secret
     *         scanning alerts with one of these resolutions are listed. Valid resolutions are
     *         `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or
     *         `used_in_tests`.
     * @param  sort  Optional parameter: The property to sort the results by. `created` means when
     *         the alert was created. `updated` means when the alert was updated or resolved.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  before  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for events before this cursor. To receive an
     *         initial cursor on your first request, include an empty "before" query string.
     * @param  after  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for events after this cursor. To receive an
     *         initial cursor on your first request, include an empty "after" query string.
     * @return    Returns the List of OrganizationSecretScanningAlert response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<OrganizationSecretScanningAlert> secretScanningListAlertsForOrg(
            final String org,
            final State1661Enum state,
            final String secretType,
            final String resolution,
            final Sort30Enum sort,
            final Direction1Enum direction,
            final Integer page,
            final Integer perPage,
            final String before,
            final String after) throws ApiException, IOException {
        return prepareSecretScanningListAlertsForOrgRequest(org, state, secretType, resolution,
                sort, direction, page, perPage, before, after).execute();
    }

    /**
     * Lists secret scanning alerts for eligible repositories in an organization, from newest to
     * oldest. To use this endpoint, you must be an administrator or security manager for the
     * organization, and you must use an access token with the `repo` scope or `security_events`
     * scope. For public repositories, you may instead use the `public_repo` scope. GitHub Apps must
     * have the `secret_scanning_alerts` read permission to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  state  Optional parameter: Set to `open` or `resolved` to only list secret scanning
     *         alerts in a specific state.
     * @param  secretType  Optional parameter: A comma-separated list of secret types to return. By
     *         default all secret types are returned. See "[Secret scanning
     *         patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
     *         for a complete list of secret types.
     * @param  resolution  Optional parameter: A comma-separated list of resolutions. Only secret
     *         scanning alerts with one of these resolutions are listed. Valid resolutions are
     *         `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or
     *         `used_in_tests`.
     * @param  sort  Optional parameter: The property to sort the results by. `created` means when
     *         the alert was created. `updated` means when the alert was updated or resolved.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  before  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for events before this cursor. To receive an
     *         initial cursor on your first request, include an empty "before" query string.
     * @param  after  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for events after this cursor. To receive an
     *         initial cursor on your first request, include an empty "after" query string.
     * @return    Returns the List of OrganizationSecretScanningAlert response from the API call
     */
    public CompletableFuture<List<OrganizationSecretScanningAlert>> secretScanningListAlertsForOrgAsync(
            final String org,
            final State1661Enum state,
            final String secretType,
            final String resolution,
            final Sort30Enum sort,
            final Direction1Enum direction,
            final Integer page,
            final Integer perPage,
            final String before,
            final String after) {
        try { 
            return prepareSecretScanningListAlertsForOrgRequest(org, state, secretType, resolution, sort,
            direction, page, perPage, before, after).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for secretScanningListAlertsForOrg.
     */
    private ApiCall<List<OrganizationSecretScanningAlert>, ApiException> prepareSecretScanningListAlertsForOrgRequest(
            final String org,
            final State1661Enum state,
            final String secretType,
            final String resolution,
            final Sort30Enum sort,
            final Direction1Enum direction,
            final Integer page,
            final Integer perPage,
            final String before,
            final String after) throws IOException {
        return new ApiCall.Builder<List<OrganizationSecretScanningAlert>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/secret-scanning/alerts")
                        .queryParam(param -> param.key("state")
                                .value((state != null) ? state.value() : null).isRequired(false))
                        .queryParam(param -> param.key("secret_type")
                                .value(secretType).isRequired(false))
                        .queryParam(param -> param.key("resolution")
                                .value(resolution).isRequired(false))
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .queryParam(param -> param.key("direction")
                                .value((direction != null) ? direction.value() : null).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("before")
                                .value(before).isRequired(false))
                        .queryParam(param -> param.key("after")
                                .value(after).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        OrganizationSecretScanningAlert[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsSecretScanningAlerts404ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists secret scanning alerts for an eligible repository, from newest to oldest. To use this
     * endpoint, you must be an administrator for the repository or for the organization that owns
     * the repository, and you must use a personal access token with the `repo` scope or
     * `security_events` scope. For public repositories, you may instead use the `public_repo`
     * scope. GitHub Apps must have the `secret_scanning_alerts` read permission to use this
     * endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  state  Optional parameter: Set to `open` or `resolved` to only list secret scanning
     *         alerts in a specific state.
     * @param  secretType  Optional parameter: A comma-separated list of secret types to return. By
     *         default all secret types are returned. See "[Secret scanning
     *         patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
     *         for a complete list of secret types.
     * @param  resolution  Optional parameter: A comma-separated list of resolutions. Only secret
     *         scanning alerts with one of these resolutions are listed. Valid resolutions are
     *         `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or
     *         `used_in_tests`.
     * @param  sort  Optional parameter: The property to sort the results by. `created` means when
     *         the alert was created. `updated` means when the alert was updated or resolved.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  before  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for events before this cursor. To receive an
     *         initial cursor on your first request, include an empty "before" query string.
     * @param  after  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for events after this cursor. To receive an
     *         initial cursor on your first request, include an empty "after" query string.
     * @return    Returns the List of SecretScanningAlert response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<SecretScanningAlert> secretScanningListAlertsForRepo(
            final String owner,
            final String repo,
            final State1661Enum state,
            final String secretType,
            final String resolution,
            final Sort30Enum sort,
            final Direction1Enum direction,
            final Integer page,
            final Integer perPage,
            final String before,
            final String after) throws ApiException, IOException {
        return prepareSecretScanningListAlertsForRepoRequest(owner, repo, state, secretType,
                resolution, sort, direction, page, perPage, before, after).execute();
    }

    /**
     * Lists secret scanning alerts for an eligible repository, from newest to oldest. To use this
     * endpoint, you must be an administrator for the repository or for the organization that owns
     * the repository, and you must use a personal access token with the `repo` scope or
     * `security_events` scope. For public repositories, you may instead use the `public_repo`
     * scope. GitHub Apps must have the `secret_scanning_alerts` read permission to use this
     * endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  state  Optional parameter: Set to `open` or `resolved` to only list secret scanning
     *         alerts in a specific state.
     * @param  secretType  Optional parameter: A comma-separated list of secret types to return. By
     *         default all secret types are returned. See "[Secret scanning
     *         patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
     *         for a complete list of secret types.
     * @param  resolution  Optional parameter: A comma-separated list of resolutions. Only secret
     *         scanning alerts with one of these resolutions are listed. Valid resolutions are
     *         `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or
     *         `used_in_tests`.
     * @param  sort  Optional parameter: The property to sort the results by. `created` means when
     *         the alert was created. `updated` means when the alert was updated or resolved.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  before  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for events before this cursor. To receive an
     *         initial cursor on your first request, include an empty "before" query string.
     * @param  after  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for events after this cursor. To receive an
     *         initial cursor on your first request, include an empty "after" query string.
     * @return    Returns the List of SecretScanningAlert response from the API call
     */
    public CompletableFuture<List<SecretScanningAlert>> secretScanningListAlertsForRepoAsync(
            final String owner,
            final String repo,
            final State1661Enum state,
            final String secretType,
            final String resolution,
            final Sort30Enum sort,
            final Direction1Enum direction,
            final Integer page,
            final Integer perPage,
            final String before,
            final String after) {
        try { 
            return prepareSecretScanningListAlertsForRepoRequest(owner, repo, state, secretType, resolution,
            sort, direction, page, perPage, before, after).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for secretScanningListAlertsForRepo.
     */
    private ApiCall<List<SecretScanningAlert>, ApiException> prepareSecretScanningListAlertsForRepoRequest(
            final String owner,
            final String repo,
            final State1661Enum state,
            final String secretType,
            final String resolution,
            final Sort30Enum sort,
            final Direction1Enum direction,
            final Integer page,
            final Integer perPage,
            final String before,
            final String after) throws IOException {
        return new ApiCall.Builder<List<SecretScanningAlert>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/secret-scanning/alerts")
                        .queryParam(param -> param.key("state")
                                .value((state != null) ? state.value() : null).isRequired(false))
                        .queryParam(param -> param.key("secret_type")
                                .value(secretType).isRequired(false))
                        .queryParam(param -> param.key("resolution")
                                .value(resolution).isRequired(false))
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .queryParam(param -> param.key("direction")
                                .value((direction != null) ? direction.value() : null).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("before")
                                .value(before).isRequired(false))
                        .queryParam(param -> param.key("after")
                                .value(after).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        SecretScanningAlert[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Repository is public or secret scanning is disabled for the repository",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets a single secret scanning alert detected in an eligible repository. To use this endpoint,
     * you must be an administrator for the repository or for the organization that owns the
     * repository, and you must use a personal access token with the `repo` scope or
     * `security_events` scope. For public repositories, you may instead use the `public_repo`
     * scope. GitHub Apps must have the `secret_scanning_alerts` read permission to use this
     * endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  alertNumber  Required parameter: The number that identifies an alert. You can find
     *         this at the end of the URL for a code scanning alert within GitHub, and in the
     *         `number` field in the response from the `GET
     *         /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @return    Returns the SecretScanningAlert response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SecretScanningAlert secretScanningGetAlert(
            final String owner,
            final String repo,
            final int alertNumber) throws ApiException, IOException {
        return prepareSecretScanningGetAlertRequest(owner, repo, alertNumber).execute();
    }

    /**
     * Gets a single secret scanning alert detected in an eligible repository. To use this endpoint,
     * you must be an administrator for the repository or for the organization that owns the
     * repository, and you must use a personal access token with the `repo` scope or
     * `security_events` scope. For public repositories, you may instead use the `public_repo`
     * scope. GitHub Apps must have the `secret_scanning_alerts` read permission to use this
     * endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  alertNumber  Required parameter: The number that identifies an alert. You can find
     *         this at the end of the URL for a code scanning alert within GitHub, and in the
     *         `number` field in the response from the `GET
     *         /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @return    Returns the SecretScanningAlert response from the API call
     */
    public CompletableFuture<SecretScanningAlert> secretScanningGetAlertAsync(
            final String owner,
            final String repo,
            final int alertNumber) {
        try { 
            return prepareSecretScanningGetAlertRequest(owner, repo, alertNumber).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for secretScanningGetAlert.
     */
    private ApiCall<SecretScanningAlert, ApiException> prepareSecretScanningGetAlertRequest(
            final String owner,
            final String repo,
            final int alertNumber) throws IOException {
        return new ApiCall.Builder<SecretScanningAlert, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("alert_number").value(alertNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SecretScanningAlert.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Repository is public, or secret scanning is disabled for the repository, or the resource is not found",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates the status of a secret scanning alert in an eligible repository. To use this
     * endpoint, you must be an administrator for the repository or for the organization that owns
     * the repository, and you must use a personal access token with the `repo` scope or
     * `security_events` scope. For public repositories, you may instead use the `public_repo`
     * scope. GitHub Apps must have the `secret_scanning_alerts` write permission to use this
     * endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  alertNumber  Required parameter: The number that identifies an alert. You can find
     *         this at the end of the URL for a code scanning alert within GitHub, and in the
     *         `number` field in the response from the `GET
     *         /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param  body  Required parameter: Example:
     * @return    Returns the SecretScanningAlert response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SecretScanningAlert secretScanningUpdateAlert(
            final String owner,
            final String repo,
            final int alertNumber,
            final ReposSecretScanningAlertsAlertNumberRequest body) throws ApiException, IOException {
        return prepareSecretScanningUpdateAlertRequest(owner, repo, alertNumber, body).execute();
    }

    /**
     * Updates the status of a secret scanning alert in an eligible repository. To use this
     * endpoint, you must be an administrator for the repository or for the organization that owns
     * the repository, and you must use a personal access token with the `repo` scope or
     * `security_events` scope. For public repositories, you may instead use the `public_repo`
     * scope. GitHub Apps must have the `secret_scanning_alerts` write permission to use this
     * endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  alertNumber  Required parameter: The number that identifies an alert. You can find
     *         this at the end of the URL for a code scanning alert within GitHub, and in the
     *         `number` field in the response from the `GET
     *         /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param  body  Required parameter: Example:
     * @return    Returns the SecretScanningAlert response from the API call
     */
    public CompletableFuture<SecretScanningAlert> secretScanningUpdateAlertAsync(
            final String owner,
            final String repo,
            final int alertNumber,
            final ReposSecretScanningAlertsAlertNumberRequest body) {
        try { 
            return prepareSecretScanningUpdateAlertRequest(owner, repo, alertNumber, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for secretScanningUpdateAlert.
     */
    private ApiCall<SecretScanningAlert, ApiException> prepareSecretScanningUpdateAlertRequest(
            final String owner,
            final String repo,
            final int alertNumber,
            final ReposSecretScanningAlertsAlertNumberRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<SecretScanningAlert, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("alert_number").value(alertNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SecretScanningAlert.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.create("Bad request, resolution comment is invalid or the resolution was not changed.",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Repository is public, or secret scanning is disabled for the repository, or the resource is not found",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("State does not match the resolution or resolution comment",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists all locations for a given secret scanning alert for an eligible repository. To use this
     * endpoint, you must be an administrator for the repository or for the organization that owns
     * the repository, and you must use a personal access token with the `repo` scope or
     * `security_events` scope. For public repositories, you may instead use the `public_repo`
     * scope. GitHub Apps must have the `secret_scanning_alerts` read permission to use this
     * endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  alertNumber  Required parameter: The number that identifies an alert. You can find
     *         this at the end of the URL for a code scanning alert within GitHub, and in the
     *         `number` field in the response from the `GET
     *         /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @return    Returns the List of SecretScanningLocation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<SecretScanningLocation> secretScanningListLocationsForAlert(
            final String owner,
            final String repo,
            final int alertNumber,
            final Integer page,
            final Integer perPage) throws ApiException, IOException {
        return prepareSecretScanningListLocationsForAlertRequest(owner, repo, alertNumber, page,
                perPage).execute();
    }

    /**
     * Lists all locations for a given secret scanning alert for an eligible repository. To use this
     * endpoint, you must be an administrator for the repository or for the organization that owns
     * the repository, and you must use a personal access token with the `repo` scope or
     * `security_events` scope. For public repositories, you may instead use the `public_repo`
     * scope. GitHub Apps must have the `secret_scanning_alerts` read permission to use this
     * endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  alertNumber  Required parameter: The number that identifies an alert. You can find
     *         this at the end of the URL for a code scanning alert within GitHub, and in the
     *         `number` field in the response from the `GET
     *         /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @return    Returns the List of SecretScanningLocation response from the API call
     */
    public CompletableFuture<List<SecretScanningLocation>> secretScanningListLocationsForAlertAsync(
            final String owner,
            final String repo,
            final int alertNumber,
            final Integer page,
            final Integer perPage) {
        try { 
            return prepareSecretScanningListLocationsForAlertRequest(owner, repo, alertNumber, page,
            perPage).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for secretScanningListLocationsForAlert.
     */
    private ApiCall<List<SecretScanningLocation>, ApiException> prepareSecretScanningListLocationsForAlertRequest(
            final String owner,
            final String repo,
            final int alertNumber,
            final Integer page,
            final Integer perPage) throws IOException {
        return new ApiCall.Builder<List<SecretScanningLocation>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations")
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("alert_number").value(alertNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        SecretScanningLocation[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Repository is public, or secret scanning is disabled for the repository, or the resource is not found",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
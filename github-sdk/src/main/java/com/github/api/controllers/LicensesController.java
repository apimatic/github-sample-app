/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.Licenses403ErrorException;
import com.github.api.exceptions.Licenses404ErrorException;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.LicenseSimple;
import com.github.api.models.LicensesResponse;
import com.github.api.models.ReposLicenseResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class LicensesController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public LicensesController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Get all commonly used licenses.
     * @param  featured  Optional parameter: Example:
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of LicenseSimple response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<LicenseSimple> licensesGetAllCommonlyUsed(
            final Boolean featured,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareLicensesGetAllCommonlyUsedRequest(featured, perPage, page).execute();
    }

    /**
     * Get all commonly used licenses.
     * @param  featured  Optional parameter: Example:
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of LicenseSimple response from the API call
     */
    public CompletableFuture<List<LicenseSimple>> licensesGetAllCommonlyUsedAsync(
            final Boolean featured,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareLicensesGetAllCommonlyUsedRequest(featured, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for licensesGetAllCommonlyUsed.
     */
    private ApiCall<List<LicenseSimple>, ApiException> prepareLicensesGetAllCommonlyUsedRequest(
            final Boolean featured,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<LicenseSimple>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/licenses")
                        .queryParam(param -> param.key("featured")
                                .value(featured).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        LicenseSimple[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a license.
     * @param  license  Required parameter: Example:
     * @return    Returns the LicensesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public LicensesResponse licensesGet(
            final String license) throws ApiException, IOException {
        return prepareLicensesGetRequest(license).execute();
    }

    /**
     * Get a license.
     * @param  license  Required parameter: Example:
     * @return    Returns the LicensesResponse response from the API call
     */
    public CompletableFuture<LicensesResponse> licensesGetAsync(
            final String license) {
        try { 
            return prepareLicensesGetRequest(license).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for licensesGet.
     */
    private ApiCall<LicensesResponse, ApiException> prepareLicensesGetRequest(
            final String license) throws IOException {
        return new ApiCall.Builder<LicensesResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/licenses/{license}")
                        .templateParam(param -> param.key("license").value(license)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, LicensesResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new Licenses403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new Licenses404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This method returns the contents of the repository's license file, if one is detected.
     * Similar to [Get repository
     * content](https://docs.github.com/rest/reference/repos#get-repository-content), this method
     * also supports [custom media types](https://docs.github.com/rest/overview/media-types) for
     * retrieving the raw license content or rendered license HTML.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @return    Returns the ReposLicenseResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposLicenseResponse licensesGetForRepo(
            final String owner,
            final String repo) throws ApiException, IOException {
        return prepareLicensesGetForRepoRequest(owner, repo).execute();
    }

    /**
     * This method returns the contents of the repository's license file, if one is detected.
     * Similar to [Get repository
     * content](https://docs.github.com/rest/reference/repos#get-repository-content), this method
     * also supports [custom media types](https://docs.github.com/rest/overview/media-types) for
     * retrieving the raw license content or rendered license HTML.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @return    Returns the ReposLicenseResponse response from the API call
     */
    public CompletableFuture<ReposLicenseResponse> licensesGetForRepoAsync(
            final String owner,
            final String repo) {
        try { 
            return prepareLicensesGetForRepoRequest(owner, repo).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for licensesGetForRepo.
     */
    private ApiCall<ReposLicenseResponse, ApiException> prepareLicensesGetForRepoRequest(
            final String owner,
            final String repo) throws IOException {
        return new ApiCall.Builder<ReposLicenseResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/license")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposLicenseResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.OrgsProjects401ErrorException;
import com.github.api.exceptions.OrgsProjects403ErrorException;
import com.github.api.exceptions.OrgsProjects404ErrorException;
import com.github.api.exceptions.OrgsProjects410ErrorException;
import com.github.api.exceptions.OrgsProjects422ErrorException;
import com.github.api.exceptions.Projects401ErrorException;
import com.github.api.exceptions.Projects403Error1Exception;
import com.github.api.exceptions.Projects403ErrorException;
import com.github.api.exceptions.Projects404ErrorException;
import com.github.api.exceptions.Projects410ErrorException;
import com.github.api.exceptions.Projects422ErrorException;
import com.github.api.exceptions.ProjectsCollaborators401ErrorException;
import com.github.api.exceptions.ProjectsCollaborators403ErrorException;
import com.github.api.exceptions.ProjectsCollaborators404ErrorException;
import com.github.api.exceptions.ProjectsCollaborators422ErrorException;
import com.github.api.exceptions.ProjectsCollaboratorsPermission401ErrorException;
import com.github.api.exceptions.ProjectsCollaboratorsPermission403ErrorException;
import com.github.api.exceptions.ProjectsCollaboratorsPermission404ErrorException;
import com.github.api.exceptions.ProjectsCollaboratorsPermission422ErrorException;
import com.github.api.exceptions.ProjectsColumns401ErrorException;
import com.github.api.exceptions.ProjectsColumns403ErrorException;
import com.github.api.exceptions.ProjectsColumns404ErrorException;
import com.github.api.exceptions.ProjectsColumns422ErrorException;
import com.github.api.exceptions.ProjectsColumnsCards401ErrorException;
import com.github.api.exceptions.ProjectsColumnsCards403Error1Exception;
import com.github.api.exceptions.ProjectsColumnsCards403ErrorException;
import com.github.api.exceptions.ProjectsColumnsCards404ErrorException;
import com.github.api.exceptions.ProjectsColumnsCards422ErrorException;
import com.github.api.exceptions.ProjectsColumnsCards503Error1Exception;
import com.github.api.exceptions.ProjectsColumnsCardsMoves401ErrorException;
import com.github.api.exceptions.ProjectsColumnsCardsMoves403Error1Exception;
import com.github.api.exceptions.ProjectsColumnsCardsMoves422ErrorException;
import com.github.api.exceptions.ProjectsColumnsCardsMoves503Error1Exception;
import com.github.api.exceptions.ProjectsColumnsMoves401ErrorException;
import com.github.api.exceptions.ProjectsColumnsMoves403ErrorException;
import com.github.api.exceptions.ProjectsColumnsMoves422ErrorException;
import com.github.api.exceptions.ReposProjects401ErrorException;
import com.github.api.exceptions.ReposProjects403ErrorException;
import com.github.api.exceptions.ReposProjects404ErrorException;
import com.github.api.exceptions.ReposProjects410ErrorException;
import com.github.api.exceptions.ReposProjects422ErrorException;
import com.github.api.exceptions.UserProjects401ErrorException;
import com.github.api.exceptions.UserProjects403ErrorException;
import com.github.api.exceptions.UserProjects422ErrorException;
import com.github.api.exceptions.UsersProjects422ErrorException;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.Affiliation1Enum;
import com.github.api.models.ArchivedState1Enum;
import com.github.api.models.OrgsProjectsRequest;
import com.github.api.models.OrgsProjectsResponse;
import com.github.api.models.Project;
import com.github.api.models.ProjectCard;
import com.github.api.models.ProjectColumn;
import com.github.api.models.ProjectsCollaboratorsPermissionResponse;
import com.github.api.models.ProjectsColumnsCardsMovesRequest;
import com.github.api.models.ProjectsColumnsCardsRequest;
import com.github.api.models.ProjectsColumnsCardsResponse;
import com.github.api.models.ProjectsColumnsMovesRequest;
import com.github.api.models.ProjectsColumnsRequest;
import com.github.api.models.ProjectsColumnsResponse;
import com.github.api.models.ProjectsRequest;
import com.github.api.models.ProjectsResponse;
import com.github.api.models.ReposProjectsResponse;
import com.github.api.models.SimpleUser;
import com.github.api.models.State1676Enum;
import com.github.api.models.UserProjectsRequest;
import com.github.api.models.UserProjectsResponse;
import com.github.api.models.containers.ProjectsCreateCardBody;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ProjectsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public ProjectsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Lists the projects in an organization. Returns a `404 Not Found` status if projects are
     * disabled in the organization. If you do not have sufficient privileges to perform this
     * action, a `401 Unauthorized` or `410 Gone` status is returned.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  state  Optional parameter: Indicates the state of the projects to return.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Project response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Project> projectsListForOrg(
            final String org,
            final State1676Enum state,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareProjectsListForOrgRequest(org, state, perPage, page).execute();
    }

    /**
     * Lists the projects in an organization. Returns a `404 Not Found` status if projects are
     * disabled in the organization. If you do not have sufficient privileges to perform this
     * action, a `401 Unauthorized` or `410 Gone` status is returned.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  state  Optional parameter: Indicates the state of the projects to return.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Project response from the API call
     */
    public CompletableFuture<List<Project>> projectsListForOrgAsync(
            final String org,
            final State1676Enum state,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareProjectsListForOrgRequest(org, state, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsListForOrg.
     */
    private ApiCall<List<Project>, ApiException> prepareProjectsListForOrgRequest(
            final String org,
            final State1676Enum state,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Project>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/projects")
                        .queryParam(param -> param.key("state")
                                .value((state != null) ? state.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Project[].class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new OrgsProjects422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates an organization project board. Returns a `410 Gone` status if projects are disabled
     * in the organization or if the organization does not have existing classic projects. If you do
     * not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone`
     * status is returned.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsProjectsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrgsProjectsResponse projectsCreateForOrg(
            final String org,
            final OrgsProjectsRequest body) throws ApiException, IOException {
        return prepareProjectsCreateForOrgRequest(org, body).execute();
    }

    /**
     * Creates an organization project board. Returns a `410 Gone` status if projects are disabled
     * in the organization or if the organization does not have existing classic projects. If you do
     * not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone`
     * status is returned.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the OrgsProjectsResponse response from the API call
     */
    public CompletableFuture<OrgsProjectsResponse> projectsCreateForOrgAsync(
            final String org,
            final OrgsProjectsRequest body) {
        try { 
            return prepareProjectsCreateForOrgRequest(org, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsCreateForOrg.
     */
    private ApiCall<OrgsProjectsResponse, ApiException> prepareProjectsCreateForOrgRequest(
            final String org,
            final OrgsProjectsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrgsProjectsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/projects")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrgsProjectsResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new OrgsProjects401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new OrgsProjects403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsProjects404ErrorException(reason, context)))
                        .localErrorCase("410",
                                 ErrorCase.create("Gone",
                                (reason, context) -> new OrgsProjects410ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new OrgsProjects422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a project card.
     * @param  cardId  Required parameter: The unique identifier of the card.
     * @return    Returns the ProjectsColumnsCardsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ProjectsColumnsCardsResponse projectsGetCard(
            final int cardId) throws ApiException, IOException {
        return prepareProjectsGetCardRequest(cardId).execute();
    }

    /**
     * Get a project card.
     * @param  cardId  Required parameter: The unique identifier of the card.
     * @return    Returns the ProjectsColumnsCardsResponse response from the API call
     */
    public CompletableFuture<ProjectsColumnsCardsResponse> projectsGetCardAsync(
            final int cardId) {
        try { 
            return prepareProjectsGetCardRequest(cardId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsGetCard.
     */
    private ApiCall<ProjectsColumnsCardsResponse, ApiException> prepareProjectsGetCardRequest(
            final int cardId) throws IOException {
        return new ApiCall.Builder<ProjectsColumnsCardsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/columns/cards/{card_id}")
                        .templateParam(param -> param.key("card_id").value(cardId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ProjectsColumnsCardsResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsColumnsCards401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsColumnsCards403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ProjectsColumnsCards404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update an existing project card.
     * @param  cardId  Required parameter: The unique identifier of the card.
     * @param  body  Optional parameter: Example:
     * @return    Returns the ProjectsColumnsCardsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ProjectsColumnsCardsResponse projectsUpdateCard(
            final int cardId,
            final ProjectsColumnsCardsRequest body) throws ApiException, IOException {
        return prepareProjectsUpdateCardRequest(cardId, body).execute();
    }

    /**
     * Update an existing project card.
     * @param  cardId  Required parameter: The unique identifier of the card.
     * @param  body  Optional parameter: Example:
     * @return    Returns the ProjectsColumnsCardsResponse response from the API call
     */
    public CompletableFuture<ProjectsColumnsCardsResponse> projectsUpdateCardAsync(
            final int cardId,
            final ProjectsColumnsCardsRequest body) {
        try { 
            return prepareProjectsUpdateCardRequest(cardId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsUpdateCard.
     */
    private ApiCall<ProjectsColumnsCardsResponse, ApiException> prepareProjectsUpdateCardRequest(
            final int cardId,
            final ProjectsColumnsCardsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ProjectsColumnsCardsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/columns/cards/{card_id}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("card_id").value(cardId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ProjectsColumnsCardsResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsColumnsCards401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsColumnsCards403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ProjectsColumnsCards404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ProjectsColumnsCards422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete a project card.
     * @param  cardId  Required parameter: The unique identifier of the card.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void projectsDeleteCard(
            final int cardId) throws ApiException, IOException {
        prepareProjectsDeleteCardRequest(cardId).execute();
    }

    /**
     * Delete a project card.
     * @param  cardId  Required parameter: The unique identifier of the card.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> projectsDeleteCardAsync(
            final int cardId) {
        try { 
            return prepareProjectsDeleteCardRequest(cardId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsDeleteCard.
     */
    private ApiCall<Void, ApiException> prepareProjectsDeleteCardRequest(
            final int cardId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/columns/cards/{card_id}")
                        .templateParam(param -> param.key("card_id").value(cardId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsColumnsCards401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsColumnsCards403Error1Exception(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ProjectsColumnsCards404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Move a project card.
     * @param  cardId  Required parameter: The unique identifier of the card.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object projectsMoveCard(
            final int cardId,
            final ProjectsColumnsCardsMovesRequest body) throws ApiException, IOException {
        return prepareProjectsMoveCardRequest(cardId, body).execute();
    }

    /**
     * Move a project card.
     * @param  cardId  Required parameter: The unique identifier of the card.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> projectsMoveCardAsync(
            final int cardId,
            final ProjectsColumnsCardsMovesRequest body) {
        try { 
            return prepareProjectsMoveCardRequest(cardId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsMoveCard.
     */
    private ApiCall<Object, ApiException> prepareProjectsMoveCardRequest(
            final int cardId,
            final ProjectsColumnsCardsMovesRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/columns/cards/{card_id}/moves")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("card_id").value(cardId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsColumnsCardsMoves401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsColumnsCardsMoves403Error1Exception(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ProjectsColumnsCardsMoves422ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Response",
                                (reason, context) -> new ProjectsColumnsCardsMoves503Error1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a project column.
     * @param  columnId  Required parameter: The unique identifier of the column.
     * @return    Returns the ProjectsColumnsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ProjectsColumnsResponse projectsGetColumn(
            final int columnId) throws ApiException, IOException {
        return prepareProjectsGetColumnRequest(columnId).execute();
    }

    /**
     * Get a project column.
     * @param  columnId  Required parameter: The unique identifier of the column.
     * @return    Returns the ProjectsColumnsResponse response from the API call
     */
    public CompletableFuture<ProjectsColumnsResponse> projectsGetColumnAsync(
            final int columnId) {
        try { 
            return prepareProjectsGetColumnRequest(columnId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsGetColumn.
     */
    private ApiCall<ProjectsColumnsResponse, ApiException> prepareProjectsGetColumnRequest(
            final int columnId) throws IOException {
        return new ApiCall.Builder<ProjectsColumnsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/columns/{column_id}")
                        .templateParam(param -> param.key("column_id").value(columnId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ProjectsColumnsResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsColumns401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsColumns403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ProjectsColumns404ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update an existing project column.
     * @param  columnId  Required parameter: The unique identifier of the column.
     * @param  body  Required parameter: Example:
     * @return    Returns the ProjectsColumnsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ProjectsColumnsResponse projectsUpdateColumn(
            final int columnId,
            final ProjectsColumnsRequest body) throws ApiException, IOException {
        return prepareProjectsUpdateColumnRequest(columnId, body).execute();
    }

    /**
     * Update an existing project column.
     * @param  columnId  Required parameter: The unique identifier of the column.
     * @param  body  Required parameter: Example:
     * @return    Returns the ProjectsColumnsResponse response from the API call
     */
    public CompletableFuture<ProjectsColumnsResponse> projectsUpdateColumnAsync(
            final int columnId,
            final ProjectsColumnsRequest body) {
        try { 
            return prepareProjectsUpdateColumnRequest(columnId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsUpdateColumn.
     */
    private ApiCall<ProjectsColumnsResponse, ApiException> prepareProjectsUpdateColumnRequest(
            final int columnId,
            final ProjectsColumnsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ProjectsColumnsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/columns/{column_id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("column_id").value(columnId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ProjectsColumnsResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsColumns401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsColumns403ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete a project column.
     * @param  columnId  Required parameter: The unique identifier of the column.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void projectsDeleteColumn(
            final int columnId) throws ApiException, IOException {
        prepareProjectsDeleteColumnRequest(columnId).execute();
    }

    /**
     * Delete a project column.
     * @param  columnId  Required parameter: The unique identifier of the column.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> projectsDeleteColumnAsync(
            final int columnId) {
        try { 
            return prepareProjectsDeleteColumnRequest(columnId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsDeleteColumn.
     */
    private ApiCall<Void, ApiException> prepareProjectsDeleteColumnRequest(
            final int columnId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/columns/{column_id}")
                        .templateParam(param -> param.key("column_id").value(columnId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsColumns401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsColumns403ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List project cards.
     * @param  columnId  Required parameter: The unique identifier of the column.
     * @param  archivedState  Optional parameter: Filters the project cards that are returned by the
     *         card's state.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of ProjectCard response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<ProjectCard> projectsListCards(
            final int columnId,
            final ArchivedState1Enum archivedState,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareProjectsListCardsRequest(columnId, archivedState, perPage, page).execute();
    }

    /**
     * List project cards.
     * @param  columnId  Required parameter: The unique identifier of the column.
     * @param  archivedState  Optional parameter: Filters the project cards that are returned by the
     *         card's state.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of ProjectCard response from the API call
     */
    public CompletableFuture<List<ProjectCard>> projectsListCardsAsync(
            final int columnId,
            final ArchivedState1Enum archivedState,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareProjectsListCardsRequest(columnId, archivedState, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsListCards.
     */
    private ApiCall<List<ProjectCard>, ApiException> prepareProjectsListCardsRequest(
            final int columnId,
            final ArchivedState1Enum archivedState,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<ProjectCard>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/columns/{column_id}/cards")
                        .queryParam(param -> param.key("archived_state")
                                .value((archivedState != null) ? archivedState.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("column_id").value(columnId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        ProjectCard[].class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsColumnsCards401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsColumnsCards403ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a project card.
     * @param  columnId  Required parameter: The unique identifier of the column.
     * @param  body  Required parameter: Example:
     * @return    Returns the ProjectsColumnsCardsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ProjectsColumnsCardsResponse projectsCreateCard(
            final int columnId,
            final ProjectsCreateCardBody body) throws ApiException, IOException {
        return prepareProjectsCreateCardRequest(columnId, body).execute();
    }

    /**
     * Create a project card.
     * @param  columnId  Required parameter: The unique identifier of the column.
     * @param  body  Required parameter: Example:
     * @return    Returns the ProjectsColumnsCardsResponse response from the API call
     */
    public CompletableFuture<ProjectsColumnsCardsResponse> projectsCreateCardAsync(
            final int columnId,
            final ProjectsCreateCardBody body) {
        try { 
            return prepareProjectsCreateCardRequest(columnId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsCreateCard.
     */
    private ApiCall<ProjectsColumnsCardsResponse, ApiException> prepareProjectsCreateCardRequest(
            final int columnId,
            final ProjectsCreateCardBody body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ProjectsColumnsCardsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/columns/{column_id}/cards")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serializeTypeCombinator(body))
                        .templateParam(param -> param.key("column_id").value(columnId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ProjectsColumnsCardsResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsColumnsCards401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsColumnsCards403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Response",
                                (reason, context) -> new ProjectsColumnsCards503Error1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Move a project column.
     * @param  columnId  Required parameter: The unique identifier of the column.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object projectsMoveColumn(
            final int columnId,
            final ProjectsColumnsMovesRequest body) throws ApiException, IOException {
        return prepareProjectsMoveColumnRequest(columnId, body).execute();
    }

    /**
     * Move a project column.
     * @param  columnId  Required parameter: The unique identifier of the column.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> projectsMoveColumnAsync(
            final int columnId,
            final ProjectsColumnsMovesRequest body) {
        try { 
            return prepareProjectsMoveColumnRequest(columnId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsMoveColumn.
     */
    private ApiCall<Object, ApiException> prepareProjectsMoveColumnRequest(
            final int columnId,
            final ProjectsColumnsMovesRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/columns/{column_id}/moves")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("column_id").value(columnId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsColumnsMoves401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsColumnsMoves403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ProjectsColumnsMoves422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you
     * do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone`
     * status is returned.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @return    Returns the ProjectsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ProjectsResponse projectsGet(
            final int projectId) throws ApiException, IOException {
        return prepareProjectsGetRequest(projectId).execute();
    }

    /**
     * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you
     * do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone`
     * status is returned.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @return    Returns the ProjectsResponse response from the API call
     */
    public CompletableFuture<ProjectsResponse> projectsGetAsync(
            final int projectId) {
        try { 
            return prepareProjectsGetRequest(projectId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsGet.
     */
    private ApiCall<ProjectsResponse, ApiException> prepareProjectsGetRequest(
            final int projectId) throws IOException {
        return new ApiCall.Builder<ProjectsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/{project_id}")
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ProjectsResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new Projects401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new Projects403ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates a project board's information. Returns a `404 Not Found` status if projects are
     * disabled. If you do not have sufficient privileges to perform this action, a `401
     * Unauthorized` or `410 Gone` status is returned.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  body  Optional parameter: Example:
     * @return    Returns the ProjectsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ProjectsResponse projectsUpdate(
            final int projectId,
            final ProjectsRequest body) throws ApiException, IOException {
        return prepareProjectsUpdateRequest(projectId, body).execute();
    }

    /**
     * Updates a project board's information. Returns a `404 Not Found` status if projects are
     * disabled. If you do not have sufficient privileges to perform this action, a `401
     * Unauthorized` or `410 Gone` status is returned.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  body  Optional parameter: Example:
     * @return    Returns the ProjectsResponse response from the API call
     */
    public CompletableFuture<ProjectsResponse> projectsUpdateAsync(
            final int projectId,
            final ProjectsRequest body) {
        try { 
            return prepareProjectsUpdateRequest(projectId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsUpdate.
     */
    private ApiCall<ProjectsResponse, ApiException> prepareProjectsUpdateRequest(
            final int projectId,
            final ProjectsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ProjectsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/{project_id}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ProjectsResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new Projects401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new Projects403Error1Exception(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found if the authenticated user does not have access to the project",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("410",
                                 ErrorCase.create("Gone",
                                (reason, context) -> new Projects410ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new Projects422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void projectsDelete(
            final int projectId) throws ApiException, IOException {
        prepareProjectsDeleteRequest(projectId).execute();
    }

    /**
     * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> projectsDeleteAsync(
            final int projectId) {
        try { 
            return prepareProjectsDeleteRequest(projectId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsDelete.
     */
    private ApiCall<Void, ApiException> prepareProjectsDeleteRequest(
            final int projectId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/{project_id}")
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new Projects401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new Projects403Error1Exception(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new Projects404ErrorException(reason, context)))
                        .localErrorCase("410",
                                 ErrorCase.create("Gone",
                                (reason, context) -> new Projects410ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists the collaborators for an organization project. For a project, the list of collaborators
     * includes outside collaborators, organization members that are direct collaborators,
     * organization members with access through team memberships, organization members with access
     * through default organization permissions, and organization owners. You must be an
     * organization owner or a project `admin` to list collaborators.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  affiliation  Optional parameter: Filters the collaborators by their affiliation.
     *         `outside` means outside collaborators of a project that are not a member of the
     *         project's organization. `direct` means collaborators with permissions to a project,
     *         regardless of organization membership status. `all` means all collaborators the
     *         authenticated user can see.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of SimpleUser response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<SimpleUser> projectsListCollaborators(
            final int projectId,
            final Affiliation1Enum affiliation,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareProjectsListCollaboratorsRequest(projectId, affiliation, perPage,
                page).execute();
    }

    /**
     * Lists the collaborators for an organization project. For a project, the list of collaborators
     * includes outside collaborators, organization members that are direct collaborators,
     * organization members with access through team memberships, organization members with access
     * through default organization permissions, and organization owners. You must be an
     * organization owner or a project `admin` to list collaborators.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  affiliation  Optional parameter: Filters the collaborators by their affiliation.
     *         `outside` means outside collaborators of a project that are not a member of the
     *         project's organization. `direct` means collaborators with permissions to a project,
     *         regardless of organization membership status. `all` means all collaborators the
     *         authenticated user can see.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of SimpleUser response from the API call
     */
    public CompletableFuture<List<SimpleUser>> projectsListCollaboratorsAsync(
            final int projectId,
            final Affiliation1Enum affiliation,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareProjectsListCollaboratorsRequest(projectId, affiliation, perPage,
            page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsListCollaborators.
     */
    private ApiCall<List<SimpleUser>, ApiException> prepareProjectsListCollaboratorsRequest(
            final int projectId,
            final Affiliation1Enum affiliation,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<SimpleUser>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/{project_id}/collaborators")
                        .queryParam(param -> param.key("affiliation")
                                .value((affiliation != null) ? affiliation.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        SimpleUser[].class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsCollaborators401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsCollaborators403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ProjectsCollaborators404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ProjectsCollaborators422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Adds a collaborator to an organization project and sets their permission level. You must be
     * an organization owner or a project `admin` to add a collaborator.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void projectsAddCollaborator(
            final int projectId,
            final String username,
            final Object body) throws ApiException, IOException {
        prepareProjectsAddCollaboratorRequest(projectId, username, body).execute();
    }

    /**
     * Adds a collaborator to an organization project and sets their permission level. You must be
     * an organization owner or a project `admin` to add a collaborator.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> projectsAddCollaboratorAsync(
            final int projectId,
            final String username,
            final Object body) {
        try { 
            return prepareProjectsAddCollaboratorRequest(projectId, username, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsAddCollaborator.
     */
    private ApiCall<Void, ApiException> prepareProjectsAddCollaboratorRequest(
            final int projectId,
            final String username,
            final Object body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/{project_id}/collaborators/{username}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsCollaborators401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsCollaborators403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ProjectsCollaborators404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ProjectsCollaborators422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Removes a collaborator from an organization project. You must be an organization owner or a
     * project `admin` to remove a collaborator.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void projectsRemoveCollaborator(
            final int projectId,
            final String username) throws ApiException, IOException {
        prepareProjectsRemoveCollaboratorRequest(projectId, username).execute();
    }

    /**
     * Removes a collaborator from an organization project. You must be an organization owner or a
     * project `admin` to remove a collaborator.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> projectsRemoveCollaboratorAsync(
            final int projectId,
            final String username) {
        try { 
            return prepareProjectsRemoveCollaboratorRequest(projectId, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsRemoveCollaborator.
     */
    private ApiCall<Void, ApiException> prepareProjectsRemoveCollaboratorRequest(
            final int projectId,
            final String username) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/{project_id}/collaborators/{username}")
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsCollaborators401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsCollaborators403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ProjectsCollaborators404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ProjectsCollaborators422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns the collaborator's permission level for an organization project. Possible values for
     * the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or
     * a project `admin` to review a user's permission level.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the ProjectsCollaboratorsPermissionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ProjectsCollaboratorsPermissionResponse projectsGetPermissionForUser(
            final int projectId,
            final String username) throws ApiException, IOException {
        return prepareProjectsGetPermissionForUserRequest(projectId, username).execute();
    }

    /**
     * Returns the collaborator's permission level for an organization project. Possible values for
     * the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or
     * a project `admin` to review a user's permission level.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @return    Returns the ProjectsCollaboratorsPermissionResponse response from the API call
     */
    public CompletableFuture<ProjectsCollaboratorsPermissionResponse> projectsGetPermissionForUserAsync(
            final int projectId,
            final String username) {
        try { 
            return prepareProjectsGetPermissionForUserRequest(projectId, username).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsGetPermissionForUser.
     */
    private ApiCall<ProjectsCollaboratorsPermissionResponse, ApiException> prepareProjectsGetPermissionForUserRequest(
            final int projectId,
            final String username) throws IOException {
        return new ApiCall.Builder<ProjectsCollaboratorsPermissionResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/{project_id}/collaborators/{username}/permission")
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ProjectsCollaboratorsPermissionResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsCollaboratorsPermission401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsCollaboratorsPermission403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ProjectsCollaboratorsPermission404ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ProjectsCollaboratorsPermission422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List project columns.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of ProjectColumn response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<ProjectColumn> projectsListColumns(
            final int projectId,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareProjectsListColumnsRequest(projectId, perPage, page).execute();
    }

    /**
     * List project columns.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of ProjectColumn response from the API call
     */
    public CompletableFuture<List<ProjectColumn>> projectsListColumnsAsync(
            final int projectId,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareProjectsListColumnsRequest(projectId, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsListColumns.
     */
    private ApiCall<List<ProjectColumn>, ApiException> prepareProjectsListColumnsRequest(
            final int projectId,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<ProjectColumn>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/{project_id}/columns")
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        ProjectColumn[].class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsColumns401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsColumns403ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a project column.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  body  Required parameter: Example:
     * @return    Returns the ProjectsColumnsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ProjectsColumnsResponse projectsCreateColumn(
            final int projectId,
            final ProjectsColumnsRequest body) throws ApiException, IOException {
        return prepareProjectsCreateColumnRequest(projectId, body).execute();
    }

    /**
     * Create a project column.
     * @param  projectId  Required parameter: The unique identifier of the project.
     * @param  body  Required parameter: Example:
     * @return    Returns the ProjectsColumnsResponse response from the API call
     */
    public CompletableFuture<ProjectsColumnsResponse> projectsCreateColumnAsync(
            final int projectId,
            final ProjectsColumnsRequest body) {
        try { 
            return prepareProjectsCreateColumnRequest(projectId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsCreateColumn.
     */
    private ApiCall<ProjectsColumnsResponse, ApiException> prepareProjectsCreateColumnRequest(
            final int projectId,
            final ProjectsColumnsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ProjectsColumnsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/projects/{project_id}/columns")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("project_id").value(projectId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ProjectsColumnsResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ProjectsColumns401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ProjectsColumns403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ProjectsColumns422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled
     * in the repository. If you do not have sufficient privileges to perform this action, a `401
     * Unauthorized` or `410 Gone` status is returned.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  state  Optional parameter: Indicates the state of the projects to return.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Project response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Project> projectsListForRepo(
            final String owner,
            final String repo,
            final State1676Enum state,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareProjectsListForRepoRequest(owner, repo, state, perPage, page).execute();
    }

    /**
     * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled
     * in the repository. If you do not have sufficient privileges to perform this action, a `401
     * Unauthorized` or `410 Gone` status is returned.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  state  Optional parameter: Indicates the state of the projects to return.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Project response from the API call
     */
    public CompletableFuture<List<Project>> projectsListForRepoAsync(
            final String owner,
            final String repo,
            final State1676Enum state,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareProjectsListForRepoRequest(owner, repo, state, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsListForRepo.
     */
    private ApiCall<List<Project>, ApiException> prepareProjectsListForRepoRequest(
            final String owner,
            final String repo,
            final State1676Enum state,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Project>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/projects")
                        .queryParam(param -> param.key("state")
                                .value((state != null) ? state.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Project[].class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ReposProjects401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ReposProjects403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposProjects404ErrorException(reason, context)))
                        .localErrorCase("410",
                                 ErrorCase.create("Gone",
                                (reason, context) -> new ReposProjects410ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposProjects422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a repository project board. Returns a `410 Gone` status if projects are disabled in
     * the repository or if the repository does not have existing classic projects. If you do not
     * have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status
     * is returned.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposProjectsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposProjectsResponse projectsCreateForRepo(
            final String owner,
            final String repo,
            final OrgsProjectsRequest body) throws ApiException, IOException {
        return prepareProjectsCreateForRepoRequest(owner, repo, body).execute();
    }

    /**
     * Creates a repository project board. Returns a `410 Gone` status if projects are disabled in
     * the repository or if the repository does not have existing classic projects. If you do not
     * have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status
     * is returned.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the ReposProjectsResponse response from the API call
     */
    public CompletableFuture<ReposProjectsResponse> projectsCreateForRepoAsync(
            final String owner,
            final String repo,
            final OrgsProjectsRequest body) {
        try { 
            return prepareProjectsCreateForRepoRequest(owner, repo, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsCreateForRepo.
     */
    private ApiCall<ReposProjectsResponse, ApiException> prepareProjectsCreateForRepoRequest(
            final String owner,
            final String repo,
            final OrgsProjectsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ReposProjectsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/projects")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposProjectsResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new ReposProjects401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new ReposProjects403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposProjects404ErrorException(reason, context)))
                        .localErrorCase("410",
                                 ErrorCase.create("Gone",
                                (reason, context) -> new ReposProjects410ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new ReposProjects422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a user project board. Returns a `410 Gone` status if the user does not have existing
     * classic projects. If you do not have sufficient privileges to perform this action, a `401
     * Unauthorized` or `410 Gone` status is returned.
     * @param  body  Required parameter: Example:
     * @return    Returns the UserProjectsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UserProjectsResponse projectsCreateForAuthenticatedUser(
            final UserProjectsRequest body) throws ApiException, IOException {
        return prepareProjectsCreateForAuthenticatedUserRequest(body).execute();
    }

    /**
     * Creates a user project board. Returns a `410 Gone` status if the user does not have existing
     * classic projects. If you do not have sufficient privileges to perform this action, a `401
     * Unauthorized` or `410 Gone` status is returned.
     * @param  body  Required parameter: Example:
     * @return    Returns the UserProjectsResponse response from the API call
     */
    public CompletableFuture<UserProjectsResponse> projectsCreateForAuthenticatedUserAsync(
            final UserProjectsRequest body) {
        try { 
            return prepareProjectsCreateForAuthenticatedUserRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsCreateForAuthenticatedUser.
     */
    private ApiCall<UserProjectsResponse, ApiException> prepareProjectsCreateForAuthenticatedUserRequest(
            final UserProjectsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<UserProjectsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/user/projects")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, UserProjectsResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.create("Requires authentication",
                                (reason, context) -> new UserProjects401ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new UserProjects403ErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new UserProjects422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List user projects.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  state  Optional parameter: Indicates the state of the projects to return.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Project response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Project> projectsListForUser(
            final String username,
            final State1676Enum state,
            final Integer perPage,
            final Integer page) throws ApiException, IOException {
        return prepareProjectsListForUserRequest(username, state, perPage, page).execute();
    }

    /**
     * List user projects.
     * @param  username  Required parameter: The handle for the GitHub user account.
     * @param  state  Optional parameter: Indicates the state of the projects to return.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @return    Returns the List of Project response from the API call
     */
    public CompletableFuture<List<Project>> projectsListForUserAsync(
            final String username,
            final State1676Enum state,
            final Integer perPage,
            final Integer page) {
        try { 
            return prepareProjectsListForUserRequest(username, state, perPage, page).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for projectsListForUser.
     */
    private ApiCall<List<Project>, ApiException> prepareProjectsListForUserRequest(
            final String username,
            final State1676Enum state,
            final Integer perPage,
            final Integer page) throws IOException {
        return new ApiCall.Builder<List<Project>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/users/{username}/projects")
                        .queryParam(param -> param.key("state")
                                .value((state != null) ? state.value() : null).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .templateParam(param -> param.key("username").value(username)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Project[].class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.create("Validation failed, or the endpoint has been spammed.",
                                (reason, context) -> new UsersProjects422ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.github.api.ApiHelper;
import com.github.api.Server;
import com.github.api.exceptions.ApiException;
import com.github.api.exceptions.OrgsCodeScanningAlerts404ErrorException;
import com.github.api.exceptions.ReposCodeScanningAlerts403ErrorException;
import com.github.api.exceptions.ReposCodeScanningAlerts404ErrorException;
import com.github.api.exceptions.ReposCodeScanningAlertsAlertNumber403ErrorException;
import com.github.api.exceptions.ReposCodeScanningAlertsAlertNumber404ErrorException;
import com.github.api.exceptions.ReposCodeScanningAlertsAlertNumberInstances403ErrorException;
import com.github.api.exceptions.ReposCodeScanningAlertsAlertNumberInstances404ErrorException;
import com.github.api.exceptions.ReposCodeScanningAnalyses403ErrorException;
import com.github.api.exceptions.ReposCodeScanningAnalyses404ErrorException;
import com.github.api.exceptions.ReposCodeScanningAnalysesAnalysisId400ErrorException;
import com.github.api.exceptions.ReposCodeScanningAnalysesAnalysisId403ErrorException;
import com.github.api.exceptions.ReposCodeScanningAnalysesAnalysisId404ErrorException;
import com.github.api.exceptions.ReposCodeScanningCodeqlDatabases403ErrorException;
import com.github.api.exceptions.ReposCodeScanningCodeqlDatabases404ErrorException;
import com.github.api.exceptions.ReposCodeScanningCodeqlDatabasesLanguage403ErrorException;
import com.github.api.exceptions.ReposCodeScanningCodeqlDatabasesLanguage404ErrorException;
import com.github.api.exceptions.ReposCodeScanningSarifs403ErrorException;
import com.github.api.exceptions.ReposCodeScanningSarifs404ErrorException;
import com.github.api.exceptions.ReposCodeScanningSarifsSarifId403ErrorException;
import com.github.api.exceptions.ServiceUnavailable1Exception;
import com.github.api.http.request.HttpMethod;
import com.github.api.models.CodeQLDatabase;
import com.github.api.models.CodeScanningAlert;
import com.github.api.models.CodeScanningAlertInstance;
import com.github.api.models.CodeScanningAlertItems;
import com.github.api.models.CodeScanningAlertSeverityEnum;
import com.github.api.models.CodeScanningAlertStateEnum;
import com.github.api.models.CodeScanningAnalysis;
import com.github.api.models.CodeScanningOrganizationAlertItems;
import com.github.api.models.CodeScanningSarifsReceipt;
import com.github.api.models.CodeScanningSarifsStatus;
import com.github.api.models.Direction1Enum;
import com.github.api.models.ReposCodeScanningAlertsAlertNumberRequest;
import com.github.api.models.ReposCodeScanningAnalysesAnalysisIdResponse1;
import com.github.api.models.ReposCodeScanningCodeqlDatabasesLanguageResponse;
import com.github.api.models.ReposCodeScanningSarifsRequest;
import com.github.api.models.Sort8Enum;
import com.github.api.models.Sort91Enum;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class CodeScanningController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public CodeScanningController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Lists code scanning alerts for the default branch for all eligible repositories in an
     * organization. Eligible repositories are repositories that are owned by organizations that you
     * own or for which you are a security manager. For more information, see "[Managing security
     * managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * To use this endpoint, you must be an owner or security manager for the organization, and you
     * must use an access token with the `repo` scope or `security_events` scope. For public
     * repositories, you may instead use the `public_repo` scope. GitHub Apps must have the
     * `security_events` read permission to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  toolName  Optional parameter: The name of a code scanning tool. Only results by this
     *         tool will be listed. You can specify the tool by using either `tool_name` or
     *         `tool_guid`, but not both.
     * @param  toolGuid  Optional parameter: The GUID of a code scanning tool. Only results by this
     *         tool will be listed. Note that some code scanning tools may not include a GUID in
     *         their analysis data. You can specify the tool by using either `tool_guid` or
     *         `tool_name`, but not both.
     * @param  before  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for results before this cursor.
     * @param  after  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for results after this cursor.
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  state  Optional parameter: If specified, only code scanning alerts with this state
     *         will be returned.
     * @param  sort  Optional parameter: The property by which to sort the results.
     * @param  severity  Optional parameter: If specified, only code scanning alerts with this
     *         severity will be returned.
     * @return    Returns the List of CodeScanningOrganizationAlertItems response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<CodeScanningOrganizationAlertItems> codeScanningListAlertsForOrg(
            final String org,
            final String toolName,
            final String toolGuid,
            final String before,
            final String after,
            final Integer page,
            final Integer perPage,
            final Direction1Enum direction,
            final CodeScanningAlertStateEnum state,
            final Sort8Enum sort,
            final CodeScanningAlertSeverityEnum severity) throws ApiException, IOException {
        return prepareCodeScanningListAlertsForOrgRequest(org, toolName, toolGuid, before, after,
                page, perPage, direction, state, sort, severity).execute();
    }

    /**
     * Lists code scanning alerts for the default branch for all eligible repositories in an
     * organization. Eligible repositories are repositories that are owned by organizations that you
     * own or for which you are a security manager. For more information, see "[Managing security
     * managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * To use this endpoint, you must be an owner or security manager for the organization, and you
     * must use an access token with the `repo` scope or `security_events` scope. For public
     * repositories, you may instead use the `public_repo` scope. GitHub Apps must have the
     * `security_events` read permission to use this endpoint.
     * @param  org  Required parameter: The organization name. The name is not case sensitive.
     * @param  toolName  Optional parameter: The name of a code scanning tool. Only results by this
     *         tool will be listed. You can specify the tool by using either `tool_name` or
     *         `tool_guid`, but not both.
     * @param  toolGuid  Optional parameter: The GUID of a code scanning tool. Only results by this
     *         tool will be listed. Note that some code scanning tools may not include a GUID in
     *         their analysis data. You can specify the tool by using either `tool_guid` or
     *         `tool_name`, but not both.
     * @param  before  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for results before this cursor.
     * @param  after  Optional parameter: A cursor, as given in the [Link
     *         header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header).
     *         If specified, the query only searches for results after this cursor.
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  state  Optional parameter: If specified, only code scanning alerts with this state
     *         will be returned.
     * @param  sort  Optional parameter: The property by which to sort the results.
     * @param  severity  Optional parameter: If specified, only code scanning alerts with this
     *         severity will be returned.
     * @return    Returns the List of CodeScanningOrganizationAlertItems response from the API call
     */
    public CompletableFuture<List<CodeScanningOrganizationAlertItems>> codeScanningListAlertsForOrgAsync(
            final String org,
            final String toolName,
            final String toolGuid,
            final String before,
            final String after,
            final Integer page,
            final Integer perPage,
            final Direction1Enum direction,
            final CodeScanningAlertStateEnum state,
            final Sort8Enum sort,
            final CodeScanningAlertSeverityEnum severity) {
        try { 
            return prepareCodeScanningListAlertsForOrgRequest(org, toolName, toolGuid, before, after, page,
            perPage, direction, state, sort, severity).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for codeScanningListAlertsForOrg.
     */
    private ApiCall<List<CodeScanningOrganizationAlertItems>, ApiException> prepareCodeScanningListAlertsForOrgRequest(
            final String org,
            final String toolName,
            final String toolGuid,
            final String before,
            final String after,
            final Integer page,
            final Integer perPage,
            final Direction1Enum direction,
            final CodeScanningAlertStateEnum state,
            final Sort8Enum sort,
            final CodeScanningAlertSeverityEnum severity) throws IOException {
        return new ApiCall.Builder<List<CodeScanningOrganizationAlertItems>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/orgs/{org}/code-scanning/alerts")
                        .queryParam(param -> param.key("tool_name")
                                .value(toolName).isRequired(false))
                        .queryParam(param -> param.key("tool_guid")
                                .value(toolGuid).isRequired(false))
                        .queryParam(param -> param.key("before")
                                .value(before).isRequired(false))
                        .queryParam(param -> param.key("after")
                                .value(after).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("direction")
                                .value((direction != null) ? direction.value() : null).isRequired(false))
                        .queryParam(param -> param.key("state")
                                .value((state != null) ? state.value() : null).isRequired(false))
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .queryParam(param -> param.key("severity")
                                .value((severity != null) ? severity.value() : null).isRequired(false))
                        .templateParam(param -> param.key("org").value(org)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        CodeScanningOrganizationAlertItems[].class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new OrgsCodeScanningAlerts404ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists code scanning alerts. To use this endpoint, you must use an access token with the
     * `security_events` scope or, for alerts from public repositories only, an access token with
     * the `public_repo` scope. GitHub Apps must have the `security_events` read permission to use
     * this endpoint. The response includes a `most_recent_instance` object. This provides details
     * of the most recent instance of this alert for the default branch (or for the specified Git
     * reference if you used `ref` in the request).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  toolName  Optional parameter: The name of a code scanning tool. Only results by this
     *         tool will be listed. You can specify the tool by using either `tool_name` or
     *         `tool_guid`, but not both.
     * @param  toolGuid  Optional parameter: The GUID of a code scanning tool. Only results by this
     *         tool will be listed. Note that some code scanning tools may not include a GUID in
     *         their analysis data. You can specify the tool by using either `tool_guid` or
     *         `tool_name`, but not both.
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  ref  Optional parameter: The Git reference for the results you want to list. The
     *         `ref` for a branch can be formatted either as `refs/heads/&lt;branch name&gt;` or simply
     *         `&lt;branch name&gt;`. To reference a pull request use `refs/pull/&lt;number&gt;/merge`.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  sort  Optional parameter: The property by which to sort the results.
     * @param  state  Optional parameter: If specified, only code scanning alerts with this state
     *         will be returned.
     * @param  severity  Optional parameter: If specified, only code scanning alerts with this
     *         severity will be returned.
     * @return    Returns the List of CodeScanningAlertItems response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<CodeScanningAlertItems> codeScanningListAlertsForRepo(
            final String owner,
            final String repo,
            final String toolName,
            final String toolGuid,
            final Integer page,
            final Integer perPage,
            final String ref,
            final Direction1Enum direction,
            final Sort8Enum sort,
            final CodeScanningAlertStateEnum state,
            final CodeScanningAlertSeverityEnum severity) throws ApiException, IOException {
        return prepareCodeScanningListAlertsForRepoRequest(owner, repo, toolName, toolGuid, page,
                perPage, ref, direction, sort, state, severity).execute();
    }

    /**
     * Lists code scanning alerts. To use this endpoint, you must use an access token with the
     * `security_events` scope or, for alerts from public repositories only, an access token with
     * the `public_repo` scope. GitHub Apps must have the `security_events` read permission to use
     * this endpoint. The response includes a `most_recent_instance` object. This provides details
     * of the most recent instance of this alert for the default branch (or for the specified Git
     * reference if you used `ref` in the request).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  toolName  Optional parameter: The name of a code scanning tool. Only results by this
     *         tool will be listed. You can specify the tool by using either `tool_name` or
     *         `tool_guid`, but not both.
     * @param  toolGuid  Optional parameter: The GUID of a code scanning tool. Only results by this
     *         tool will be listed. Note that some code scanning tools may not include a GUID in
     *         their analysis data. You can specify the tool by using either `tool_guid` or
     *         `tool_name`, but not both.
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  ref  Optional parameter: The Git reference for the results you want to list. The
     *         `ref` for a branch can be formatted either as `refs/heads/&lt;branch name&gt;` or simply
     *         `&lt;branch name&gt;`. To reference a pull request use `refs/pull/&lt;number&gt;/merge`.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  sort  Optional parameter: The property by which to sort the results.
     * @param  state  Optional parameter: If specified, only code scanning alerts with this state
     *         will be returned.
     * @param  severity  Optional parameter: If specified, only code scanning alerts with this
     *         severity will be returned.
     * @return    Returns the List of CodeScanningAlertItems response from the API call
     */
    public CompletableFuture<List<CodeScanningAlertItems>> codeScanningListAlertsForRepoAsync(
            final String owner,
            final String repo,
            final String toolName,
            final String toolGuid,
            final Integer page,
            final Integer perPage,
            final String ref,
            final Direction1Enum direction,
            final Sort8Enum sort,
            final CodeScanningAlertStateEnum state,
            final CodeScanningAlertSeverityEnum severity) {
        try { 
            return prepareCodeScanningListAlertsForRepoRequest(owner, repo, toolName, toolGuid, page,
            perPage, ref, direction, sort, state, severity).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for codeScanningListAlertsForRepo.
     */
    private ApiCall<List<CodeScanningAlertItems>, ApiException> prepareCodeScanningListAlertsForRepoRequest(
            final String owner,
            final String repo,
            final String toolName,
            final String toolGuid,
            final Integer page,
            final Integer perPage,
            final String ref,
            final Direction1Enum direction,
            final Sort8Enum sort,
            final CodeScanningAlertStateEnum state,
            final CodeScanningAlertSeverityEnum severity) throws IOException {
        return new ApiCall.Builder<List<CodeScanningAlertItems>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/code-scanning/alerts")
                        .queryParam(param -> param.key("tool_name")
                                .value(toolName).isRequired(false))
                        .queryParam(param -> param.key("tool_guid")
                                .value(toolGuid).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("ref")
                                .value(ref).isRequired(false))
                        .queryParam(param -> param.key("direction")
                                .value((direction != null) ? direction.value() : null).isRequired(false))
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .queryParam(param -> param.key("state")
                                .value((state != null) ? state.value() : null).isRequired(false))
                        .queryParam(param -> param.key("severity")
                                .value((severity != null) ? severity.value() : null).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        CodeScanningAlertItems[].class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Response if GitHub Advanced Security is not enabled for this repository",
                                (reason, context) -> new ReposCodeScanningAlerts403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposCodeScanningAlerts404ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets a single code scanning alert. You must use an access token with the `security_events`
     * scope to use this endpoint with private repos, the `public_repo` scope also grants permission
     * to read security events on public repos only. GitHub Apps must have the `security_events`
     * read permission to use this endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  alertNumber  Required parameter: The number that identifies an alert. You can find
     *         this at the end of the URL for a code scanning alert within GitHub, and in the
     *         `number` field in the response from the `GET
     *         /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @return    Returns the CodeScanningAlert response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CodeScanningAlert codeScanningGetAlert(
            final String owner,
            final String repo,
            final int alertNumber) throws ApiException, IOException {
        return prepareCodeScanningGetAlertRequest(owner, repo, alertNumber).execute();
    }

    /**
     * Gets a single code scanning alert. You must use an access token with the `security_events`
     * scope to use this endpoint with private repos, the `public_repo` scope also grants permission
     * to read security events on public repos only. GitHub Apps must have the `security_events`
     * read permission to use this endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  alertNumber  Required parameter: The number that identifies an alert. You can find
     *         this at the end of the URL for a code scanning alert within GitHub, and in the
     *         `number` field in the response from the `GET
     *         /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @return    Returns the CodeScanningAlert response from the API call
     */
    public CompletableFuture<CodeScanningAlert> codeScanningGetAlertAsync(
            final String owner,
            final String repo,
            final int alertNumber) {
        try { 
            return prepareCodeScanningGetAlertRequest(owner, repo, alertNumber).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for codeScanningGetAlert.
     */
    private ApiCall<CodeScanningAlert, ApiException> prepareCodeScanningGetAlertRequest(
            final String owner,
            final String repo,
            final int alertNumber) throws IOException {
        return new ApiCall.Builder<CodeScanningAlert, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("alert_number").value(alertNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, CodeScanningAlert.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Response if GitHub Advanced Security is not enabled for this repository",
                                (reason, context) -> new ReposCodeScanningAlertsAlertNumber403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposCodeScanningAlertsAlertNumber404ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates the status of a single code scanning alert. You must use an access token with the
     * `security_events` scope to use this endpoint with private repositories. You can also use
     * tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the
     * `security_events` write permission to use this endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  alertNumber  Required parameter: The number that identifies an alert. You can find
     *         this at the end of the URL for a code scanning alert within GitHub, and in the
     *         `number` field in the response from the `GET
     *         /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param  body  Required parameter: Example:
     * @return    Returns the CodeScanningAlert response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CodeScanningAlert codeScanningUpdateAlert(
            final String owner,
            final String repo,
            final int alertNumber,
            final ReposCodeScanningAlertsAlertNumberRequest body) throws ApiException, IOException {
        return prepareCodeScanningUpdateAlertRequest(owner, repo, alertNumber, body).execute();
    }

    /**
     * Updates the status of a single code scanning alert. You must use an access token with the
     * `security_events` scope to use this endpoint with private repositories. You can also use
     * tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the
     * `security_events` write permission to use this endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  alertNumber  Required parameter: The number that identifies an alert. You can find
     *         this at the end of the URL for a code scanning alert within GitHub, and in the
     *         `number` field in the response from the `GET
     *         /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param  body  Required parameter: Example:
     * @return    Returns the CodeScanningAlert response from the API call
     */
    public CompletableFuture<CodeScanningAlert> codeScanningUpdateAlertAsync(
            final String owner,
            final String repo,
            final int alertNumber,
            final ReposCodeScanningAlertsAlertNumberRequest body) {
        try { 
            return prepareCodeScanningUpdateAlertRequest(owner, repo, alertNumber, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for codeScanningUpdateAlert.
     */
    private ApiCall<CodeScanningAlert, ApiException> prepareCodeScanningUpdateAlertRequest(
            final String owner,
            final String repo,
            final int alertNumber,
            final ReposCodeScanningAlertsAlertNumberRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<CodeScanningAlert, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("alert_number").value(alertNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, CodeScanningAlert.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository",
                                (reason, context) -> new ReposCodeScanningAlertsAlertNumber403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposCodeScanningAlertsAlertNumber404ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists all instances of the specified code scanning alert. You must use an access token with
     * the `security_events` scope to use this endpoint with private repos, the `public_repo` scope
     * also grants permission to read security events on public repos only. GitHub Apps must have
     * the `security_events` read permission to use this endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  alertNumber  Required parameter: The number that identifies an alert. You can find
     *         this at the end of the URL for a code scanning alert within GitHub, and in the
     *         `number` field in the response from the `GET
     *         /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  ref  Optional parameter: The Git reference for the results you want to list. The
     *         `ref` for a branch can be formatted either as `refs/heads/&lt;branch name&gt;` or simply
     *         `&lt;branch name&gt;`. To reference a pull request use `refs/pull/&lt;number&gt;/merge`.
     * @return    Returns the List of CodeScanningAlertInstance response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<CodeScanningAlertInstance> codeScanningListAlertInstances(
            final String owner,
            final String repo,
            final int alertNumber,
            final Integer page,
            final Integer perPage,
            final String ref) throws ApiException, IOException {
        return prepareCodeScanningListAlertInstancesRequest(owner, repo, alertNumber, page, perPage,
                ref).execute();
    }

    /**
     * Lists all instances of the specified code scanning alert. You must use an access token with
     * the `security_events` scope to use this endpoint with private repos, the `public_repo` scope
     * also grants permission to read security events on public repos only. GitHub Apps must have
     * the `security_events` read permission to use this endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  alertNumber  Required parameter: The number that identifies an alert. You can find
     *         this at the end of the URL for a code scanning alert within GitHub, and in the
     *         `number` field in the response from the `GET
     *         /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  ref  Optional parameter: The Git reference for the results you want to list. The
     *         `ref` for a branch can be formatted either as `refs/heads/&lt;branch name&gt;` or simply
     *         `&lt;branch name&gt;`. To reference a pull request use `refs/pull/&lt;number&gt;/merge`.
     * @return    Returns the List of CodeScanningAlertInstance response from the API call
     */
    public CompletableFuture<List<CodeScanningAlertInstance>> codeScanningListAlertInstancesAsync(
            final String owner,
            final String repo,
            final int alertNumber,
            final Integer page,
            final Integer perPage,
            final String ref) {
        try { 
            return prepareCodeScanningListAlertInstancesRequest(owner, repo, alertNumber, page, perPage,
            ref).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for codeScanningListAlertInstances.
     */
    private ApiCall<List<CodeScanningAlertInstance>, ApiException> prepareCodeScanningListAlertInstancesRequest(
            final String owner,
            final String repo,
            final int alertNumber,
            final Integer page,
            final Integer perPage,
            final String ref) throws IOException {
        return new ApiCall.Builder<List<CodeScanningAlertInstance>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances")
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("ref")
                                .value(ref).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("alert_number").value(alertNumber).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        CodeScanningAlertInstance[].class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Response if GitHub Advanced Security is not enabled for this repository",
                                (reason, context) -> new ReposCodeScanningAlertsAlertNumberInstances403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposCodeScanningAlertsAlertNumberInstances404ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists the details of all code scanning analyses for a repository, starting with the most
     * recent. The response is paginated and you can use the `page` and `per_page` parameters to
     * list the analyses you're interested in. By default 30 analyses are listed per page. The
     * `rules_count` field in the response give the number of rules that were run in the analysis.
     * For very old analyses this data is not available, and `0` is returned in this field. You must
     * use an access token with the `security_events` scope to use this endpoint with private repos,
     * the `public_repo` scope also grants permission to read security events on public repos only.
     * GitHub Apps must have the `security_events` read permission to use this endpoint.
     * **Deprecation notice**: The `tool_name` field is deprecated and will, in future, not be
     * included in the response for this endpoint. The example response reflects this change. The
     * tool name can now be found inside the `tool` field.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  toolName  Optional parameter: The name of a code scanning tool. Only results by this
     *         tool will be listed. You can specify the tool by using either `tool_name` or
     *         `tool_guid`, but not both.
     * @param  toolGuid  Optional parameter: The GUID of a code scanning tool. Only results by this
     *         tool will be listed. Note that some code scanning tools may not include a GUID in
     *         their analysis data. You can specify the tool by using either `tool_guid` or
     *         `tool_name`, but not both.
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  ref  Optional parameter: The Git reference for the analyses you want to list. The
     *         `ref` for a branch can be formatted either as `refs/heads/&lt;branch name&gt;` or simply
     *         `&lt;branch name&gt;`. To reference a pull request use `refs/pull/&lt;number&gt;/merge`.
     * @param  sarifId  Optional parameter: Filter analyses belonging to the same SARIF upload.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  sort  Optional parameter: The property by which to sort the results.
     * @return    Returns the List of CodeScanningAnalysis response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<CodeScanningAnalysis> codeScanningListRecentAnalyses(
            final String owner,
            final String repo,
            final String toolName,
            final String toolGuid,
            final Integer page,
            final Integer perPage,
            final String ref,
            final String sarifId,
            final Direction1Enum direction,
            final Sort91Enum sort) throws ApiException, IOException {
        return prepareCodeScanningListRecentAnalysesRequest(owner, repo, toolName, toolGuid, page,
                perPage, ref, sarifId, direction, sort).execute();
    }

    /**
     * Lists the details of all code scanning analyses for a repository, starting with the most
     * recent. The response is paginated and you can use the `page` and `per_page` parameters to
     * list the analyses you're interested in. By default 30 analyses are listed per page. The
     * `rules_count` field in the response give the number of rules that were run in the analysis.
     * For very old analyses this data is not available, and `0` is returned in this field. You must
     * use an access token with the `security_events` scope to use this endpoint with private repos,
     * the `public_repo` scope also grants permission to read security events on public repos only.
     * GitHub Apps must have the `security_events` read permission to use this endpoint.
     * **Deprecation notice**: The `tool_name` field is deprecated and will, in future, not be
     * included in the response for this endpoint. The example response reflects this change. The
     * tool name can now be found inside the `tool` field.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  toolName  Optional parameter: The name of a code scanning tool. Only results by this
     *         tool will be listed. You can specify the tool by using either `tool_name` or
     *         `tool_guid`, but not both.
     * @param  toolGuid  Optional parameter: The GUID of a code scanning tool. Only results by this
     *         tool will be listed. Note that some code scanning tools may not include a GUID in
     *         their analysis data. You can specify the tool by using either `tool_guid` or
     *         `tool_name`, but not both.
     * @param  page  Optional parameter: Page number of the results to fetch.
     * @param  perPage  Optional parameter: The number of results per page (max 100).
     * @param  ref  Optional parameter: The Git reference for the analyses you want to list. The
     *         `ref` for a branch can be formatted either as `refs/heads/&lt;branch name&gt;` or simply
     *         `&lt;branch name&gt;`. To reference a pull request use `refs/pull/&lt;number&gt;/merge`.
     * @param  sarifId  Optional parameter: Filter analyses belonging to the same SARIF upload.
     * @param  direction  Optional parameter: The direction to sort the results by.
     * @param  sort  Optional parameter: The property by which to sort the results.
     * @return    Returns the List of CodeScanningAnalysis response from the API call
     */
    public CompletableFuture<List<CodeScanningAnalysis>> codeScanningListRecentAnalysesAsync(
            final String owner,
            final String repo,
            final String toolName,
            final String toolGuid,
            final Integer page,
            final Integer perPage,
            final String ref,
            final String sarifId,
            final Direction1Enum direction,
            final Sort91Enum sort) {
        try { 
            return prepareCodeScanningListRecentAnalysesRequest(owner, repo, toolName, toolGuid, page,
            perPage, ref, sarifId, direction, sort).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for codeScanningListRecentAnalyses.
     */
    private ApiCall<List<CodeScanningAnalysis>, ApiException> prepareCodeScanningListRecentAnalysesRequest(
            final String owner,
            final String repo,
            final String toolName,
            final String toolGuid,
            final Integer page,
            final Integer perPage,
            final String ref,
            final String sarifId,
            final Direction1Enum direction,
            final Sort91Enum sort) throws IOException {
        return new ApiCall.Builder<List<CodeScanningAnalysis>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/code-scanning/analyses")
                        .queryParam(param -> param.key("tool_name")
                                .value(toolName).isRequired(false))
                        .queryParam(param -> param.key("tool_guid")
                                .value(toolGuid).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 30).isRequired(false))
                        .queryParam(param -> param.key("ref")
                                .value(ref).isRequired(false))
                        .queryParam(param -> param.key("sarif_id")
                                .value(sarifId).isRequired(false))
                        .queryParam(param -> param.key("direction")
                                .value((direction != null) ? direction.value() : null).isRequired(false))
                        .queryParam(param -> param.key("sort")
                                .value((sort != null) ? sort.value() : null).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        CodeScanningAnalysis[].class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Response if GitHub Advanced Security is not enabled for this repository",
                                (reason, context) -> new ReposCodeScanningAnalyses403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposCodeScanningAnalyses404ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets a specified code scanning analysis for a repository. You must use an access token with
     * the `security_events` scope to use this endpoint with private repos, the `public_repo` scope
     * also grants permission to read security events on public repos only. GitHub Apps must have
     * the `security_events` read permission to use this endpoint. The default JSON response
     * contains fields that describe the analysis. This includes the Git reference and commit SHA to
     * which the analysis relates, the datetime of the analysis, the name of the code scanning tool,
     * and the number of alerts. The `rules_count` field in the default response give the number of
     * rules that were run in the analysis. For very old analyses this data is not available, and
     * `0` is returned in this field. If you use the Accept header `application/sarif+json`, the
     * response contains the analysis data that was uploaded. This is formatted as [SARIF version
     * 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  analysisId  Required parameter: The ID of the analysis, as returned from the `GET
     *         /repos/{owner}/{repo}/code-scanning/analyses` operation.
     * @return    Returns the CodeScanningAnalysis response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CodeScanningAnalysis codeScanningGetAnalysis(
            final String owner,
            final String repo,
            final int analysisId) throws ApiException, IOException {
        return prepareCodeScanningGetAnalysisRequest(owner, repo, analysisId).execute();
    }

    /**
     * Gets a specified code scanning analysis for a repository. You must use an access token with
     * the `security_events` scope to use this endpoint with private repos, the `public_repo` scope
     * also grants permission to read security events on public repos only. GitHub Apps must have
     * the `security_events` read permission to use this endpoint. The default JSON response
     * contains fields that describe the analysis. This includes the Git reference and commit SHA to
     * which the analysis relates, the datetime of the analysis, the name of the code scanning tool,
     * and the number of alerts. The `rules_count` field in the default response give the number of
     * rules that were run in the analysis. For very old analyses this data is not available, and
     * `0` is returned in this field. If you use the Accept header `application/sarif+json`, the
     * response contains the analysis data that was uploaded. This is formatted as [SARIF version
     * 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  analysisId  Required parameter: The ID of the analysis, as returned from the `GET
     *         /repos/{owner}/{repo}/code-scanning/analyses` operation.
     * @return    Returns the CodeScanningAnalysis response from the API call
     */
    public CompletableFuture<CodeScanningAnalysis> codeScanningGetAnalysisAsync(
            final String owner,
            final String repo,
            final int analysisId) {
        try { 
            return prepareCodeScanningGetAnalysisRequest(owner, repo, analysisId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for codeScanningGetAnalysis.
     */
    private ApiCall<CodeScanningAnalysis, ApiException> prepareCodeScanningGetAnalysisRequest(
            final String owner,
            final String repo,
            final int analysisId) throws IOException {
        return new ApiCall.Builder<CodeScanningAnalysis, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("analysis_id").value(analysisId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, CodeScanningAnalysis.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Response if GitHub Advanced Security is not enabled for this repository",
                                (reason, context) -> new ReposCodeScanningAnalysesAnalysisId403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposCodeScanningAnalysesAnalysisId404ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deletes a specified code scanning analysis from a repository. For private repositories, you
     * must use an access token with the `repo` scope. For public repositories, you must use an
     * access token with `public_repo` scope. GitHub Apps must have the `security_events` write
     * permission to use this endpoint. You can delete one analysis at a time. To delete a series of
     * analyses, start with the most recent analysis and work backwards. Conceptually, the process
     * is similar to the undo function in a text editor. When you list the analyses for a
     * repository, one or more will be identified as deletable in the response: ``` "deletable":
     * true ``` An analysis is deletable when it's the most recent in a set of analyses. Typically,
     * a repository will have multiple sets of analyses for each enabled code scanning tool, where a
     * set is determined by a unique combination of analysis values: * `ref` * `tool` * `category`
     * If you attempt to delete an analysis that is not the most recent in a set, you'll get a 400
     * response with the message: ``` Analysis specified is not deletable. ``` The response from a
     * successful `DELETE` operation provides you with two alternative URLs for deleting the next
     * analysis in the set: `next_analysis_url` and `confirm_delete_url`. Use the
     * `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis in a
     * set. This is a useful option if you want to preserve at least one analysis for the specified
     * tool in your repository. Use the `confirm_delete_url` URL if you are content to remove all
     * analyses for a tool. When you delete the last analysis in a set, the value of
     * `next_analysis_url` and `confirm_delete_url` in the 200 response is `null`. As an example of
     * the deletion process, let's imagine that you added a workflow that configured a particular
     * code scanning tool to analyze the code in a repository. This tool has added 15 analyses: 10
     * on the default branch, and another 5 on a topic branch. You therefore have two separate sets
     * of analyses for this tool. You've now decided that you want to remove all of the analyses for
     * the tool. To do this you must make 15 separate deletion requests. To start, you must find an
     * analysis that's identified as deletable. Each set of analyses always has one that's
     * identified as deletable. Having found the deletable analysis for one of the two sets, delete
     * this analysis and then continue deleting the next analysis in the set until they're all
     * deleted. Then repeat the process for the second set. The procedure therefore consists of a
     * nested loop: **Outer loop**: * List the analyses for the repository, filtered by tool. *
     * Parse this list to find a deletable analysis. If found: **Inner loop**: * Delete the
     * identified analysis. * Parse the response for the value of `confirm_delete_url` and, if
     * found, use this in the next iteration. The above process assumes that you want to remove all
     * trace of the tool's analyses from the GitHub user interface, for the specified repository,
     * and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the
     * `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid
     * removing a tool's analysis entirely.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  analysisId  Required parameter: The ID of the analysis, as returned from the `GET
     *         /repos/{owner}/{repo}/code-scanning/analyses` operation.
     * @param  confirmDelete  Optional parameter: Allow deletion if the specified analysis is the
     *         last in a set. If you attempt to delete the final analysis in a set without setting
     *         this parameter to `true`, you'll get a 400 response with the message: `Analysis is
     *         last of its type and deletion may result in the loss of historical alert data. Please
     *         specify confirm_delete.`
     * @return    Returns the ReposCodeScanningAnalysesAnalysisIdResponse1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposCodeScanningAnalysesAnalysisIdResponse1 codeScanningDeleteAnalysis(
            final String owner,
            final String repo,
            final int analysisId,
            final String confirmDelete) throws ApiException, IOException {
        return prepareCodeScanningDeleteAnalysisRequest(owner, repo, analysisId,
                confirmDelete).execute();
    }

    /**
     * Deletes a specified code scanning analysis from a repository. For private repositories, you
     * must use an access token with the `repo` scope. For public repositories, you must use an
     * access token with `public_repo` scope. GitHub Apps must have the `security_events` write
     * permission to use this endpoint. You can delete one analysis at a time. To delete a series of
     * analyses, start with the most recent analysis and work backwards. Conceptually, the process
     * is similar to the undo function in a text editor. When you list the analyses for a
     * repository, one or more will be identified as deletable in the response: ``` "deletable":
     * true ``` An analysis is deletable when it's the most recent in a set of analyses. Typically,
     * a repository will have multiple sets of analyses for each enabled code scanning tool, where a
     * set is determined by a unique combination of analysis values: * `ref` * `tool` * `category`
     * If you attempt to delete an analysis that is not the most recent in a set, you'll get a 400
     * response with the message: ``` Analysis specified is not deletable. ``` The response from a
     * successful `DELETE` operation provides you with two alternative URLs for deleting the next
     * analysis in the set: `next_analysis_url` and `confirm_delete_url`. Use the
     * `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis in a
     * set. This is a useful option if you want to preserve at least one analysis for the specified
     * tool in your repository. Use the `confirm_delete_url` URL if you are content to remove all
     * analyses for a tool. When you delete the last analysis in a set, the value of
     * `next_analysis_url` and `confirm_delete_url` in the 200 response is `null`. As an example of
     * the deletion process, let's imagine that you added a workflow that configured a particular
     * code scanning tool to analyze the code in a repository. This tool has added 15 analyses: 10
     * on the default branch, and another 5 on a topic branch. You therefore have two separate sets
     * of analyses for this tool. You've now decided that you want to remove all of the analyses for
     * the tool. To do this you must make 15 separate deletion requests. To start, you must find an
     * analysis that's identified as deletable. Each set of analyses always has one that's
     * identified as deletable. Having found the deletable analysis for one of the two sets, delete
     * this analysis and then continue deleting the next analysis in the set until they're all
     * deleted. Then repeat the process for the second set. The procedure therefore consists of a
     * nested loop: **Outer loop**: * List the analyses for the repository, filtered by tool. *
     * Parse this list to find a deletable analysis. If found: **Inner loop**: * Delete the
     * identified analysis. * Parse the response for the value of `confirm_delete_url` and, if
     * found, use this in the next iteration. The above process assumes that you want to remove all
     * trace of the tool's analyses from the GitHub user interface, for the specified repository,
     * and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the
     * `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid
     * removing a tool's analysis entirely.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  analysisId  Required parameter: The ID of the analysis, as returned from the `GET
     *         /repos/{owner}/{repo}/code-scanning/analyses` operation.
     * @param  confirmDelete  Optional parameter: Allow deletion if the specified analysis is the
     *         last in a set. If you attempt to delete the final analysis in a set without setting
     *         this parameter to `true`, you'll get a 400 response with the message: `Analysis is
     *         last of its type and deletion may result in the loss of historical alert data. Please
     *         specify confirm_delete.`
     * @return    Returns the ReposCodeScanningAnalysesAnalysisIdResponse1 response from the API call
     */
    public CompletableFuture<ReposCodeScanningAnalysesAnalysisIdResponse1> codeScanningDeleteAnalysisAsync(
            final String owner,
            final String repo,
            final int analysisId,
            final String confirmDelete) {
        try { 
            return prepareCodeScanningDeleteAnalysisRequest(owner, repo, analysisId,
            confirmDelete).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for codeScanningDeleteAnalysis.
     */
    private ApiCall<ReposCodeScanningAnalysesAnalysisIdResponse1, ApiException> prepareCodeScanningDeleteAnalysisRequest(
            final String owner,
            final String repo,
            final int analysisId,
            final String confirmDelete) throws IOException {
        return new ApiCall.Builder<ReposCodeScanningAnalysesAnalysisIdResponse1, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}")
                        .queryParam(param -> param.key("confirm_delete")
                                .value(confirmDelete).isRequired(false))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("analysis_id").value(analysisId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposCodeScanningAnalysesAnalysisIdResponse1.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.create("Bad Request",
                                (reason, context) -> new ReposCodeScanningAnalysesAnalysisId400ErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository",
                                (reason, context) -> new ReposCodeScanningAnalysesAnalysisId403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposCodeScanningAnalysesAnalysisId404ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists the CodeQL databases that are available in a repository. For private repositories, you
     * must use an access token with the `security_events` scope. For public repositories, you can
     * use tokens with the `security_events` or `public_repo` scope. GitHub Apps must have the
     * `contents` read permission to use this endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @return    Returns the List of CodeQLDatabase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<CodeQLDatabase> codeScanningListCodeqlDatabases(
            final String owner,
            final String repo) throws ApiException, IOException {
        return prepareCodeScanningListCodeqlDatabasesRequest(owner, repo).execute();
    }

    /**
     * Lists the CodeQL databases that are available in a repository. For private repositories, you
     * must use an access token with the `security_events` scope. For public repositories, you can
     * use tokens with the `security_events` or `public_repo` scope. GitHub Apps must have the
     * `contents` read permission to use this endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @return    Returns the List of CodeQLDatabase response from the API call
     */
    public CompletableFuture<List<CodeQLDatabase>> codeScanningListCodeqlDatabasesAsync(
            final String owner,
            final String repo) {
        try { 
            return prepareCodeScanningListCodeqlDatabasesRequest(owner, repo).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for codeScanningListCodeqlDatabases.
     */
    private ApiCall<List<CodeQLDatabase>, ApiException> prepareCodeScanningListCodeqlDatabasesRequest(
            final String owner,
            final String repo) throws IOException {
        return new ApiCall.Builder<List<CodeQLDatabase>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/code-scanning/codeql/databases")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        CodeQLDatabase[].class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Response if GitHub Advanced Security is not enabled for this repository",
                                (reason, context) -> new ReposCodeScanningCodeqlDatabases403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposCodeScanningCodeqlDatabases404ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets a CodeQL database for a language in a repository. By default this endpoint returns JSON
     * metadata about the CodeQL database. To download the CodeQL database binary content, set the
     * `Accept` header of the request to
     * [`application/zip`](https://docs.github.com/rest/overview/media-types), and make sure your
     * HTTP client is configured to follow redirects or use the `Location` header to make a second
     * request to get the redirect URL. For private repositories, you must use an access token with
     * the `security_events` scope. For public repositories, you can use tokens with the
     * `security_events` or `public_repo` scope. GitHub Apps must have the `contents` read
     * permission to use this endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  language  Required parameter: The language of the CodeQL database.
     * @return    Returns the ReposCodeScanningCodeqlDatabasesLanguageResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReposCodeScanningCodeqlDatabasesLanguageResponse codeScanningGetCodeqlDatabase(
            final String owner,
            final String repo,
            final String language) throws ApiException, IOException {
        return prepareCodeScanningGetCodeqlDatabaseRequest(owner, repo, language).execute();
    }

    /**
     * Gets a CodeQL database for a language in a repository. By default this endpoint returns JSON
     * metadata about the CodeQL database. To download the CodeQL database binary content, set the
     * `Accept` header of the request to
     * [`application/zip`](https://docs.github.com/rest/overview/media-types), and make sure your
     * HTTP client is configured to follow redirects or use the `Location` header to make a second
     * request to get the redirect URL. For private repositories, you must use an access token with
     * the `security_events` scope. For public repositories, you can use tokens with the
     * `security_events` or `public_repo` scope. GitHub Apps must have the `contents` read
     * permission to use this endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  language  Required parameter: The language of the CodeQL database.
     * @return    Returns the ReposCodeScanningCodeqlDatabasesLanguageResponse response from the API call
     */
    public CompletableFuture<ReposCodeScanningCodeqlDatabasesLanguageResponse> codeScanningGetCodeqlDatabaseAsync(
            final String owner,
            final String repo,
            final String language) {
        try { 
            return prepareCodeScanningGetCodeqlDatabaseRequest(owner, repo, language).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for codeScanningGetCodeqlDatabase.
     */
    private ApiCall<ReposCodeScanningCodeqlDatabasesLanguageResponse, ApiException> prepareCodeScanningGetCodeqlDatabaseRequest(
            final String owner,
            final String repo,
            final String language) throws IOException {
        return new ApiCall.Builder<ReposCodeScanningCodeqlDatabasesLanguageResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("language").value(language)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReposCodeScanningCodeqlDatabasesLanguageResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Response if GitHub Advanced Security is not enabled for this repository",
                                (reason, context) -> new ReposCodeScanningCodeqlDatabasesLanguage403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposCodeScanningCodeqlDatabasesLanguage404ErrorException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Uploads SARIF data containing the results of a code scanning analysis to make the results
     * available in a repository. You must use an access token with the `security_events` scope to
     * use this endpoint for private repositories. You can also use tokens with the `public_repo`
     * scope for public repositories only. GitHub Apps must have the `security_events` write
     * permission to use this endpoint. There are two places where you can upload code scanning
     * results. - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref
     * refs/pull/42/head`, then the results appear as alerts in a pull request check. For more
     * information, see "[Triaging code scanning alerts in pull
     * requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)." - If
     * you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in
     * the **Security** tab for your repository. For more information, see "[Managing code scanning
     * alerts for your
     * repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
     * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`,
     * and then encode it as a Base64 format string. For example: ``` gzip -c analysis-data.sarif |
     * base64 -w0 ``` &lt;br&gt; SARIF upload supports a maximum number of entries per the following data
     * objects, and an analysis will be rejected if any of these objects is above its maximum value.
     * For some objects, there are additional values over which the entries will be ignored while
     * keeping the most important entries whenever applicable. To get the most out of your analysis
     * when it includes data above the supported limits, try to optimize the analysis configuration
     * (For example, for the CodeQL tool, identify and remove the most noisy queries). | **SARIF
     * data** | **Maximum values** | **Additional limits** |
     * |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
     * | Runs per file | 15 | | | Results per run | 25,000 | Only the top 5,000 results will be
     * included, prioritized by severity. | | Rules per run | 25,000 | | | Tool extensions per run |
     * 100 | | | Thread Flow Locations per result | 10,000 | Only the top 1,000 Thread Flow
     * Locations will be included, using prioritization. | | Location per result	 | 1,000 | Only 100
     * locations will be included. | | Tags per rule	 | 20 | Only 10 tags will be included. | The
     * `202 Accepted` response includes an `id` value. You can use this ID to check the status of
     * the upload by using it in the `/sarifs/{sarif_id}` endpoint. For more information, see "[Get
     * information about a SARIF
     * upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload).".
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the CodeScanningSarifsReceipt response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CodeScanningSarifsReceipt codeScanningUploadSarif(
            final String owner,
            final String repo,
            final ReposCodeScanningSarifsRequest body) throws ApiException, IOException {
        return prepareCodeScanningUploadSarifRequest(owner, repo, body).execute();
    }

    /**
     * Uploads SARIF data containing the results of a code scanning analysis to make the results
     * available in a repository. You must use an access token with the `security_events` scope to
     * use this endpoint for private repositories. You can also use tokens with the `public_repo`
     * scope for public repositories only. GitHub Apps must have the `security_events` write
     * permission to use this endpoint. There are two places where you can upload code scanning
     * results. - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref
     * refs/pull/42/head`, then the results appear as alerts in a pull request check. For more
     * information, see "[Triaging code scanning alerts in pull
     * requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)." - If
     * you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in
     * the **Security** tab for your repository. For more information, see "[Managing code scanning
     * alerts for your
     * repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
     * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`,
     * and then encode it as a Base64 format string. For example: ``` gzip -c analysis-data.sarif |
     * base64 -w0 ``` &lt;br&gt; SARIF upload supports a maximum number of entries per the following data
     * objects, and an analysis will be rejected if any of these objects is above its maximum value.
     * For some objects, there are additional values over which the entries will be ignored while
     * keeping the most important entries whenever applicable. To get the most out of your analysis
     * when it includes data above the supported limits, try to optimize the analysis configuration
     * (For example, for the CodeQL tool, identify and remove the most noisy queries). | **SARIF
     * data** | **Maximum values** | **Additional limits** |
     * |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
     * | Runs per file | 15 | | | Results per run | 25,000 | Only the top 5,000 results will be
     * included, prioritized by severity. | | Rules per run | 25,000 | | | Tool extensions per run |
     * 100 | | | Thread Flow Locations per result | 10,000 | Only the top 1,000 Thread Flow
     * Locations will be included, using prioritization. | | Location per result	 | 1,000 | Only 100
     * locations will be included. | | Tags per rule	 | 20 | Only 10 tags will be included. | The
     * `202 Accepted` response includes an `id` value. You can use this ID to check the status of
     * the upload by using it in the `/sarifs/{sarif_id}` endpoint. For more information, see "[Get
     * information about a SARIF
     * upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload).".
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  body  Required parameter: Example:
     * @return    Returns the CodeScanningSarifsReceipt response from the API call
     */
    public CompletableFuture<CodeScanningSarifsReceipt> codeScanningUploadSarifAsync(
            final String owner,
            final String repo,
            final ReposCodeScanningSarifsRequest body) {
        try { 
            return prepareCodeScanningUploadSarifRequest(owner, repo, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for codeScanningUploadSarif.
     */
    private ApiCall<CodeScanningSarifsReceipt, ApiException> prepareCodeScanningUploadSarifRequest(
            final String owner,
            final String repo,
            final ReposCodeScanningSarifsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<CodeScanningSarifsReceipt, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/code-scanning/sarifs")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, CodeScanningSarifsReceipt.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.create("Bad Request if the sarif field is invalid",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.create("Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository",
                                (reason, context) -> new ReposCodeScanningSarifs403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Resource not found",
                                (reason, context) -> new ReposCodeScanningSarifs404ErrorException(reason, context)))
                        .localErrorCase("413",
                                 ErrorCase.create("Payload Too Large if the sarif field is too large",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets information about a SARIF upload, including the status and the URL of the analysis that
     * was uploaded so that you can retrieve details of the analysis. For more information, see
     * "[Get a code scanning analysis for a
     * repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)."
     * You must use an access token with the `security_events` scope to use this endpoint with
     * private repos, the `public_repo` scope also grants permission to read security events on
     * public repos only. GitHub Apps must have the `security_events` read permission to use this
     * endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  sarifId  Required parameter: The SARIF ID obtained after uploading.
     * @return    Returns the CodeScanningSarifsStatus response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CodeScanningSarifsStatus codeScanningGetSarif(
            final String owner,
            final String repo,
            final String sarifId) throws ApiException, IOException {
        return prepareCodeScanningGetSarifRequest(owner, repo, sarifId).execute();
    }

    /**
     * Gets information about a SARIF upload, including the status and the URL of the analysis that
     * was uploaded so that you can retrieve details of the analysis. For more information, see
     * "[Get a code scanning analysis for a
     * repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)."
     * You must use an access token with the `security_events` scope to use this endpoint with
     * private repos, the `public_repo` scope also grants permission to read security events on
     * public repos only. GitHub Apps must have the `security_events` read permission to use this
     * endpoint.
     * @param  owner  Required parameter: The account owner of the repository. The name is not case
     *         sensitive.
     * @param  repo  Required parameter: The name of the repository. The name is not case sensitive.
     * @param  sarifId  Required parameter: The SARIF ID obtained after uploading.
     * @return    Returns the CodeScanningSarifsStatus response from the API call
     */
    public CompletableFuture<CodeScanningSarifsStatus> codeScanningGetSarifAsync(
            final String owner,
            final String repo,
            final String sarifId) {
        try { 
            return prepareCodeScanningGetSarifRequest(owner, repo, sarifId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for codeScanningGetSarif.
     */
    private ApiCall<CodeScanningSarifsStatus, ApiException> prepareCodeScanningGetSarifRequest(
            final String owner,
            final String repo,
            final String sarifId) throws IOException {
        return new ApiCall.Builder<CodeScanningSarifsStatus, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}")
                        .templateParam(param -> param.key("owner").value(owner)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("repo").value(repo)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("sarif_id").value(sarifId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, CodeScanningSarifsStatus.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Response if GitHub Advanced Security is not enabled for this repository",
                                (reason, context) -> new ReposCodeScanningSarifsSarifId403ErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found if the sarif id does not match any upload",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.create("Service unavailable",
                                (reason, context) -> new ServiceUnavailable1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}
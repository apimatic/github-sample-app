/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;

/**
 * This is a model class for Workflow1 type.
 */
public class Workflow1 {
    private String badgeUrl;
    private LocalDateTime createdAt;
    private String htmlUrl;
    private int id;
    private String name;
    private String nodeId;
    private String path;
    private String state;
    private LocalDateTime updatedAt;
    private String url;

    /**
     * Default constructor.
     */
    public Workflow1() {
    }

    /**
     * Initialization constructor.
     * @param  badgeUrl  String value for badgeUrl.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  id  int value for id.
     * @param  name  String value for name.
     * @param  nodeId  String value for nodeId.
     * @param  path  String value for path.
     * @param  state  String value for state.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  url  String value for url.
     */
    public Workflow1(
            String badgeUrl,
            LocalDateTime createdAt,
            String htmlUrl,
            int id,
            String name,
            String nodeId,
            String path,
            String state,
            LocalDateTime updatedAt,
            String url) {
        this.badgeUrl = badgeUrl;
        this.createdAt = createdAt;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.name = name;
        this.nodeId = nodeId;
        this.path = path;
        this.state = state;
        this.updatedAt = updatedAt;
        this.url = url;
    }

    /**
     * Getter for BadgeUrl.
     * @return Returns the String
     */
    @JsonGetter("badge_url")
    public String getBadgeUrl() {
        return badgeUrl;
    }

    /**
     * Setter for BadgeUrl.
     * @param badgeUrl Value for String
     */
    @JsonSetter("badge_url")
    public void setBadgeUrl(String badgeUrl) {
        this.badgeUrl = badgeUrl;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Path.
     * @return Returns the String
     */
    @JsonGetter("path")
    public String getPath() {
        return path;
    }

    /**
     * Setter for Path.
     * @param path Value for String
     */
    @JsonSetter("path")
    public void setPath(String path) {
        this.path = path;
    }

    /**
     * Getter for State.
     * @return Returns the String
     */
    @JsonGetter("state")
    public String getState() {
        return state;
    }

    /**
     * Setter for State.
     * @param state Value for String
     */
    @JsonSetter("state")
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Converts this Workflow1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Workflow1 [" + "badgeUrl=" + badgeUrl + ", createdAt=" + createdAt + ", htmlUrl="
                + htmlUrl + ", id=" + id + ", name=" + name + ", nodeId=" + nodeId + ", path="
                + path + ", state=" + state + ", updatedAt=" + updatedAt + ", url=" + url + "]";
    }

    /**
     * Builds a new {@link Workflow1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Workflow1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(badgeUrl, createdAt, htmlUrl, id, name, nodeId, path, state,
                updatedAt, url);
        return builder;
    }

    /**
     * Class to build instances of {@link Workflow1}.
     */
    public static class Builder {
        private String badgeUrl;
        private LocalDateTime createdAt;
        private String htmlUrl;
        private int id;
        private String name;
        private String nodeId;
        private String path;
        private String state;
        private LocalDateTime updatedAt;
        private String url;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  badgeUrl  String value for badgeUrl.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  id  int value for id.
         * @param  name  String value for name.
         * @param  nodeId  String value for nodeId.
         * @param  path  String value for path.
         * @param  state  String value for state.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  url  String value for url.
         */
        public Builder(String badgeUrl, LocalDateTime createdAt, String htmlUrl, int id,
                String name, String nodeId, String path, String state, LocalDateTime updatedAt,
                String url) {
            this.badgeUrl = badgeUrl;
            this.createdAt = createdAt;
            this.htmlUrl = htmlUrl;
            this.id = id;
            this.name = name;
            this.nodeId = nodeId;
            this.path = path;
            this.state = state;
            this.updatedAt = updatedAt;
            this.url = url;
        }

        /**
         * Setter for badgeUrl.
         * @param  badgeUrl  String value for badgeUrl.
         * @return Builder
         */
        public Builder badgeUrl(String badgeUrl) {
            this.badgeUrl = badgeUrl;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for path.
         * @param  path  String value for path.
         * @return Builder
         */
        public Builder path(String path) {
            this.path = path;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  String value for state.
         * @return Builder
         */
        public Builder state(String state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Builds a new {@link Workflow1} object using the set fields.
         * @return {@link Workflow1}
         */
        public Workflow1 build() {
            return new Workflow1(badgeUrl, createdAt, htmlUrl, id, name, nodeId, path, state,
                    updatedAt, url);
        }
    }
}

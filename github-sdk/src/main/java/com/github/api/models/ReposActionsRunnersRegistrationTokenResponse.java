/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for ReposActionsRunnersRegistrationTokenResponse type.
 */
public class ReposActionsRunnersRegistrationTokenResponse {
    private String token;
    private LocalDateTime expiresAt;
    private Object permissions;
    private List<Repository> repositories;
    private OptionalNullable<String> singleFile;
    private RepositorySelectionEnum repositorySelection;

    /**
     * Default constructor.
     */
    public ReposActionsRunnersRegistrationTokenResponse() {
    }

    /**
     * Initialization constructor.
     * @param  token  String value for token.
     * @param  expiresAt  LocalDateTime value for expiresAt.
     * @param  permissions  Object value for permissions.
     * @param  repositories  List of Repository value for repositories.
     * @param  singleFile  String value for singleFile.
     * @param  repositorySelection  RepositorySelectionEnum value for repositorySelection.
     */
    public ReposActionsRunnersRegistrationTokenResponse(
            String token,
            LocalDateTime expiresAt,
            Object permissions,
            List<Repository> repositories,
            String singleFile,
            RepositorySelectionEnum repositorySelection) {
        this.token = token;
        this.expiresAt = expiresAt;
        this.permissions = permissions;
        this.repositories = repositories;
        this.singleFile = OptionalNullable.of(singleFile);
        this.repositorySelection = repositorySelection;
    }

    /**
     * Internal initialization constructor.
     */
    protected ReposActionsRunnersRegistrationTokenResponse(String token, LocalDateTime expiresAt,
            Object permissions, List<Repository> repositories, OptionalNullable<String> singleFile,
            RepositorySelectionEnum repositorySelection) {
        this.token = token;
        this.expiresAt = expiresAt;
        this.permissions = permissions;
        this.repositories = repositories;
        this.singleFile = singleFile;
        this.repositorySelection = repositorySelection;
    }

    /**
     * Getter for Token.
     * The token used for authentication
     * @return Returns the String
     */
    @JsonGetter("token")
    public String getToken() {
        return token;
    }

    /**
     * Setter for Token.
     * The token used for authentication
     * @param token Value for String
     */
    @JsonSetter("token")
    public void setToken(String token) {
        this.token = token;
    }

    /**
     * Getter for ExpiresAt.
     * The time this token expires
     * @return Returns the LocalDateTime
     */
    @JsonGetter("expires_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getExpiresAt() {
        return expiresAt;
    }

    /**
     * Setter for ExpiresAt.
     * The time this token expires
     * @param expiresAt Value for LocalDateTime
     */
    @JsonSetter("expires_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setExpiresAt(LocalDateTime expiresAt) {
        this.expiresAt = expiresAt;
    }

    /**
     * Getter for Permissions.
     * @return Returns the Object
     */
    @JsonGetter("permissions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getPermissions() {
        return permissions;
    }

    /**
     * Setter for Permissions.
     * @param permissions Value for Object
     */
    @JsonSetter("permissions")
    public void setPermissions(Object permissions) {
        this.permissions = permissions;
    }

    /**
     * Getter for Repositories.
     * The repositories this token has access to
     * @return Returns the List of Repository
     */
    @JsonGetter("repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Repository> getRepositories() {
        return repositories;
    }

    /**
     * Setter for Repositories.
     * The repositories this token has access to
     * @param repositories Value for List of Repository
     */
    @JsonSetter("repositories")
    public void setRepositories(List<Repository> repositories) {
        this.repositories = repositories;
    }

    /**
     * Internal Getter for SingleFile.
     * @return Returns the Internal String
     */
    @JsonGetter("single_file")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSingleFile() {
        return this.singleFile;
    }

    /**
     * Getter for SingleFile.
     * @return Returns the String
     */
    public String getSingleFile() {
        return OptionalNullable.getFrom(singleFile);
    }

    /**
     * Setter for SingleFile.
     * @param singleFile Value for String
     */
    @JsonSetter("single_file")
    public void setSingleFile(String singleFile) {
        this.singleFile = OptionalNullable.of(singleFile);
    }

    /**
     * UnSetter for SingleFile.
     */
    public void unsetSingleFile() {
        singleFile = null;
    }

    /**
     * Getter for RepositorySelection.
     * @return Returns the RepositorySelectionEnum
     */
    @JsonGetter("repository_selection")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RepositorySelectionEnum getRepositorySelection() {
        return repositorySelection;
    }

    /**
     * Setter for RepositorySelection.
     * @param repositorySelection Value for RepositorySelectionEnum
     */
    @JsonSetter("repository_selection")
    public void setRepositorySelection(RepositorySelectionEnum repositorySelection) {
        this.repositorySelection = repositorySelection;
    }

    /**
     * Converts this ReposActionsRunnersRegistrationTokenResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposActionsRunnersRegistrationTokenResponse [" + "token=" + token + ", expiresAt="
                + expiresAt + ", permissions=" + permissions + ", repositories=" + repositories
                + ", singleFile=" + singleFile + ", repositorySelection=" + repositorySelection
                + "]";
    }

    /**
     * Builds a new {@link ReposActionsRunnersRegistrationTokenResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposActionsRunnersRegistrationTokenResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(token, expiresAt)
                .permissions(getPermissions())
                .repositories(getRepositories())
                .repositorySelection(getRepositorySelection());
        builder.singleFile = internalGetSingleFile();
        return builder;
    }

    /**
     * Class to build instances of {@link ReposActionsRunnersRegistrationTokenResponse}.
     */
    public static class Builder {
        private String token;
        private LocalDateTime expiresAt;
        private Object permissions;
        private List<Repository> repositories;
        private OptionalNullable<String> singleFile;
        private RepositorySelectionEnum repositorySelection;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  token  String value for token.
         * @param  expiresAt  LocalDateTime value for expiresAt.
         */
        public Builder(String token, LocalDateTime expiresAt) {
            this.token = token;
            this.expiresAt = expiresAt;
        }

        /**
         * Setter for token.
         * @param  token  String value for token.
         * @return Builder
         */
        public Builder token(String token) {
            this.token = token;
            return this;
        }

        /**
         * Setter for expiresAt.
         * @param  expiresAt  LocalDateTime value for expiresAt.
         * @return Builder
         */
        public Builder expiresAt(LocalDateTime expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * Setter for permissions.
         * @param  permissions  Object value for permissions.
         * @return Builder
         */
        public Builder permissions(Object permissions) {
            this.permissions = permissions;
            return this;
        }

        /**
         * Setter for repositories.
         * @param  repositories  List of Repository value for repositories.
         * @return Builder
         */
        public Builder repositories(List<Repository> repositories) {
            this.repositories = repositories;
            return this;
        }

        /**
         * Setter for singleFile.
         * @param  singleFile  String value for singleFile.
         * @return Builder
         */
        public Builder singleFile(String singleFile) {
            this.singleFile = OptionalNullable.of(singleFile);
            return this;
        }

        /**
         * UnSetter for singleFile.
         * @return Builder
         */
        public Builder unsetSingleFile() {
            singleFile = null;
            return this;
        }

        /**
         * Setter for repositorySelection.
         * @param  repositorySelection  RepositorySelectionEnum value for repositorySelection.
         * @return Builder
         */
        public Builder repositorySelection(RepositorySelectionEnum repositorySelection) {
            this.repositorySelection = repositorySelection;
            return this;
        }

        /**
         * Builds a new {@link ReposActionsRunnersRegistrationTokenResponse} object using the set
         * fields.
         * @return {@link ReposActionsRunnersRegistrationTokenResponse}
         */
        public ReposActionsRunnersRegistrationTokenResponse build() {
            return new ReposActionsRunnersRegistrationTokenResponse(token, expiresAt, permissions,
                    repositories, singleFile, repositorySelection);
        }
    }
}

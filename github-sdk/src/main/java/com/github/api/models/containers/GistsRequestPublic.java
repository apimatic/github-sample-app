/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.github.api.ApiHelper;
import com.github.api.models.PublicEnum;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = GistsRequestPublic.GistsRequestPublicDeserializer.class)
public abstract class GistsRequestPublic {
    
    /**
     * One-of type initialization method.
     * @param mBoolean boolean value for mBoolean.
     * @return The MBooleanCase object.
     */
    public static GistsRequestPublic fromMBoolean(boolean mBoolean) {
        return new MBooleanCase(mBoolean);
    }

    /**
     * One-of type initialization method.
     * @param mPublic PublicEnum value for mPublic.
     * @return The PublicCase object.
     */
    public static GistsRequestPublic fromPublic(PublicEnum mPublic) {
        return mPublic == null ? null : new PublicCase(mPublic);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R mBoolean(boolean mBoolean);

        R mPublic(PublicEnum mPublic);
    }

    /**
     * This is a implementation class for MBooleanCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class MBooleanCase extends GistsRequestPublic {

        @JsonValue
        private boolean mBoolean;

        MBooleanCase(boolean mBoolean) {
            this.mBoolean = mBoolean;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mBoolean(this.mBoolean);
        }

        @JsonCreator
        private MBooleanCase(JsonNode jsonNode) throws IOException {
            if (jsonNode.isBoolean()) {
                this.mBoolean = ApiHelper.deserialize(jsonNode, Boolean.class);
            } else {
                throw new IllegalArgumentException();
            }
        }

        @Override
        public String toString() {
            return String.valueOf(mBoolean);
        }
    }

    /**
     * This is a implementation class for PublicCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class PublicCase extends GistsRequestPublic {

        @JsonValue
        private PublicEnum mPublic;

        PublicCase(PublicEnum mPublic) {
            this.mPublic = mPublic;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mPublic(this.mPublic);
        }

        @JsonCreator
        private PublicCase(JsonNode jsonNode) throws IOException {
            this.mPublic = 
                PublicEnum.fromString(ApiHelper.deserialize(jsonNode, String.class));
            if (this.mPublic == null) {
                throw new IllegalArgumentException();
            }
        }

        @Override
        public String toString() {
            return mPublic.toString();
        }
    }

    /**
     * This is a custom deserializer class for GistsRequestPublic.
     */
    protected static class GistsRequestPublicDeserializer
            extends JsonDeserializer<GistsRequestPublic> {

        @Override
        public GistsRequestPublic deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(MBooleanCase.class,
                    PublicCase.class), true);
        }
    }

}

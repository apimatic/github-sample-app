/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Automerge type.
 */
public class Automerge {
    private EnabledBy enabledBy;
    private MergeMethodEnum mergeMethod;
    private String commitTitle;
    private String commitMessage;

    /**
     * Default constructor.
     */
    public Automerge() {
    }

    /**
     * Initialization constructor.
     * @param  enabledBy  EnabledBy value for enabledBy.
     * @param  mergeMethod  MergeMethodEnum value for mergeMethod.
     * @param  commitTitle  String value for commitTitle.
     * @param  commitMessage  String value for commitMessage.
     */
    public Automerge(
            EnabledBy enabledBy,
            MergeMethodEnum mergeMethod,
            String commitTitle,
            String commitMessage) {
        this.enabledBy = enabledBy;
        this.mergeMethod = mergeMethod;
        this.commitTitle = commitTitle;
        this.commitMessage = commitMessage;
    }

    /**
     * Getter for EnabledBy.
     * @return Returns the EnabledBy
     */
    @JsonGetter("enabled_by")
    public EnabledBy getEnabledBy() {
        return enabledBy;
    }

    /**
     * Setter for EnabledBy.
     * @param enabledBy Value for EnabledBy
     */
    @JsonSetter("enabled_by")
    public void setEnabledBy(EnabledBy enabledBy) {
        this.enabledBy = enabledBy;
    }

    /**
     * Getter for MergeMethod.
     * @return Returns the MergeMethodEnum
     */
    @JsonGetter("merge_method")
    public MergeMethodEnum getMergeMethod() {
        return mergeMethod;
    }

    /**
     * Setter for MergeMethod.
     * @param mergeMethod Value for MergeMethodEnum
     */
    @JsonSetter("merge_method")
    public void setMergeMethod(MergeMethodEnum mergeMethod) {
        this.mergeMethod = mergeMethod;
    }

    /**
     * Getter for CommitTitle.
     * Title for the merge commit message.
     * @return Returns the String
     */
    @JsonGetter("commit_title")
    public String getCommitTitle() {
        return commitTitle;
    }

    /**
     * Setter for CommitTitle.
     * Title for the merge commit message.
     * @param commitTitle Value for String
     */
    @JsonSetter("commit_title")
    public void setCommitTitle(String commitTitle) {
        this.commitTitle = commitTitle;
    }

    /**
     * Getter for CommitMessage.
     * Commit message for the merge commit.
     * @return Returns the String
     */
    @JsonGetter("commit_message")
    public String getCommitMessage() {
        return commitMessage;
    }

    /**
     * Setter for CommitMessage.
     * Commit message for the merge commit.
     * @param commitMessage Value for String
     */
    @JsonSetter("commit_message")
    public void setCommitMessage(String commitMessage) {
        this.commitMessage = commitMessage;
    }

    /**
     * Converts this Automerge into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Automerge [" + "enabledBy=" + enabledBy + ", mergeMethod=" + mergeMethod
                + ", commitTitle=" + commitTitle + ", commitMessage=" + commitMessage + "]";
    }

    /**
     * Builds a new {@link Automerge.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Automerge.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(enabledBy, mergeMethod, commitTitle, commitMessage);
        return builder;
    }

    /**
     * Class to build instances of {@link Automerge}.
     */
    public static class Builder {
        private EnabledBy enabledBy;
        private MergeMethodEnum mergeMethod;
        private String commitTitle;
        private String commitMessage;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  enabledBy  EnabledBy value for enabledBy.
         * @param  mergeMethod  MergeMethodEnum value for mergeMethod.
         * @param  commitTitle  String value for commitTitle.
         * @param  commitMessage  String value for commitMessage.
         */
        public Builder(EnabledBy enabledBy, MergeMethodEnum mergeMethod, String commitTitle,
                String commitMessage) {
            this.enabledBy = enabledBy;
            this.mergeMethod = mergeMethod;
            this.commitTitle = commitTitle;
            this.commitMessage = commitMessage;
        }

        /**
         * Setter for enabledBy.
         * @param  enabledBy  EnabledBy value for enabledBy.
         * @return Builder
         */
        public Builder enabledBy(EnabledBy enabledBy) {
            this.enabledBy = enabledBy;
            return this;
        }

        /**
         * Setter for mergeMethod.
         * @param  mergeMethod  MergeMethodEnum value for mergeMethod.
         * @return Builder
         */
        public Builder mergeMethod(MergeMethodEnum mergeMethod) {
            this.mergeMethod = mergeMethod;
            return this;
        }

        /**
         * Setter for commitTitle.
         * @param  commitTitle  String value for commitTitle.
         * @return Builder
         */
        public Builder commitTitle(String commitTitle) {
            this.commitTitle = commitTitle;
            return this;
        }

        /**
         * Setter for commitMessage.
         * @param  commitMessage  String value for commitMessage.
         * @return Builder
         */
        public Builder commitMessage(String commitMessage) {
            this.commitMessage = commitMessage;
            return this;
        }

        /**
         * Builds a new {@link Automerge} object using the set fields.
         * @return {@link Automerge}
         */
        public Automerge build() {
            return new Automerge(enabledBy, mergeMethod, commitTitle, commitMessage);
        }
    }
}

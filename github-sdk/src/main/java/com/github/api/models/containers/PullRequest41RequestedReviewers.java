/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.github.api.ApiHelper;
import com.github.api.models.DynamicResponse;
import com.github.api.models.Team4;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = PullRequest41RequestedReviewers.PullRequest41RequestedReviewersDeserializer.class)
public abstract class PullRequest41RequestedReviewers {
    
    /**
     * One-of type initialization method.
     * @param dynamic DynamicResponse value for dynamic.
     * @return The DynamicCase object.
     */
    public static PullRequest41RequestedReviewers fromDynamic(DynamicResponse dynamic) {
        return dynamic == null ? null : new DynamicCase(dynamic);
    }

    /**
     * One-of type initialization method.
     * @param team4 Team4 value for team4.
     * @return The Team4Case object.
     */
    public static PullRequest41RequestedReviewers fromTeam4(Team4 team4) {
        return team4 == null ? null : new Team4Case(team4);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R dynamic(DynamicResponse dynamic);

        R team4(Team4 team4);
    }

    /**
     * This is a implementation class for DynamicCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class DynamicCase extends PullRequest41RequestedReviewers {

        @JsonValue
        private DynamicResponse dynamic;

        DynamicCase(DynamicResponse dynamic) {
            this.dynamic = dynamic;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.dynamic(this.dynamic);
        }

        @JsonCreator
        private DynamicCase(JsonNode jsonNode) throws IOException {
            this.dynamic = ApiHelper.deserialize(jsonNode, DynamicResponse.class);
        }

        @Override
        public String toString() {
            return dynamic.toString();
        }
    }

    /**
     * This is a implementation class for Team4Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class Team4Case extends PullRequest41RequestedReviewers {

        @JsonValue
        private Team4 team4;

        Team4Case(Team4 team4) {
            this.team4 = team4;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.team4(this.team4);
        }

        @JsonCreator
        private Team4Case(JsonNode jsonNode) throws IOException {
            this.team4 = ApiHelper.deserialize(jsonNode,
                Team4.class);
        }

        @Override
        public String toString() {
            return team4.toString();
        }
    }

    /**
     * This is a custom deserializer class for PullRequest41RequestedReviewers.
     */
    protected static class PullRequest41RequestedReviewersDeserializer
            extends JsonDeserializer<PullRequest41RequestedReviewers> {

        @Override
        public PullRequest41RequestedReviewers deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(DynamicCase.class,
                    Team4Case.class), true);
        }
    }

}

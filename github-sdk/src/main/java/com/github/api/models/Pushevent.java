/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for Pushevent type.
 */
public class Pushevent {
    private String after;
    private String baseRef;
    private String before;
    private List<Commit7> commits;
    private String compare;
    private boolean created;
    private boolean deleted;
    private Enterprise1 enterprise;
    private boolean forced;
    private Object headCommit;
    private Installation1 installation;
    private Organization2 organization;
    private Pusher pusher;
    private String ref;
    private Repository161 repository;
    private Sender sender;

    /**
     * Default constructor.
     */
    public Pushevent() {
    }

    /**
     * Initialization constructor.
     * @param  after  String value for after.
     * @param  baseRef  String value for baseRef.
     * @param  before  String value for before.
     * @param  commits  List of Commit7 value for commits.
     * @param  compare  String value for compare.
     * @param  created  boolean value for created.
     * @param  deleted  boolean value for deleted.
     * @param  forced  boolean value for forced.
     * @param  headCommit  Object value for headCommit.
     * @param  pusher  Pusher value for pusher.
     * @param  ref  String value for ref.
     * @param  repository  Repository161 value for repository.
     * @param  enterprise  Enterprise1 value for enterprise.
     * @param  installation  Installation1 value for installation.
     * @param  organization  Organization2 value for organization.
     * @param  sender  Sender value for sender.
     */
    public Pushevent(
            String after,
            String baseRef,
            String before,
            List<Commit7> commits,
            String compare,
            boolean created,
            boolean deleted,
            boolean forced,
            Object headCommit,
            Pusher pusher,
            String ref,
            Repository161 repository,
            Enterprise1 enterprise,
            Installation1 installation,
            Organization2 organization,
            Sender sender) {
        this.after = after;
        this.baseRef = baseRef;
        this.before = before;
        this.commits = commits;
        this.compare = compare;
        this.created = created;
        this.deleted = deleted;
        this.enterprise = enterprise;
        this.forced = forced;
        this.headCommit = headCommit;
        this.installation = installation;
        this.organization = organization;
        this.pusher = pusher;
        this.ref = ref;
        this.repository = repository;
        this.sender = sender;
    }

    /**
     * Getter for After.
     * The SHA of the most recent commit on `ref` after the push.
     * @return Returns the String
     */
    @JsonGetter("after")
    public String getAfter() {
        return after;
    }

    /**
     * Setter for After.
     * The SHA of the most recent commit on `ref` after the push.
     * @param after Value for String
     */
    @JsonSetter("after")
    public void setAfter(String after) {
        this.after = after;
    }

    /**
     * Getter for BaseRef.
     * @return Returns the String
     */
    @JsonGetter("base_ref")
    public String getBaseRef() {
        return baseRef;
    }

    /**
     * Setter for BaseRef.
     * @param baseRef Value for String
     */
    @JsonSetter("base_ref")
    public void setBaseRef(String baseRef) {
        this.baseRef = baseRef;
    }

    /**
     * Getter for Before.
     * The SHA of the most recent commit on `ref` before the push.
     * @return Returns the String
     */
    @JsonGetter("before")
    public String getBefore() {
        return before;
    }

    /**
     * Setter for Before.
     * The SHA of the most recent commit on `ref` before the push.
     * @param before Value for String
     */
    @JsonSetter("before")
    public void setBefore(String before) {
        this.before = before;
    }

    /**
     * Getter for Commits.
     * An array of commit objects describing the pushed commits. (Pushed commits are all commits
     * that are included in the `compare` between the `before` commit and the `after` commit.) The
     * array includes a maximum of 20 commits. If necessary, you can use the [Commits
     * API](https://docs.github.com/rest/reference/repos#commits) to fetch additional commits. This
     * limit is applied to timeline events only and isn't applied to webhook deliveries.
     * @return Returns the List of Commit7
     */
    @JsonGetter("commits")
    public List<Commit7> getCommits() {
        return commits;
    }

    /**
     * Setter for Commits.
     * An array of commit objects describing the pushed commits. (Pushed commits are all commits
     * that are included in the `compare` between the `before` commit and the `after` commit.) The
     * array includes a maximum of 20 commits. If necessary, you can use the [Commits
     * API](https://docs.github.com/rest/reference/repos#commits) to fetch additional commits. This
     * limit is applied to timeline events only and isn't applied to webhook deliveries.
     * @param commits Value for List of Commit7
     */
    @JsonSetter("commits")
    public void setCommits(List<Commit7> commits) {
        this.commits = commits;
    }

    /**
     * Getter for Compare.
     * URL that shows the changes in this `ref` update, from the `before` commit to the `after`
     * commit. For a newly created `ref` that is directly based on the default branch, this is the
     * comparison between the head of the default branch and the `after` commit. Otherwise, this
     * shows all commits until the `after` commit.
     * @return Returns the String
     */
    @JsonGetter("compare")
    public String getCompare() {
        return compare;
    }

    /**
     * Setter for Compare.
     * URL that shows the changes in this `ref` update, from the `before` commit to the `after`
     * commit. For a newly created `ref` that is directly based on the default branch, this is the
     * comparison between the head of the default branch and the `after` commit. Otherwise, this
     * shows all commits until the `after` commit.
     * @param compare Value for String
     */
    @JsonSetter("compare")
    public void setCompare(String compare) {
        this.compare = compare;
    }

    /**
     * Getter for Created.
     * Whether this push created the `ref`.
     * @return Returns the boolean
     */
    @JsonGetter("created")
    public boolean getCreated() {
        return created;
    }

    /**
     * Setter for Created.
     * Whether this push created the `ref`.
     * @param created Value for boolean
     */
    @JsonSetter("created")
    public void setCreated(boolean created) {
        this.created = created;
    }

    /**
     * Getter for Deleted.
     * Whether this push deleted the `ref`.
     * @return Returns the boolean
     */
    @JsonGetter("deleted")
    public boolean getDeleted() {
        return deleted;
    }

    /**
     * Setter for Deleted.
     * Whether this push deleted the `ref`.
     * @param deleted Value for boolean
     */
    @JsonSetter("deleted")
    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Getter for Enterprise.
     * @return Returns the Enterprise1
     */
    @JsonGetter("enterprise")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Enterprise1 getEnterprise() {
        return enterprise;
    }

    /**
     * Setter for Enterprise.
     * @param enterprise Value for Enterprise1
     */
    @JsonSetter("enterprise")
    public void setEnterprise(Enterprise1 enterprise) {
        this.enterprise = enterprise;
    }

    /**
     * Getter for Forced.
     * Whether this push was a force push of the `ref`.
     * @return Returns the boolean
     */
    @JsonGetter("forced")
    public boolean getForced() {
        return forced;
    }

    /**
     * Setter for Forced.
     * Whether this push was a force push of the `ref`.
     * @param forced Value for boolean
     */
    @JsonSetter("forced")
    public void setForced(boolean forced) {
        this.forced = forced;
    }

    /**
     * Getter for HeadCommit.
     * @return Returns the Object
     */
    @JsonGetter("head_commit")
    public Object getHeadCommit() {
        return headCommit;
    }

    /**
     * Setter for HeadCommit.
     * @param headCommit Value for Object
     */
    @JsonSetter("head_commit")
    public void setHeadCommit(Object headCommit) {
        this.headCommit = headCommit;
    }

    /**
     * Getter for Installation.
     * @return Returns the Installation1
     */
    @JsonGetter("installation")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Installation1 getInstallation() {
        return installation;
    }

    /**
     * Setter for Installation.
     * @param installation Value for Installation1
     */
    @JsonSetter("installation")
    public void setInstallation(Installation1 installation) {
        this.installation = installation;
    }

    /**
     * Getter for Organization.
     * @return Returns the Organization2
     */
    @JsonGetter("organization")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Organization2 getOrganization() {
        return organization;
    }

    /**
     * Setter for Organization.
     * @param organization Value for Organization2
     */
    @JsonSetter("organization")
    public void setOrganization(Organization2 organization) {
        this.organization = organization;
    }

    /**
     * Getter for Pusher.
     * @return Returns the Pusher
     */
    @JsonGetter("pusher")
    public Pusher getPusher() {
        return pusher;
    }

    /**
     * Setter for Pusher.
     * @param pusher Value for Pusher
     */
    @JsonSetter("pusher")
    public void setPusher(Pusher pusher) {
        this.pusher = pusher;
    }

    /**
     * Getter for Ref.
     * The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`.
     * @return Returns the String
     */
    @JsonGetter("ref")
    public String getRef() {
        return ref;
    }

    /**
     * Setter for Ref.
     * The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`.
     * @param ref Value for String
     */
    @JsonSetter("ref")
    public void setRef(String ref) {
        this.ref = ref;
    }

    /**
     * Getter for Repository.
     * @return Returns the Repository161
     */
    @JsonGetter("repository")
    public Repository161 getRepository() {
        return repository;
    }

    /**
     * Setter for Repository.
     * @param repository Value for Repository161
     */
    @JsonSetter("repository")
    public void setRepository(Repository161 repository) {
        this.repository = repository;
    }

    /**
     * Getter for Sender.
     * @return Returns the Sender
     */
    @JsonGetter("sender")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Sender getSender() {
        return sender;
    }

    /**
     * Setter for Sender.
     * @param sender Value for Sender
     */
    @JsonSetter("sender")
    public void setSender(Sender sender) {
        this.sender = sender;
    }

    /**
     * Converts this Pushevent into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Pushevent [" + "after=" + after + ", baseRef=" + baseRef + ", before=" + before
                + ", commits=" + commits + ", compare=" + compare + ", created=" + created
                + ", deleted=" + deleted + ", forced=" + forced + ", headCommit=" + headCommit
                + ", pusher=" + pusher + ", ref=" + ref + ", repository=" + repository
                + ", enterprise=" + enterprise + ", installation=" + installation
                + ", organization=" + organization + ", sender=" + sender + "]";
    }

    /**
     * Builds a new {@link Pushevent.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Pushevent.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(after, baseRef, before, commits, compare, created, deleted,
                forced, headCommit, pusher, ref, repository)
                .enterprise(getEnterprise())
                .installation(getInstallation())
                .organization(getOrganization())
                .sender(getSender());
        return builder;
    }

    /**
     * Class to build instances of {@link Pushevent}.
     */
    public static class Builder {
        private String after;
        private String baseRef;
        private String before;
        private List<Commit7> commits;
        private String compare;
        private boolean created;
        private boolean deleted;
        private boolean forced;
        private Object headCommit;
        private Pusher pusher;
        private String ref;
        private Repository161 repository;
        private Enterprise1 enterprise;
        private Installation1 installation;
        private Organization2 organization;
        private Sender sender;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  after  String value for after.
         * @param  baseRef  String value for baseRef.
         * @param  before  String value for before.
         * @param  commits  List of Commit7 value for commits.
         * @param  compare  String value for compare.
         * @param  created  boolean value for created.
         * @param  deleted  boolean value for deleted.
         * @param  forced  boolean value for forced.
         * @param  headCommit  Object value for headCommit.
         * @param  pusher  Pusher value for pusher.
         * @param  ref  String value for ref.
         * @param  repository  Repository161 value for repository.
         */
        public Builder(String after, String baseRef, String before, List<Commit7> commits,
                String compare, boolean created, boolean deleted, boolean forced, Object headCommit,
                Pusher pusher, String ref, Repository161 repository) {
            this.after = after;
            this.baseRef = baseRef;
            this.before = before;
            this.commits = commits;
            this.compare = compare;
            this.created = created;
            this.deleted = deleted;
            this.forced = forced;
            this.headCommit = headCommit;
            this.pusher = pusher;
            this.ref = ref;
            this.repository = repository;
        }

        /**
         * Setter for after.
         * @param  after  String value for after.
         * @return Builder
         */
        public Builder after(String after) {
            this.after = after;
            return this;
        }

        /**
         * Setter for baseRef.
         * @param  baseRef  String value for baseRef.
         * @return Builder
         */
        public Builder baseRef(String baseRef) {
            this.baseRef = baseRef;
            return this;
        }

        /**
         * Setter for before.
         * @param  before  String value for before.
         * @return Builder
         */
        public Builder before(String before) {
            this.before = before;
            return this;
        }

        /**
         * Setter for commits.
         * @param  commits  List of Commit7 value for commits.
         * @return Builder
         */
        public Builder commits(List<Commit7> commits) {
            this.commits = commits;
            return this;
        }

        /**
         * Setter for compare.
         * @param  compare  String value for compare.
         * @return Builder
         */
        public Builder compare(String compare) {
            this.compare = compare;
            return this;
        }

        /**
         * Setter for created.
         * @param  created  boolean value for created.
         * @return Builder
         */
        public Builder created(boolean created) {
            this.created = created;
            return this;
        }

        /**
         * Setter for deleted.
         * @param  deleted  boolean value for deleted.
         * @return Builder
         */
        public Builder deleted(boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * Setter for forced.
         * @param  forced  boolean value for forced.
         * @return Builder
         */
        public Builder forced(boolean forced) {
            this.forced = forced;
            return this;
        }

        /**
         * Setter for headCommit.
         * @param  headCommit  Object value for headCommit.
         * @return Builder
         */
        public Builder headCommit(Object headCommit) {
            this.headCommit = headCommit;
            return this;
        }

        /**
         * Setter for pusher.
         * @param  pusher  Pusher value for pusher.
         * @return Builder
         */
        public Builder pusher(Pusher pusher) {
            this.pusher = pusher;
            return this;
        }

        /**
         * Setter for ref.
         * @param  ref  String value for ref.
         * @return Builder
         */
        public Builder ref(String ref) {
            this.ref = ref;
            return this;
        }

        /**
         * Setter for repository.
         * @param  repository  Repository161 value for repository.
         * @return Builder
         */
        public Builder repository(Repository161 repository) {
            this.repository = repository;
            return this;
        }

        /**
         * Setter for enterprise.
         * @param  enterprise  Enterprise1 value for enterprise.
         * @return Builder
         */
        public Builder enterprise(Enterprise1 enterprise) {
            this.enterprise = enterprise;
            return this;
        }

        /**
         * Setter for installation.
         * @param  installation  Installation1 value for installation.
         * @return Builder
         */
        public Builder installation(Installation1 installation) {
            this.installation = installation;
            return this;
        }

        /**
         * Setter for organization.
         * @param  organization  Organization2 value for organization.
         * @return Builder
         */
        public Builder organization(Organization2 organization) {
            this.organization = organization;
            return this;
        }

        /**
         * Setter for sender.
         * @param  sender  Sender value for sender.
         * @return Builder
         */
        public Builder sender(Sender sender) {
            this.sender = sender;
            return this;
        }

        /**
         * Builds a new {@link Pushevent} object using the set fields.
         * @return {@link Pushevent}
         */
        public Pushevent build() {
            return new Pushevent(after, baseRef, before, commits, compare, created, deleted, forced,
                    headCommit, pusher, ref, repository, enterprise, installation, organization,
                    sender);
        }
    }
}

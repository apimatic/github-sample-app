/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for WorkflowRun type.
 */
public class WorkflowRun {
    private int id;
    private OptionalNullable<String> name;
    private String nodeId;
    private Integer checkSuiteId;
    private String checkSuiteNodeId;
    private String headBranch;
    private String headSha;
    private String path;
    private int runNumber;
    private Integer runAttempt;
    private OptionalNullable<List<Referencedworkflow>> referencedWorkflows;
    private String event;
    private String status;
    private String conclusion;
    private int workflowId;
    private String url;
    private String htmlUrl;
    private List<PullRequestMinimal> pullRequests;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private Actor2 actor;
    private TriggeringActor triggeringActor;
    private LocalDateTime runStartedAt;
    private String jobsUrl;
    private String logsUrl;
    private String checkSuiteUrl;
    private String artifactsUrl;
    private String cancelUrl;
    private String rerunUrl;
    private OptionalNullable<String> previousAttemptUrl;
    private String workflowUrl;
    private Object headCommit;
    private Repository7 repository;
    private HeadRepository7 headRepository;
    private Integer headRepositoryId;
    private String displayTitle;

    /**
     * Default constructor.
     */
    public WorkflowRun() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  headBranch  String value for headBranch.
     * @param  headSha  String value for headSha.
     * @param  path  String value for path.
     * @param  runNumber  int value for runNumber.
     * @param  event  String value for event.
     * @param  status  String value for status.
     * @param  conclusion  String value for conclusion.
     * @param  workflowId  int value for workflowId.
     * @param  url  String value for url.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  pullRequests  List of PullRequestMinimal value for pullRequests.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  jobsUrl  String value for jobsUrl.
     * @param  logsUrl  String value for logsUrl.
     * @param  checkSuiteUrl  String value for checkSuiteUrl.
     * @param  artifactsUrl  String value for artifactsUrl.
     * @param  cancelUrl  String value for cancelUrl.
     * @param  rerunUrl  String value for rerunUrl.
     * @param  workflowUrl  String value for workflowUrl.
     * @param  headCommit  Object value for headCommit.
     * @param  repository  Repository7 value for repository.
     * @param  headRepository  HeadRepository7 value for headRepository.
     * @param  displayTitle  String value for displayTitle.
     * @param  name  String value for name.
     * @param  checkSuiteId  Integer value for checkSuiteId.
     * @param  checkSuiteNodeId  String value for checkSuiteNodeId.
     * @param  runAttempt  Integer value for runAttempt.
     * @param  referencedWorkflows  List of Referencedworkflow value for referencedWorkflows.
     * @param  actor  Actor2 value for actor.
     * @param  triggeringActor  TriggeringActor value for triggeringActor.
     * @param  runStartedAt  LocalDateTime value for runStartedAt.
     * @param  previousAttemptUrl  String value for previousAttemptUrl.
     * @param  headRepositoryId  Integer value for headRepositoryId.
     */
    public WorkflowRun(
            int id,
            String nodeId,
            String headBranch,
            String headSha,
            String path,
            int runNumber,
            String event,
            String status,
            String conclusion,
            int workflowId,
            String url,
            String htmlUrl,
            List<PullRequestMinimal> pullRequests,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            String jobsUrl,
            String logsUrl,
            String checkSuiteUrl,
            String artifactsUrl,
            String cancelUrl,
            String rerunUrl,
            String workflowUrl,
            Object headCommit,
            Repository7 repository,
            HeadRepository7 headRepository,
            String displayTitle,
            String name,
            Integer checkSuiteId,
            String checkSuiteNodeId,
            Integer runAttempt,
            List<Referencedworkflow> referencedWorkflows,
            Actor2 actor,
            TriggeringActor triggeringActor,
            LocalDateTime runStartedAt,
            String previousAttemptUrl,
            Integer headRepositoryId) {
        this.id = id;
        this.name = OptionalNullable.of(name);
        this.nodeId = nodeId;
        this.checkSuiteId = checkSuiteId;
        this.checkSuiteNodeId = checkSuiteNodeId;
        this.headBranch = headBranch;
        this.headSha = headSha;
        this.path = path;
        this.runNumber = runNumber;
        this.runAttempt = runAttempt;
        this.referencedWorkflows = OptionalNullable.of(referencedWorkflows);
        this.event = event;
        this.status = status;
        this.conclusion = conclusion;
        this.workflowId = workflowId;
        this.url = url;
        this.htmlUrl = htmlUrl;
        this.pullRequests = pullRequests;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.actor = actor;
        this.triggeringActor = triggeringActor;
        this.runStartedAt = runStartedAt;
        this.jobsUrl = jobsUrl;
        this.logsUrl = logsUrl;
        this.checkSuiteUrl = checkSuiteUrl;
        this.artifactsUrl = artifactsUrl;
        this.cancelUrl = cancelUrl;
        this.rerunUrl = rerunUrl;
        this.previousAttemptUrl = OptionalNullable.of(previousAttemptUrl);
        this.workflowUrl = workflowUrl;
        this.headCommit = headCommit;
        this.repository = repository;
        this.headRepository = headRepository;
        this.headRepositoryId = headRepositoryId;
        this.displayTitle = displayTitle;
    }

    /**
     * Internal initialization constructor.
     */
    protected WorkflowRun(int id, String nodeId, String headBranch, String headSha, String path,
            int runNumber, String event, String status, String conclusion, int workflowId,
            String url, String htmlUrl, List<PullRequestMinimal> pullRequests,
            LocalDateTime createdAt, LocalDateTime updatedAt, String jobsUrl, String logsUrl,
            String checkSuiteUrl, String artifactsUrl, String cancelUrl, String rerunUrl,
            String workflowUrl, Object headCommit, Repository7 repository,
            HeadRepository7 headRepository, String displayTitle, OptionalNullable<String> name,
            Integer checkSuiteId, String checkSuiteNodeId, Integer runAttempt,
            OptionalNullable<List<Referencedworkflow>> referencedWorkflows, Actor2 actor,
            TriggeringActor triggeringActor, LocalDateTime runStartedAt,
            OptionalNullable<String> previousAttemptUrl, Integer headRepositoryId) {
        this.id = id;
        this.name = name;
        this.nodeId = nodeId;
        this.checkSuiteId = checkSuiteId;
        this.checkSuiteNodeId = checkSuiteNodeId;
        this.headBranch = headBranch;
        this.headSha = headSha;
        this.path = path;
        this.runNumber = runNumber;
        this.runAttempt = runAttempt;
        this.referencedWorkflows = referencedWorkflows;
        this.event = event;
        this.status = status;
        this.conclusion = conclusion;
        this.workflowId = workflowId;
        this.url = url;
        this.htmlUrl = htmlUrl;
        this.pullRequests = pullRequests;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.actor = actor;
        this.triggeringActor = triggeringActor;
        this.runStartedAt = runStartedAt;
        this.jobsUrl = jobsUrl;
        this.logsUrl = logsUrl;
        this.checkSuiteUrl = checkSuiteUrl;
        this.artifactsUrl = artifactsUrl;
        this.cancelUrl = cancelUrl;
        this.rerunUrl = rerunUrl;
        this.previousAttemptUrl = previousAttemptUrl;
        this.workflowUrl = workflowUrl;
        this.headCommit = headCommit;
        this.repository = repository;
        this.headRepository = headRepository;
        this.headRepositoryId = headRepositoryId;
        this.displayTitle = displayTitle;
    }

    /**
     * Getter for Id.
     * The ID of the workflow run.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The ID of the workflow run.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Internal Getter for Name.
     * The name of the workflow run.
     * @return Returns the Internal String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetName() {
        return this.name;
    }

    /**
     * Getter for Name.
     * The name of the workflow run.
     * @return Returns the String
     */
    public String getName() {
        return OptionalNullable.getFrom(name);
    }

    /**
     * Setter for Name.
     * The name of the workflow run.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = OptionalNullable.of(name);
    }

    /**
     * UnSetter for Name.
     * The name of the workflow run.
     */
    public void unsetName() {
        name = null;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for CheckSuiteId.
     * The ID of the associated check suite.
     * @return Returns the Integer
     */
    @JsonGetter("check_suite_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getCheckSuiteId() {
        return checkSuiteId;
    }

    /**
     * Setter for CheckSuiteId.
     * The ID of the associated check suite.
     * @param checkSuiteId Value for Integer
     */
    @JsonSetter("check_suite_id")
    public void setCheckSuiteId(Integer checkSuiteId) {
        this.checkSuiteId = checkSuiteId;
    }

    /**
     * Getter for CheckSuiteNodeId.
     * The node ID of the associated check suite.
     * @return Returns the String
     */
    @JsonGetter("check_suite_node_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCheckSuiteNodeId() {
        return checkSuiteNodeId;
    }

    /**
     * Setter for CheckSuiteNodeId.
     * The node ID of the associated check suite.
     * @param checkSuiteNodeId Value for String
     */
    @JsonSetter("check_suite_node_id")
    public void setCheckSuiteNodeId(String checkSuiteNodeId) {
        this.checkSuiteNodeId = checkSuiteNodeId;
    }

    /**
     * Getter for HeadBranch.
     * @return Returns the String
     */
    @JsonGetter("head_branch")
    public String getHeadBranch() {
        return headBranch;
    }

    /**
     * Setter for HeadBranch.
     * @param headBranch Value for String
     */
    @JsonSetter("head_branch")
    public void setHeadBranch(String headBranch) {
        this.headBranch = headBranch;
    }

    /**
     * Getter for HeadSha.
     * The SHA of the head commit that points to the version of the workflow being run.
     * @return Returns the String
     */
    @JsonGetter("head_sha")
    public String getHeadSha() {
        return headSha;
    }

    /**
     * Setter for HeadSha.
     * The SHA of the head commit that points to the version of the workflow being run.
     * @param headSha Value for String
     */
    @JsonSetter("head_sha")
    public void setHeadSha(String headSha) {
        this.headSha = headSha;
    }

    /**
     * Getter for Path.
     * The full path of the workflow
     * @return Returns the String
     */
    @JsonGetter("path")
    public String getPath() {
        return path;
    }

    /**
     * Setter for Path.
     * The full path of the workflow
     * @param path Value for String
     */
    @JsonSetter("path")
    public void setPath(String path) {
        this.path = path;
    }

    /**
     * Getter for RunNumber.
     * The auto incrementing run number for the workflow run.
     * @return Returns the int
     */
    @JsonGetter("run_number")
    public int getRunNumber() {
        return runNumber;
    }

    /**
     * Setter for RunNumber.
     * The auto incrementing run number for the workflow run.
     * @param runNumber Value for int
     */
    @JsonSetter("run_number")
    public void setRunNumber(int runNumber) {
        this.runNumber = runNumber;
    }

    /**
     * Getter for RunAttempt.
     * Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
     * @return Returns the Integer
     */
    @JsonGetter("run_attempt")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getRunAttempt() {
        return runAttempt;
    }

    /**
     * Setter for RunAttempt.
     * Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
     * @param runAttempt Value for Integer
     */
    @JsonSetter("run_attempt")
    public void setRunAttempt(Integer runAttempt) {
        this.runAttempt = runAttempt;
    }

    /**
     * Internal Getter for ReferencedWorkflows.
     * @return Returns the Internal List of Referencedworkflow
     */
    @JsonGetter("referenced_workflows")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<Referencedworkflow>> internalGetReferencedWorkflows() {
        return this.referencedWorkflows;
    }

    /**
     * Getter for ReferencedWorkflows.
     * @return Returns the List of Referencedworkflow
     */
    public List<Referencedworkflow> getReferencedWorkflows() {
        return OptionalNullable.getFrom(referencedWorkflows);
    }

    /**
     * Setter for ReferencedWorkflows.
     * @param referencedWorkflows Value for List of Referencedworkflow
     */
    @JsonSetter("referenced_workflows")
    public void setReferencedWorkflows(List<Referencedworkflow> referencedWorkflows) {
        this.referencedWorkflows = OptionalNullable.of(referencedWorkflows);
    }

    /**
     * UnSetter for ReferencedWorkflows.
     */
    public void unsetReferencedWorkflows() {
        referencedWorkflows = null;
    }

    /**
     * Getter for Event.
     * @return Returns the String
     */
    @JsonGetter("event")
    public String getEvent() {
        return event;
    }

    /**
     * Setter for Event.
     * @param event Value for String
     */
    @JsonSetter("event")
    public void setEvent(String event) {
        this.event = event;
    }

    /**
     * Getter for Status.
     * @return Returns the String
     */
    @JsonGetter("status")
    public String getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * @param status Value for String
     */
    @JsonSetter("status")
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Getter for Conclusion.
     * @return Returns the String
     */
    @JsonGetter("conclusion")
    public String getConclusion() {
        return conclusion;
    }

    /**
     * Setter for Conclusion.
     * @param conclusion Value for String
     */
    @JsonSetter("conclusion")
    public void setConclusion(String conclusion) {
        this.conclusion = conclusion;
    }

    /**
     * Getter for WorkflowId.
     * The ID of the parent workflow.
     * @return Returns the int
     */
    @JsonGetter("workflow_id")
    public int getWorkflowId() {
        return workflowId;
    }

    /**
     * Setter for WorkflowId.
     * The ID of the parent workflow.
     * @param workflowId Value for int
     */
    @JsonSetter("workflow_id")
    public void setWorkflowId(int workflowId) {
        this.workflowId = workflowId;
    }

    /**
     * Getter for Url.
     * The URL to the workflow run.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * The URL to the workflow run.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for PullRequests.
     * @return Returns the List of PullRequestMinimal
     */
    @JsonGetter("pull_requests")
    public List<PullRequestMinimal> getPullRequests() {
        return pullRequests;
    }

    /**
     * Setter for PullRequests.
     * @param pullRequests Value for List of PullRequestMinimal
     */
    @JsonSetter("pull_requests")
    public void setPullRequests(List<PullRequestMinimal> pullRequests) {
        this.pullRequests = pullRequests;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Actor.
     * @return Returns the Actor2
     */
    @JsonGetter("actor")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actor2 getActor() {
        return actor;
    }

    /**
     * Setter for Actor.
     * @param actor Value for Actor2
     */
    @JsonSetter("actor")
    public void setActor(Actor2 actor) {
        this.actor = actor;
    }

    /**
     * Getter for TriggeringActor.
     * @return Returns the TriggeringActor
     */
    @JsonGetter("triggering_actor")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TriggeringActor getTriggeringActor() {
        return triggeringActor;
    }

    /**
     * Setter for TriggeringActor.
     * @param triggeringActor Value for TriggeringActor
     */
    @JsonSetter("triggering_actor")
    public void setTriggeringActor(TriggeringActor triggeringActor) {
        this.triggeringActor = triggeringActor;
    }

    /**
     * Getter for RunStartedAt.
     * The start time of the latest run. Resets on re-run.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("run_started_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getRunStartedAt() {
        return runStartedAt;
    }

    /**
     * Setter for RunStartedAt.
     * The start time of the latest run. Resets on re-run.
     * @param runStartedAt Value for LocalDateTime
     */
    @JsonSetter("run_started_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setRunStartedAt(LocalDateTime runStartedAt) {
        this.runStartedAt = runStartedAt;
    }

    /**
     * Getter for JobsUrl.
     * The URL to the jobs for the workflow run.
     * @return Returns the String
     */
    @JsonGetter("jobs_url")
    public String getJobsUrl() {
        return jobsUrl;
    }

    /**
     * Setter for JobsUrl.
     * The URL to the jobs for the workflow run.
     * @param jobsUrl Value for String
     */
    @JsonSetter("jobs_url")
    public void setJobsUrl(String jobsUrl) {
        this.jobsUrl = jobsUrl;
    }

    /**
     * Getter for LogsUrl.
     * The URL to download the logs for the workflow run.
     * @return Returns the String
     */
    @JsonGetter("logs_url")
    public String getLogsUrl() {
        return logsUrl;
    }

    /**
     * Setter for LogsUrl.
     * The URL to download the logs for the workflow run.
     * @param logsUrl Value for String
     */
    @JsonSetter("logs_url")
    public void setLogsUrl(String logsUrl) {
        this.logsUrl = logsUrl;
    }

    /**
     * Getter for CheckSuiteUrl.
     * The URL to the associated check suite.
     * @return Returns the String
     */
    @JsonGetter("check_suite_url")
    public String getCheckSuiteUrl() {
        return checkSuiteUrl;
    }

    /**
     * Setter for CheckSuiteUrl.
     * The URL to the associated check suite.
     * @param checkSuiteUrl Value for String
     */
    @JsonSetter("check_suite_url")
    public void setCheckSuiteUrl(String checkSuiteUrl) {
        this.checkSuiteUrl = checkSuiteUrl;
    }

    /**
     * Getter for ArtifactsUrl.
     * The URL to the artifacts for the workflow run.
     * @return Returns the String
     */
    @JsonGetter("artifacts_url")
    public String getArtifactsUrl() {
        return artifactsUrl;
    }

    /**
     * Setter for ArtifactsUrl.
     * The URL to the artifacts for the workflow run.
     * @param artifactsUrl Value for String
     */
    @JsonSetter("artifacts_url")
    public void setArtifactsUrl(String artifactsUrl) {
        this.artifactsUrl = artifactsUrl;
    }

    /**
     * Getter for CancelUrl.
     * The URL to cancel the workflow run.
     * @return Returns the String
     */
    @JsonGetter("cancel_url")
    public String getCancelUrl() {
        return cancelUrl;
    }

    /**
     * Setter for CancelUrl.
     * The URL to cancel the workflow run.
     * @param cancelUrl Value for String
     */
    @JsonSetter("cancel_url")
    public void setCancelUrl(String cancelUrl) {
        this.cancelUrl = cancelUrl;
    }

    /**
     * Getter for RerunUrl.
     * The URL to rerun the workflow run.
     * @return Returns the String
     */
    @JsonGetter("rerun_url")
    public String getRerunUrl() {
        return rerunUrl;
    }

    /**
     * Setter for RerunUrl.
     * The URL to rerun the workflow run.
     * @param rerunUrl Value for String
     */
    @JsonSetter("rerun_url")
    public void setRerunUrl(String rerunUrl) {
        this.rerunUrl = rerunUrl;
    }

    /**
     * Internal Getter for PreviousAttemptUrl.
     * The URL to the previous attempted run of this workflow, if one exists.
     * @return Returns the Internal String
     */
    @JsonGetter("previous_attempt_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPreviousAttemptUrl() {
        return this.previousAttemptUrl;
    }

    /**
     * Getter for PreviousAttemptUrl.
     * The URL to the previous attempted run of this workflow, if one exists.
     * @return Returns the String
     */
    public String getPreviousAttemptUrl() {
        return OptionalNullable.getFrom(previousAttemptUrl);
    }

    /**
     * Setter for PreviousAttemptUrl.
     * The URL to the previous attempted run of this workflow, if one exists.
     * @param previousAttemptUrl Value for String
     */
    @JsonSetter("previous_attempt_url")
    public void setPreviousAttemptUrl(String previousAttemptUrl) {
        this.previousAttemptUrl = OptionalNullable.of(previousAttemptUrl);
    }

    /**
     * UnSetter for PreviousAttemptUrl.
     * The URL to the previous attempted run of this workflow, if one exists.
     */
    public void unsetPreviousAttemptUrl() {
        previousAttemptUrl = null;
    }

    /**
     * Getter for WorkflowUrl.
     * The URL to the workflow.
     * @return Returns the String
     */
    @JsonGetter("workflow_url")
    public String getWorkflowUrl() {
        return workflowUrl;
    }

    /**
     * Setter for WorkflowUrl.
     * The URL to the workflow.
     * @param workflowUrl Value for String
     */
    @JsonSetter("workflow_url")
    public void setWorkflowUrl(String workflowUrl) {
        this.workflowUrl = workflowUrl;
    }

    /**
     * Getter for HeadCommit.
     * @return Returns the Object
     */
    @JsonGetter("head_commit")
    public Object getHeadCommit() {
        return headCommit;
    }

    /**
     * Setter for HeadCommit.
     * @param headCommit Value for Object
     */
    @JsonSetter("head_commit")
    public void setHeadCommit(Object headCommit) {
        this.headCommit = headCommit;
    }

    /**
     * Getter for Repository.
     * @return Returns the Repository7
     */
    @JsonGetter("repository")
    public Repository7 getRepository() {
        return repository;
    }

    /**
     * Setter for Repository.
     * @param repository Value for Repository7
     */
    @JsonSetter("repository")
    public void setRepository(Repository7 repository) {
        this.repository = repository;
    }

    /**
     * Getter for HeadRepository.
     * @return Returns the HeadRepository7
     */
    @JsonGetter("head_repository")
    public HeadRepository7 getHeadRepository() {
        return headRepository;
    }

    /**
     * Setter for HeadRepository.
     * @param headRepository Value for HeadRepository7
     */
    @JsonSetter("head_repository")
    public void setHeadRepository(HeadRepository7 headRepository) {
        this.headRepository = headRepository;
    }

    /**
     * Getter for HeadRepositoryId.
     * @return Returns the Integer
     */
    @JsonGetter("head_repository_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getHeadRepositoryId() {
        return headRepositoryId;
    }

    /**
     * Setter for HeadRepositoryId.
     * @param headRepositoryId Value for Integer
     */
    @JsonSetter("head_repository_id")
    public void setHeadRepositoryId(Integer headRepositoryId) {
        this.headRepositoryId = headRepositoryId;
    }

    /**
     * Getter for DisplayTitle.
     * The event-specific title associated with the run or the run-name if set, or the value of
     * `run-name` if it is set in the workflow.
     * @return Returns the String
     */
    @JsonGetter("display_title")
    public String getDisplayTitle() {
        return displayTitle;
    }

    /**
     * Setter for DisplayTitle.
     * The event-specific title associated with the run or the run-name if set, or the value of
     * `run-name` if it is set in the workflow.
     * @param displayTitle Value for String
     */
    @JsonSetter("display_title")
    public void setDisplayTitle(String displayTitle) {
        this.displayTitle = displayTitle;
    }

    /**
     * Converts this WorkflowRun into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "WorkflowRun [" + "id=" + id + ", nodeId=" + nodeId + ", headBranch=" + headBranch
                + ", headSha=" + headSha + ", path=" + path + ", runNumber=" + runNumber
                + ", event=" + event + ", status=" + status + ", conclusion=" + conclusion
                + ", workflowId=" + workflowId + ", url=" + url + ", htmlUrl=" + htmlUrl
                + ", pullRequests=" + pullRequests + ", createdAt=" + createdAt + ", updatedAt="
                + updatedAt + ", jobsUrl=" + jobsUrl + ", logsUrl=" + logsUrl + ", checkSuiteUrl="
                + checkSuiteUrl + ", artifactsUrl=" + artifactsUrl + ", cancelUrl=" + cancelUrl
                + ", rerunUrl=" + rerunUrl + ", workflowUrl=" + workflowUrl + ", headCommit="
                + headCommit + ", repository=" + repository + ", headRepository=" + headRepository
                + ", displayTitle=" + displayTitle + ", name=" + name + ", checkSuiteId="
                + checkSuiteId + ", checkSuiteNodeId=" + checkSuiteNodeId + ", runAttempt="
                + runAttempt + ", referencedWorkflows=" + referencedWorkflows + ", actor=" + actor
                + ", triggeringActor=" + triggeringActor + ", runStartedAt=" + runStartedAt
                + ", previousAttemptUrl=" + previousAttemptUrl + ", headRepositoryId="
                + headRepositoryId + "]";
    }

    /**
     * Builds a new {@link WorkflowRun.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link WorkflowRun.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, nodeId, headBranch, headSha, path, runNumber, event,
                status, conclusion, workflowId, url, htmlUrl, pullRequests, createdAt, updatedAt,
                jobsUrl, logsUrl, checkSuiteUrl, artifactsUrl, cancelUrl, rerunUrl, workflowUrl,
                headCommit, repository, headRepository, displayTitle)
                .checkSuiteId(getCheckSuiteId())
                .checkSuiteNodeId(getCheckSuiteNodeId())
                .runAttempt(getRunAttempt())
                .actor(getActor())
                .triggeringActor(getTriggeringActor())
                .runStartedAt(getRunStartedAt())
                .headRepositoryId(getHeadRepositoryId());
        builder.name = internalGetName();
        builder.referencedWorkflows = internalGetReferencedWorkflows();
        builder.previousAttemptUrl = internalGetPreviousAttemptUrl();
        return builder;
    }

    /**
     * Class to build instances of {@link WorkflowRun}.
     */
    public static class Builder {
        private int id;
        private String nodeId;
        private String headBranch;
        private String headSha;
        private String path;
        private int runNumber;
        private String event;
        private String status;
        private String conclusion;
        private int workflowId;
        private String url;
        private String htmlUrl;
        private List<PullRequestMinimal> pullRequests;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private String jobsUrl;
        private String logsUrl;
        private String checkSuiteUrl;
        private String artifactsUrl;
        private String cancelUrl;
        private String rerunUrl;
        private String workflowUrl;
        private Object headCommit;
        private Repository7 repository;
        private HeadRepository7 headRepository;
        private String displayTitle;
        private OptionalNullable<String> name;
        private Integer checkSuiteId;
        private String checkSuiteNodeId;
        private Integer runAttempt;
        private OptionalNullable<List<Referencedworkflow>> referencedWorkflows;
        private Actor2 actor;
        private TriggeringActor triggeringActor;
        private LocalDateTime runStartedAt;
        private OptionalNullable<String> previousAttemptUrl;
        private Integer headRepositoryId;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  headBranch  String value for headBranch.
         * @param  headSha  String value for headSha.
         * @param  path  String value for path.
         * @param  runNumber  int value for runNumber.
         * @param  event  String value for event.
         * @param  status  String value for status.
         * @param  conclusion  String value for conclusion.
         * @param  workflowId  int value for workflowId.
         * @param  url  String value for url.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  pullRequests  List of PullRequestMinimal value for pullRequests.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  jobsUrl  String value for jobsUrl.
         * @param  logsUrl  String value for logsUrl.
         * @param  checkSuiteUrl  String value for checkSuiteUrl.
         * @param  artifactsUrl  String value for artifactsUrl.
         * @param  cancelUrl  String value for cancelUrl.
         * @param  rerunUrl  String value for rerunUrl.
         * @param  workflowUrl  String value for workflowUrl.
         * @param  headCommit  Object value for headCommit.
         * @param  repository  Repository7 value for repository.
         * @param  headRepository  HeadRepository7 value for headRepository.
         * @param  displayTitle  String value for displayTitle.
         */
        public Builder(int id, String nodeId, String headBranch, String headSha, String path,
                int runNumber, String event, String status, String conclusion, int workflowId,
                String url, String htmlUrl, List<PullRequestMinimal> pullRequests,
                LocalDateTime createdAt, LocalDateTime updatedAt, String jobsUrl, String logsUrl,
                String checkSuiteUrl, String artifactsUrl, String cancelUrl, String rerunUrl,
                String workflowUrl, Object headCommit, Repository7 repository,
                HeadRepository7 headRepository, String displayTitle) {
            this.id = id;
            this.nodeId = nodeId;
            this.headBranch = headBranch;
            this.headSha = headSha;
            this.path = path;
            this.runNumber = runNumber;
            this.event = event;
            this.status = status;
            this.conclusion = conclusion;
            this.workflowId = workflowId;
            this.url = url;
            this.htmlUrl = htmlUrl;
            this.pullRequests = pullRequests;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.jobsUrl = jobsUrl;
            this.logsUrl = logsUrl;
            this.checkSuiteUrl = checkSuiteUrl;
            this.artifactsUrl = artifactsUrl;
            this.cancelUrl = cancelUrl;
            this.rerunUrl = rerunUrl;
            this.workflowUrl = workflowUrl;
            this.headCommit = headCommit;
            this.repository = repository;
            this.headRepository = headRepository;
            this.displayTitle = displayTitle;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for headBranch.
         * @param  headBranch  String value for headBranch.
         * @return Builder
         */
        public Builder headBranch(String headBranch) {
            this.headBranch = headBranch;
            return this;
        }

        /**
         * Setter for headSha.
         * @param  headSha  String value for headSha.
         * @return Builder
         */
        public Builder headSha(String headSha) {
            this.headSha = headSha;
            return this;
        }

        /**
         * Setter for path.
         * @param  path  String value for path.
         * @return Builder
         */
        public Builder path(String path) {
            this.path = path;
            return this;
        }

        /**
         * Setter for runNumber.
         * @param  runNumber  int value for runNumber.
         * @return Builder
         */
        public Builder runNumber(int runNumber) {
            this.runNumber = runNumber;
            return this;
        }

        /**
         * Setter for event.
         * @param  event  String value for event.
         * @return Builder
         */
        public Builder event(String event) {
            this.event = event;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for conclusion.
         * @param  conclusion  String value for conclusion.
         * @return Builder
         */
        public Builder conclusion(String conclusion) {
            this.conclusion = conclusion;
            return this;
        }

        /**
         * Setter for workflowId.
         * @param  workflowId  int value for workflowId.
         * @return Builder
         */
        public Builder workflowId(int workflowId) {
            this.workflowId = workflowId;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for pullRequests.
         * @param  pullRequests  List of PullRequestMinimal value for pullRequests.
         * @return Builder
         */
        public Builder pullRequests(List<PullRequestMinimal> pullRequests) {
            this.pullRequests = pullRequests;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for jobsUrl.
         * @param  jobsUrl  String value for jobsUrl.
         * @return Builder
         */
        public Builder jobsUrl(String jobsUrl) {
            this.jobsUrl = jobsUrl;
            return this;
        }

        /**
         * Setter for logsUrl.
         * @param  logsUrl  String value for logsUrl.
         * @return Builder
         */
        public Builder logsUrl(String logsUrl) {
            this.logsUrl = logsUrl;
            return this;
        }

        /**
         * Setter for checkSuiteUrl.
         * @param  checkSuiteUrl  String value for checkSuiteUrl.
         * @return Builder
         */
        public Builder checkSuiteUrl(String checkSuiteUrl) {
            this.checkSuiteUrl = checkSuiteUrl;
            return this;
        }

        /**
         * Setter for artifactsUrl.
         * @param  artifactsUrl  String value for artifactsUrl.
         * @return Builder
         */
        public Builder artifactsUrl(String artifactsUrl) {
            this.artifactsUrl = artifactsUrl;
            return this;
        }

        /**
         * Setter for cancelUrl.
         * @param  cancelUrl  String value for cancelUrl.
         * @return Builder
         */
        public Builder cancelUrl(String cancelUrl) {
            this.cancelUrl = cancelUrl;
            return this;
        }

        /**
         * Setter for rerunUrl.
         * @param  rerunUrl  String value for rerunUrl.
         * @return Builder
         */
        public Builder rerunUrl(String rerunUrl) {
            this.rerunUrl = rerunUrl;
            return this;
        }

        /**
         * Setter for workflowUrl.
         * @param  workflowUrl  String value for workflowUrl.
         * @return Builder
         */
        public Builder workflowUrl(String workflowUrl) {
            this.workflowUrl = workflowUrl;
            return this;
        }

        /**
         * Setter for headCommit.
         * @param  headCommit  Object value for headCommit.
         * @return Builder
         */
        public Builder headCommit(Object headCommit) {
            this.headCommit = headCommit;
            return this;
        }

        /**
         * Setter for repository.
         * @param  repository  Repository7 value for repository.
         * @return Builder
         */
        public Builder repository(Repository7 repository) {
            this.repository = repository;
            return this;
        }

        /**
         * Setter for headRepository.
         * @param  headRepository  HeadRepository7 value for headRepository.
         * @return Builder
         */
        public Builder headRepository(HeadRepository7 headRepository) {
            this.headRepository = headRepository;
            return this;
        }

        /**
         * Setter for displayTitle.
         * @param  displayTitle  String value for displayTitle.
         * @return Builder
         */
        public Builder displayTitle(String displayTitle) {
            this.displayTitle = displayTitle;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = OptionalNullable.of(name);
            return this;
        }

        /**
         * UnSetter for name.
         * @return Builder
         */
        public Builder unsetName() {
            name = null;
            return this;
        }

        /**
         * Setter for checkSuiteId.
         * @param  checkSuiteId  Integer value for checkSuiteId.
         * @return Builder
         */
        public Builder checkSuiteId(Integer checkSuiteId) {
            this.checkSuiteId = checkSuiteId;
            return this;
        }

        /**
         * Setter for checkSuiteNodeId.
         * @param  checkSuiteNodeId  String value for checkSuiteNodeId.
         * @return Builder
         */
        public Builder checkSuiteNodeId(String checkSuiteNodeId) {
            this.checkSuiteNodeId = checkSuiteNodeId;
            return this;
        }

        /**
         * Setter for runAttempt.
         * @param  runAttempt  Integer value for runAttempt.
         * @return Builder
         */
        public Builder runAttempt(Integer runAttempt) {
            this.runAttempt = runAttempt;
            return this;
        }

        /**
         * Setter for referencedWorkflows.
         * @param  referencedWorkflows  List of Referencedworkflow value for referencedWorkflows.
         * @return Builder
         */
        public Builder referencedWorkflows(List<Referencedworkflow> referencedWorkflows) {
            this.referencedWorkflows = OptionalNullable.of(referencedWorkflows);
            return this;
        }

        /**
         * UnSetter for referencedWorkflows.
         * @return Builder
         */
        public Builder unsetReferencedWorkflows() {
            referencedWorkflows = null;
            return this;
        }

        /**
         * Setter for actor.
         * @param  actor  Actor2 value for actor.
         * @return Builder
         */
        public Builder actor(Actor2 actor) {
            this.actor = actor;
            return this;
        }

        /**
         * Setter for triggeringActor.
         * @param  triggeringActor  TriggeringActor value for triggeringActor.
         * @return Builder
         */
        public Builder triggeringActor(TriggeringActor triggeringActor) {
            this.triggeringActor = triggeringActor;
            return this;
        }

        /**
         * Setter for runStartedAt.
         * @param  runStartedAt  LocalDateTime value for runStartedAt.
         * @return Builder
         */
        public Builder runStartedAt(LocalDateTime runStartedAt) {
            this.runStartedAt = runStartedAt;
            return this;
        }

        /**
         * Setter for previousAttemptUrl.
         * @param  previousAttemptUrl  String value for previousAttemptUrl.
         * @return Builder
         */
        public Builder previousAttemptUrl(String previousAttemptUrl) {
            this.previousAttemptUrl = OptionalNullable.of(previousAttemptUrl);
            return this;
        }

        /**
         * UnSetter for previousAttemptUrl.
         * @return Builder
         */
        public Builder unsetPreviousAttemptUrl() {
            previousAttemptUrl = null;
            return this;
        }

        /**
         * Setter for headRepositoryId.
         * @param  headRepositoryId  Integer value for headRepositoryId.
         * @return Builder
         */
        public Builder headRepositoryId(Integer headRepositoryId) {
            this.headRepositoryId = headRepositoryId;
            return this;
        }

        /**
         * Builds a new {@link WorkflowRun} object using the set fields.
         * @return {@link WorkflowRun}
         */
        public WorkflowRun build() {
            return new WorkflowRun(id, nodeId, headBranch, headSha, path, runNumber, event, status,
                    conclusion, workflowId, url, htmlUrl, pullRequests, createdAt, updatedAt,
                    jobsUrl, logsUrl, checkSuiteUrl, artifactsUrl, cancelUrl, rerunUrl, workflowUrl,
                    headCommit, repository, headRepository, displayTitle, name, checkSuiteId,
                    checkSuiteNodeId, runAttempt, referencedWorkflows, actor, triggeringActor,
                    runStartedAt, previousAttemptUrl, headRepositoryId);
        }
    }
}

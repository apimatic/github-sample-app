/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;

/**
 * This is a model class for ReposCodeScanningSarifsRequest type.
 */
public class ReposCodeScanningSarifsRequest {
    private String commitSha;
    private String ref;
    private String sarif;
    private String checkoutUri;
    private LocalDateTime startedAt;
    private String toolName;
    private Boolean validate;

    /**
     * Default constructor.
     */
    public ReposCodeScanningSarifsRequest() {
    }

    /**
     * Initialization constructor.
     * @param  commitSha  String value for commitSha.
     * @param  ref  String value for ref.
     * @param  sarif  String value for sarif.
     * @param  checkoutUri  String value for checkoutUri.
     * @param  startedAt  LocalDateTime value for startedAt.
     * @param  toolName  String value for toolName.
     * @param  validate  Boolean value for validate.
     */
    public ReposCodeScanningSarifsRequest(
            String commitSha,
            String ref,
            String sarif,
            String checkoutUri,
            LocalDateTime startedAt,
            String toolName,
            Boolean validate) {
        this.commitSha = commitSha;
        this.ref = ref;
        this.sarif = sarif;
        this.checkoutUri = checkoutUri;
        this.startedAt = startedAt;
        this.toolName = toolName;
        this.validate = validate;
    }

    /**
     * Getter for CommitSha.
     * The SHA of the commit to which the analysis you are uploading relates.
     * @return Returns the String
     */
    @JsonGetter("commit_sha")
    public String getCommitSha() {
        return commitSha;
    }

    /**
     * Setter for CommitSha.
     * The SHA of the commit to which the analysis you are uploading relates.
     * @param commitSha Value for String
     */
    @JsonSetter("commit_sha")
    public void setCommitSha(String commitSha) {
        this.commitSha = commitSha;
    }

    /**
     * Getter for Ref.
     * The full Git reference, formatted as `refs/heads/&lt;branch name&gt;`, `refs/pull/&lt;number&gt;/merge`,
     * or `refs/pull/&lt;number&gt;/head`.
     * @return Returns the String
     */
    @JsonGetter("ref")
    public String getRef() {
        return ref;
    }

    /**
     * Setter for Ref.
     * The full Git reference, formatted as `refs/heads/&lt;branch name&gt;`, `refs/pull/&lt;number&gt;/merge`,
     * or `refs/pull/&lt;number&gt;/head`.
     * @param ref Value for String
     */
    @JsonSetter("ref")
    public void setRef(String ref) {
        this.ref = ref;
    }

    /**
     * Getter for Sarif.
     * A Base64 string representing the SARIF file to upload. You must first compress your SARIF
     * file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the
     * contents of the file into a Base64 encoding string. For more information, see "[SARIF support
     * for code
     * scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
     * @return Returns the String
     */
    @JsonGetter("sarif")
    public String getSarif() {
        return sarif;
    }

    /**
     * Setter for Sarif.
     * A Base64 string representing the SARIF file to upload. You must first compress your SARIF
     * file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the
     * contents of the file into a Base64 encoding string. For more information, see "[SARIF support
     * for code
     * scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
     * @param sarif Value for String
     */
    @JsonSetter("sarif")
    public void setSarif(String sarif) {
        this.sarif = sarif;
    }

    /**
     * Getter for CheckoutUri.
     * The base directory used in the analysis, as it appears in the SARIF file. This property is
     * used to convert file paths from absolute to relative, so that alerts can be mapped to their
     * correct location in the repository.
     * @return Returns the String
     */
    @JsonGetter("checkout_uri")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCheckoutUri() {
        return checkoutUri;
    }

    /**
     * Setter for CheckoutUri.
     * The base directory used in the analysis, as it appears in the SARIF file. This property is
     * used to convert file paths from absolute to relative, so that alerts can be mapped to their
     * correct location in the repository.
     * @param checkoutUri Value for String
     */
    @JsonSetter("checkout_uri")
    public void setCheckoutUri(String checkoutUri) {
        this.checkoutUri = checkoutUri;
    }

    /**
     * Getter for StartedAt.
     * The time that the analysis run began. This is a timestamp in [ISO
     * 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("started_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getStartedAt() {
        return startedAt;
    }

    /**
     * Setter for StartedAt.
     * The time that the analysis run began. This is a timestamp in [ISO
     * 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param startedAt Value for LocalDateTime
     */
    @JsonSetter("started_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setStartedAt(LocalDateTime startedAt) {
        this.startedAt = startedAt;
    }

    /**
     * Getter for ToolName.
     * The name of the tool used to generate the code scanning analysis. If this parameter is not
     * used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will
     * be available for filtering using the `tool_guid` parameter of operations such as `GET
     * /repos/{owner}/{repo}/code-scanning/alerts`.
     * @return Returns the String
     */
    @JsonGetter("tool_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getToolName() {
        return toolName;
    }

    /**
     * Setter for ToolName.
     * The name of the tool used to generate the code scanning analysis. If this parameter is not
     * used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will
     * be available for filtering using the `tool_guid` parameter of operations such as `GET
     * /repos/{owner}/{repo}/code-scanning/alerts`.
     * @param toolName Value for String
     */
    @JsonSetter("tool_name")
    public void setToolName(String toolName) {
        this.toolName = toolName;
    }

    /**
     * Getter for Validate.
     * Whether the SARIF file will be validated according to the code scanning specifications. This
     * parameter is intended to help integrators ensure that the uploaded SARIF files are correctly
     * rendered by code scanning.
     * @return Returns the Boolean
     */
    @JsonGetter("validate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getValidate() {
        return validate;
    }

    /**
     * Setter for Validate.
     * Whether the SARIF file will be validated according to the code scanning specifications. This
     * parameter is intended to help integrators ensure that the uploaded SARIF files are correctly
     * rendered by code scanning.
     * @param validate Value for Boolean
     */
    @JsonSetter("validate")
    public void setValidate(Boolean validate) {
        this.validate = validate;
    }

    /**
     * Converts this ReposCodeScanningSarifsRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposCodeScanningSarifsRequest [" + "commitSha=" + commitSha + ", ref=" + ref
                + ", sarif=" + sarif + ", checkoutUri=" + checkoutUri + ", startedAt=" + startedAt
                + ", toolName=" + toolName + ", validate=" + validate + "]";
    }

    /**
     * Builds a new {@link ReposCodeScanningSarifsRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposCodeScanningSarifsRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(commitSha, ref, sarif)
                .checkoutUri(getCheckoutUri())
                .startedAt(getStartedAt())
                .toolName(getToolName())
                .validate(getValidate());
        return builder;
    }

    /**
     * Class to build instances of {@link ReposCodeScanningSarifsRequest}.
     */
    public static class Builder {
        private String commitSha;
        private String ref;
        private String sarif;
        private String checkoutUri;
        private LocalDateTime startedAt;
        private String toolName;
        private Boolean validate;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  commitSha  String value for commitSha.
         * @param  ref  String value for ref.
         * @param  sarif  String value for sarif.
         */
        public Builder(String commitSha, String ref, String sarif) {
            this.commitSha = commitSha;
            this.ref = ref;
            this.sarif = sarif;
        }

        /**
         * Setter for commitSha.
         * @param  commitSha  String value for commitSha.
         * @return Builder
         */
        public Builder commitSha(String commitSha) {
            this.commitSha = commitSha;
            return this;
        }

        /**
         * Setter for ref.
         * @param  ref  String value for ref.
         * @return Builder
         */
        public Builder ref(String ref) {
            this.ref = ref;
            return this;
        }

        /**
         * Setter for sarif.
         * @param  sarif  String value for sarif.
         * @return Builder
         */
        public Builder sarif(String sarif) {
            this.sarif = sarif;
            return this;
        }

        /**
         * Setter for checkoutUri.
         * @param  checkoutUri  String value for checkoutUri.
         * @return Builder
         */
        public Builder checkoutUri(String checkoutUri) {
            this.checkoutUri = checkoutUri;
            return this;
        }

        /**
         * Setter for startedAt.
         * @param  startedAt  LocalDateTime value for startedAt.
         * @return Builder
         */
        public Builder startedAt(LocalDateTime startedAt) {
            this.startedAt = startedAt;
            return this;
        }

        /**
         * Setter for toolName.
         * @param  toolName  String value for toolName.
         * @return Builder
         */
        public Builder toolName(String toolName) {
            this.toolName = toolName;
            return this;
        }

        /**
         * Setter for validate.
         * @param  validate  Boolean value for validate.
         * @return Builder
         */
        public Builder validate(Boolean validate) {
            this.validate = validate;
            return this;
        }

        /**
         * Builds a new {@link ReposCodeScanningSarifsRequest} object using the set fields.
         * @return {@link ReposCodeScanningSarifsRequest}
         */
        public ReposCodeScanningSarifsRequest build() {
            return new ReposCodeScanningSarifsRequest(commitSha, ref, sarif, checkoutUri, startedAt,
                    toolName, validate);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for SimpleRepository type.
 */
public class SimpleRepository {
    private int id;
    private String nodeId;
    private String name;
    private String fullName;
    private Owner1 owner;
    private boolean mPrivate;
    private String htmlUrl;
    private String description;
    private boolean fork;
    private String url;
    private String archiveUrl;
    private String assigneesUrl;
    private String blobsUrl;
    private String branchesUrl;
    private String collaboratorsUrl;
    private String commentsUrl;
    private String commitsUrl;
    private String compareUrl;
    private String contentsUrl;
    private String contributorsUrl;
    private String deploymentsUrl;
    private String downloadsUrl;
    private String eventsUrl;
    private String forksUrl;
    private String gitCommitsUrl;
    private String gitRefsUrl;
    private String gitTagsUrl;
    private String issueCommentUrl;
    private String issueEventsUrl;
    private String issuesUrl;
    private String keysUrl;
    private String labelsUrl;
    private String languagesUrl;
    private String mergesUrl;
    private String milestonesUrl;
    private String notificationsUrl;
    private String pullsUrl;
    private String releasesUrl;
    private String stargazersUrl;
    private String statusesUrl;
    private String subscribersUrl;
    private String subscriptionUrl;
    private String tagsUrl;
    private String teamsUrl;
    private String treesUrl;
    private String hooksUrl;

    /**
     * Default constructor.
     */
    public SimpleRepository() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  name  String value for name.
     * @param  fullName  String value for fullName.
     * @param  owner  Owner1 value for owner.
     * @param  mPrivate  boolean value for mPrivate.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  description  String value for description.
     * @param  fork  boolean value for fork.
     * @param  url  String value for url.
     * @param  archiveUrl  String value for archiveUrl.
     * @param  assigneesUrl  String value for assigneesUrl.
     * @param  blobsUrl  String value for blobsUrl.
     * @param  branchesUrl  String value for branchesUrl.
     * @param  collaboratorsUrl  String value for collaboratorsUrl.
     * @param  commentsUrl  String value for commentsUrl.
     * @param  commitsUrl  String value for commitsUrl.
     * @param  compareUrl  String value for compareUrl.
     * @param  contentsUrl  String value for contentsUrl.
     * @param  contributorsUrl  String value for contributorsUrl.
     * @param  deploymentsUrl  String value for deploymentsUrl.
     * @param  downloadsUrl  String value for downloadsUrl.
     * @param  eventsUrl  String value for eventsUrl.
     * @param  forksUrl  String value for forksUrl.
     * @param  gitCommitsUrl  String value for gitCommitsUrl.
     * @param  gitRefsUrl  String value for gitRefsUrl.
     * @param  gitTagsUrl  String value for gitTagsUrl.
     * @param  issueCommentUrl  String value for issueCommentUrl.
     * @param  issueEventsUrl  String value for issueEventsUrl.
     * @param  issuesUrl  String value for issuesUrl.
     * @param  keysUrl  String value for keysUrl.
     * @param  labelsUrl  String value for labelsUrl.
     * @param  languagesUrl  String value for languagesUrl.
     * @param  mergesUrl  String value for mergesUrl.
     * @param  milestonesUrl  String value for milestonesUrl.
     * @param  notificationsUrl  String value for notificationsUrl.
     * @param  pullsUrl  String value for pullsUrl.
     * @param  releasesUrl  String value for releasesUrl.
     * @param  stargazersUrl  String value for stargazersUrl.
     * @param  statusesUrl  String value for statusesUrl.
     * @param  subscribersUrl  String value for subscribersUrl.
     * @param  subscriptionUrl  String value for subscriptionUrl.
     * @param  tagsUrl  String value for tagsUrl.
     * @param  teamsUrl  String value for teamsUrl.
     * @param  treesUrl  String value for treesUrl.
     * @param  hooksUrl  String value for hooksUrl.
     */
    public SimpleRepository(
            int id,
            String nodeId,
            String name,
            String fullName,
            Owner1 owner,
            boolean mPrivate,
            String htmlUrl,
            String description,
            boolean fork,
            String url,
            String archiveUrl,
            String assigneesUrl,
            String blobsUrl,
            String branchesUrl,
            String collaboratorsUrl,
            String commentsUrl,
            String commitsUrl,
            String compareUrl,
            String contentsUrl,
            String contributorsUrl,
            String deploymentsUrl,
            String downloadsUrl,
            String eventsUrl,
            String forksUrl,
            String gitCommitsUrl,
            String gitRefsUrl,
            String gitTagsUrl,
            String issueCommentUrl,
            String issueEventsUrl,
            String issuesUrl,
            String keysUrl,
            String labelsUrl,
            String languagesUrl,
            String mergesUrl,
            String milestonesUrl,
            String notificationsUrl,
            String pullsUrl,
            String releasesUrl,
            String stargazersUrl,
            String statusesUrl,
            String subscribersUrl,
            String subscriptionUrl,
            String tagsUrl,
            String teamsUrl,
            String treesUrl,
            String hooksUrl) {
        this.id = id;
        this.nodeId = nodeId;
        this.name = name;
        this.fullName = fullName;
        this.owner = owner;
        this.mPrivate = mPrivate;
        this.htmlUrl = htmlUrl;
        this.description = description;
        this.fork = fork;
        this.url = url;
        this.archiveUrl = archiveUrl;
        this.assigneesUrl = assigneesUrl;
        this.blobsUrl = blobsUrl;
        this.branchesUrl = branchesUrl;
        this.collaboratorsUrl = collaboratorsUrl;
        this.commentsUrl = commentsUrl;
        this.commitsUrl = commitsUrl;
        this.compareUrl = compareUrl;
        this.contentsUrl = contentsUrl;
        this.contributorsUrl = contributorsUrl;
        this.deploymentsUrl = deploymentsUrl;
        this.downloadsUrl = downloadsUrl;
        this.eventsUrl = eventsUrl;
        this.forksUrl = forksUrl;
        this.gitCommitsUrl = gitCommitsUrl;
        this.gitRefsUrl = gitRefsUrl;
        this.gitTagsUrl = gitTagsUrl;
        this.issueCommentUrl = issueCommentUrl;
        this.issueEventsUrl = issueEventsUrl;
        this.issuesUrl = issuesUrl;
        this.keysUrl = keysUrl;
        this.labelsUrl = labelsUrl;
        this.languagesUrl = languagesUrl;
        this.mergesUrl = mergesUrl;
        this.milestonesUrl = milestonesUrl;
        this.notificationsUrl = notificationsUrl;
        this.pullsUrl = pullsUrl;
        this.releasesUrl = releasesUrl;
        this.stargazersUrl = stargazersUrl;
        this.statusesUrl = statusesUrl;
        this.subscribersUrl = subscribersUrl;
        this.subscriptionUrl = subscriptionUrl;
        this.tagsUrl = tagsUrl;
        this.teamsUrl = teamsUrl;
        this.treesUrl = treesUrl;
        this.hooksUrl = hooksUrl;
    }

    /**
     * Getter for Id.
     * A unique identifier of the repository.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * A unique identifier of the repository.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * The GraphQL identifier of the repository.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * The GraphQL identifier of the repository.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Name.
     * The name of the repository.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the repository.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for FullName.
     * The full, globally unique, name of the repository.
     * @return Returns the String
     */
    @JsonGetter("full_name")
    public String getFullName() {
        return fullName;
    }

    /**
     * Setter for FullName.
     * The full, globally unique, name of the repository.
     * @param fullName Value for String
     */
    @JsonSetter("full_name")
    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    /**
     * Getter for Owner.
     * @return Returns the Owner1
     */
    @JsonGetter("owner")
    public Owner1 getOwner() {
        return owner;
    }

    /**
     * Setter for Owner.
     * @param owner Value for Owner1
     */
    @JsonSetter("owner")
    public void setOwner(Owner1 owner) {
        this.owner = owner;
    }

    /**
     * Getter for Private.
     * Whether the repository is private.
     * @return Returns the boolean
     */
    @JsonGetter("private")
    public boolean getPrivate() {
        return mPrivate;
    }

    /**
     * Setter for Private.
     * Whether the repository is private.
     * @param mPrivate Value for boolean
     */
    @JsonSetter("private")
    public void setPrivate(boolean mPrivate) {
        this.mPrivate = mPrivate;
    }

    /**
     * Getter for HtmlUrl.
     * The URL to view the repository on GitHub.com.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * The URL to view the repository on GitHub.com.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Description.
     * The repository description.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * The repository description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Fork.
     * Whether the repository is a fork.
     * @return Returns the boolean
     */
    @JsonGetter("fork")
    public boolean getFork() {
        return fork;
    }

    /**
     * Setter for Fork.
     * Whether the repository is a fork.
     * @param fork Value for boolean
     */
    @JsonSetter("fork")
    public void setFork(boolean fork) {
        this.fork = fork;
    }

    /**
     * Getter for Url.
     * The URL to get more information about the repository from the GitHub API.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * The URL to get more information about the repository from the GitHub API.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for ArchiveUrl.
     * A template for the API URL to download the repository as an archive.
     * @return Returns the String
     */
    @JsonGetter("archive_url")
    public String getArchiveUrl() {
        return archiveUrl;
    }

    /**
     * Setter for ArchiveUrl.
     * A template for the API URL to download the repository as an archive.
     * @param archiveUrl Value for String
     */
    @JsonSetter("archive_url")
    public void setArchiveUrl(String archiveUrl) {
        this.archiveUrl = archiveUrl;
    }

    /**
     * Getter for AssigneesUrl.
     * A template for the API URL to list the available assignees for issues in the repository.
     * @return Returns the String
     */
    @JsonGetter("assignees_url")
    public String getAssigneesUrl() {
        return assigneesUrl;
    }

    /**
     * Setter for AssigneesUrl.
     * A template for the API URL to list the available assignees for issues in the repository.
     * @param assigneesUrl Value for String
     */
    @JsonSetter("assignees_url")
    public void setAssigneesUrl(String assigneesUrl) {
        this.assigneesUrl = assigneesUrl;
    }

    /**
     * Getter for BlobsUrl.
     * A template for the API URL to create or retrieve a raw Git blob in the repository.
     * @return Returns the String
     */
    @JsonGetter("blobs_url")
    public String getBlobsUrl() {
        return blobsUrl;
    }

    /**
     * Setter for BlobsUrl.
     * A template for the API URL to create or retrieve a raw Git blob in the repository.
     * @param blobsUrl Value for String
     */
    @JsonSetter("blobs_url")
    public void setBlobsUrl(String blobsUrl) {
        this.blobsUrl = blobsUrl;
    }

    /**
     * Getter for BranchesUrl.
     * A template for the API URL to get information about branches in the repository.
     * @return Returns the String
     */
    @JsonGetter("branches_url")
    public String getBranchesUrl() {
        return branchesUrl;
    }

    /**
     * Setter for BranchesUrl.
     * A template for the API URL to get information about branches in the repository.
     * @param branchesUrl Value for String
     */
    @JsonSetter("branches_url")
    public void setBranchesUrl(String branchesUrl) {
        this.branchesUrl = branchesUrl;
    }

    /**
     * Getter for CollaboratorsUrl.
     * A template for the API URL to get information about collaborators of the repository.
     * @return Returns the String
     */
    @JsonGetter("collaborators_url")
    public String getCollaboratorsUrl() {
        return collaboratorsUrl;
    }

    /**
     * Setter for CollaboratorsUrl.
     * A template for the API URL to get information about collaborators of the repository.
     * @param collaboratorsUrl Value for String
     */
    @JsonSetter("collaborators_url")
    public void setCollaboratorsUrl(String collaboratorsUrl) {
        this.collaboratorsUrl = collaboratorsUrl;
    }

    /**
     * Getter for CommentsUrl.
     * A template for the API URL to get information about comments on the repository.
     * @return Returns the String
     */
    @JsonGetter("comments_url")
    public String getCommentsUrl() {
        return commentsUrl;
    }

    /**
     * Setter for CommentsUrl.
     * A template for the API URL to get information about comments on the repository.
     * @param commentsUrl Value for String
     */
    @JsonSetter("comments_url")
    public void setCommentsUrl(String commentsUrl) {
        this.commentsUrl = commentsUrl;
    }

    /**
     * Getter for CommitsUrl.
     * A template for the API URL to get information about commits on the repository.
     * @return Returns the String
     */
    @JsonGetter("commits_url")
    public String getCommitsUrl() {
        return commitsUrl;
    }

    /**
     * Setter for CommitsUrl.
     * A template for the API URL to get information about commits on the repository.
     * @param commitsUrl Value for String
     */
    @JsonSetter("commits_url")
    public void setCommitsUrl(String commitsUrl) {
        this.commitsUrl = commitsUrl;
    }

    /**
     * Getter for CompareUrl.
     * A template for the API URL to compare two commits or refs.
     * @return Returns the String
     */
    @JsonGetter("compare_url")
    public String getCompareUrl() {
        return compareUrl;
    }

    /**
     * Setter for CompareUrl.
     * A template for the API URL to compare two commits or refs.
     * @param compareUrl Value for String
     */
    @JsonSetter("compare_url")
    public void setCompareUrl(String compareUrl) {
        this.compareUrl = compareUrl;
    }

    /**
     * Getter for ContentsUrl.
     * A template for the API URL to get the contents of the repository.
     * @return Returns the String
     */
    @JsonGetter("contents_url")
    public String getContentsUrl() {
        return contentsUrl;
    }

    /**
     * Setter for ContentsUrl.
     * A template for the API URL to get the contents of the repository.
     * @param contentsUrl Value for String
     */
    @JsonSetter("contents_url")
    public void setContentsUrl(String contentsUrl) {
        this.contentsUrl = contentsUrl;
    }

    /**
     * Getter for ContributorsUrl.
     * A template for the API URL to list the contributors to the repository.
     * @return Returns the String
     */
    @JsonGetter("contributors_url")
    public String getContributorsUrl() {
        return contributorsUrl;
    }

    /**
     * Setter for ContributorsUrl.
     * A template for the API URL to list the contributors to the repository.
     * @param contributorsUrl Value for String
     */
    @JsonSetter("contributors_url")
    public void setContributorsUrl(String contributorsUrl) {
        this.contributorsUrl = contributorsUrl;
    }

    /**
     * Getter for DeploymentsUrl.
     * The API URL to list the deployments of the repository.
     * @return Returns the String
     */
    @JsonGetter("deployments_url")
    public String getDeploymentsUrl() {
        return deploymentsUrl;
    }

    /**
     * Setter for DeploymentsUrl.
     * The API URL to list the deployments of the repository.
     * @param deploymentsUrl Value for String
     */
    @JsonSetter("deployments_url")
    public void setDeploymentsUrl(String deploymentsUrl) {
        this.deploymentsUrl = deploymentsUrl;
    }

    /**
     * Getter for DownloadsUrl.
     * The API URL to list the downloads on the repository.
     * @return Returns the String
     */
    @JsonGetter("downloads_url")
    public String getDownloadsUrl() {
        return downloadsUrl;
    }

    /**
     * Setter for DownloadsUrl.
     * The API URL to list the downloads on the repository.
     * @param downloadsUrl Value for String
     */
    @JsonSetter("downloads_url")
    public void setDownloadsUrl(String downloadsUrl) {
        this.downloadsUrl = downloadsUrl;
    }

    /**
     * Getter for EventsUrl.
     * The API URL to list the events of the repository.
     * @return Returns the String
     */
    @JsonGetter("events_url")
    public String getEventsUrl() {
        return eventsUrl;
    }

    /**
     * Setter for EventsUrl.
     * The API URL to list the events of the repository.
     * @param eventsUrl Value for String
     */
    @JsonSetter("events_url")
    public void setEventsUrl(String eventsUrl) {
        this.eventsUrl = eventsUrl;
    }

    /**
     * Getter for ForksUrl.
     * The API URL to list the forks of the repository.
     * @return Returns the String
     */
    @JsonGetter("forks_url")
    public String getForksUrl() {
        return forksUrl;
    }

    /**
     * Setter for ForksUrl.
     * The API URL to list the forks of the repository.
     * @param forksUrl Value for String
     */
    @JsonSetter("forks_url")
    public void setForksUrl(String forksUrl) {
        this.forksUrl = forksUrl;
    }

    /**
     * Getter for GitCommitsUrl.
     * A template for the API URL to get information about Git commits of the repository.
     * @return Returns the String
     */
    @JsonGetter("git_commits_url")
    public String getGitCommitsUrl() {
        return gitCommitsUrl;
    }

    /**
     * Setter for GitCommitsUrl.
     * A template for the API URL to get information about Git commits of the repository.
     * @param gitCommitsUrl Value for String
     */
    @JsonSetter("git_commits_url")
    public void setGitCommitsUrl(String gitCommitsUrl) {
        this.gitCommitsUrl = gitCommitsUrl;
    }

    /**
     * Getter for GitRefsUrl.
     * A template for the API URL to get information about Git refs of the repository.
     * @return Returns the String
     */
    @JsonGetter("git_refs_url")
    public String getGitRefsUrl() {
        return gitRefsUrl;
    }

    /**
     * Setter for GitRefsUrl.
     * A template for the API URL to get information about Git refs of the repository.
     * @param gitRefsUrl Value for String
     */
    @JsonSetter("git_refs_url")
    public void setGitRefsUrl(String gitRefsUrl) {
        this.gitRefsUrl = gitRefsUrl;
    }

    /**
     * Getter for GitTagsUrl.
     * A template for the API URL to get information about Git tags of the repository.
     * @return Returns the String
     */
    @JsonGetter("git_tags_url")
    public String getGitTagsUrl() {
        return gitTagsUrl;
    }

    /**
     * Setter for GitTagsUrl.
     * A template for the API URL to get information about Git tags of the repository.
     * @param gitTagsUrl Value for String
     */
    @JsonSetter("git_tags_url")
    public void setGitTagsUrl(String gitTagsUrl) {
        this.gitTagsUrl = gitTagsUrl;
    }

    /**
     * Getter for IssueCommentUrl.
     * A template for the API URL to get information about issue comments on the repository.
     * @return Returns the String
     */
    @JsonGetter("issue_comment_url")
    public String getIssueCommentUrl() {
        return issueCommentUrl;
    }

    /**
     * Setter for IssueCommentUrl.
     * A template for the API URL to get information about issue comments on the repository.
     * @param issueCommentUrl Value for String
     */
    @JsonSetter("issue_comment_url")
    public void setIssueCommentUrl(String issueCommentUrl) {
        this.issueCommentUrl = issueCommentUrl;
    }

    /**
     * Getter for IssueEventsUrl.
     * A template for the API URL to get information about issue events on the repository.
     * @return Returns the String
     */
    @JsonGetter("issue_events_url")
    public String getIssueEventsUrl() {
        return issueEventsUrl;
    }

    /**
     * Setter for IssueEventsUrl.
     * A template for the API URL to get information about issue events on the repository.
     * @param issueEventsUrl Value for String
     */
    @JsonSetter("issue_events_url")
    public void setIssueEventsUrl(String issueEventsUrl) {
        this.issueEventsUrl = issueEventsUrl;
    }

    /**
     * Getter for IssuesUrl.
     * A template for the API URL to get information about issues on the repository.
     * @return Returns the String
     */
    @JsonGetter("issues_url")
    public String getIssuesUrl() {
        return issuesUrl;
    }

    /**
     * Setter for IssuesUrl.
     * A template for the API URL to get information about issues on the repository.
     * @param issuesUrl Value for String
     */
    @JsonSetter("issues_url")
    public void setIssuesUrl(String issuesUrl) {
        this.issuesUrl = issuesUrl;
    }

    /**
     * Getter for KeysUrl.
     * A template for the API URL to get information about deploy keys on the repository.
     * @return Returns the String
     */
    @JsonGetter("keys_url")
    public String getKeysUrl() {
        return keysUrl;
    }

    /**
     * Setter for KeysUrl.
     * A template for the API URL to get information about deploy keys on the repository.
     * @param keysUrl Value for String
     */
    @JsonSetter("keys_url")
    public void setKeysUrl(String keysUrl) {
        this.keysUrl = keysUrl;
    }

    /**
     * Getter for LabelsUrl.
     * A template for the API URL to get information about labels of the repository.
     * @return Returns the String
     */
    @JsonGetter("labels_url")
    public String getLabelsUrl() {
        return labelsUrl;
    }

    /**
     * Setter for LabelsUrl.
     * A template for the API URL to get information about labels of the repository.
     * @param labelsUrl Value for String
     */
    @JsonSetter("labels_url")
    public void setLabelsUrl(String labelsUrl) {
        this.labelsUrl = labelsUrl;
    }

    /**
     * Getter for LanguagesUrl.
     * The API URL to get information about the languages of the repository.
     * @return Returns the String
     */
    @JsonGetter("languages_url")
    public String getLanguagesUrl() {
        return languagesUrl;
    }

    /**
     * Setter for LanguagesUrl.
     * The API URL to get information about the languages of the repository.
     * @param languagesUrl Value for String
     */
    @JsonSetter("languages_url")
    public void setLanguagesUrl(String languagesUrl) {
        this.languagesUrl = languagesUrl;
    }

    /**
     * Getter for MergesUrl.
     * The API URL to merge branches in the repository.
     * @return Returns the String
     */
    @JsonGetter("merges_url")
    public String getMergesUrl() {
        return mergesUrl;
    }

    /**
     * Setter for MergesUrl.
     * The API URL to merge branches in the repository.
     * @param mergesUrl Value for String
     */
    @JsonSetter("merges_url")
    public void setMergesUrl(String mergesUrl) {
        this.mergesUrl = mergesUrl;
    }

    /**
     * Getter for MilestonesUrl.
     * A template for the API URL to get information about milestones of the repository.
     * @return Returns the String
     */
    @JsonGetter("milestones_url")
    public String getMilestonesUrl() {
        return milestonesUrl;
    }

    /**
     * Setter for MilestonesUrl.
     * A template for the API URL to get information about milestones of the repository.
     * @param milestonesUrl Value for String
     */
    @JsonSetter("milestones_url")
    public void setMilestonesUrl(String milestonesUrl) {
        this.milestonesUrl = milestonesUrl;
    }

    /**
     * Getter for NotificationsUrl.
     * A template for the API URL to get information about notifications on the repository.
     * @return Returns the String
     */
    @JsonGetter("notifications_url")
    public String getNotificationsUrl() {
        return notificationsUrl;
    }

    /**
     * Setter for NotificationsUrl.
     * A template for the API URL to get information about notifications on the repository.
     * @param notificationsUrl Value for String
     */
    @JsonSetter("notifications_url")
    public void setNotificationsUrl(String notificationsUrl) {
        this.notificationsUrl = notificationsUrl;
    }

    /**
     * Getter for PullsUrl.
     * A template for the API URL to get information about pull requests on the repository.
     * @return Returns the String
     */
    @JsonGetter("pulls_url")
    public String getPullsUrl() {
        return pullsUrl;
    }

    /**
     * Setter for PullsUrl.
     * A template for the API URL to get information about pull requests on the repository.
     * @param pullsUrl Value for String
     */
    @JsonSetter("pulls_url")
    public void setPullsUrl(String pullsUrl) {
        this.pullsUrl = pullsUrl;
    }

    /**
     * Getter for ReleasesUrl.
     * A template for the API URL to get information about releases on the repository.
     * @return Returns the String
     */
    @JsonGetter("releases_url")
    public String getReleasesUrl() {
        return releasesUrl;
    }

    /**
     * Setter for ReleasesUrl.
     * A template for the API URL to get information about releases on the repository.
     * @param releasesUrl Value for String
     */
    @JsonSetter("releases_url")
    public void setReleasesUrl(String releasesUrl) {
        this.releasesUrl = releasesUrl;
    }

    /**
     * Getter for StargazersUrl.
     * The API URL to list the stargazers on the repository.
     * @return Returns the String
     */
    @JsonGetter("stargazers_url")
    public String getStargazersUrl() {
        return stargazersUrl;
    }

    /**
     * Setter for StargazersUrl.
     * The API URL to list the stargazers on the repository.
     * @param stargazersUrl Value for String
     */
    @JsonSetter("stargazers_url")
    public void setStargazersUrl(String stargazersUrl) {
        this.stargazersUrl = stargazersUrl;
    }

    /**
     * Getter for StatusesUrl.
     * A template for the API URL to get information about statuses of a commit.
     * @return Returns the String
     */
    @JsonGetter("statuses_url")
    public String getStatusesUrl() {
        return statusesUrl;
    }

    /**
     * Setter for StatusesUrl.
     * A template for the API URL to get information about statuses of a commit.
     * @param statusesUrl Value for String
     */
    @JsonSetter("statuses_url")
    public void setStatusesUrl(String statusesUrl) {
        this.statusesUrl = statusesUrl;
    }

    /**
     * Getter for SubscribersUrl.
     * The API URL to list the subscribers on the repository.
     * @return Returns the String
     */
    @JsonGetter("subscribers_url")
    public String getSubscribersUrl() {
        return subscribersUrl;
    }

    /**
     * Setter for SubscribersUrl.
     * The API URL to list the subscribers on the repository.
     * @param subscribersUrl Value for String
     */
    @JsonSetter("subscribers_url")
    public void setSubscribersUrl(String subscribersUrl) {
        this.subscribersUrl = subscribersUrl;
    }

    /**
     * Getter for SubscriptionUrl.
     * The API URL to subscribe to notifications for this repository.
     * @return Returns the String
     */
    @JsonGetter("subscription_url")
    public String getSubscriptionUrl() {
        return subscriptionUrl;
    }

    /**
     * Setter for SubscriptionUrl.
     * The API URL to subscribe to notifications for this repository.
     * @param subscriptionUrl Value for String
     */
    @JsonSetter("subscription_url")
    public void setSubscriptionUrl(String subscriptionUrl) {
        this.subscriptionUrl = subscriptionUrl;
    }

    /**
     * Getter for TagsUrl.
     * The API URL to get information about tags on the repository.
     * @return Returns the String
     */
    @JsonGetter("tags_url")
    public String getTagsUrl() {
        return tagsUrl;
    }

    /**
     * Setter for TagsUrl.
     * The API URL to get information about tags on the repository.
     * @param tagsUrl Value for String
     */
    @JsonSetter("tags_url")
    public void setTagsUrl(String tagsUrl) {
        this.tagsUrl = tagsUrl;
    }

    /**
     * Getter for TeamsUrl.
     * The API URL to list the teams on the repository.
     * @return Returns the String
     */
    @JsonGetter("teams_url")
    public String getTeamsUrl() {
        return teamsUrl;
    }

    /**
     * Setter for TeamsUrl.
     * The API URL to list the teams on the repository.
     * @param teamsUrl Value for String
     */
    @JsonSetter("teams_url")
    public void setTeamsUrl(String teamsUrl) {
        this.teamsUrl = teamsUrl;
    }

    /**
     * Getter for TreesUrl.
     * A template for the API URL to create or retrieve a raw Git tree of the repository.
     * @return Returns the String
     */
    @JsonGetter("trees_url")
    public String getTreesUrl() {
        return treesUrl;
    }

    /**
     * Setter for TreesUrl.
     * A template for the API URL to create or retrieve a raw Git tree of the repository.
     * @param treesUrl Value for String
     */
    @JsonSetter("trees_url")
    public void setTreesUrl(String treesUrl) {
        this.treesUrl = treesUrl;
    }

    /**
     * Getter for HooksUrl.
     * The API URL to list the hooks on the repository.
     * @return Returns the String
     */
    @JsonGetter("hooks_url")
    public String getHooksUrl() {
        return hooksUrl;
    }

    /**
     * Setter for HooksUrl.
     * The API URL to list the hooks on the repository.
     * @param hooksUrl Value for String
     */
    @JsonSetter("hooks_url")
    public void setHooksUrl(String hooksUrl) {
        this.hooksUrl = hooksUrl;
    }

    /**
     * Converts this SimpleRepository into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "SimpleRepository [" + "id=" + id + ", nodeId=" + nodeId + ", name=" + name
                + ", fullName=" + fullName + ", owner=" + owner + ", mPrivate=" + mPrivate
                + ", htmlUrl=" + htmlUrl + ", description=" + description + ", fork=" + fork
                + ", url=" + url + ", archiveUrl=" + archiveUrl + ", assigneesUrl=" + assigneesUrl
                + ", blobsUrl=" + blobsUrl + ", branchesUrl=" + branchesUrl + ", collaboratorsUrl="
                + collaboratorsUrl + ", commentsUrl=" + commentsUrl + ", commitsUrl=" + commitsUrl
                + ", compareUrl=" + compareUrl + ", contentsUrl=" + contentsUrl
                + ", contributorsUrl=" + contributorsUrl + ", deploymentsUrl=" + deploymentsUrl
                + ", downloadsUrl=" + downloadsUrl + ", eventsUrl=" + eventsUrl + ", forksUrl="
                + forksUrl + ", gitCommitsUrl=" + gitCommitsUrl + ", gitRefsUrl=" + gitRefsUrl
                + ", gitTagsUrl=" + gitTagsUrl + ", issueCommentUrl=" + issueCommentUrl
                + ", issueEventsUrl=" + issueEventsUrl + ", issuesUrl=" + issuesUrl + ", keysUrl="
                + keysUrl + ", labelsUrl=" + labelsUrl + ", languagesUrl=" + languagesUrl
                + ", mergesUrl=" + mergesUrl + ", milestonesUrl=" + milestonesUrl
                + ", notificationsUrl=" + notificationsUrl + ", pullsUrl=" + pullsUrl
                + ", releasesUrl=" + releasesUrl + ", stargazersUrl=" + stargazersUrl
                + ", statusesUrl=" + statusesUrl + ", subscribersUrl=" + subscribersUrl
                + ", subscriptionUrl=" + subscriptionUrl + ", tagsUrl=" + tagsUrl + ", teamsUrl="
                + teamsUrl + ", treesUrl=" + treesUrl + ", hooksUrl=" + hooksUrl + "]";
    }

    /**
     * Builds a new {@link SimpleRepository.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link SimpleRepository.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, nodeId, name, fullName, owner, mPrivate, htmlUrl,
                description, fork, url, archiveUrl, assigneesUrl, blobsUrl, branchesUrl,
                collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl, contributorsUrl,
                deploymentsUrl, downloadsUrl, eventsUrl, forksUrl, gitCommitsUrl, gitRefsUrl,
                gitTagsUrl, issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl,
                languagesUrl, mergesUrl, milestonesUrl, notificationsUrl, pullsUrl, releasesUrl,
                stargazersUrl, statusesUrl, subscribersUrl, subscriptionUrl, tagsUrl, teamsUrl,
                treesUrl, hooksUrl);
        return builder;
    }

    /**
     * Class to build instances of {@link SimpleRepository}.
     */
    public static class Builder {
        private int id;
        private String nodeId;
        private String name;
        private String fullName;
        private Owner1 owner;
        private boolean mPrivate;
        private String htmlUrl;
        private String description;
        private boolean fork;
        private String url;
        private String archiveUrl;
        private String assigneesUrl;
        private String blobsUrl;
        private String branchesUrl;
        private String collaboratorsUrl;
        private String commentsUrl;
        private String commitsUrl;
        private String compareUrl;
        private String contentsUrl;
        private String contributorsUrl;
        private String deploymentsUrl;
        private String downloadsUrl;
        private String eventsUrl;
        private String forksUrl;
        private String gitCommitsUrl;
        private String gitRefsUrl;
        private String gitTagsUrl;
        private String issueCommentUrl;
        private String issueEventsUrl;
        private String issuesUrl;
        private String keysUrl;
        private String labelsUrl;
        private String languagesUrl;
        private String mergesUrl;
        private String milestonesUrl;
        private String notificationsUrl;
        private String pullsUrl;
        private String releasesUrl;
        private String stargazersUrl;
        private String statusesUrl;
        private String subscribersUrl;
        private String subscriptionUrl;
        private String tagsUrl;
        private String teamsUrl;
        private String treesUrl;
        private String hooksUrl;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  name  String value for name.
         * @param  fullName  String value for fullName.
         * @param  owner  Owner1 value for owner.
         * @param  mPrivate  boolean value for mPrivate.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  description  String value for description.
         * @param  fork  boolean value for fork.
         * @param  url  String value for url.
         * @param  archiveUrl  String value for archiveUrl.
         * @param  assigneesUrl  String value for assigneesUrl.
         * @param  blobsUrl  String value for blobsUrl.
         * @param  branchesUrl  String value for branchesUrl.
         * @param  collaboratorsUrl  String value for collaboratorsUrl.
         * @param  commentsUrl  String value for commentsUrl.
         * @param  commitsUrl  String value for commitsUrl.
         * @param  compareUrl  String value for compareUrl.
         * @param  contentsUrl  String value for contentsUrl.
         * @param  contributorsUrl  String value for contributorsUrl.
         * @param  deploymentsUrl  String value for deploymentsUrl.
         * @param  downloadsUrl  String value for downloadsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @param  forksUrl  String value for forksUrl.
         * @param  gitCommitsUrl  String value for gitCommitsUrl.
         * @param  gitRefsUrl  String value for gitRefsUrl.
         * @param  gitTagsUrl  String value for gitTagsUrl.
         * @param  issueCommentUrl  String value for issueCommentUrl.
         * @param  issueEventsUrl  String value for issueEventsUrl.
         * @param  issuesUrl  String value for issuesUrl.
         * @param  keysUrl  String value for keysUrl.
         * @param  labelsUrl  String value for labelsUrl.
         * @param  languagesUrl  String value for languagesUrl.
         * @param  mergesUrl  String value for mergesUrl.
         * @param  milestonesUrl  String value for milestonesUrl.
         * @param  notificationsUrl  String value for notificationsUrl.
         * @param  pullsUrl  String value for pullsUrl.
         * @param  releasesUrl  String value for releasesUrl.
         * @param  stargazersUrl  String value for stargazersUrl.
         * @param  statusesUrl  String value for statusesUrl.
         * @param  subscribersUrl  String value for subscribersUrl.
         * @param  subscriptionUrl  String value for subscriptionUrl.
         * @param  tagsUrl  String value for tagsUrl.
         * @param  teamsUrl  String value for teamsUrl.
         * @param  treesUrl  String value for treesUrl.
         * @param  hooksUrl  String value for hooksUrl.
         */
        public Builder(int id, String nodeId, String name, String fullName, Owner1 owner,
                boolean mPrivate, String htmlUrl, String description, boolean fork, String url,
                String archiveUrl, String assigneesUrl, String blobsUrl, String branchesUrl,
                String collaboratorsUrl, String commentsUrl, String commitsUrl, String compareUrl,
                String contentsUrl, String contributorsUrl, String deploymentsUrl,
                String downloadsUrl, String eventsUrl, String forksUrl, String gitCommitsUrl,
                String gitRefsUrl, String gitTagsUrl, String issueCommentUrl, String issueEventsUrl,
                String issuesUrl, String keysUrl, String labelsUrl, String languagesUrl,
                String mergesUrl, String milestonesUrl, String notificationsUrl, String pullsUrl,
                String releasesUrl, String stargazersUrl, String statusesUrl, String subscribersUrl,
                String subscriptionUrl, String tagsUrl, String teamsUrl, String treesUrl,
                String hooksUrl) {
            this.id = id;
            this.nodeId = nodeId;
            this.name = name;
            this.fullName = fullName;
            this.owner = owner;
            this.mPrivate = mPrivate;
            this.htmlUrl = htmlUrl;
            this.description = description;
            this.fork = fork;
            this.url = url;
            this.archiveUrl = archiveUrl;
            this.assigneesUrl = assigneesUrl;
            this.blobsUrl = blobsUrl;
            this.branchesUrl = branchesUrl;
            this.collaboratorsUrl = collaboratorsUrl;
            this.commentsUrl = commentsUrl;
            this.commitsUrl = commitsUrl;
            this.compareUrl = compareUrl;
            this.contentsUrl = contentsUrl;
            this.contributorsUrl = contributorsUrl;
            this.deploymentsUrl = deploymentsUrl;
            this.downloadsUrl = downloadsUrl;
            this.eventsUrl = eventsUrl;
            this.forksUrl = forksUrl;
            this.gitCommitsUrl = gitCommitsUrl;
            this.gitRefsUrl = gitRefsUrl;
            this.gitTagsUrl = gitTagsUrl;
            this.issueCommentUrl = issueCommentUrl;
            this.issueEventsUrl = issueEventsUrl;
            this.issuesUrl = issuesUrl;
            this.keysUrl = keysUrl;
            this.labelsUrl = labelsUrl;
            this.languagesUrl = languagesUrl;
            this.mergesUrl = mergesUrl;
            this.milestonesUrl = milestonesUrl;
            this.notificationsUrl = notificationsUrl;
            this.pullsUrl = pullsUrl;
            this.releasesUrl = releasesUrl;
            this.stargazersUrl = stargazersUrl;
            this.statusesUrl = statusesUrl;
            this.subscribersUrl = subscribersUrl;
            this.subscriptionUrl = subscriptionUrl;
            this.tagsUrl = tagsUrl;
            this.teamsUrl = teamsUrl;
            this.treesUrl = treesUrl;
            this.hooksUrl = hooksUrl;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for fullName.
         * @param  fullName  String value for fullName.
         * @return Builder
         */
        public Builder fullName(String fullName) {
            this.fullName = fullName;
            return this;
        }

        /**
         * Setter for owner.
         * @param  owner  Owner1 value for owner.
         * @return Builder
         */
        public Builder owner(Owner1 owner) {
            this.owner = owner;
            return this;
        }

        /**
         * Setter for mPrivate.
         * @param  mPrivate  boolean value for mPrivate.
         * @return Builder
         */
        public Builder mPrivate(boolean mPrivate) {
            this.mPrivate = mPrivate;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for fork.
         * @param  fork  boolean value for fork.
         * @return Builder
         */
        public Builder fork(boolean fork) {
            this.fork = fork;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for archiveUrl.
         * @param  archiveUrl  String value for archiveUrl.
         * @return Builder
         */
        public Builder archiveUrl(String archiveUrl) {
            this.archiveUrl = archiveUrl;
            return this;
        }

        /**
         * Setter for assigneesUrl.
         * @param  assigneesUrl  String value for assigneesUrl.
         * @return Builder
         */
        public Builder assigneesUrl(String assigneesUrl) {
            this.assigneesUrl = assigneesUrl;
            return this;
        }

        /**
         * Setter for blobsUrl.
         * @param  blobsUrl  String value for blobsUrl.
         * @return Builder
         */
        public Builder blobsUrl(String blobsUrl) {
            this.blobsUrl = blobsUrl;
            return this;
        }

        /**
         * Setter for branchesUrl.
         * @param  branchesUrl  String value for branchesUrl.
         * @return Builder
         */
        public Builder branchesUrl(String branchesUrl) {
            this.branchesUrl = branchesUrl;
            return this;
        }

        /**
         * Setter for collaboratorsUrl.
         * @param  collaboratorsUrl  String value for collaboratorsUrl.
         * @return Builder
         */
        public Builder collaboratorsUrl(String collaboratorsUrl) {
            this.collaboratorsUrl = collaboratorsUrl;
            return this;
        }

        /**
         * Setter for commentsUrl.
         * @param  commentsUrl  String value for commentsUrl.
         * @return Builder
         */
        public Builder commentsUrl(String commentsUrl) {
            this.commentsUrl = commentsUrl;
            return this;
        }

        /**
         * Setter for commitsUrl.
         * @param  commitsUrl  String value for commitsUrl.
         * @return Builder
         */
        public Builder commitsUrl(String commitsUrl) {
            this.commitsUrl = commitsUrl;
            return this;
        }

        /**
         * Setter for compareUrl.
         * @param  compareUrl  String value for compareUrl.
         * @return Builder
         */
        public Builder compareUrl(String compareUrl) {
            this.compareUrl = compareUrl;
            return this;
        }

        /**
         * Setter for contentsUrl.
         * @param  contentsUrl  String value for contentsUrl.
         * @return Builder
         */
        public Builder contentsUrl(String contentsUrl) {
            this.contentsUrl = contentsUrl;
            return this;
        }

        /**
         * Setter for contributorsUrl.
         * @param  contributorsUrl  String value for contributorsUrl.
         * @return Builder
         */
        public Builder contributorsUrl(String contributorsUrl) {
            this.contributorsUrl = contributorsUrl;
            return this;
        }

        /**
         * Setter for deploymentsUrl.
         * @param  deploymentsUrl  String value for deploymentsUrl.
         * @return Builder
         */
        public Builder deploymentsUrl(String deploymentsUrl) {
            this.deploymentsUrl = deploymentsUrl;
            return this;
        }

        /**
         * Setter for downloadsUrl.
         * @param  downloadsUrl  String value for downloadsUrl.
         * @return Builder
         */
        public Builder downloadsUrl(String downloadsUrl) {
            this.downloadsUrl = downloadsUrl;
            return this;
        }

        /**
         * Setter for eventsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @return Builder
         */
        public Builder eventsUrl(String eventsUrl) {
            this.eventsUrl = eventsUrl;
            return this;
        }

        /**
         * Setter for forksUrl.
         * @param  forksUrl  String value for forksUrl.
         * @return Builder
         */
        public Builder forksUrl(String forksUrl) {
            this.forksUrl = forksUrl;
            return this;
        }

        /**
         * Setter for gitCommitsUrl.
         * @param  gitCommitsUrl  String value for gitCommitsUrl.
         * @return Builder
         */
        public Builder gitCommitsUrl(String gitCommitsUrl) {
            this.gitCommitsUrl = gitCommitsUrl;
            return this;
        }

        /**
         * Setter for gitRefsUrl.
         * @param  gitRefsUrl  String value for gitRefsUrl.
         * @return Builder
         */
        public Builder gitRefsUrl(String gitRefsUrl) {
            this.gitRefsUrl = gitRefsUrl;
            return this;
        }

        /**
         * Setter for gitTagsUrl.
         * @param  gitTagsUrl  String value for gitTagsUrl.
         * @return Builder
         */
        public Builder gitTagsUrl(String gitTagsUrl) {
            this.gitTagsUrl = gitTagsUrl;
            return this;
        }

        /**
         * Setter for issueCommentUrl.
         * @param  issueCommentUrl  String value for issueCommentUrl.
         * @return Builder
         */
        public Builder issueCommentUrl(String issueCommentUrl) {
            this.issueCommentUrl = issueCommentUrl;
            return this;
        }

        /**
         * Setter for issueEventsUrl.
         * @param  issueEventsUrl  String value for issueEventsUrl.
         * @return Builder
         */
        public Builder issueEventsUrl(String issueEventsUrl) {
            this.issueEventsUrl = issueEventsUrl;
            return this;
        }

        /**
         * Setter for issuesUrl.
         * @param  issuesUrl  String value for issuesUrl.
         * @return Builder
         */
        public Builder issuesUrl(String issuesUrl) {
            this.issuesUrl = issuesUrl;
            return this;
        }

        /**
         * Setter for keysUrl.
         * @param  keysUrl  String value for keysUrl.
         * @return Builder
         */
        public Builder keysUrl(String keysUrl) {
            this.keysUrl = keysUrl;
            return this;
        }

        /**
         * Setter for labelsUrl.
         * @param  labelsUrl  String value for labelsUrl.
         * @return Builder
         */
        public Builder labelsUrl(String labelsUrl) {
            this.labelsUrl = labelsUrl;
            return this;
        }

        /**
         * Setter for languagesUrl.
         * @param  languagesUrl  String value for languagesUrl.
         * @return Builder
         */
        public Builder languagesUrl(String languagesUrl) {
            this.languagesUrl = languagesUrl;
            return this;
        }

        /**
         * Setter for mergesUrl.
         * @param  mergesUrl  String value for mergesUrl.
         * @return Builder
         */
        public Builder mergesUrl(String mergesUrl) {
            this.mergesUrl = mergesUrl;
            return this;
        }

        /**
         * Setter for milestonesUrl.
         * @param  milestonesUrl  String value for milestonesUrl.
         * @return Builder
         */
        public Builder milestonesUrl(String milestonesUrl) {
            this.milestonesUrl = milestonesUrl;
            return this;
        }

        /**
         * Setter for notificationsUrl.
         * @param  notificationsUrl  String value for notificationsUrl.
         * @return Builder
         */
        public Builder notificationsUrl(String notificationsUrl) {
            this.notificationsUrl = notificationsUrl;
            return this;
        }

        /**
         * Setter for pullsUrl.
         * @param  pullsUrl  String value for pullsUrl.
         * @return Builder
         */
        public Builder pullsUrl(String pullsUrl) {
            this.pullsUrl = pullsUrl;
            return this;
        }

        /**
         * Setter for releasesUrl.
         * @param  releasesUrl  String value for releasesUrl.
         * @return Builder
         */
        public Builder releasesUrl(String releasesUrl) {
            this.releasesUrl = releasesUrl;
            return this;
        }

        /**
         * Setter for stargazersUrl.
         * @param  stargazersUrl  String value for stargazersUrl.
         * @return Builder
         */
        public Builder stargazersUrl(String stargazersUrl) {
            this.stargazersUrl = stargazersUrl;
            return this;
        }

        /**
         * Setter for statusesUrl.
         * @param  statusesUrl  String value for statusesUrl.
         * @return Builder
         */
        public Builder statusesUrl(String statusesUrl) {
            this.statusesUrl = statusesUrl;
            return this;
        }

        /**
         * Setter for subscribersUrl.
         * @param  subscribersUrl  String value for subscribersUrl.
         * @return Builder
         */
        public Builder subscribersUrl(String subscribersUrl) {
            this.subscribersUrl = subscribersUrl;
            return this;
        }

        /**
         * Setter for subscriptionUrl.
         * @param  subscriptionUrl  String value for subscriptionUrl.
         * @return Builder
         */
        public Builder subscriptionUrl(String subscriptionUrl) {
            this.subscriptionUrl = subscriptionUrl;
            return this;
        }

        /**
         * Setter for tagsUrl.
         * @param  tagsUrl  String value for tagsUrl.
         * @return Builder
         */
        public Builder tagsUrl(String tagsUrl) {
            this.tagsUrl = tagsUrl;
            return this;
        }

        /**
         * Setter for teamsUrl.
         * @param  teamsUrl  String value for teamsUrl.
         * @return Builder
         */
        public Builder teamsUrl(String teamsUrl) {
            this.teamsUrl = teamsUrl;
            return this;
        }

        /**
         * Setter for treesUrl.
         * @param  treesUrl  String value for treesUrl.
         * @return Builder
         */
        public Builder treesUrl(String treesUrl) {
            this.treesUrl = treesUrl;
            return this;
        }

        /**
         * Setter for hooksUrl.
         * @param  hooksUrl  String value for hooksUrl.
         * @return Builder
         */
        public Builder hooksUrl(String hooksUrl) {
            this.hooksUrl = hooksUrl;
            return this;
        }

        /**
         * Builds a new {@link SimpleRepository} object using the set fields.
         * @return {@link SimpleRepository}
         */
        public SimpleRepository build() {
            return new SimpleRepository(id, nodeId, name, fullName, owner, mPrivate, htmlUrl,
                    description, fork, url, archiveUrl, assigneesUrl, blobsUrl, branchesUrl,
                    collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl,
                    contributorsUrl, deploymentsUrl, downloadsUrl, eventsUrl, forksUrl,
                    gitCommitsUrl, gitRefsUrl, gitTagsUrl, issueCommentUrl, issueEventsUrl,
                    issuesUrl, keysUrl, labelsUrl, languagesUrl, mergesUrl, milestonesUrl,
                    notificationsUrl, pullsUrl, releasesUrl, stargazersUrl, statusesUrl,
                    subscribersUrl, subscriptionUrl, tagsUrl, teamsUrl, treesUrl, hooksUrl);
        }
    }
}

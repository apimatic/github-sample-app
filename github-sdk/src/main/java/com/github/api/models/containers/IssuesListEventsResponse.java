/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.github.api.ApiHelper;
import com.github.api.models.AddedtoProjectIssueEvent;
import com.github.api.models.AssignedIssueEvent;
import com.github.api.models.ConvertedNotetoIssueIssueEvent;
import com.github.api.models.DemilestonedIssueEvent;
import com.github.api.models.LabeledIssueEvent;
import com.github.api.models.LockedIssueEvent;
import com.github.api.models.MilestonedIssueEvent;
import com.github.api.models.MovedColumninProjectIssueEvent;
import com.github.api.models.RemovedfromProjectIssueEvent;
import com.github.api.models.RenamedIssueEvent;
import com.github.api.models.ReviewDismissedIssueEvent;
import com.github.api.models.ReviewRequestRemovedIssueEvent;
import com.github.api.models.ReviewRequestedIssueEvent;
import com.github.api.models.UnassignedIssueEvent;
import com.github.api.models.UnlabeledIssueEvent;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = IssuesListEventsResponse.IssuesListEventsResponseDeserializer.class)
public abstract class IssuesListEventsResponse {
    
    /**
     * Any-of type initialization method.
     * @param labeledIssueEvent LabeledIssueEvent value for labeledIssueEvent.
     * @return The LabeledIssueEventCase object.
     */
    public static IssuesListEventsResponse fromLabeledIssueEvent(
            LabeledIssueEvent labeledIssueEvent) {
        return labeledIssueEvent == null ? null : new LabeledIssueEventCase(labeledIssueEvent);
    }

    /**
     * Any-of type initialization method.
     * @param unlabeledIssueEvent UnlabeledIssueEvent value for unlabeledIssueEvent.
     * @return The UnlabeledIssueEventCase object.
     */
    public static IssuesListEventsResponse fromUnlabeledIssueEvent(
            UnlabeledIssueEvent unlabeledIssueEvent) {
        return unlabeledIssueEvent == null ? null : new UnlabeledIssueEventCase(unlabeledIssueEvent);
    }

    /**
     * Any-of type initialization method.
     * @param assignedIssueEvent AssignedIssueEvent value for assignedIssueEvent.
     * @return The AssignedIssueEventCase object.
     */
    public static IssuesListEventsResponse fromAssignedIssueEvent(
            AssignedIssueEvent assignedIssueEvent) {
        return assignedIssueEvent == null ? null : new AssignedIssueEventCase(assignedIssueEvent);
    }

    /**
     * Any-of type initialization method.
     * @param unassignedIssueEvent UnassignedIssueEvent value for unassignedIssueEvent.
     * @return The UnassignedIssueEventCase object.
     */
    public static IssuesListEventsResponse fromUnassignedIssueEvent(
            UnassignedIssueEvent unassignedIssueEvent) {
        return unassignedIssueEvent == null ? null : new UnassignedIssueEventCase(unassignedIssueEvent);
    }

    /**
     * Any-of type initialization method.
     * @param milestonedIssueEvent MilestonedIssueEvent value for milestonedIssueEvent.
     * @return The MilestonedIssueEventCase object.
     */
    public static IssuesListEventsResponse fromMilestonedIssueEvent(
            MilestonedIssueEvent milestonedIssueEvent) {
        return milestonedIssueEvent == null ? null : new MilestonedIssueEventCase(milestonedIssueEvent);
    }

    /**
     * Any-of type initialization method.
     * @param demilestonedIssueEvent DemilestonedIssueEvent value for demilestonedIssueEvent.
     * @return The DemilestonedIssueEventCase object.
     */
    public static IssuesListEventsResponse fromDemilestonedIssueEvent(
            DemilestonedIssueEvent demilestonedIssueEvent) {
        return demilestonedIssueEvent == null ? null : new DemilestonedIssueEventCase(demilestonedIssueEvent);
    }

    /**
     * Any-of type initialization method.
     * @param renamedIssueEvent RenamedIssueEvent value for renamedIssueEvent.
     * @return The RenamedIssueEventCase object.
     */
    public static IssuesListEventsResponse fromRenamedIssueEvent(
            RenamedIssueEvent renamedIssueEvent) {
        return renamedIssueEvent == null ? null : new RenamedIssueEventCase(renamedIssueEvent);
    }

    /**
     * Any-of type initialization method.
     * @param reviewRequestedIssueEvent ReviewRequestedIssueEvent value for reviewRequestedIssueEvent.
     * @return The ReviewRequestedIssueEventCase object.
     */
    public static IssuesListEventsResponse fromReviewRequestedIssueEvent(
            ReviewRequestedIssueEvent reviewRequestedIssueEvent) {
        return reviewRequestedIssueEvent == null ? null : new ReviewRequestedIssueEventCase(reviewRequestedIssueEvent);
    }

    /**
     * Any-of type initialization method.
     * @param reviewRequestRemovedIssueEvent ReviewRequestRemovedIssueEvent value for reviewRequestRemovedIssueEvent.
     * @return The ReviewRequestRemovedIssueEventCase object.
     */
    public static IssuesListEventsResponse fromReviewRequestRemovedIssueEvent(
            ReviewRequestRemovedIssueEvent reviewRequestRemovedIssueEvent) {
        return reviewRequestRemovedIssueEvent == null ? null : new ReviewRequestRemovedIssueEventCase(reviewRequestRemovedIssueEvent);
    }

    /**
     * Any-of type initialization method.
     * @param reviewDismissedIssueEvent ReviewDismissedIssueEvent value for reviewDismissedIssueEvent.
     * @return The ReviewDismissedIssueEventCase object.
     */
    public static IssuesListEventsResponse fromReviewDismissedIssueEvent(
            ReviewDismissedIssueEvent reviewDismissedIssueEvent) {
        return reviewDismissedIssueEvent == null ? null : new ReviewDismissedIssueEventCase(reviewDismissedIssueEvent);
    }

    /**
     * Any-of type initialization method.
     * @param lockedIssueEvent LockedIssueEvent value for lockedIssueEvent.
     * @return The LockedIssueEventCase object.
     */
    public static IssuesListEventsResponse fromLockedIssueEvent(LockedIssueEvent lockedIssueEvent) {
        return lockedIssueEvent == null ? null : new LockedIssueEventCase(lockedIssueEvent);
    }

    /**
     * Any-of type initialization method.
     * @param addedtoProjectIssueEvent AddedtoProjectIssueEvent value for addedtoProjectIssueEvent.
     * @return The AddedtoProjectIssueEventCase object.
     */
    public static IssuesListEventsResponse fromAddedtoProjectIssueEvent(
            AddedtoProjectIssueEvent addedtoProjectIssueEvent) {
        return addedtoProjectIssueEvent == null ? null : new AddedtoProjectIssueEventCase(addedtoProjectIssueEvent);
    }

    /**
     * Any-of type initialization method.
     * @param movedColumninProjectIssueEvent MovedColumninProjectIssueEvent value for movedColumninProjectIssueEvent.
     * @return The MovedColumninProjectIssueEventCase object.
     */
    public static IssuesListEventsResponse fromMovedColumninProjectIssueEvent(
            MovedColumninProjectIssueEvent movedColumninProjectIssueEvent) {
        return movedColumninProjectIssueEvent == null ? null : new MovedColumninProjectIssueEventCase(movedColumninProjectIssueEvent);
    }

    /**
     * Any-of type initialization method.
     * @param removedfromProjectIssueEvent RemovedfromProjectIssueEvent value for removedfromProjectIssueEvent.
     * @return The RemovedfromProjectIssueEventCase object.
     */
    public static IssuesListEventsResponse fromRemovedfromProjectIssueEvent(
            RemovedfromProjectIssueEvent removedfromProjectIssueEvent) {
        return removedfromProjectIssueEvent == null ? null : new RemovedfromProjectIssueEventCase(removedfromProjectIssueEvent);
    }

    /**
     * Any-of type initialization method.
     * @param convertedNotetoIssueIssueEvent ConvertedNotetoIssueIssueEvent value for convertedNotetoIssueIssueEvent.
     * @return The ConvertedNotetoIssueIssueEventCase object.
     */
    public static IssuesListEventsResponse fromConvertedNotetoIssueIssueEvent(
            ConvertedNotetoIssueIssueEvent convertedNotetoIssueIssueEvent) {
        return convertedNotetoIssueIssueEvent == null ? null : new ConvertedNotetoIssueIssueEventCase(convertedNotetoIssueIssueEvent);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R labeledIssueEvent(LabeledIssueEvent labeledIssueEvent);

        R unlabeledIssueEvent(UnlabeledIssueEvent unlabeledIssueEvent);

        R assignedIssueEvent(AssignedIssueEvent assignedIssueEvent);

        R unassignedIssueEvent(UnassignedIssueEvent unassignedIssueEvent);

        R milestonedIssueEvent(MilestonedIssueEvent milestonedIssueEvent);

        R demilestonedIssueEvent(DemilestonedIssueEvent demilestonedIssueEvent);

        R renamedIssueEvent(RenamedIssueEvent renamedIssueEvent);

        R reviewRequestedIssueEvent(ReviewRequestedIssueEvent reviewRequestedIssueEvent);

        R reviewRequestRemovedIssueEvent(ReviewRequestRemovedIssueEvent reviewRequestRemovedIssueEvent);

        R reviewDismissedIssueEvent(ReviewDismissedIssueEvent reviewDismissedIssueEvent);

        R lockedIssueEvent(LockedIssueEvent lockedIssueEvent);

        R addedtoProjectIssueEvent(AddedtoProjectIssueEvent addedtoProjectIssueEvent);

        R movedColumninProjectIssueEvent(MovedColumninProjectIssueEvent movedColumninProjectIssueEvent);

        R removedfromProjectIssueEvent(RemovedfromProjectIssueEvent removedfromProjectIssueEvent);

        R convertedNotetoIssueIssueEvent(ConvertedNotetoIssueIssueEvent convertedNotetoIssueIssueEvent);
    }

    /**
     * This is a implementation class for LabeledIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class LabeledIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private LabeledIssueEvent labeledIssueEvent;

        LabeledIssueEventCase(LabeledIssueEvent labeledIssueEvent) {
            this.labeledIssueEvent = labeledIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.labeledIssueEvent(this.labeledIssueEvent);
        }

        @JsonCreator
        private LabeledIssueEventCase(JsonNode jsonNode) throws IOException {
            this.labeledIssueEvent = ApiHelper.deserialize(jsonNode,
                LabeledIssueEvent.class);
        }

        @Override
        public String toString() {
            return labeledIssueEvent.toString();
        }
    }

    /**
     * This is a implementation class for UnlabeledIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class UnlabeledIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private UnlabeledIssueEvent unlabeledIssueEvent;

        UnlabeledIssueEventCase(UnlabeledIssueEvent unlabeledIssueEvent) {
            this.unlabeledIssueEvent = unlabeledIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.unlabeledIssueEvent(this.unlabeledIssueEvent);
        }

        @JsonCreator
        private UnlabeledIssueEventCase(JsonNode jsonNode) throws IOException {
            this.unlabeledIssueEvent = ApiHelper.deserialize(jsonNode,
                UnlabeledIssueEvent.class);
        }

        @Override
        public String toString() {
            return unlabeledIssueEvent.toString();
        }
    }

    /**
     * This is a implementation class for AssignedIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class AssignedIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private AssignedIssueEvent assignedIssueEvent;

        AssignedIssueEventCase(AssignedIssueEvent assignedIssueEvent) {
            this.assignedIssueEvent = assignedIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.assignedIssueEvent(this.assignedIssueEvent);
        }

        @JsonCreator
        private AssignedIssueEventCase(JsonNode jsonNode) throws IOException {
            this.assignedIssueEvent = ApiHelper.deserialize(jsonNode,
                AssignedIssueEvent.class);
        }

        @Override
        public String toString() {
            return assignedIssueEvent.toString();
        }
    }

    /**
     * This is a implementation class for UnassignedIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class UnassignedIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private UnassignedIssueEvent unassignedIssueEvent;

        UnassignedIssueEventCase(UnassignedIssueEvent unassignedIssueEvent) {
            this.unassignedIssueEvent = unassignedIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.unassignedIssueEvent(this.unassignedIssueEvent);
        }

        @JsonCreator
        private UnassignedIssueEventCase(JsonNode jsonNode) throws IOException {
            this.unassignedIssueEvent = ApiHelper.deserialize(jsonNode,
                UnassignedIssueEvent.class);
        }

        @Override
        public String toString() {
            return unassignedIssueEvent.toString();
        }
    }

    /**
     * This is a implementation class for MilestonedIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class MilestonedIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private MilestonedIssueEvent milestonedIssueEvent;

        MilestonedIssueEventCase(MilestonedIssueEvent milestonedIssueEvent) {
            this.milestonedIssueEvent = milestonedIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.milestonedIssueEvent(this.milestonedIssueEvent);
        }

        @JsonCreator
        private MilestonedIssueEventCase(JsonNode jsonNode) throws IOException {
            this.milestonedIssueEvent = ApiHelper.deserialize(jsonNode,
                MilestonedIssueEvent.class);
        }

        @Override
        public String toString() {
            return milestonedIssueEvent.toString();
        }
    }

    /**
     * This is a implementation class for DemilestonedIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class DemilestonedIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private DemilestonedIssueEvent demilestonedIssueEvent;

        DemilestonedIssueEventCase(DemilestonedIssueEvent demilestonedIssueEvent) {
            this.demilestonedIssueEvent = demilestonedIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.demilestonedIssueEvent(this.demilestonedIssueEvent);
        }

        @JsonCreator
        private DemilestonedIssueEventCase(JsonNode jsonNode) throws IOException {
            this.demilestonedIssueEvent = ApiHelper.deserialize(jsonNode,
                DemilestonedIssueEvent.class);
        }

        @Override
        public String toString() {
            return demilestonedIssueEvent.toString();
        }
    }

    /**
     * This is a implementation class for RenamedIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class RenamedIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private RenamedIssueEvent renamedIssueEvent;

        RenamedIssueEventCase(RenamedIssueEvent renamedIssueEvent) {
            this.renamedIssueEvent = renamedIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.renamedIssueEvent(this.renamedIssueEvent);
        }

        @JsonCreator
        private RenamedIssueEventCase(JsonNode jsonNode) throws IOException {
            this.renamedIssueEvent = ApiHelper.deserialize(jsonNode,
                RenamedIssueEvent.class);
        }

        @Override
        public String toString() {
            return renamedIssueEvent.toString();
        }
    }

    /**
     * This is a implementation class for ReviewRequestedIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class ReviewRequestedIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private ReviewRequestedIssueEvent reviewRequestedIssueEvent;

        ReviewRequestedIssueEventCase(ReviewRequestedIssueEvent reviewRequestedIssueEvent) {
            this.reviewRequestedIssueEvent = reviewRequestedIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.reviewRequestedIssueEvent(this.reviewRequestedIssueEvent);
        }

        @JsonCreator
        private ReviewRequestedIssueEventCase(JsonNode jsonNode) throws IOException {
            this.reviewRequestedIssueEvent = ApiHelper.deserialize(jsonNode,
                ReviewRequestedIssueEvent.class);
        }

        @Override
        public String toString() {
            return reviewRequestedIssueEvent.toString();
        }
    }

    /**
     * This is a implementation class for ReviewRequestRemovedIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class ReviewRequestRemovedIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private ReviewRequestRemovedIssueEvent reviewRequestRemovedIssueEvent;

        ReviewRequestRemovedIssueEventCase(ReviewRequestRemovedIssueEvent reviewRequestRemovedIssueEvent) {
            this.reviewRequestRemovedIssueEvent = reviewRequestRemovedIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.reviewRequestRemovedIssueEvent(this.reviewRequestRemovedIssueEvent);
        }

        @JsonCreator
        private ReviewRequestRemovedIssueEventCase(JsonNode jsonNode) throws IOException {
            this.reviewRequestRemovedIssueEvent = ApiHelper.deserialize(jsonNode,
                ReviewRequestRemovedIssueEvent.class);
        }

        @Override
        public String toString() {
            return reviewRequestRemovedIssueEvent.toString();
        }
    }

    /**
     * This is a implementation class for ReviewDismissedIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class ReviewDismissedIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private ReviewDismissedIssueEvent reviewDismissedIssueEvent;

        ReviewDismissedIssueEventCase(ReviewDismissedIssueEvent reviewDismissedIssueEvent) {
            this.reviewDismissedIssueEvent = reviewDismissedIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.reviewDismissedIssueEvent(this.reviewDismissedIssueEvent);
        }

        @JsonCreator
        private ReviewDismissedIssueEventCase(JsonNode jsonNode) throws IOException {
            this.reviewDismissedIssueEvent = ApiHelper.deserialize(jsonNode,
                ReviewDismissedIssueEvent.class);
        }

        @Override
        public String toString() {
            return reviewDismissedIssueEvent.toString();
        }
    }

    /**
     * This is a implementation class for LockedIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class LockedIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private LockedIssueEvent lockedIssueEvent;

        LockedIssueEventCase(LockedIssueEvent lockedIssueEvent) {
            this.lockedIssueEvent = lockedIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.lockedIssueEvent(this.lockedIssueEvent);
        }

        @JsonCreator
        private LockedIssueEventCase(JsonNode jsonNode) throws IOException {
            this.lockedIssueEvent = ApiHelper.deserialize(jsonNode,
                LockedIssueEvent.class);
        }

        @Override
        public String toString() {
            return lockedIssueEvent.toString();
        }
    }

    /**
     * This is a implementation class for AddedtoProjectIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class AddedtoProjectIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private AddedtoProjectIssueEvent addedtoProjectIssueEvent;

        AddedtoProjectIssueEventCase(AddedtoProjectIssueEvent addedtoProjectIssueEvent) {
            this.addedtoProjectIssueEvent = addedtoProjectIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.addedtoProjectIssueEvent(this.addedtoProjectIssueEvent);
        }

        @JsonCreator
        private AddedtoProjectIssueEventCase(JsonNode jsonNode) throws IOException {
            this.addedtoProjectIssueEvent = ApiHelper.deserialize(jsonNode,
                AddedtoProjectIssueEvent.class);
        }

        @Override
        public String toString() {
            return addedtoProjectIssueEvent.toString();
        }
    }

    /**
     * This is a implementation class for MovedColumninProjectIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class MovedColumninProjectIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private MovedColumninProjectIssueEvent movedColumninProjectIssueEvent;

        MovedColumninProjectIssueEventCase(MovedColumninProjectIssueEvent movedColumninProjectIssueEvent) {
            this.movedColumninProjectIssueEvent = movedColumninProjectIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.movedColumninProjectIssueEvent(this.movedColumninProjectIssueEvent);
        }

        @JsonCreator
        private MovedColumninProjectIssueEventCase(JsonNode jsonNode) throws IOException {
            this.movedColumninProjectIssueEvent = ApiHelper.deserialize(jsonNode,
                MovedColumninProjectIssueEvent.class);
        }

        @Override
        public String toString() {
            return movedColumninProjectIssueEvent.toString();
        }
    }

    /**
     * This is a implementation class for RemovedfromProjectIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class RemovedfromProjectIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private RemovedfromProjectIssueEvent removedfromProjectIssueEvent;

        RemovedfromProjectIssueEventCase(RemovedfromProjectIssueEvent removedfromProjectIssueEvent) {
            this.removedfromProjectIssueEvent = removedfromProjectIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.removedfromProjectIssueEvent(this.removedfromProjectIssueEvent);
        }

        @JsonCreator
        private RemovedfromProjectIssueEventCase(JsonNode jsonNode) throws IOException {
            this.removedfromProjectIssueEvent = ApiHelper.deserialize(jsonNode,
                RemovedfromProjectIssueEvent.class);
        }

        @Override
        public String toString() {
            return removedfromProjectIssueEvent.toString();
        }
    }

    /**
     * This is a implementation class for ConvertedNotetoIssueIssueEventCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class ConvertedNotetoIssueIssueEventCase extends IssuesListEventsResponse {

        @JsonValue
        private ConvertedNotetoIssueIssueEvent convertedNotetoIssueIssueEvent;

        ConvertedNotetoIssueIssueEventCase(ConvertedNotetoIssueIssueEvent convertedNotetoIssueIssueEvent) {
            this.convertedNotetoIssueIssueEvent = convertedNotetoIssueIssueEvent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.convertedNotetoIssueIssueEvent(this.convertedNotetoIssueIssueEvent);
        }

        @JsonCreator
        private ConvertedNotetoIssueIssueEventCase(JsonNode jsonNode) throws IOException {
            this.convertedNotetoIssueIssueEvent = ApiHelper.deserialize(jsonNode,
                ConvertedNotetoIssueIssueEvent.class);
        }

        @Override
        public String toString() {
            return convertedNotetoIssueIssueEvent.toString();
        }
    }

    /**
     * This is a custom deserializer class for IssuesListEventsResponse.
     */
    protected static class IssuesListEventsResponseDeserializer
            extends JsonDeserializer<IssuesListEventsResponse> {

        @Override
        public IssuesListEventsResponse deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(LabeledIssueEventCase.class,
                    UnlabeledIssueEventCase.class, AssignedIssueEventCase.class,
                    UnassignedIssueEventCase.class, MilestonedIssueEventCase.class,
                    DemilestonedIssueEventCase.class, RenamedIssueEventCase.class,
                    ReviewRequestedIssueEventCase.class, ReviewRequestRemovedIssueEventCase.class,
                    ReviewDismissedIssueEventCase.class, LockedIssueEventCase.class,
                    AddedtoProjectIssueEventCase.class, MovedColumninProjectIssueEventCase.class,
                    RemovedfromProjectIssueEventCase.class,
                    ConvertedNotetoIssueIssueEventCase.class), false);
        }
    }

}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for TopicSearchResultItem type.
 */
public class TopicSearchResultItem {
    private String name;
    private String displayName;
    private String shortDescription;
    private String description;
    private String createdBy;
    private String released;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private boolean featured;
    private boolean curated;
    private double score;
    private OptionalNullable<Integer> repositoryCount;
    private OptionalNullable<String> logoUrl;
    private List<SearchResultTextMatch> textMatches;
    private OptionalNullable<List<Related>> related;
    private OptionalNullable<List<Alias>> aliases;

    /**
     * Default constructor.
     */
    public TopicSearchResultItem() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  displayName  String value for displayName.
     * @param  shortDescription  String value for shortDescription.
     * @param  description  String value for description.
     * @param  createdBy  String value for createdBy.
     * @param  released  String value for released.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  featured  boolean value for featured.
     * @param  curated  boolean value for curated.
     * @param  score  double value for score.
     * @param  repositoryCount  Integer value for repositoryCount.
     * @param  logoUrl  String value for logoUrl.
     * @param  textMatches  List of SearchResultTextMatch value for textMatches.
     * @param  related  List of Related value for related.
     * @param  aliases  List of Alias value for aliases.
     */
    public TopicSearchResultItem(
            String name,
            String displayName,
            String shortDescription,
            String description,
            String createdBy,
            String released,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            boolean featured,
            boolean curated,
            double score,
            Integer repositoryCount,
            String logoUrl,
            List<SearchResultTextMatch> textMatches,
            List<Related> related,
            List<Alias> aliases) {
        this.name = name;
        this.displayName = displayName;
        this.shortDescription = shortDescription;
        this.description = description;
        this.createdBy = createdBy;
        this.released = released;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.featured = featured;
        this.curated = curated;
        this.score = score;
        this.repositoryCount = OptionalNullable.of(repositoryCount);
        this.logoUrl = OptionalNullable.of(logoUrl);
        this.textMatches = textMatches;
        this.related = OptionalNullable.of(related);
        this.aliases = OptionalNullable.of(aliases);
    }

    /**
     * Internal initialization constructor.
     */
    protected TopicSearchResultItem(String name, String displayName, String shortDescription,
            String description, String createdBy, String released, LocalDateTime createdAt,
            LocalDateTime updatedAt, boolean featured, boolean curated, double score,
            OptionalNullable<Integer> repositoryCount, OptionalNullable<String> logoUrl,
            List<SearchResultTextMatch> textMatches, OptionalNullable<List<Related>> related,
            OptionalNullable<List<Alias>> aliases) {
        this.name = name;
        this.displayName = displayName;
        this.shortDescription = shortDescription;
        this.description = description;
        this.createdBy = createdBy;
        this.released = released;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.featured = featured;
        this.curated = curated;
        this.score = score;
        this.repositoryCount = repositoryCount;
        this.logoUrl = logoUrl;
        this.textMatches = textMatches;
        this.related = related;
        this.aliases = aliases;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for DisplayName.
     * @return Returns the String
     */
    @JsonGetter("display_name")
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Setter for DisplayName.
     * @param displayName Value for String
     */
    @JsonSetter("display_name")
    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    /**
     * Getter for ShortDescription.
     * @return Returns the String
     */
    @JsonGetter("short_description")
    public String getShortDescription() {
        return shortDescription;
    }

    /**
     * Setter for ShortDescription.
     * @param shortDescription Value for String
     */
    @JsonSetter("short_description")
    public void setShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for CreatedBy.
     * @return Returns the String
     */
    @JsonGetter("created_by")
    public String getCreatedBy() {
        return createdBy;
    }

    /**
     * Setter for CreatedBy.
     * @param createdBy Value for String
     */
    @JsonSetter("created_by")
    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Getter for Released.
     * @return Returns the String
     */
    @JsonGetter("released")
    public String getReleased() {
        return released;
    }

    /**
     * Setter for Released.
     * @param released Value for String
     */
    @JsonSetter("released")
    public void setReleased(String released) {
        this.released = released;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Featured.
     * @return Returns the boolean
     */
    @JsonGetter("featured")
    public boolean getFeatured() {
        return featured;
    }

    /**
     * Setter for Featured.
     * @param featured Value for boolean
     */
    @JsonSetter("featured")
    public void setFeatured(boolean featured) {
        this.featured = featured;
    }

    /**
     * Getter for Curated.
     * @return Returns the boolean
     */
    @JsonGetter("curated")
    public boolean getCurated() {
        return curated;
    }

    /**
     * Setter for Curated.
     * @param curated Value for boolean
     */
    @JsonSetter("curated")
    public void setCurated(boolean curated) {
        this.curated = curated;
    }

    /**
     * Getter for Score.
     * @return Returns the double
     */
    @JsonGetter("score")
    public double getScore() {
        return score;
    }

    /**
     * Setter for Score.
     * @param score Value for double
     */
    @JsonSetter("score")
    public void setScore(double score) {
        this.score = score;
    }

    /**
     * Internal Getter for RepositoryCount.
     * @return Returns the Internal Integer
     */
    @JsonGetter("repository_count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetRepositoryCount() {
        return this.repositoryCount;
    }

    /**
     * Getter for RepositoryCount.
     * @return Returns the Integer
     */
    public Integer getRepositoryCount() {
        return OptionalNullable.getFrom(repositoryCount);
    }

    /**
     * Setter for RepositoryCount.
     * @param repositoryCount Value for Integer
     */
    @JsonSetter("repository_count")
    public void setRepositoryCount(Integer repositoryCount) {
        this.repositoryCount = OptionalNullable.of(repositoryCount);
    }

    /**
     * UnSetter for RepositoryCount.
     */
    public void unsetRepositoryCount() {
        repositoryCount = null;
    }

    /**
     * Internal Getter for LogoUrl.
     * @return Returns the Internal String
     */
    @JsonGetter("logo_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLogoUrl() {
        return this.logoUrl;
    }

    /**
     * Getter for LogoUrl.
     * @return Returns the String
     */
    public String getLogoUrl() {
        return OptionalNullable.getFrom(logoUrl);
    }

    /**
     * Setter for LogoUrl.
     * @param logoUrl Value for String
     */
    @JsonSetter("logo_url")
    public void setLogoUrl(String logoUrl) {
        this.logoUrl = OptionalNullable.of(logoUrl);
    }

    /**
     * UnSetter for LogoUrl.
     */
    public void unsetLogoUrl() {
        logoUrl = null;
    }

    /**
     * Getter for TextMatches.
     * @return Returns the List of SearchResultTextMatch
     */
    @JsonGetter("text_matches")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<SearchResultTextMatch> getTextMatches() {
        return textMatches;
    }

    /**
     * Setter for TextMatches.
     * @param textMatches Value for List of SearchResultTextMatch
     */
    @JsonSetter("text_matches")
    public void setTextMatches(List<SearchResultTextMatch> textMatches) {
        this.textMatches = textMatches;
    }

    /**
     * Internal Getter for Related.
     * @return Returns the Internal List of Related
     */
    @JsonGetter("related")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<Related>> internalGetRelated() {
        return this.related;
    }

    /**
     * Getter for Related.
     * @return Returns the List of Related
     */
    public List<Related> getRelated() {
        return OptionalNullable.getFrom(related);
    }

    /**
     * Setter for Related.
     * @param related Value for List of Related
     */
    @JsonSetter("related")
    public void setRelated(List<Related> related) {
        this.related = OptionalNullable.of(related);
    }

    /**
     * UnSetter for Related.
     */
    public void unsetRelated() {
        related = null;
    }

    /**
     * Internal Getter for Aliases.
     * @return Returns the Internal List of Alias
     */
    @JsonGetter("aliases")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<Alias>> internalGetAliases() {
        return this.aliases;
    }

    /**
     * Getter for Aliases.
     * @return Returns the List of Alias
     */
    public List<Alias> getAliases() {
        return OptionalNullable.getFrom(aliases);
    }

    /**
     * Setter for Aliases.
     * @param aliases Value for List of Alias
     */
    @JsonSetter("aliases")
    public void setAliases(List<Alias> aliases) {
        this.aliases = OptionalNullable.of(aliases);
    }

    /**
     * UnSetter for Aliases.
     */
    public void unsetAliases() {
        aliases = null;
    }

    /**
     * Converts this TopicSearchResultItem into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TopicSearchResultItem [" + "name=" + name + ", displayName=" + displayName
                + ", shortDescription=" + shortDescription + ", description=" + description
                + ", createdBy=" + createdBy + ", released=" + released + ", createdAt=" + createdAt
                + ", updatedAt=" + updatedAt + ", featured=" + featured + ", curated=" + curated
                + ", score=" + score + ", repositoryCount=" + repositoryCount + ", logoUrl="
                + logoUrl + ", textMatches=" + textMatches + ", related=" + related + ", aliases="
                + aliases + "]";
    }

    /**
     * Builds a new {@link TopicSearchResultItem.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TopicSearchResultItem.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(name, displayName, shortDescription, description, createdBy,
                released, createdAt, updatedAt, featured, curated, score)
                .textMatches(getTextMatches());
        builder.repositoryCount = internalGetRepositoryCount();
        builder.logoUrl = internalGetLogoUrl();
        builder.related = internalGetRelated();
        builder.aliases = internalGetAliases();
        return builder;
    }

    /**
     * Class to build instances of {@link TopicSearchResultItem}.
     */
    public static class Builder {
        private String name;
        private String displayName;
        private String shortDescription;
        private String description;
        private String createdBy;
        private String released;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private boolean featured;
        private boolean curated;
        private double score;
        private OptionalNullable<Integer> repositoryCount;
        private OptionalNullable<String> logoUrl;
        private List<SearchResultTextMatch> textMatches;
        private OptionalNullable<List<Related>> related;
        private OptionalNullable<List<Alias>> aliases;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  name  String value for name.
         * @param  displayName  String value for displayName.
         * @param  shortDescription  String value for shortDescription.
         * @param  description  String value for description.
         * @param  createdBy  String value for createdBy.
         * @param  released  String value for released.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  featured  boolean value for featured.
         * @param  curated  boolean value for curated.
         * @param  score  double value for score.
         */
        public Builder(String name, String displayName, String shortDescription, String description,
                String createdBy, String released, LocalDateTime createdAt, LocalDateTime updatedAt,
                boolean featured, boolean curated, double score) {
            this.name = name;
            this.displayName = displayName;
            this.shortDescription = shortDescription;
            this.description = description;
            this.createdBy = createdBy;
            this.released = released;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.featured = featured;
            this.curated = curated;
            this.score = score;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for displayName.
         * @param  displayName  String value for displayName.
         * @return Builder
         */
        public Builder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }

        /**
         * Setter for shortDescription.
         * @param  shortDescription  String value for shortDescription.
         * @return Builder
         */
        public Builder shortDescription(String shortDescription) {
            this.shortDescription = shortDescription;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for createdBy.
         * @param  createdBy  String value for createdBy.
         * @return Builder
         */
        public Builder createdBy(String createdBy) {
            this.createdBy = createdBy;
            return this;
        }

        /**
         * Setter for released.
         * @param  released  String value for released.
         * @return Builder
         */
        public Builder released(String released) {
            this.released = released;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for featured.
         * @param  featured  boolean value for featured.
         * @return Builder
         */
        public Builder featured(boolean featured) {
            this.featured = featured;
            return this;
        }

        /**
         * Setter for curated.
         * @param  curated  boolean value for curated.
         * @return Builder
         */
        public Builder curated(boolean curated) {
            this.curated = curated;
            return this;
        }

        /**
         * Setter for score.
         * @param  score  double value for score.
         * @return Builder
         */
        public Builder score(double score) {
            this.score = score;
            return this;
        }

        /**
         * Setter for repositoryCount.
         * @param  repositoryCount  Integer value for repositoryCount.
         * @return Builder
         */
        public Builder repositoryCount(Integer repositoryCount) {
            this.repositoryCount = OptionalNullable.of(repositoryCount);
            return this;
        }

        /**
         * UnSetter for repositoryCount.
         * @return Builder
         */
        public Builder unsetRepositoryCount() {
            repositoryCount = null;
            return this;
        }

        /**
         * Setter for logoUrl.
         * @param  logoUrl  String value for logoUrl.
         * @return Builder
         */
        public Builder logoUrl(String logoUrl) {
            this.logoUrl = OptionalNullable.of(logoUrl);
            return this;
        }

        /**
         * UnSetter for logoUrl.
         * @return Builder
         */
        public Builder unsetLogoUrl() {
            logoUrl = null;
            return this;
        }

        /**
         * Setter for textMatches.
         * @param  textMatches  List of SearchResultTextMatch value for textMatches.
         * @return Builder
         */
        public Builder textMatches(List<SearchResultTextMatch> textMatches) {
            this.textMatches = textMatches;
            return this;
        }

        /**
         * Setter for related.
         * @param  related  List of Related value for related.
         * @return Builder
         */
        public Builder related(List<Related> related) {
            this.related = OptionalNullable.of(related);
            return this;
        }

        /**
         * UnSetter for related.
         * @return Builder
         */
        public Builder unsetRelated() {
            related = null;
            return this;
        }

        /**
         * Setter for aliases.
         * @param  aliases  List of Alias value for aliases.
         * @return Builder
         */
        public Builder aliases(List<Alias> aliases) {
            this.aliases = OptionalNullable.of(aliases);
            return this;
        }

        /**
         * UnSetter for aliases.
         * @return Builder
         */
        public Builder unsetAliases() {
            aliases = null;
            return this;
        }

        /**
         * Builds a new {@link TopicSearchResultItem} object using the set fields.
         * @return {@link TopicSearchResultItem}
         */
        public TopicSearchResultItem build() {
            return new TopicSearchResultItem(name, displayName, shortDescription, description,
                    createdBy, released, createdAt, updatedAt, featured, curated, score,
                    repositoryCount, logoUrl, textMatches, related, aliases);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

/**
 * This is a model class for Gist type.
 */
public class Gist {
    private String url;
    private String forksUrl;
    private String commitsUrl;
    private String id;
    private String nodeId;
    private String gitPullUrl;
    private String gitPushUrl;
    private String htmlUrl;
    private Map<String, Files> files;
    private boolean mPublic;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private String description;
    private int comments;
    private Object user;
    private String commentsUrl;
    private Object owner;
    private Boolean truncated;
    private List<Object> forks;
    private List<Object> history;

    /**
     * Default constructor.
     */
    public Gist() {
    }

    /**
     * Initialization constructor.
     * @param  url  String value for url.
     * @param  forksUrl  String value for forksUrl.
     * @param  commitsUrl  String value for commitsUrl.
     * @param  id  String value for id.
     * @param  nodeId  String value for nodeId.
     * @param  gitPullUrl  String value for gitPullUrl.
     * @param  gitPushUrl  String value for gitPushUrl.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  files  Map of String, value for files.
     * @param  mPublic  boolean value for mPublic.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  description  String value for description.
     * @param  comments  int value for comments.
     * @param  user  Object value for user.
     * @param  commentsUrl  String value for commentsUrl.
     * @param  owner  Object value for owner.
     * @param  truncated  Boolean value for truncated.
     * @param  forks  List of Object value for forks.
     * @param  history  List of Object value for history.
     */
    public Gist(
            String url,
            String forksUrl,
            String commitsUrl,
            String id,
            String nodeId,
            String gitPullUrl,
            String gitPushUrl,
            String htmlUrl,
            Map<String, Files> files,
            boolean mPublic,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            String description,
            int comments,
            Object user,
            String commentsUrl,
            Object owner,
            Boolean truncated,
            List<Object> forks,
            List<Object> history) {
        this.url = url;
        this.forksUrl = forksUrl;
        this.commitsUrl = commitsUrl;
        this.id = id;
        this.nodeId = nodeId;
        this.gitPullUrl = gitPullUrl;
        this.gitPushUrl = gitPushUrl;
        this.htmlUrl = htmlUrl;
        this.files = files;
        this.mPublic = mPublic;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.description = description;
        this.comments = comments;
        this.user = user;
        this.commentsUrl = commentsUrl;
        this.owner = owner;
        this.truncated = truncated;
        this.forks = forks;
        this.history = history;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for ForksUrl.
     * @return Returns the String
     */
    @JsonGetter("forks_url")
    public String getForksUrl() {
        return forksUrl;
    }

    /**
     * Setter for ForksUrl.
     * @param forksUrl Value for String
     */
    @JsonSetter("forks_url")
    public void setForksUrl(String forksUrl) {
        this.forksUrl = forksUrl;
    }

    /**
     * Getter for CommitsUrl.
     * @return Returns the String
     */
    @JsonGetter("commits_url")
    public String getCommitsUrl() {
        return commitsUrl;
    }

    /**
     * Setter for CommitsUrl.
     * @param commitsUrl Value for String
     */
    @JsonSetter("commits_url")
    public void setCommitsUrl(String commitsUrl) {
        this.commitsUrl = commitsUrl;
    }

    /**
     * Getter for Id.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for GitPullUrl.
     * @return Returns the String
     */
    @JsonGetter("git_pull_url")
    public String getGitPullUrl() {
        return gitPullUrl;
    }

    /**
     * Setter for GitPullUrl.
     * @param gitPullUrl Value for String
     */
    @JsonSetter("git_pull_url")
    public void setGitPullUrl(String gitPullUrl) {
        this.gitPullUrl = gitPullUrl;
    }

    /**
     * Getter for GitPushUrl.
     * @return Returns the String
     */
    @JsonGetter("git_push_url")
    public String getGitPushUrl() {
        return gitPushUrl;
    }

    /**
     * Setter for GitPushUrl.
     * @param gitPushUrl Value for String
     */
    @JsonSetter("git_push_url")
    public void setGitPushUrl(String gitPushUrl) {
        this.gitPushUrl = gitPushUrl;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Files.
     * @return Returns the Map of String, Files
     */
    @JsonGetter("files")
    public Map<String, Files> getFiles() {
        return files;
    }

    /**
     * Setter for Files.
     * @param files Value for Map of String, Files
     */
    @JsonSetter("files")
    public void setFiles(Map<String, Files> files) {
        this.files = files;
    }

    /**
     * Getter for Public.
     * @return Returns the boolean
     */
    @JsonGetter("public")
    public boolean getPublic() {
        return mPublic;
    }

    /**
     * Setter for Public.
     * @param mPublic Value for boolean
     */
    @JsonSetter("public")
    public void setPublic(boolean mPublic) {
        this.mPublic = mPublic;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Comments.
     * @return Returns the int
     */
    @JsonGetter("comments")
    public int getComments() {
        return comments;
    }

    /**
     * Setter for Comments.
     * @param comments Value for int
     */
    @JsonSetter("comments")
    public void setComments(int comments) {
        this.comments = comments;
    }

    /**
     * Getter for User.
     * @return Returns the Object
     */
    @JsonGetter("user")
    public Object getUser() {
        return user;
    }

    /**
     * Setter for User.
     * @param user Value for Object
     */
    @JsonSetter("user")
    public void setUser(Object user) {
        this.user = user;
    }

    /**
     * Getter for CommentsUrl.
     * @return Returns the String
     */
    @JsonGetter("comments_url")
    public String getCommentsUrl() {
        return commentsUrl;
    }

    /**
     * Setter for CommentsUrl.
     * @param commentsUrl Value for String
     */
    @JsonSetter("comments_url")
    public void setCommentsUrl(String commentsUrl) {
        this.commentsUrl = commentsUrl;
    }

    /**
     * Getter for Owner.
     * @return Returns the Object
     */
    @JsonGetter("owner")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getOwner() {
        return owner;
    }

    /**
     * Setter for Owner.
     * @param owner Value for Object
     */
    @JsonSetter("owner")
    public void setOwner(Object owner) {
        this.owner = owner;
    }

    /**
     * Getter for Truncated.
     * @return Returns the Boolean
     */
    @JsonGetter("truncated")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTruncated() {
        return truncated;
    }

    /**
     * Setter for Truncated.
     * @param truncated Value for Boolean
     */
    @JsonSetter("truncated")
    public void setTruncated(Boolean truncated) {
        this.truncated = truncated;
    }

    /**
     * Getter for Forks.
     * @return Returns the List of Object
     */
    @JsonGetter("forks")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Object> getForks() {
        return forks;
    }

    /**
     * Setter for Forks.
     * @param forks Value for List of Object
     */
    @JsonSetter("forks")
    public void setForks(List<Object> forks) {
        this.forks = forks;
    }

    /**
     * Getter for History.
     * @return Returns the List of Object
     */
    @JsonGetter("history")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Object> getHistory() {
        return history;
    }

    /**
     * Setter for History.
     * @param history Value for List of Object
     */
    @JsonSetter("history")
    public void setHistory(List<Object> history) {
        this.history = history;
    }

    /**
     * Converts this Gist into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Gist [" + "url=" + url + ", forksUrl=" + forksUrl + ", commitsUrl=" + commitsUrl
                + ", id=" + id + ", nodeId=" + nodeId + ", gitPullUrl=" + gitPullUrl
                + ", gitPushUrl=" + gitPushUrl + ", htmlUrl=" + htmlUrl + ", files=" + files
                + ", mPublic=" + mPublic + ", createdAt=" + createdAt + ", updatedAt=" + updatedAt
                + ", description=" + description + ", comments=" + comments + ", user=" + user
                + ", commentsUrl=" + commentsUrl + ", owner=" + owner + ", truncated=" + truncated
                + ", forks=" + forks + ", history=" + history + "]";
    }

    /**
     * Builds a new {@link Gist.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Gist.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(url, forksUrl, commitsUrl, id, nodeId, gitPullUrl, gitPushUrl,
                htmlUrl, files, mPublic, createdAt, updatedAt, description, comments, user,
                commentsUrl)
                .owner(getOwner())
                .truncated(getTruncated())
                .forks(getForks())
                .history(getHistory());
        return builder;
    }

    /**
     * Class to build instances of {@link Gist}.
     */
    public static class Builder {
        private String url;
        private String forksUrl;
        private String commitsUrl;
        private String id;
        private String nodeId;
        private String gitPullUrl;
        private String gitPushUrl;
        private String htmlUrl;
        private Map<String, Files> files;
        private boolean mPublic;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private String description;
        private int comments;
        private Object user;
        private String commentsUrl;
        private Object owner;
        private Boolean truncated;
        private List<Object> forks;
        private List<Object> history;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  url  String value for url.
         * @param  forksUrl  String value for forksUrl.
         * @param  commitsUrl  String value for commitsUrl.
         * @param  id  String value for id.
         * @param  nodeId  String value for nodeId.
         * @param  gitPullUrl  String value for gitPullUrl.
         * @param  gitPushUrl  String value for gitPushUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  files  Map of String, value for files.
         * @param  mPublic  boolean value for mPublic.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  description  String value for description.
         * @param  comments  int value for comments.
         * @param  user  Object value for user.
         * @param  commentsUrl  String value for commentsUrl.
         */
        public Builder(String url, String forksUrl, String commitsUrl, String id, String nodeId,
                String gitPullUrl, String gitPushUrl, String htmlUrl, Map<String, Files> files,
                boolean mPublic, LocalDateTime createdAt, LocalDateTime updatedAt,
                String description, int comments, Object user, String commentsUrl) {
            this.url = url;
            this.forksUrl = forksUrl;
            this.commitsUrl = commitsUrl;
            this.id = id;
            this.nodeId = nodeId;
            this.gitPullUrl = gitPullUrl;
            this.gitPushUrl = gitPushUrl;
            this.htmlUrl = htmlUrl;
            this.files = files;
            this.mPublic = mPublic;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.description = description;
            this.comments = comments;
            this.user = user;
            this.commentsUrl = commentsUrl;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for forksUrl.
         * @param  forksUrl  String value for forksUrl.
         * @return Builder
         */
        public Builder forksUrl(String forksUrl) {
            this.forksUrl = forksUrl;
            return this;
        }

        /**
         * Setter for commitsUrl.
         * @param  commitsUrl  String value for commitsUrl.
         * @return Builder
         */
        public Builder commitsUrl(String commitsUrl) {
            this.commitsUrl = commitsUrl;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for gitPullUrl.
         * @param  gitPullUrl  String value for gitPullUrl.
         * @return Builder
         */
        public Builder gitPullUrl(String gitPullUrl) {
            this.gitPullUrl = gitPullUrl;
            return this;
        }

        /**
         * Setter for gitPushUrl.
         * @param  gitPushUrl  String value for gitPushUrl.
         * @return Builder
         */
        public Builder gitPushUrl(String gitPushUrl) {
            this.gitPushUrl = gitPushUrl;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for files.
         * @param  files  Map of String, value for files.
         * @return Builder
         */
        public Builder files(Map<String, Files> files) {
            this.files = files;
            return this;
        }

        /**
         * Setter for mPublic.
         * @param  mPublic  boolean value for mPublic.
         * @return Builder
         */
        public Builder mPublic(boolean mPublic) {
            this.mPublic = mPublic;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for comments.
         * @param  comments  int value for comments.
         * @return Builder
         */
        public Builder comments(int comments) {
            this.comments = comments;
            return this;
        }

        /**
         * Setter for user.
         * @param  user  Object value for user.
         * @return Builder
         */
        public Builder user(Object user) {
            this.user = user;
            return this;
        }

        /**
         * Setter for commentsUrl.
         * @param  commentsUrl  String value for commentsUrl.
         * @return Builder
         */
        public Builder commentsUrl(String commentsUrl) {
            this.commentsUrl = commentsUrl;
            return this;
        }

        /**
         * Setter for owner.
         * @param  owner  Object value for owner.
         * @return Builder
         */
        public Builder owner(Object owner) {
            this.owner = owner;
            return this;
        }

        /**
         * Setter for truncated.
         * @param  truncated  Boolean value for truncated.
         * @return Builder
         */
        public Builder truncated(Boolean truncated) {
            this.truncated = truncated;
            return this;
        }

        /**
         * Setter for forks.
         * @param  forks  List of Object value for forks.
         * @return Builder
         */
        public Builder forks(List<Object> forks) {
            this.forks = forks;
            return this;
        }

        /**
         * Setter for history.
         * @param  history  List of Object value for history.
         * @return Builder
         */
        public Builder history(List<Object> history) {
            this.history = history;
            return this;
        }

        /**
         * Builds a new {@link Gist} object using the set fields.
         * @return {@link Gist}
         */
        public Gist build() {
            return new Gist(url, forksUrl, commitsUrl, id, nodeId, gitPullUrl, gitPushUrl, htmlUrl,
                    files, mPublic, createdAt, updatedAt, description, comments, user, commentsUrl,
                    owner, truncated, forks, history);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import com.github.api.models.containers.ReposDependencyGraphSnapshotsRequestMetadata;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;
import java.util.Map;

/**
 * This is a model class for ReposDependencyGraphSnapshotsRequest type.
 */
public class ReposDependencyGraphSnapshotsRequest {
    private int version;
    private Job1 job;
    private String sha;
    private String ref;
    private Detector2 detector;
    private Map<String, ReposDependencyGraphSnapshotsRequestMetadata> metadata;
    private Map<String, Manifest> manifests;
    private LocalDateTime scanned;

    /**
     * Default constructor.
     */
    public ReposDependencyGraphSnapshotsRequest() {
    }

    /**
     * Initialization constructor.
     * @param  version  int value for version.
     * @param  job  Job1 value for job.
     * @param  sha  String value for sha.
     * @param  ref  String value for ref.
     * @param  detector  Detector2 value for detector.
     * @param  scanned  LocalDateTime value for scanned.
     * @param  metadata  Map of String, value for metadata.
     * @param  manifests  Map of String, value for manifests.
     */
    public ReposDependencyGraphSnapshotsRequest(
            int version,
            Job1 job,
            String sha,
            String ref,
            Detector2 detector,
            LocalDateTime scanned,
            Map<String, ReposDependencyGraphSnapshotsRequestMetadata> metadata,
            Map<String, Manifest> manifests) {
        this.version = version;
        this.job = job;
        this.sha = sha;
        this.ref = ref;
        this.detector = detector;
        this.metadata = metadata;
        this.manifests = manifests;
        this.scanned = scanned;
    }

    /**
     * Getter for Version.
     * The version of the repository snapshot submission.
     * @return Returns the int
     */
    @JsonGetter("version")
    public int getVersion() {
        return version;
    }

    /**
     * Setter for Version.
     * The version of the repository snapshot submission.
     * @param version Value for int
     */
    @JsonSetter("version")
    public void setVersion(int version) {
        this.version = version;
    }

    /**
     * Getter for Job.
     * @return Returns the Job1
     */
    @JsonGetter("job")
    public Job1 getJob() {
        return job;
    }

    /**
     * Setter for Job.
     * @param job Value for Job1
     */
    @JsonSetter("job")
    public void setJob(Job1 job) {
        this.job = job;
    }

    /**
     * Getter for Sha.
     * The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
     * @return Returns the String
     */
    @JsonGetter("sha")
    public String getSha() {
        return sha;
    }

    /**
     * Setter for Sha.
     * The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
     * @param sha Value for String
     */
    @JsonSetter("sha")
    public void setSha(String sha) {
        this.sha = sha;
    }

    /**
     * Getter for Ref.
     * The repository branch that triggered this snapshot.
     * @return Returns the String
     */
    @JsonGetter("ref")
    public String getRef() {
        return ref;
    }

    /**
     * Setter for Ref.
     * The repository branch that triggered this snapshot.
     * @param ref Value for String
     */
    @JsonSetter("ref")
    public void setRef(String ref) {
        this.ref = ref;
    }

    /**
     * Getter for Detector.
     * @return Returns the Detector2
     */
    @JsonGetter("detector")
    public Detector2 getDetector() {
        return detector;
    }

    /**
     * Setter for Detector.
     * @param detector Value for Detector2
     */
    @JsonSetter("detector")
    public void setDetector(Detector2 detector) {
        this.detector = detector;
    }

    /**
     * Getter for Metadata.
     * User-defined metadata to store domain-specific information limited to 8 keys with scalar
     * values.
     * @return Returns the Map of String, ReposDependencyGraphSnapshotsRequestMetadata
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, ReposDependencyGraphSnapshotsRequestMetadata> getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * User-defined metadata to store domain-specific information limited to 8 keys with scalar
     * values.
     * @param metadata Value for Map of String, ReposDependencyGraphSnapshotsRequestMetadata
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, ReposDependencyGraphSnapshotsRequestMetadata> metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for Manifests.
     * A collection of package manifests, which are a collection of related dependencies declared in
     * a file or representing a logical group of dependencies.
     * @return Returns the Map of String, Manifest
     */
    @JsonGetter("manifests")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, Manifest> getManifests() {
        return manifests;
    }

    /**
     * Setter for Manifests.
     * A collection of package manifests, which are a collection of related dependencies declared in
     * a file or representing a logical group of dependencies.
     * @param manifests Value for Map of String, Manifest
     */
    @JsonSetter("manifests")
    public void setManifests(Map<String, Manifest> manifests) {
        this.manifests = manifests;
    }

    /**
     * Getter for Scanned.
     * The time at which the snapshot was scanned.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("scanned")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getScanned() {
        return scanned;
    }

    /**
     * Setter for Scanned.
     * The time at which the snapshot was scanned.
     * @param scanned Value for LocalDateTime
     */
    @JsonSetter("scanned")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setScanned(LocalDateTime scanned) {
        this.scanned = scanned;
    }

    /**
     * Converts this ReposDependencyGraphSnapshotsRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposDependencyGraphSnapshotsRequest [" + "version=" + version + ", job=" + job
                + ", sha=" + sha + ", ref=" + ref + ", detector=" + detector + ", scanned="
                + scanned + ", metadata=" + metadata + ", manifests=" + manifests + "]";
    }

    /**
     * Builds a new {@link ReposDependencyGraphSnapshotsRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposDependencyGraphSnapshotsRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(version, job, sha, ref, detector, scanned)
                .metadata(getMetadata())
                .manifests(getManifests());
        return builder;
    }

    /**
     * Class to build instances of {@link ReposDependencyGraphSnapshotsRequest}.
     */
    public static class Builder {
        private int version;
        private Job1 job;
        private String sha;
        private String ref;
        private Detector2 detector;
        private LocalDateTime scanned;
        private Map<String, ReposDependencyGraphSnapshotsRequestMetadata> metadata;
        private Map<String, Manifest> manifests;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  version  int value for version.
         * @param  job  Job1 value for job.
         * @param  sha  String value for sha.
         * @param  ref  String value for ref.
         * @param  detector  Detector2 value for detector.
         * @param  scanned  LocalDateTime value for scanned.
         */
        public Builder(int version, Job1 job, String sha, String ref, Detector2 detector,
                LocalDateTime scanned) {
            this.version = version;
            this.job = job;
            this.sha = sha;
            this.ref = ref;
            this.detector = detector;
            this.scanned = scanned;
        }

        /**
         * Setter for version.
         * @param  version  int value for version.
         * @return Builder
         */
        public Builder version(int version) {
            this.version = version;
            return this;
        }

        /**
         * Setter for job.
         * @param  job  Job1 value for job.
         * @return Builder
         */
        public Builder job(Job1 job) {
            this.job = job;
            return this;
        }

        /**
         * Setter for sha.
         * @param  sha  String value for sha.
         * @return Builder
         */
        public Builder sha(String sha) {
            this.sha = sha;
            return this;
        }

        /**
         * Setter for ref.
         * @param  ref  String value for ref.
         * @return Builder
         */
        public Builder ref(String ref) {
            this.ref = ref;
            return this;
        }

        /**
         * Setter for detector.
         * @param  detector  Detector2 value for detector.
         * @return Builder
         */
        public Builder detector(Detector2 detector) {
            this.detector = detector;
            return this;
        }

        /**
         * Setter for scanned.
         * @param  scanned  LocalDateTime value for scanned.
         * @return Builder
         */
        public Builder scanned(LocalDateTime scanned) {
            this.scanned = scanned;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(
                Map<String, ReposDependencyGraphSnapshotsRequestMetadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for manifests.
         * @param  manifests  Map of String, value for manifests.
         * @return Builder
         */
        public Builder manifests(Map<String, Manifest> manifests) {
            this.manifests = manifests;
            return this;
        }

        /**
         * Builds a new {@link ReposDependencyGraphSnapshotsRequest} object using the set fields.
         * @return {@link ReposDependencyGraphSnapshotsRequest}
         */
        public ReposDependencyGraphSnapshotsRequest build() {
            return new ReposDependencyGraphSnapshotsRequest(version, job, sha, ref, detector,
                    scanned, metadata, manifests);
        }
    }
}

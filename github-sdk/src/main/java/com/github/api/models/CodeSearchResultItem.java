/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for CodeSearchResultItem type.
 */
public class CodeSearchResultItem {
    private String name;
    private String path;
    private String sha;
    private String url;
    private String gitUrl;
    private String htmlUrl;
    private Repository7 repository;
    private double score;
    private Integer fileSize;
    private OptionalNullable<String> language;
    private LocalDateTime lastModifiedAt;
    private List<String> lineNumbers;
    private List<SearchResultTextMatch> textMatches;

    /**
     * Default constructor.
     */
    public CodeSearchResultItem() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  path  String value for path.
     * @param  sha  String value for sha.
     * @param  url  String value for url.
     * @param  gitUrl  String value for gitUrl.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  repository  Repository7 value for repository.
     * @param  score  double value for score.
     * @param  fileSize  Integer value for fileSize.
     * @param  language  String value for language.
     * @param  lastModifiedAt  LocalDateTime value for lastModifiedAt.
     * @param  lineNumbers  List of String value for lineNumbers.
     * @param  textMatches  List of SearchResultTextMatch value for textMatches.
     */
    public CodeSearchResultItem(
            String name,
            String path,
            String sha,
            String url,
            String gitUrl,
            String htmlUrl,
            Repository7 repository,
            double score,
            Integer fileSize,
            String language,
            LocalDateTime lastModifiedAt,
            List<String> lineNumbers,
            List<SearchResultTextMatch> textMatches) {
        this.name = name;
        this.path = path;
        this.sha = sha;
        this.url = url;
        this.gitUrl = gitUrl;
        this.htmlUrl = htmlUrl;
        this.repository = repository;
        this.score = score;
        this.fileSize = fileSize;
        this.language = OptionalNullable.of(language);
        this.lastModifiedAt = lastModifiedAt;
        this.lineNumbers = lineNumbers;
        this.textMatches = textMatches;
    }

    /**
     * Internal initialization constructor.
     */
    protected CodeSearchResultItem(String name, String path, String sha, String url, String gitUrl,
            String htmlUrl, Repository7 repository, double score, Integer fileSize,
            OptionalNullable<String> language, LocalDateTime lastModifiedAt,
            List<String> lineNumbers, List<SearchResultTextMatch> textMatches) {
        this.name = name;
        this.path = path;
        this.sha = sha;
        this.url = url;
        this.gitUrl = gitUrl;
        this.htmlUrl = htmlUrl;
        this.repository = repository;
        this.score = score;
        this.fileSize = fileSize;
        this.language = language;
        this.lastModifiedAt = lastModifiedAt;
        this.lineNumbers = lineNumbers;
        this.textMatches = textMatches;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Path.
     * @return Returns the String
     */
    @JsonGetter("path")
    public String getPath() {
        return path;
    }

    /**
     * Setter for Path.
     * @param path Value for String
     */
    @JsonSetter("path")
    public void setPath(String path) {
        this.path = path;
    }

    /**
     * Getter for Sha.
     * @return Returns the String
     */
    @JsonGetter("sha")
    public String getSha() {
        return sha;
    }

    /**
     * Setter for Sha.
     * @param sha Value for String
     */
    @JsonSetter("sha")
    public void setSha(String sha) {
        this.sha = sha;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for GitUrl.
     * @return Returns the String
     */
    @JsonGetter("git_url")
    public String getGitUrl() {
        return gitUrl;
    }

    /**
     * Setter for GitUrl.
     * @param gitUrl Value for String
     */
    @JsonSetter("git_url")
    public void setGitUrl(String gitUrl) {
        this.gitUrl = gitUrl;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Repository.
     * @return Returns the Repository7
     */
    @JsonGetter("repository")
    public Repository7 getRepository() {
        return repository;
    }

    /**
     * Setter for Repository.
     * @param repository Value for Repository7
     */
    @JsonSetter("repository")
    public void setRepository(Repository7 repository) {
        this.repository = repository;
    }

    /**
     * Getter for Score.
     * @return Returns the double
     */
    @JsonGetter("score")
    public double getScore() {
        return score;
    }

    /**
     * Setter for Score.
     * @param score Value for double
     */
    @JsonSetter("score")
    public void setScore(double score) {
        this.score = score;
    }

    /**
     * Getter for FileSize.
     * @return Returns the Integer
     */
    @JsonGetter("file_size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getFileSize() {
        return fileSize;
    }

    /**
     * Setter for FileSize.
     * @param fileSize Value for Integer
     */
    @JsonSetter("file_size")
    public void setFileSize(Integer fileSize) {
        this.fileSize = fileSize;
    }

    /**
     * Internal Getter for Language.
     * @return Returns the Internal String
     */
    @JsonGetter("language")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLanguage() {
        return this.language;
    }

    /**
     * Getter for Language.
     * @return Returns the String
     */
    public String getLanguage() {
        return OptionalNullable.getFrom(language);
    }

    /**
     * Setter for Language.
     * @param language Value for String
     */
    @JsonSetter("language")
    public void setLanguage(String language) {
        this.language = OptionalNullable.of(language);
    }

    /**
     * UnSetter for Language.
     */
    public void unsetLanguage() {
        language = null;
    }

    /**
     * Getter for LastModifiedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("last_modified_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getLastModifiedAt() {
        return lastModifiedAt;
    }

    /**
     * Setter for LastModifiedAt.
     * @param lastModifiedAt Value for LocalDateTime
     */
    @JsonSetter("last_modified_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setLastModifiedAt(LocalDateTime lastModifiedAt) {
        this.lastModifiedAt = lastModifiedAt;
    }

    /**
     * Getter for LineNumbers.
     * @return Returns the List of String
     */
    @JsonGetter("line_numbers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getLineNumbers() {
        return lineNumbers;
    }

    /**
     * Setter for LineNumbers.
     * @param lineNumbers Value for List of String
     */
    @JsonSetter("line_numbers")
    public void setLineNumbers(List<String> lineNumbers) {
        this.lineNumbers = lineNumbers;
    }

    /**
     * Getter for TextMatches.
     * @return Returns the List of SearchResultTextMatch
     */
    @JsonGetter("text_matches")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<SearchResultTextMatch> getTextMatches() {
        return textMatches;
    }

    /**
     * Setter for TextMatches.
     * @param textMatches Value for List of SearchResultTextMatch
     */
    @JsonSetter("text_matches")
    public void setTextMatches(List<SearchResultTextMatch> textMatches) {
        this.textMatches = textMatches;
    }

    /**
     * Converts this CodeSearchResultItem into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CodeSearchResultItem [" + "name=" + name + ", path=" + path + ", sha=" + sha
                + ", url=" + url + ", gitUrl=" + gitUrl + ", htmlUrl=" + htmlUrl + ", repository="
                + repository + ", score=" + score + ", fileSize=" + fileSize + ", language="
                + language + ", lastModifiedAt=" + lastModifiedAt + ", lineNumbers=" + lineNumbers
                + ", textMatches=" + textMatches + "]";
    }

    /**
     * Builds a new {@link CodeSearchResultItem.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CodeSearchResultItem.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(name, path, sha, url, gitUrl, htmlUrl, repository, score)
                .fileSize(getFileSize())
                .lastModifiedAt(getLastModifiedAt())
                .lineNumbers(getLineNumbers())
                .textMatches(getTextMatches());
        builder.language = internalGetLanguage();
        return builder;
    }

    /**
     * Class to build instances of {@link CodeSearchResultItem}.
     */
    public static class Builder {
        private String name;
        private String path;
        private String sha;
        private String url;
        private String gitUrl;
        private String htmlUrl;
        private Repository7 repository;
        private double score;
        private Integer fileSize;
        private OptionalNullable<String> language;
        private LocalDateTime lastModifiedAt;
        private List<String> lineNumbers;
        private List<SearchResultTextMatch> textMatches;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  name  String value for name.
         * @param  path  String value for path.
         * @param  sha  String value for sha.
         * @param  url  String value for url.
         * @param  gitUrl  String value for gitUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  repository  Repository7 value for repository.
         * @param  score  double value for score.
         */
        public Builder(String name, String path, String sha, String url, String gitUrl,
                String htmlUrl, Repository7 repository, double score) {
            this.name = name;
            this.path = path;
            this.sha = sha;
            this.url = url;
            this.gitUrl = gitUrl;
            this.htmlUrl = htmlUrl;
            this.repository = repository;
            this.score = score;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for path.
         * @param  path  String value for path.
         * @return Builder
         */
        public Builder path(String path) {
            this.path = path;
            return this;
        }

        /**
         * Setter for sha.
         * @param  sha  String value for sha.
         * @return Builder
         */
        public Builder sha(String sha) {
            this.sha = sha;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for gitUrl.
         * @param  gitUrl  String value for gitUrl.
         * @return Builder
         */
        public Builder gitUrl(String gitUrl) {
            this.gitUrl = gitUrl;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for repository.
         * @param  repository  Repository7 value for repository.
         * @return Builder
         */
        public Builder repository(Repository7 repository) {
            this.repository = repository;
            return this;
        }

        /**
         * Setter for score.
         * @param  score  double value for score.
         * @return Builder
         */
        public Builder score(double score) {
            this.score = score;
            return this;
        }

        /**
         * Setter for fileSize.
         * @param  fileSize  Integer value for fileSize.
         * @return Builder
         */
        public Builder fileSize(Integer fileSize) {
            this.fileSize = fileSize;
            return this;
        }

        /**
         * Setter for language.
         * @param  language  String value for language.
         * @return Builder
         */
        public Builder language(String language) {
            this.language = OptionalNullable.of(language);
            return this;
        }

        /**
         * UnSetter for language.
         * @return Builder
         */
        public Builder unsetLanguage() {
            language = null;
            return this;
        }

        /**
         * Setter for lastModifiedAt.
         * @param  lastModifiedAt  LocalDateTime value for lastModifiedAt.
         * @return Builder
         */
        public Builder lastModifiedAt(LocalDateTime lastModifiedAt) {
            this.lastModifiedAt = lastModifiedAt;
            return this;
        }

        /**
         * Setter for lineNumbers.
         * @param  lineNumbers  List of String value for lineNumbers.
         * @return Builder
         */
        public Builder lineNumbers(List<String> lineNumbers) {
            this.lineNumbers = lineNumbers;
            return this;
        }

        /**
         * Setter for textMatches.
         * @param  textMatches  List of SearchResultTextMatch value for textMatches.
         * @return Builder
         */
        public Builder textMatches(List<SearchResultTextMatch> textMatches) {
            this.textMatches = textMatches;
            return this;
        }

        /**
         * Builds a new {@link CodeSearchResultItem} object using the set fields.
         * @return {@link CodeSearchResultItem}
         */
        public CodeSearchResultItem build() {
            return new CodeSearchResultItem(name, path, sha, url, gitUrl, htmlUrl, repository,
                    score, fileSize, language, lastModifiedAt, lineNumbers, textMatches);
        }
    }
}

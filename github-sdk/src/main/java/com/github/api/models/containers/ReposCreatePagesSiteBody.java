/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.github.api.ApiHelper;
import com.github.api.models.ReposPagesRequest;
import com.github.api.models.ReposPagesRequest1;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = ReposCreatePagesSiteBody.ReposCreatePagesSiteBodyDeserializer.class)
public abstract class ReposCreatePagesSiteBody {
    
    /**
     * Any-of type initialization method.
     * @param reposPagesRequest ReposPagesRequest value for reposPagesRequest.
     * @return The ReposPagesRequestCase object.
     */
    public static ReposCreatePagesSiteBody fromReposPagesRequest(
            ReposPagesRequest reposPagesRequest) {
        return reposPagesRequest == null ? null : new ReposPagesRequestCase(reposPagesRequest);
    }

    /**
     * Any-of type initialization method.
     * @param reposPagesRequest1 ReposPagesRequest1 value for reposPagesRequest1.
     * @return The ReposPagesRequest1Case object.
     */
    public static ReposCreatePagesSiteBody fromReposPagesRequest1(
            ReposPagesRequest1 reposPagesRequest1) {
        return reposPagesRequest1 == null ? null : new ReposPagesRequest1Case(reposPagesRequest1);
    }

    /**
     * Any-of type initialization method.
     * @param object Map of String, value for object.
     * @return The ObjectCase object.
     */
    public static ReposCreatePagesSiteBody fromObject(Map<String, Object> object) {
        return object == null ? null : new ObjectCase(object);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R reposPagesRequest(ReposPagesRequest reposPagesRequest);

        R reposPagesRequest1(ReposPagesRequest1 reposPagesRequest1);

        R object(Map<String, Object> object);
    }

    /**
     * This is a implementation class for ReposPagesRequestCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class ReposPagesRequestCase extends ReposCreatePagesSiteBody {

        @JsonValue
        private ReposPagesRequest reposPagesRequest;

        ReposPagesRequestCase(ReposPagesRequest reposPagesRequest) {
            this.reposPagesRequest = reposPagesRequest;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.reposPagesRequest(this.reposPagesRequest);
        }

        @JsonCreator
        private ReposPagesRequestCase(JsonNode jsonNode) throws IOException {
            this.reposPagesRequest = ApiHelper.deserialize(jsonNode,
                ReposPagesRequest.class);
        }

        @Override
        public String toString() {
            return reposPagesRequest.toString();
        }
    }

    /**
     * This is a implementation class for ReposPagesRequest1Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class ReposPagesRequest1Case extends ReposCreatePagesSiteBody {

        @JsonValue
        private ReposPagesRequest1 reposPagesRequest1;

        ReposPagesRequest1Case(ReposPagesRequest1 reposPagesRequest1) {
            this.reposPagesRequest1 = reposPagesRequest1;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.reposPagesRequest1(this.reposPagesRequest1);
        }

        @JsonCreator
        private ReposPagesRequest1Case(JsonNode jsonNode) throws IOException {
            this.reposPagesRequest1 = ApiHelper.deserialize(jsonNode,
                ReposPagesRequest1.class);
        }

        @Override
        public String toString() {
            return reposPagesRequest1.toString();
        }
    }

    /**
     * This is a implementation class for ObjectCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class ObjectCase extends ReposCreatePagesSiteBody {

        @JsonValue
        private Map<String, Object> object;

        ObjectCase(Map<String, Object> object) {
            this.object = object;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.object(this.object);
        }

        @JsonCreator
        private ObjectCase(JsonNode jsonNode) throws IOException {
            this.object = ApiHelper.deserialize(jsonNode,
                new TypeReference<Map<String, Object>>(){});
        }

        @Override
        public String toString() {
            return object.toString();
        }
    }

    /**
     * This is a custom deserializer class for ReposCreatePagesSiteBody.
     */
    protected static class ReposCreatePagesSiteBodyDeserializer
            extends JsonDeserializer<ReposCreatePagesSiteBody> {

        @Override
        public ReposCreatePagesSiteBody deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(ReposPagesRequestCase.class,
                    ReposPagesRequest1Case.class, ObjectCase.class), false);
        }
    }

}

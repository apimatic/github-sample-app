/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.github.api.ApiHelper;
import com.github.api.models.Files5;
import com.github.api.models.Files51;
import com.github.api.models.Files53;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = GistsRequest12Files.GistsRequest12FilesDeserializer.class)
public abstract class GistsRequest12Files {
    
    /**
     * Any-of type initialization method.
     * @param files5 Files5 value for files5.
     * @return The Files5Case object.
     */
    public static GistsRequest12Files fromFiles5(Files5 files5) {
        return files5 == null ? null : new Files5Case(files5);
    }

    /**
     * Any-of type initialization method.
     * @param files51 Files51 value for files51.
     * @return The Files51Case object.
     */
    public static GistsRequest12Files fromFiles51(Files51 files51) {
        return files51 == null ? null : new Files51Case(files51);
    }

    /**
     * Any-of type initialization method.
     * @param files53 Files53 value for files53.
     * @return The Files53Case object.
     */
    public static GistsRequest12Files fromFiles53(Files53 files53) {
        return files53 == null ? null : new Files53Case(files53);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R files5(Files5 files5);

        R files51(Files51 files51);

        R files53(Files53 files53);
    }

    /**
     * This is a implementation class for Files5Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class Files5Case extends GistsRequest12Files {

        @JsonValue
        private Files5 files5;

        Files5Case(Files5 files5) {
            this.files5 = files5;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.files5(this.files5);
        }

        @JsonCreator
        private Files5Case(JsonNode jsonNode) throws IOException {
            this.files5 = ApiHelper.deserialize(jsonNode,
                Files5.class);
        }

        @Override
        public String toString() {
            return files5.toString();
        }
    }

    /**
     * This is a implementation class for Files51Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class Files51Case extends GistsRequest12Files {

        @JsonValue
        private Files51 files51;

        Files51Case(Files51 files51) {
            this.files51 = files51;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.files51(this.files51);
        }

        @JsonCreator
        private Files51Case(JsonNode jsonNode) throws IOException {
            this.files51 = ApiHelper.deserialize(jsonNode,
                Files51.class);
        }

        @Override
        public String toString() {
            return files51.toString();
        }
    }

    /**
     * This is a implementation class for Files53Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class Files53Case extends GistsRequest12Files {

        @JsonValue
        private Files53 files53;

        Files53Case(Files53 files53) {
            this.files53 = files53;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.files53(this.files53);
        }

        @JsonCreator
        private Files53Case(JsonNode jsonNode) throws IOException {
            this.files53 = ApiHelper.deserialize(jsonNode,
                Files53.class);
        }

        @Override
        public String toString() {
            return files53.toString();
        }
    }

    /**
     * This is a custom deserializer class for GistsRequest12Files.
     */
    protected static class GistsRequest12FilesDeserializer
            extends JsonDeserializer<GistsRequest12Files> {

        @Override
        public GistsRequest12Files deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(Files5Case.class, Files51Case.class,
                    Files53Case.class), false);
        }
    }

}

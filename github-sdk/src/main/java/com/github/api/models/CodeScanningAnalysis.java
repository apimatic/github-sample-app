/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;

/**
 * This is a model class for CodeScanningAnalysis type.
 */
public class CodeScanningAnalysis {
    private String ref;
    private String commitSha;
    private String analysisKey;
    private String environment;
    private String category;
    private String error;
    private LocalDateTime createdAt;
    private int resultsCount;
    private int rulesCount;
    private int id;
    private String url;
    private String sarifId;
    private CodeScanningAnalysisTool tool;
    private boolean deletable;
    private String warning;

    /**
     * Default constructor.
     */
    public CodeScanningAnalysis() {
    }

    /**
     * Initialization constructor.
     * @param  ref  String value for ref.
     * @param  commitSha  String value for commitSha.
     * @param  analysisKey  String value for analysisKey.
     * @param  environment  String value for environment.
     * @param  error  String value for error.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  resultsCount  int value for resultsCount.
     * @param  rulesCount  int value for rulesCount.
     * @param  id  int value for id.
     * @param  url  String value for url.
     * @param  sarifId  String value for sarifId.
     * @param  tool  CodeScanningAnalysisTool value for tool.
     * @param  deletable  boolean value for deletable.
     * @param  warning  String value for warning.
     * @param  category  String value for category.
     */
    public CodeScanningAnalysis(
            String ref,
            String commitSha,
            String analysisKey,
            String environment,
            String error,
            LocalDateTime createdAt,
            int resultsCount,
            int rulesCount,
            int id,
            String url,
            String sarifId,
            CodeScanningAnalysisTool tool,
            boolean deletable,
            String warning,
            String category) {
        this.ref = ref;
        this.commitSha = commitSha;
        this.analysisKey = analysisKey;
        this.environment = environment;
        this.category = category;
        this.error = error;
        this.createdAt = createdAt;
        this.resultsCount = resultsCount;
        this.rulesCount = rulesCount;
        this.id = id;
        this.url = url;
        this.sarifId = sarifId;
        this.tool = tool;
        this.deletable = deletable;
        this.warning = warning;
    }

    /**
     * Getter for Ref.
     * The full Git reference, formatted as `refs/heads/&lt;branch name&gt;`, `refs/pull/&lt;number&gt;/merge`,
     * or `refs/pull/&lt;number&gt;/head`.
     * @return Returns the String
     */
    @JsonGetter("ref")
    public String getRef() {
        return ref;
    }

    /**
     * Setter for Ref.
     * The full Git reference, formatted as `refs/heads/&lt;branch name&gt;`, `refs/pull/&lt;number&gt;/merge`,
     * or `refs/pull/&lt;number&gt;/head`.
     * @param ref Value for String
     */
    @JsonSetter("ref")
    public void setRef(String ref) {
        this.ref = ref;
    }

    /**
     * Getter for CommitSha.
     * The SHA of the commit to which the analysis you are uploading relates.
     * @return Returns the String
     */
    @JsonGetter("commit_sha")
    public String getCommitSha() {
        return commitSha;
    }

    /**
     * Setter for CommitSha.
     * The SHA of the commit to which the analysis you are uploading relates.
     * @param commitSha Value for String
     */
    @JsonSetter("commit_sha")
    public void setCommitSha(String commitSha) {
        this.commitSha = commitSha;
    }

    /**
     * Getter for AnalysisKey.
     * Identifies the configuration under which the analysis was executed. For example, in GitHub
     * Actions this includes the workflow filename and job name.
     * @return Returns the String
     */
    @JsonGetter("analysis_key")
    public String getAnalysisKey() {
        return analysisKey;
    }

    /**
     * Setter for AnalysisKey.
     * Identifies the configuration under which the analysis was executed. For example, in GitHub
     * Actions this includes the workflow filename and job name.
     * @param analysisKey Value for String
     */
    @JsonSetter("analysis_key")
    public void setAnalysisKey(String analysisKey) {
        this.analysisKey = analysisKey;
    }

    /**
     * Getter for Environment.
     * Identifies the variable values associated with the environment in which this analysis was
     * performed.
     * @return Returns the String
     */
    @JsonGetter("environment")
    public String getEnvironment() {
        return environment;
    }

    /**
     * Setter for Environment.
     * Identifies the variable values associated with the environment in which this analysis was
     * performed.
     * @param environment Value for String
     */
    @JsonSetter("environment")
    public void setEnvironment(String environment) {
        this.environment = environment;
    }

    /**
     * Getter for Category.
     * Identifies the configuration under which the analysis was executed. Used to distinguish
     * between multiple analyses for the same tool and commit, but performed on different languages
     * or different parts of the code.
     * @return Returns the String
     */
    @JsonGetter("category")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCategory() {
        return category;
    }

    /**
     * Setter for Category.
     * Identifies the configuration under which the analysis was executed. Used to distinguish
     * between multiple analyses for the same tool and commit, but performed on different languages
     * or different parts of the code.
     * @param category Value for String
     */
    @JsonSetter("category")
    public void setCategory(String category) {
        this.category = category;
    }

    /**
     * Getter for Error.
     * @return Returns the String
     */
    @JsonGetter("error")
    public String getError() {
        return error;
    }

    /**
     * Setter for Error.
     * @param error Value for String
     */
    @JsonSetter("error")
    public void setError(String error) {
        this.error = error;
    }

    /**
     * Getter for CreatedAt.
     * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for ResultsCount.
     * The total number of results in the analysis.
     * @return Returns the int
     */
    @JsonGetter("results_count")
    public int getResultsCount() {
        return resultsCount;
    }

    /**
     * Setter for ResultsCount.
     * The total number of results in the analysis.
     * @param resultsCount Value for int
     */
    @JsonSetter("results_count")
    public void setResultsCount(int resultsCount) {
        this.resultsCount = resultsCount;
    }

    /**
     * Getter for RulesCount.
     * The total number of rules used in the analysis.
     * @return Returns the int
     */
    @JsonGetter("rules_count")
    public int getRulesCount() {
        return rulesCount;
    }

    /**
     * Setter for RulesCount.
     * The total number of rules used in the analysis.
     * @param rulesCount Value for int
     */
    @JsonSetter("rules_count")
    public void setRulesCount(int rulesCount) {
        this.rulesCount = rulesCount;
    }

    /**
     * Getter for Id.
     * Unique identifier for this analysis.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier for this analysis.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for Url.
     * The REST API URL of the analysis resource.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * The REST API URL of the analysis resource.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for SarifId.
     * An identifier for the upload.
     * @return Returns the String
     */
    @JsonGetter("sarif_id")
    public String getSarifId() {
        return sarifId;
    }

    /**
     * Setter for SarifId.
     * An identifier for the upload.
     * @param sarifId Value for String
     */
    @JsonSetter("sarif_id")
    public void setSarifId(String sarifId) {
        this.sarifId = sarifId;
    }

    /**
     * Getter for Tool.
     * @return Returns the CodeScanningAnalysisTool
     */
    @JsonGetter("tool")
    public CodeScanningAnalysisTool getTool() {
        return tool;
    }

    /**
     * Setter for Tool.
     * @param tool Value for CodeScanningAnalysisTool
     */
    @JsonSetter("tool")
    public void setTool(CodeScanningAnalysisTool tool) {
        this.tool = tool;
    }

    /**
     * Getter for Deletable.
     * @return Returns the boolean
     */
    @JsonGetter("deletable")
    public boolean getDeletable() {
        return deletable;
    }

    /**
     * Setter for Deletable.
     * @param deletable Value for boolean
     */
    @JsonSetter("deletable")
    public void setDeletable(boolean deletable) {
        this.deletable = deletable;
    }

    /**
     * Getter for Warning.
     * Warning generated when processing the analysis
     * @return Returns the String
     */
    @JsonGetter("warning")
    public String getWarning() {
        return warning;
    }

    /**
     * Setter for Warning.
     * Warning generated when processing the analysis
     * @param warning Value for String
     */
    @JsonSetter("warning")
    public void setWarning(String warning) {
        this.warning = warning;
    }

    /**
     * Converts this CodeScanningAnalysis into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CodeScanningAnalysis [" + "ref=" + ref + ", commitSha=" + commitSha
                + ", analysisKey=" + analysisKey + ", environment=" + environment + ", error="
                + error + ", createdAt=" + createdAt + ", resultsCount=" + resultsCount
                + ", rulesCount=" + rulesCount + ", id=" + id + ", url=" + url + ", sarifId="
                + sarifId + ", tool=" + tool + ", deletable=" + deletable + ", warning=" + warning
                + ", category=" + category + "]";
    }

    /**
     * Builds a new {@link CodeScanningAnalysis.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CodeScanningAnalysis.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(ref, commitSha, analysisKey, environment, error, createdAt,
                resultsCount, rulesCount, id, url, sarifId, tool, deletable, warning)
                .category(getCategory());
        return builder;
    }

    /**
     * Class to build instances of {@link CodeScanningAnalysis}.
     */
    public static class Builder {
        private String ref;
        private String commitSha;
        private String analysisKey;
        private String environment;
        private String error;
        private LocalDateTime createdAt;
        private int resultsCount;
        private int rulesCount;
        private int id;
        private String url;
        private String sarifId;
        private CodeScanningAnalysisTool tool;
        private boolean deletable;
        private String warning;
        private String category;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  ref  String value for ref.
         * @param  commitSha  String value for commitSha.
         * @param  analysisKey  String value for analysisKey.
         * @param  environment  String value for environment.
         * @param  error  String value for error.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  resultsCount  int value for resultsCount.
         * @param  rulesCount  int value for rulesCount.
         * @param  id  int value for id.
         * @param  url  String value for url.
         * @param  sarifId  String value for sarifId.
         * @param  tool  CodeScanningAnalysisTool value for tool.
         * @param  deletable  boolean value for deletable.
         * @param  warning  String value for warning.
         */
        public Builder(String ref, String commitSha, String analysisKey, String environment,
                String error, LocalDateTime createdAt, int resultsCount, int rulesCount, int id,
                String url, String sarifId, CodeScanningAnalysisTool tool, boolean deletable,
                String warning) {
            this.ref = ref;
            this.commitSha = commitSha;
            this.analysisKey = analysisKey;
            this.environment = environment;
            this.error = error;
            this.createdAt = createdAt;
            this.resultsCount = resultsCount;
            this.rulesCount = rulesCount;
            this.id = id;
            this.url = url;
            this.sarifId = sarifId;
            this.tool = tool;
            this.deletable = deletable;
            this.warning = warning;
        }

        /**
         * Setter for ref.
         * @param  ref  String value for ref.
         * @return Builder
         */
        public Builder ref(String ref) {
            this.ref = ref;
            return this;
        }

        /**
         * Setter for commitSha.
         * @param  commitSha  String value for commitSha.
         * @return Builder
         */
        public Builder commitSha(String commitSha) {
            this.commitSha = commitSha;
            return this;
        }

        /**
         * Setter for analysisKey.
         * @param  analysisKey  String value for analysisKey.
         * @return Builder
         */
        public Builder analysisKey(String analysisKey) {
            this.analysisKey = analysisKey;
            return this;
        }

        /**
         * Setter for environment.
         * @param  environment  String value for environment.
         * @return Builder
         */
        public Builder environment(String environment) {
            this.environment = environment;
            return this;
        }

        /**
         * Setter for error.
         * @param  error  String value for error.
         * @return Builder
         */
        public Builder error(String error) {
            this.error = error;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for resultsCount.
         * @param  resultsCount  int value for resultsCount.
         * @return Builder
         */
        public Builder resultsCount(int resultsCount) {
            this.resultsCount = resultsCount;
            return this;
        }

        /**
         * Setter for rulesCount.
         * @param  rulesCount  int value for rulesCount.
         * @return Builder
         */
        public Builder rulesCount(int rulesCount) {
            this.rulesCount = rulesCount;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for sarifId.
         * @param  sarifId  String value for sarifId.
         * @return Builder
         */
        public Builder sarifId(String sarifId) {
            this.sarifId = sarifId;
            return this;
        }

        /**
         * Setter for tool.
         * @param  tool  CodeScanningAnalysisTool value for tool.
         * @return Builder
         */
        public Builder tool(CodeScanningAnalysisTool tool) {
            this.tool = tool;
            return this;
        }

        /**
         * Setter for deletable.
         * @param  deletable  boolean value for deletable.
         * @return Builder
         */
        public Builder deletable(boolean deletable) {
            this.deletable = deletable;
            return this;
        }

        /**
         * Setter for warning.
         * @param  warning  String value for warning.
         * @return Builder
         */
        public Builder warning(String warning) {
            this.warning = warning;
            return this;
        }

        /**
         * Setter for category.
         * @param  category  String value for category.
         * @return Builder
         */
        public Builder category(String category) {
            this.category = category;
            return this;
        }

        /**
         * Builds a new {@link CodeScanningAnalysis} object using the set fields.
         * @return {@link CodeScanningAnalysis}
         */
        public CodeScanningAnalysis build() {
            return new CodeScanningAnalysis(ref, commitSha, analysisKey, environment, error,
                    createdAt, resultsCount, rulesCount, id, url, sarifId, tool, deletable, warning,
                    category);
        }
    }
}

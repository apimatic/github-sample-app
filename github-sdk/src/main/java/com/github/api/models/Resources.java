/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Resources type.
 */
public class Resources {
    private RateLimit core;
    private RateLimit graphql;
    private RateLimit search;
    private RateLimit sourceImport;
    private RateLimit integrationManifest;
    private RateLimit codeScanningUpload;
    private RateLimit actionsRunnerRegistration;
    private RateLimit scim;
    private RateLimit dependencySnapshots;

    /**
     * Default constructor.
     */
    public Resources() {
    }

    /**
     * Initialization constructor.
     * @param  core  RateLimit value for core.
     * @param  search  RateLimit value for search.
     * @param  graphql  RateLimit value for graphql.
     * @param  sourceImport  RateLimit value for sourceImport.
     * @param  integrationManifest  RateLimit value for integrationManifest.
     * @param  codeScanningUpload  RateLimit value for codeScanningUpload.
     * @param  actionsRunnerRegistration  RateLimit value for actionsRunnerRegistration.
     * @param  scim  RateLimit value for scim.
     * @param  dependencySnapshots  RateLimit value for dependencySnapshots.
     */
    public Resources(
            RateLimit core,
            RateLimit search,
            RateLimit graphql,
            RateLimit sourceImport,
            RateLimit integrationManifest,
            RateLimit codeScanningUpload,
            RateLimit actionsRunnerRegistration,
            RateLimit scim,
            RateLimit dependencySnapshots) {
        this.core = core;
        this.graphql = graphql;
        this.search = search;
        this.sourceImport = sourceImport;
        this.integrationManifest = integrationManifest;
        this.codeScanningUpload = codeScanningUpload;
        this.actionsRunnerRegistration = actionsRunnerRegistration;
        this.scim = scim;
        this.dependencySnapshots = dependencySnapshots;
    }

    /**
     * Getter for Core.
     * @return Returns the RateLimit
     */
    @JsonGetter("core")
    public RateLimit getCore() {
        return core;
    }

    /**
     * Setter for Core.
     * @param core Value for RateLimit
     */
    @JsonSetter("core")
    public void setCore(RateLimit core) {
        this.core = core;
    }

    /**
     * Getter for Graphql.
     * @return Returns the RateLimit
     */
    @JsonGetter("graphql")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RateLimit getGraphql() {
        return graphql;
    }

    /**
     * Setter for Graphql.
     * @param graphql Value for RateLimit
     */
    @JsonSetter("graphql")
    public void setGraphql(RateLimit graphql) {
        this.graphql = graphql;
    }

    /**
     * Getter for Search.
     * @return Returns the RateLimit
     */
    @JsonGetter("search")
    public RateLimit getSearch() {
        return search;
    }

    /**
     * Setter for Search.
     * @param search Value for RateLimit
     */
    @JsonSetter("search")
    public void setSearch(RateLimit search) {
        this.search = search;
    }

    /**
     * Getter for SourceImport.
     * @return Returns the RateLimit
     */
    @JsonGetter("source_import")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RateLimit getSourceImport() {
        return sourceImport;
    }

    /**
     * Setter for SourceImport.
     * @param sourceImport Value for RateLimit
     */
    @JsonSetter("source_import")
    public void setSourceImport(RateLimit sourceImport) {
        this.sourceImport = sourceImport;
    }

    /**
     * Getter for IntegrationManifest.
     * @return Returns the RateLimit
     */
    @JsonGetter("integration_manifest")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RateLimit getIntegrationManifest() {
        return integrationManifest;
    }

    /**
     * Setter for IntegrationManifest.
     * @param integrationManifest Value for RateLimit
     */
    @JsonSetter("integration_manifest")
    public void setIntegrationManifest(RateLimit integrationManifest) {
        this.integrationManifest = integrationManifest;
    }

    /**
     * Getter for CodeScanningUpload.
     * @return Returns the RateLimit
     */
    @JsonGetter("code_scanning_upload")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RateLimit getCodeScanningUpload() {
        return codeScanningUpload;
    }

    /**
     * Setter for CodeScanningUpload.
     * @param codeScanningUpload Value for RateLimit
     */
    @JsonSetter("code_scanning_upload")
    public void setCodeScanningUpload(RateLimit codeScanningUpload) {
        this.codeScanningUpload = codeScanningUpload;
    }

    /**
     * Getter for ActionsRunnerRegistration.
     * @return Returns the RateLimit
     */
    @JsonGetter("actions_runner_registration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RateLimit getActionsRunnerRegistration() {
        return actionsRunnerRegistration;
    }

    /**
     * Setter for ActionsRunnerRegistration.
     * @param actionsRunnerRegistration Value for RateLimit
     */
    @JsonSetter("actions_runner_registration")
    public void setActionsRunnerRegistration(RateLimit actionsRunnerRegistration) {
        this.actionsRunnerRegistration = actionsRunnerRegistration;
    }

    /**
     * Getter for Scim.
     * @return Returns the RateLimit
     */
    @JsonGetter("scim")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RateLimit getScim() {
        return scim;
    }

    /**
     * Setter for Scim.
     * @param scim Value for RateLimit
     */
    @JsonSetter("scim")
    public void setScim(RateLimit scim) {
        this.scim = scim;
    }

    /**
     * Getter for DependencySnapshots.
     * @return Returns the RateLimit
     */
    @JsonGetter("dependency_snapshots")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RateLimit getDependencySnapshots() {
        return dependencySnapshots;
    }

    /**
     * Setter for DependencySnapshots.
     * @param dependencySnapshots Value for RateLimit
     */
    @JsonSetter("dependency_snapshots")
    public void setDependencySnapshots(RateLimit dependencySnapshots) {
        this.dependencySnapshots = dependencySnapshots;
    }

    /**
     * Converts this Resources into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Resources [" + "core=" + core + ", search=" + search + ", graphql=" + graphql
                + ", sourceImport=" + sourceImport + ", integrationManifest=" + integrationManifest
                + ", codeScanningUpload=" + codeScanningUpload + ", actionsRunnerRegistration="
                + actionsRunnerRegistration + ", scim=" + scim + ", dependencySnapshots="
                + dependencySnapshots + "]";
    }

    /**
     * Builds a new {@link Resources.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Resources.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(core, search)
                .graphql(getGraphql())
                .sourceImport(getSourceImport())
                .integrationManifest(getIntegrationManifest())
                .codeScanningUpload(getCodeScanningUpload())
                .actionsRunnerRegistration(getActionsRunnerRegistration())
                .scim(getScim())
                .dependencySnapshots(getDependencySnapshots());
        return builder;
    }

    /**
     * Class to build instances of {@link Resources}.
     */
    public static class Builder {
        private RateLimit core;
        private RateLimit search;
        private RateLimit graphql;
        private RateLimit sourceImport;
        private RateLimit integrationManifest;
        private RateLimit codeScanningUpload;
        private RateLimit actionsRunnerRegistration;
        private RateLimit scim;
        private RateLimit dependencySnapshots;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  core  RateLimit value for core.
         * @param  search  RateLimit value for search.
         */
        public Builder(RateLimit core, RateLimit search) {
            this.core = core;
            this.search = search;
        }

        /**
         * Setter for core.
         * @param  core  RateLimit value for core.
         * @return Builder
         */
        public Builder core(RateLimit core) {
            this.core = core;
            return this;
        }

        /**
         * Setter for search.
         * @param  search  RateLimit value for search.
         * @return Builder
         */
        public Builder search(RateLimit search) {
            this.search = search;
            return this;
        }

        /**
         * Setter for graphql.
         * @param  graphql  RateLimit value for graphql.
         * @return Builder
         */
        public Builder graphql(RateLimit graphql) {
            this.graphql = graphql;
            return this;
        }

        /**
         * Setter for sourceImport.
         * @param  sourceImport  RateLimit value for sourceImport.
         * @return Builder
         */
        public Builder sourceImport(RateLimit sourceImport) {
            this.sourceImport = sourceImport;
            return this;
        }

        /**
         * Setter for integrationManifest.
         * @param  integrationManifest  RateLimit value for integrationManifest.
         * @return Builder
         */
        public Builder integrationManifest(RateLimit integrationManifest) {
            this.integrationManifest = integrationManifest;
            return this;
        }

        /**
         * Setter for codeScanningUpload.
         * @param  codeScanningUpload  RateLimit value for codeScanningUpload.
         * @return Builder
         */
        public Builder codeScanningUpload(RateLimit codeScanningUpload) {
            this.codeScanningUpload = codeScanningUpload;
            return this;
        }

        /**
         * Setter for actionsRunnerRegistration.
         * @param  actionsRunnerRegistration  RateLimit value for actionsRunnerRegistration.
         * @return Builder
         */
        public Builder actionsRunnerRegistration(RateLimit actionsRunnerRegistration) {
            this.actionsRunnerRegistration = actionsRunnerRegistration;
            return this;
        }

        /**
         * Setter for scim.
         * @param  scim  RateLimit value for scim.
         * @return Builder
         */
        public Builder scim(RateLimit scim) {
            this.scim = scim;
            return this;
        }

        /**
         * Setter for dependencySnapshots.
         * @param  dependencySnapshots  RateLimit value for dependencySnapshots.
         * @return Builder
         */
        public Builder dependencySnapshots(RateLimit dependencySnapshots) {
            this.dependencySnapshots = dependencySnapshots;
            return this;
        }

        /**
         * Builds a new {@link Resources} object using the set fields.
         * @return {@link Resources}
         */
        public Resources build() {
            return new Resources(core, search, graphql, sourceImport, integrationManifest,
                    codeScanningUpload, actionsRunnerRegistration, scim, dependencySnapshots);
        }
    }
}

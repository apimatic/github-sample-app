/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for App10 type.
 */
public class App10 {
    private LocalDateTime createdAt;
    private String description;
    private List<Event7Enum> events;
    private String externalUrl;
    private String htmlUrl;
    private Integer id;
    private String name;
    private String nodeId;
    private Object owner;
    private Permissions35 permissions;
    private String slug;
    private LocalDateTime updatedAt;

    /**
     * Default constructor.
     */
    public App10() {
    }

    /**
     * Initialization constructor.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  description  String value for description.
     * @param  externalUrl  String value for externalUrl.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  id  Integer value for id.
     * @param  name  String value for name.
     * @param  nodeId  String value for nodeId.
     * @param  owner  Object value for owner.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  events  List of Event7Enum value for events.
     * @param  permissions  Permissions35 value for permissions.
     * @param  slug  String value for slug.
     */
    public App10(
            LocalDateTime createdAt,
            String description,
            String externalUrl,
            String htmlUrl,
            Integer id,
            String name,
            String nodeId,
            Object owner,
            LocalDateTime updatedAt,
            List<Event7Enum> events,
            Permissions35 permissions,
            String slug) {
        this.createdAt = createdAt;
        this.description = description;
        this.events = events;
        this.externalUrl = externalUrl;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.name = name;
        this.nodeId = nodeId;
        this.owner = owner;
        this.permissions = permissions;
        this.slug = slug;
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Events.
     * The list of events for the GitHub app
     * @return Returns the List of Event7Enum
     */
    @JsonGetter("events")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Event7Enum> getEvents() {
        return events;
    }

    /**
     * Setter for Events.
     * The list of events for the GitHub app
     * @param events Value for List of Event7Enum
     */
    @JsonSetter("events")
    public void setEvents(List<Event7Enum> events) {
        this.events = events;
    }

    /**
     * Getter for ExternalUrl.
     * @return Returns the String
     */
    @JsonGetter("external_url")
    public String getExternalUrl() {
        return externalUrl;
    }

    /**
     * Setter for ExternalUrl.
     * @param externalUrl Value for String
     */
    @JsonSetter("external_url")
    public void setExternalUrl(String externalUrl) {
        this.externalUrl = externalUrl;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Id.
     * Unique identifier of the GitHub app
     * @return Returns the Integer
     */
    @JsonGetter("id")
    public Integer getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier of the GitHub app
     * @param id Value for Integer
     */
    @JsonSetter("id")
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for Name.
     * The name of the GitHub app
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the GitHub app
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Owner.
     * @return Returns the Object
     */
    @JsonGetter("owner")
    public Object getOwner() {
        return owner;
    }

    /**
     * Setter for Owner.
     * @param owner Value for Object
     */
    @JsonSetter("owner")
    public void setOwner(Object owner) {
        this.owner = owner;
    }

    /**
     * Getter for Permissions.
     * @return Returns the Permissions35
     */
    @JsonGetter("permissions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Permissions35 getPermissions() {
        return permissions;
    }

    /**
     * Setter for Permissions.
     * @param permissions Value for Permissions35
     */
    @JsonSetter("permissions")
    public void setPermissions(Permissions35 permissions) {
        this.permissions = permissions;
    }

    /**
     * Getter for Slug.
     * The slug name of the GitHub app
     * @return Returns the String
     */
    @JsonGetter("slug")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSlug() {
        return slug;
    }

    /**
     * Setter for Slug.
     * The slug name of the GitHub app
     * @param slug Value for String
     */
    @JsonSetter("slug")
    public void setSlug(String slug) {
        this.slug = slug;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Converts this App10 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "App10 [" + "createdAt=" + createdAt + ", description=" + description
                + ", externalUrl=" + externalUrl + ", htmlUrl=" + htmlUrl + ", id=" + id + ", name="
                + name + ", nodeId=" + nodeId + ", owner=" + owner + ", updatedAt=" + updatedAt
                + ", events=" + events + ", permissions=" + permissions + ", slug=" + slug + "]";
    }

    /**
     * Builds a new {@link App10.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link App10.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(createdAt, description, externalUrl, htmlUrl, id, name,
                nodeId, owner, updatedAt)
                .events(getEvents())
                .permissions(getPermissions())
                .slug(getSlug());
        return builder;
    }

    /**
     * Class to build instances of {@link App10}.
     */
    public static class Builder {
        private LocalDateTime createdAt;
        private String description;
        private String externalUrl;
        private String htmlUrl;
        private Integer id;
        private String name;
        private String nodeId;
        private Object owner;
        private LocalDateTime updatedAt;
        private List<Event7Enum> events;
        private Permissions35 permissions;
        private String slug;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  description  String value for description.
         * @param  externalUrl  String value for externalUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  id  Integer value for id.
         * @param  name  String value for name.
         * @param  nodeId  String value for nodeId.
         * @param  owner  Object value for owner.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         */
        public Builder(LocalDateTime createdAt, String description, String externalUrl,
                String htmlUrl, Integer id, String name, String nodeId, Object owner,
                LocalDateTime updatedAt) {
            this.createdAt = createdAt;
            this.description = description;
            this.externalUrl = externalUrl;
            this.htmlUrl = htmlUrl;
            this.id = id;
            this.name = name;
            this.nodeId = nodeId;
            this.owner = owner;
            this.updatedAt = updatedAt;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for externalUrl.
         * @param  externalUrl  String value for externalUrl.
         * @return Builder
         */
        public Builder externalUrl(String externalUrl) {
            this.externalUrl = externalUrl;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  Integer value for id.
         * @return Builder
         */
        public Builder id(Integer id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for owner.
         * @param  owner  Object value for owner.
         * @return Builder
         */
        public Builder owner(Object owner) {
            this.owner = owner;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for events.
         * @param  events  List of Event7Enum value for events.
         * @return Builder
         */
        public Builder events(List<Event7Enum> events) {
            this.events = events;
            return this;
        }

        /**
         * Setter for permissions.
         * @param  permissions  Permissions35 value for permissions.
         * @return Builder
         */
        public Builder permissions(Permissions35 permissions) {
            this.permissions = permissions;
            return this;
        }

        /**
         * Setter for slug.
         * @param  slug  String value for slug.
         * @return Builder
         */
        public Builder slug(String slug) {
            this.slug = slug;
            return this;
        }

        /**
         * Builds a new {@link App10} object using the set fields.
         * @return {@link App10}
         */
        public App10 build() {
            return new App10(createdAt, description, externalUrl, htmlUrl, id, name, nodeId, owner,
                    updatedAt, events, permissions, slug);
        }
    }
}

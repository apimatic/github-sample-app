/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Changes type.
 */
public class Changes {
    private AdminEnforced adminEnforced;
    private AuthorizedActorNames authorizedActorNames;
    private AdminEnforced authorizedActorsOnly;
    private AdminEnforced authorizedDismissalActorsOnly;
    private LinearHistoryRequirementEnforcementLevel2 linearHistoryRequirementEnforcementLevel;
    private AuthorizedActorNames requiredStatusChecks;
    private LinearHistoryRequirementEnforcementLevel2 requiredStatusChecksEnforcementLevel;

    /**
     * Default constructor.
     */
    public Changes() {
    }

    /**
     * Initialization constructor.
     * @param  adminEnforced  AdminEnforced value for adminEnforced.
     * @param  authorizedActorNames  AuthorizedActorNames value for authorizedActorNames.
     * @param  authorizedActorsOnly  AdminEnforced value for authorizedActorsOnly.
     * @param  authorizedDismissalActorsOnly  AdminEnforced value for authorizedDismissalActorsOnly.
     * @param  linearHistoryRequirementEnforcementLevel  LinearHistoryRequirementEnforcementLevel2
     *         value for linearHistoryRequirementEnforcementLevel.
     * @param  requiredStatusChecks  AuthorizedActorNames value for requiredStatusChecks.
     * @param  requiredStatusChecksEnforcementLevel  LinearHistoryRequirementEnforcementLevel2 value
     *         for requiredStatusChecksEnforcementLevel.
     */
    public Changes(
            AdminEnforced adminEnforced,
            AuthorizedActorNames authorizedActorNames,
            AdminEnforced authorizedActorsOnly,
            AdminEnforced authorizedDismissalActorsOnly,
            LinearHistoryRequirementEnforcementLevel2 linearHistoryRequirementEnforcementLevel,
            AuthorizedActorNames requiredStatusChecks,
            LinearHistoryRequirementEnforcementLevel2 requiredStatusChecksEnforcementLevel) {
        this.adminEnforced = adminEnforced;
        this.authorizedActorNames = authorizedActorNames;
        this.authorizedActorsOnly = authorizedActorsOnly;
        this.authorizedDismissalActorsOnly = authorizedDismissalActorsOnly;
        this.linearHistoryRequirementEnforcementLevel = linearHistoryRequirementEnforcementLevel;
        this.requiredStatusChecks = requiredStatusChecks;
        this.requiredStatusChecksEnforcementLevel = requiredStatusChecksEnforcementLevel;
    }

    /**
     * Getter for AdminEnforced.
     * @return Returns the AdminEnforced
     */
    @JsonGetter("admin_enforced")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AdminEnforced getAdminEnforced() {
        return adminEnforced;
    }

    /**
     * Setter for AdminEnforced.
     * @param adminEnforced Value for AdminEnforced
     */
    @JsonSetter("admin_enforced")
    public void setAdminEnforced(AdminEnforced adminEnforced) {
        this.adminEnforced = adminEnforced;
    }

    /**
     * Getter for AuthorizedActorNames.
     * @return Returns the AuthorizedActorNames
     */
    @JsonGetter("authorized_actor_names")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AuthorizedActorNames getAuthorizedActorNames() {
        return authorizedActorNames;
    }

    /**
     * Setter for AuthorizedActorNames.
     * @param authorizedActorNames Value for AuthorizedActorNames
     */
    @JsonSetter("authorized_actor_names")
    public void setAuthorizedActorNames(AuthorizedActorNames authorizedActorNames) {
        this.authorizedActorNames = authorizedActorNames;
    }

    /**
     * Getter for AuthorizedActorsOnly.
     * @return Returns the AdminEnforced
     */
    @JsonGetter("authorized_actors_only")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AdminEnforced getAuthorizedActorsOnly() {
        return authorizedActorsOnly;
    }

    /**
     * Setter for AuthorizedActorsOnly.
     * @param authorizedActorsOnly Value for AdminEnforced
     */
    @JsonSetter("authorized_actors_only")
    public void setAuthorizedActorsOnly(AdminEnforced authorizedActorsOnly) {
        this.authorizedActorsOnly = authorizedActorsOnly;
    }

    /**
     * Getter for AuthorizedDismissalActorsOnly.
     * @return Returns the AdminEnforced
     */
    @JsonGetter("authorized_dismissal_actors_only")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AdminEnforced getAuthorizedDismissalActorsOnly() {
        return authorizedDismissalActorsOnly;
    }

    /**
     * Setter for AuthorizedDismissalActorsOnly.
     * @param authorizedDismissalActorsOnly Value for AdminEnforced
     */
    @JsonSetter("authorized_dismissal_actors_only")
    public void setAuthorizedDismissalActorsOnly(AdminEnforced authorizedDismissalActorsOnly) {
        this.authorizedDismissalActorsOnly = authorizedDismissalActorsOnly;
    }

    /**
     * Getter for LinearHistoryRequirementEnforcementLevel.
     * @return Returns the LinearHistoryRequirementEnforcementLevel2
     */
    @JsonGetter("linear_history_requirement_enforcement_level")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public LinearHistoryRequirementEnforcementLevel2 getLinearHistoryRequirementEnforcementLevel() {
        return linearHistoryRequirementEnforcementLevel;
    }

    /**
     * Setter for LinearHistoryRequirementEnforcementLevel.
     * @param linearHistoryRequirementEnforcementLevel Value for LinearHistoryRequirementEnforcementLevel2
     */
    @JsonSetter("linear_history_requirement_enforcement_level")
    public void setLinearHistoryRequirementEnforcementLevel(LinearHistoryRequirementEnforcementLevel2 linearHistoryRequirementEnforcementLevel) {
        this.linearHistoryRequirementEnforcementLevel = linearHistoryRequirementEnforcementLevel;
    }

    /**
     * Getter for RequiredStatusChecks.
     * @return Returns the AuthorizedActorNames
     */
    @JsonGetter("required_status_checks")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AuthorizedActorNames getRequiredStatusChecks() {
        return requiredStatusChecks;
    }

    /**
     * Setter for RequiredStatusChecks.
     * @param requiredStatusChecks Value for AuthorizedActorNames
     */
    @JsonSetter("required_status_checks")
    public void setRequiredStatusChecks(AuthorizedActorNames requiredStatusChecks) {
        this.requiredStatusChecks = requiredStatusChecks;
    }

    /**
     * Getter for RequiredStatusChecksEnforcementLevel.
     * @return Returns the LinearHistoryRequirementEnforcementLevel2
     */
    @JsonGetter("required_status_checks_enforcement_level")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public LinearHistoryRequirementEnforcementLevel2 getRequiredStatusChecksEnforcementLevel() {
        return requiredStatusChecksEnforcementLevel;
    }

    /**
     * Setter for RequiredStatusChecksEnforcementLevel.
     * @param requiredStatusChecksEnforcementLevel Value for LinearHistoryRequirementEnforcementLevel2
     */
    @JsonSetter("required_status_checks_enforcement_level")
    public void setRequiredStatusChecksEnforcementLevel(LinearHistoryRequirementEnforcementLevel2 requiredStatusChecksEnforcementLevel) {
        this.requiredStatusChecksEnforcementLevel = requiredStatusChecksEnforcementLevel;
    }

    /**
     * Converts this Changes into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Changes [" + "adminEnforced=" + adminEnforced + ", authorizedActorNames="
                + authorizedActorNames + ", authorizedActorsOnly=" + authorizedActorsOnly
                + ", authorizedDismissalActorsOnly=" + authorizedDismissalActorsOnly
                + ", linearHistoryRequirementEnforcementLevel="
                + linearHistoryRequirementEnforcementLevel + ", requiredStatusChecks="
                + requiredStatusChecks + ", requiredStatusChecksEnforcementLevel="
                + requiredStatusChecksEnforcementLevel + "]";
    }

    /**
     * Builds a new {@link Changes.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Changes.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .adminEnforced(getAdminEnforced())
                .authorizedActorNames(getAuthorizedActorNames())
                .authorizedActorsOnly(getAuthorizedActorsOnly())
                .authorizedDismissalActorsOnly(getAuthorizedDismissalActorsOnly())
                .linearHistoryRequirementEnforcementLevel(getLinearHistoryRequirementEnforcementLevel())
                .requiredStatusChecks(getRequiredStatusChecks())
                .requiredStatusChecksEnforcementLevel(getRequiredStatusChecksEnforcementLevel());
        return builder;
    }

    /**
     * Class to build instances of {@link Changes}.
     */
    public static class Builder {
        private AdminEnforced adminEnforced;
        private AuthorizedActorNames authorizedActorNames;
        private AdminEnforced authorizedActorsOnly;
        private AdminEnforced authorizedDismissalActorsOnly;
        private LinearHistoryRequirementEnforcementLevel2 linearHistoryRequirementEnforcementLevel;
        private AuthorizedActorNames requiredStatusChecks;
        private LinearHistoryRequirementEnforcementLevel2 requiredStatusChecksEnforcementLevel;



        /**
         * Setter for adminEnforced.
         * @param  adminEnforced  AdminEnforced value for adminEnforced.
         * @return Builder
         */
        public Builder adminEnforced(AdminEnforced adminEnforced) {
            this.adminEnforced = adminEnforced;
            return this;
        }

        /**
         * Setter for authorizedActorNames.
         * @param  authorizedActorNames  AuthorizedActorNames value for authorizedActorNames.
         * @return Builder
         */
        public Builder authorizedActorNames(AuthorizedActorNames authorizedActorNames) {
            this.authorizedActorNames = authorizedActorNames;
            return this;
        }

        /**
         * Setter for authorizedActorsOnly.
         * @param  authorizedActorsOnly  AdminEnforced value for authorizedActorsOnly.
         * @return Builder
         */
        public Builder authorizedActorsOnly(AdminEnforced authorizedActorsOnly) {
            this.authorizedActorsOnly = authorizedActorsOnly;
            return this;
        }

        /**
         * Setter for authorizedDismissalActorsOnly.
         * @param  authorizedDismissalActorsOnly  AdminEnforced value for
         *         authorizedDismissalActorsOnly.
         * @return Builder
         */
        public Builder authorizedDismissalActorsOnly(
                AdminEnforced authorizedDismissalActorsOnly) {
            this.authorizedDismissalActorsOnly = authorizedDismissalActorsOnly;
            return this;
        }

        /**
         * Setter for linearHistoryRequirementEnforcementLevel.
         * @param  linearHistoryRequirementEnforcementLevel
         *         LinearHistoryRequirementEnforcementLevel2 value for
         *         linearHistoryRequirementEnforcementLevel.
         * @return Builder
         */
        public Builder linearHistoryRequirementEnforcementLevel(
                LinearHistoryRequirementEnforcementLevel2 linearHistoryRequirementEnforcementLevel) {
            this.linearHistoryRequirementEnforcementLevel =
                    linearHistoryRequirementEnforcementLevel;
            return this;
        }

        /**
         * Setter for requiredStatusChecks.
         * @param  requiredStatusChecks  AuthorizedActorNames value for requiredStatusChecks.
         * @return Builder
         */
        public Builder requiredStatusChecks(AuthorizedActorNames requiredStatusChecks) {
            this.requiredStatusChecks = requiredStatusChecks;
            return this;
        }

        /**
         * Setter for requiredStatusChecksEnforcementLevel.
         * @param  requiredStatusChecksEnforcementLevel  LinearHistoryRequirementEnforcementLevel2
         *         value for requiredStatusChecksEnforcementLevel.
         * @return Builder
         */
        public Builder requiredStatusChecksEnforcementLevel(
                LinearHistoryRequirementEnforcementLevel2 requiredStatusChecksEnforcementLevel) {
            this.requiredStatusChecksEnforcementLevel = requiredStatusChecksEnforcementLevel;
            return this;
        }

        /**
         * Builds a new {@link Changes} object using the set fields.
         * @return {@link Changes}
         */
        public Changes build() {
            return new Changes(adminEnforced, authorizedActorNames, authorizedActorsOnly,
                    authorizedDismissalActorsOnly, linearHistoryRequirementEnforcementLevel,
                    requiredStatusChecks, requiredStatusChecksEnforcementLevel);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for InstallationToken type.
 */
public class InstallationToken {
    private String token;
    private String expiresAt;
    private Permissions3 permissions;
    private RepositorySelection1Enum repositorySelection;
    private List<Repository> repositories;
    private String singleFile;
    private Boolean hasMultipleSingleFiles;
    private List<String> singleFilePaths;

    /**
     * Default constructor.
     */
    public InstallationToken() {
    }

    /**
     * Initialization constructor.
     * @param  token  String value for token.
     * @param  expiresAt  String value for expiresAt.
     * @param  permissions  Permissions3 value for permissions.
     * @param  repositorySelection  RepositorySelection1Enum value for repositorySelection.
     * @param  repositories  List of Repository value for repositories.
     * @param  singleFile  String value for singleFile.
     * @param  hasMultipleSingleFiles  Boolean value for hasMultipleSingleFiles.
     * @param  singleFilePaths  List of String value for singleFilePaths.
     */
    public InstallationToken(
            String token,
            String expiresAt,
            Permissions3 permissions,
            RepositorySelection1Enum repositorySelection,
            List<Repository> repositories,
            String singleFile,
            Boolean hasMultipleSingleFiles,
            List<String> singleFilePaths) {
        this.token = token;
        this.expiresAt = expiresAt;
        this.permissions = permissions;
        this.repositorySelection = repositorySelection;
        this.repositories = repositories;
        this.singleFile = singleFile;
        this.hasMultipleSingleFiles = hasMultipleSingleFiles;
        this.singleFilePaths = singleFilePaths;
    }

    /**
     * Getter for Token.
     * @return Returns the String
     */
    @JsonGetter("token")
    public String getToken() {
        return token;
    }

    /**
     * Setter for Token.
     * @param token Value for String
     */
    @JsonSetter("token")
    public void setToken(String token) {
        this.token = token;
    }

    /**
     * Getter for ExpiresAt.
     * @return Returns the String
     */
    @JsonGetter("expires_at")
    public String getExpiresAt() {
        return expiresAt;
    }

    /**
     * Setter for ExpiresAt.
     * @param expiresAt Value for String
     */
    @JsonSetter("expires_at")
    public void setExpiresAt(String expiresAt) {
        this.expiresAt = expiresAt;
    }

    /**
     * Getter for Permissions.
     * @return Returns the Permissions3
     */
    @JsonGetter("permissions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Permissions3 getPermissions() {
        return permissions;
    }

    /**
     * Setter for Permissions.
     * @param permissions Value for Permissions3
     */
    @JsonSetter("permissions")
    public void setPermissions(Permissions3 permissions) {
        this.permissions = permissions;
    }

    /**
     * Getter for RepositorySelection.
     * @return Returns the RepositorySelection1Enum
     */
    @JsonGetter("repository_selection")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RepositorySelection1Enum getRepositorySelection() {
        return repositorySelection;
    }

    /**
     * Setter for RepositorySelection.
     * @param repositorySelection Value for RepositorySelection1Enum
     */
    @JsonSetter("repository_selection")
    public void setRepositorySelection(RepositorySelection1Enum repositorySelection) {
        this.repositorySelection = repositorySelection;
    }

    /**
     * Getter for Repositories.
     * @return Returns the List of Repository
     */
    @JsonGetter("repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Repository> getRepositories() {
        return repositories;
    }

    /**
     * Setter for Repositories.
     * @param repositories Value for List of Repository
     */
    @JsonSetter("repositories")
    public void setRepositories(List<Repository> repositories) {
        this.repositories = repositories;
    }

    /**
     * Getter for SingleFile.
     * @return Returns the String
     */
    @JsonGetter("single_file")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSingleFile() {
        return singleFile;
    }

    /**
     * Setter for SingleFile.
     * @param singleFile Value for String
     */
    @JsonSetter("single_file")
    public void setSingleFile(String singleFile) {
        this.singleFile = singleFile;
    }

    /**
     * Getter for HasMultipleSingleFiles.
     * @return Returns the Boolean
     */
    @JsonGetter("has_multiple_single_files")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasMultipleSingleFiles() {
        return hasMultipleSingleFiles;
    }

    /**
     * Setter for HasMultipleSingleFiles.
     * @param hasMultipleSingleFiles Value for Boolean
     */
    @JsonSetter("has_multiple_single_files")
    public void setHasMultipleSingleFiles(Boolean hasMultipleSingleFiles) {
        this.hasMultipleSingleFiles = hasMultipleSingleFiles;
    }

    /**
     * Getter for SingleFilePaths.
     * @return Returns the List of String
     */
    @JsonGetter("single_file_paths")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getSingleFilePaths() {
        return singleFilePaths;
    }

    /**
     * Setter for SingleFilePaths.
     * @param singleFilePaths Value for List of String
     */
    @JsonSetter("single_file_paths")
    public void setSingleFilePaths(List<String> singleFilePaths) {
        this.singleFilePaths = singleFilePaths;
    }

    /**
     * Converts this InstallationToken into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "InstallationToken [" + "token=" + token + ", expiresAt=" + expiresAt
                + ", permissions=" + permissions + ", repositorySelection=" + repositorySelection
                + ", repositories=" + repositories + ", singleFile=" + singleFile
                + ", hasMultipleSingleFiles=" + hasMultipleSingleFiles + ", singleFilePaths="
                + singleFilePaths + "]";
    }

    /**
     * Builds a new {@link InstallationToken.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link InstallationToken.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(token, expiresAt)
                .permissions(getPermissions())
                .repositorySelection(getRepositorySelection())
                .repositories(getRepositories())
                .singleFile(getSingleFile())
                .hasMultipleSingleFiles(getHasMultipleSingleFiles())
                .singleFilePaths(getSingleFilePaths());
        return builder;
    }

    /**
     * Class to build instances of {@link InstallationToken}.
     */
    public static class Builder {
        private String token;
        private String expiresAt;
        private Permissions3 permissions;
        private RepositorySelection1Enum repositorySelection;
        private List<Repository> repositories;
        private String singleFile;
        private Boolean hasMultipleSingleFiles;
        private List<String> singleFilePaths;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  token  String value for token.
         * @param  expiresAt  String value for expiresAt.
         */
        public Builder(String token, String expiresAt) {
            this.token = token;
            this.expiresAt = expiresAt;
        }

        /**
         * Setter for token.
         * @param  token  String value for token.
         * @return Builder
         */
        public Builder token(String token) {
            this.token = token;
            return this;
        }

        /**
         * Setter for expiresAt.
         * @param  expiresAt  String value for expiresAt.
         * @return Builder
         */
        public Builder expiresAt(String expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * Setter for permissions.
         * @param  permissions  Permissions3 value for permissions.
         * @return Builder
         */
        public Builder permissions(Permissions3 permissions) {
            this.permissions = permissions;
            return this;
        }

        /**
         * Setter for repositorySelection.
         * @param  repositorySelection  RepositorySelection1Enum value for repositorySelection.
         * @return Builder
         */
        public Builder repositorySelection(RepositorySelection1Enum repositorySelection) {
            this.repositorySelection = repositorySelection;
            return this;
        }

        /**
         * Setter for repositories.
         * @param  repositories  List of Repository value for repositories.
         * @return Builder
         */
        public Builder repositories(List<Repository> repositories) {
            this.repositories = repositories;
            return this;
        }

        /**
         * Setter for singleFile.
         * @param  singleFile  String value for singleFile.
         * @return Builder
         */
        public Builder singleFile(String singleFile) {
            this.singleFile = singleFile;
            return this;
        }

        /**
         * Setter for hasMultipleSingleFiles.
         * @param  hasMultipleSingleFiles  Boolean value for hasMultipleSingleFiles.
         * @return Builder
         */
        public Builder hasMultipleSingleFiles(Boolean hasMultipleSingleFiles) {
            this.hasMultipleSingleFiles = hasMultipleSingleFiles;
            return this;
        }

        /**
         * Setter for singleFilePaths.
         * @param  singleFilePaths  List of String value for singleFilePaths.
         * @return Builder
         */
        public Builder singleFilePaths(List<String> singleFilePaths) {
            this.singleFilePaths = singleFilePaths;
            return this;
        }

        /**
         * Builds a new {@link InstallationToken} object using the set fields.
         * @return {@link InstallationToken}
         */
        public InstallationToken build() {
            return new InstallationToken(token, expiresAt, permissions, repositorySelection,
                    repositories, singleFile, hasMultipleSingleFiles, singleFilePaths);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;

/**
 * This is a model class for ReposCollaboratorsUsernameResponse type.
 */
public class ReposCollaboratorsUsernameResponse {
    private int id;
    private Repository7 repository;
    private Object invitee;
    private Object inviter;
    private Permissions15Enum permissions;
    private LocalDateTime createdAt;
    private Boolean expired;
    private String url;
    private String htmlUrl;
    private String nodeId;

    /**
     * Default constructor.
     */
    public ReposCollaboratorsUsernameResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  repository  Repository7 value for repository.
     * @param  invitee  Object value for invitee.
     * @param  inviter  Object value for inviter.
     * @param  permissions  Permissions15Enum value for permissions.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  url  String value for url.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  nodeId  String value for nodeId.
     * @param  expired  Boolean value for expired.
     */
    public ReposCollaboratorsUsernameResponse(
            int id,
            Repository7 repository,
            Object invitee,
            Object inviter,
            Permissions15Enum permissions,
            LocalDateTime createdAt,
            String url,
            String htmlUrl,
            String nodeId,
            Boolean expired) {
        this.id = id;
        this.repository = repository;
        this.invitee = invitee;
        this.inviter = inviter;
        this.permissions = permissions;
        this.createdAt = createdAt;
        this.expired = expired;
        this.url = url;
        this.htmlUrl = htmlUrl;
        this.nodeId = nodeId;
    }

    /**
     * Getter for Id.
     * Unique identifier of the repository invitation.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier of the repository invitation.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for Repository.
     * @return Returns the Repository7
     */
    @JsonGetter("repository")
    public Repository7 getRepository() {
        return repository;
    }

    /**
     * Setter for Repository.
     * @param repository Value for Repository7
     */
    @JsonSetter("repository")
    public void setRepository(Repository7 repository) {
        this.repository = repository;
    }

    /**
     * Getter for Invitee.
     * @return Returns the Object
     */
    @JsonGetter("invitee")
    public Object getInvitee() {
        return invitee;
    }

    /**
     * Setter for Invitee.
     * @param invitee Value for Object
     */
    @JsonSetter("invitee")
    public void setInvitee(Object invitee) {
        this.invitee = invitee;
    }

    /**
     * Getter for Inviter.
     * @return Returns the Object
     */
    @JsonGetter("inviter")
    public Object getInviter() {
        return inviter;
    }

    /**
     * Setter for Inviter.
     * @param inviter Value for Object
     */
    @JsonSetter("inviter")
    public void setInviter(Object inviter) {
        this.inviter = inviter;
    }

    /**
     * Getter for Permissions.
     * @return Returns the Permissions15Enum
     */
    @JsonGetter("permissions")
    public Permissions15Enum getPermissions() {
        return permissions;
    }

    /**
     * Setter for Permissions.
     * @param permissions Value for Permissions15Enum
     */
    @JsonSetter("permissions")
    public void setPermissions(Permissions15Enum permissions) {
        this.permissions = permissions;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for Expired.
     * Whether or not the invitation has expired
     * @return Returns the Boolean
     */
    @JsonGetter("expired")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getExpired() {
        return expired;
    }

    /**
     * Setter for Expired.
     * Whether or not the invitation has expired
     * @param expired Value for Boolean
     */
    @JsonSetter("expired")
    public void setExpired(Boolean expired) {
        this.expired = expired;
    }

    /**
     * Getter for Url.
     * URL for the repository invitation
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * URL for the repository invitation
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Converts this ReposCollaboratorsUsernameResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposCollaboratorsUsernameResponse [" + "id=" + id + ", repository=" + repository
                + ", invitee=" + invitee + ", inviter=" + inviter + ", permissions=" + permissions
                + ", createdAt=" + createdAt + ", url=" + url + ", htmlUrl=" + htmlUrl + ", nodeId="
                + nodeId + ", expired=" + expired + "]";
    }

    /**
     * Builds a new {@link ReposCollaboratorsUsernameResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposCollaboratorsUsernameResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, repository, invitee, inviter, permissions, createdAt, url,
                htmlUrl, nodeId)
                .expired(getExpired());
        return builder;
    }

    /**
     * Class to build instances of {@link ReposCollaboratorsUsernameResponse}.
     */
    public static class Builder {
        private int id;
        private Repository7 repository;
        private Object invitee;
        private Object inviter;
        private Permissions15Enum permissions;
        private LocalDateTime createdAt;
        private String url;
        private String htmlUrl;
        private String nodeId;
        private Boolean expired;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  repository  Repository7 value for repository.
         * @param  invitee  Object value for invitee.
         * @param  inviter  Object value for inviter.
         * @param  permissions  Permissions15Enum value for permissions.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  url  String value for url.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  nodeId  String value for nodeId.
         */
        public Builder(int id, Repository7 repository, Object invitee, Object inviter,
                Permissions15Enum permissions, LocalDateTime createdAt, String url, String htmlUrl,
                String nodeId) {
            this.id = id;
            this.repository = repository;
            this.invitee = invitee;
            this.inviter = inviter;
            this.permissions = permissions;
            this.createdAt = createdAt;
            this.url = url;
            this.htmlUrl = htmlUrl;
            this.nodeId = nodeId;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for repository.
         * @param  repository  Repository7 value for repository.
         * @return Builder
         */
        public Builder repository(Repository7 repository) {
            this.repository = repository;
            return this;
        }

        /**
         * Setter for invitee.
         * @param  invitee  Object value for invitee.
         * @return Builder
         */
        public Builder invitee(Object invitee) {
            this.invitee = invitee;
            return this;
        }

        /**
         * Setter for inviter.
         * @param  inviter  Object value for inviter.
         * @return Builder
         */
        public Builder inviter(Object inviter) {
            this.inviter = inviter;
            return this;
        }

        /**
         * Setter for permissions.
         * @param  permissions  Permissions15Enum value for permissions.
         * @return Builder
         */
        public Builder permissions(Permissions15Enum permissions) {
            this.permissions = permissions;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for expired.
         * @param  expired  Boolean value for expired.
         * @return Builder
         */
        public Builder expired(Boolean expired) {
            this.expired = expired;
            return this;
        }

        /**
         * Builds a new {@link ReposCollaboratorsUsernameResponse} object using the set fields.
         * @return {@link ReposCollaboratorsUsernameResponse}
         */
        public ReposCollaboratorsUsernameResponse build() {
            return new ReposCollaboratorsUsernameResponse(id, repository, invitee, inviter,
                    permissions, createdAt, url, htmlUrl, nodeId, expired);
        }
    }
}

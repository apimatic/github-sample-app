/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import com.github.api.models.containers.Issue16Assignees;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for Issue16 type.
 */
public class Issue16 {
    private Object activeLockReason;
    private Object assignee;
    private List<Issue16Assignees> assignees;
    private AuthorAssociationEnum authorAssociation;
    private String body;
    private LocalDateTime closedAt;
    private int comments;
    private String commentsUrl;
    private LocalDateTime createdAt;
    private Boolean draft;
    private String eventsUrl;
    private String htmlUrl;
    private int id;
    private List<Label10> labels;
    private String labelsUrl;
    private Boolean locked;
    private Object milestone;
    private String nodeId;
    private int number;
    private Object performedViaGithubApp;
    private PullRequest7 pullRequest;
    private ReactionRollup reactions;
    private String repositoryUrl;
    private State45Enum state;
    private OptionalNullable<String> stateReason;
    private String timelineUrl;
    private String title;
    private LocalDateTime updatedAt;
    private String url;
    private Object user;

    /**
     * Default constructor.
     */
    public Issue16() {
    }

    /**
     * Initialization constructor.
     * @param  activeLockReason  Object value for activeLockReason.
     * @param  assignees  List of Issue16Assignees value for assignees.
     * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
     * @param  body  String value for body.
     * @param  closedAt  LocalDateTime value for closedAt.
     * @param  comments  int value for comments.
     * @param  commentsUrl  String value for commentsUrl.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  eventsUrl  String value for eventsUrl.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  id  int value for id.
     * @param  labelsUrl  String value for labelsUrl.
     * @param  milestone  Object value for milestone.
     * @param  nodeId  String value for nodeId.
     * @param  number  int value for number.
     * @param  reactions  ReactionRollup value for reactions.
     * @param  repositoryUrl  String value for repositoryUrl.
     * @param  state  State45Enum value for state.
     * @param  title  String value for title.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  url  String value for url.
     * @param  user  Object value for user.
     * @param  assignee  Object value for assignee.
     * @param  draft  Boolean value for draft.
     * @param  labels  List of Label10 value for labels.
     * @param  locked  Boolean value for locked.
     * @param  performedViaGithubApp  Object value for performedViaGithubApp.
     * @param  pullRequest  PullRequest7 value for pullRequest.
     * @param  stateReason  String value for stateReason.
     * @param  timelineUrl  String value for timelineUrl.
     */
    public Issue16(
            Object activeLockReason,
            List<Issue16Assignees> assignees,
            AuthorAssociationEnum authorAssociation,
            String body,
            LocalDateTime closedAt,
            int comments,
            String commentsUrl,
            LocalDateTime createdAt,
            String eventsUrl,
            String htmlUrl,
            int id,
            String labelsUrl,
            Object milestone,
            String nodeId,
            int number,
            ReactionRollup reactions,
            String repositoryUrl,
            State45Enum state,
            String title,
            LocalDateTime updatedAt,
            String url,
            Object user,
            Object assignee,
            Boolean draft,
            List<Label10> labels,
            Boolean locked,
            Object performedViaGithubApp,
            PullRequest7 pullRequest,
            String stateReason,
            String timelineUrl) {
        this.activeLockReason = activeLockReason;
        this.assignee = assignee;
        this.assignees = assignees;
        this.authorAssociation = authorAssociation;
        this.body = body;
        this.closedAt = closedAt;
        this.comments = comments;
        this.commentsUrl = commentsUrl;
        this.createdAt = createdAt;
        this.draft = draft;
        this.eventsUrl = eventsUrl;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.labels = labels;
        this.labelsUrl = labelsUrl;
        this.locked = locked;
        this.milestone = milestone;
        this.nodeId = nodeId;
        this.number = number;
        this.performedViaGithubApp = performedViaGithubApp;
        this.pullRequest = pullRequest;
        this.reactions = reactions;
        this.repositoryUrl = repositoryUrl;
        this.state = state;
        this.stateReason = OptionalNullable.of(stateReason);
        this.timelineUrl = timelineUrl;
        this.title = title;
        this.updatedAt = updatedAt;
        this.url = url;
        this.user = user;
    }

    /**
     * Internal initialization constructor.
     */
    protected Issue16(Object activeLockReason, List<Issue16Assignees> assignees,
            AuthorAssociationEnum authorAssociation, String body, LocalDateTime closedAt,
            int comments, String commentsUrl, LocalDateTime createdAt, String eventsUrl,
            String htmlUrl, int id, String labelsUrl, Object milestone, String nodeId, int number,
            ReactionRollup reactions, String repositoryUrl, State45Enum state, String title,
            LocalDateTime updatedAt, String url, Object user, Object assignee, Boolean draft,
            List<Label10> labels, Boolean locked, Object performedViaGithubApp,
            PullRequest7 pullRequest, OptionalNullable<String> stateReason, String timelineUrl) {
        this.activeLockReason = activeLockReason;
        this.assignee = assignee;
        this.assignees = assignees;
        this.authorAssociation = authorAssociation;
        this.body = body;
        this.closedAt = closedAt;
        this.comments = comments;
        this.commentsUrl = commentsUrl;
        this.createdAt = createdAt;
        this.draft = draft;
        this.eventsUrl = eventsUrl;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.labels = labels;
        this.labelsUrl = labelsUrl;
        this.locked = locked;
        this.milestone = milestone;
        this.nodeId = nodeId;
        this.number = number;
        this.performedViaGithubApp = performedViaGithubApp;
        this.pullRequest = pullRequest;
        this.reactions = reactions;
        this.repositoryUrl = repositoryUrl;
        this.state = state;
        this.stateReason = stateReason;
        this.timelineUrl = timelineUrl;
        this.title = title;
        this.updatedAt = updatedAt;
        this.url = url;
        this.user = user;
    }

    /**
     * Getter for ActiveLockReason.
     * @return Returns the Object
     */
    @JsonGetter("active_lock_reason")
    public Object getActiveLockReason() {
        return activeLockReason;
    }

    /**
     * Setter for ActiveLockReason.
     * @param activeLockReason Value for Object
     */
    @JsonSetter("active_lock_reason")
    public void setActiveLockReason(Object activeLockReason) {
        this.activeLockReason = activeLockReason;
    }

    /**
     * Getter for Assignee.
     * @return Returns the Object
     */
    @JsonGetter("assignee")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getAssignee() {
        return assignee;
    }

    /**
     * Setter for Assignee.
     * @param assignee Value for Object
     */
    @JsonSetter("assignee")
    public void setAssignee(Object assignee) {
        this.assignee = assignee;
    }

    /**
     * Getter for Assignees.
     * @return Returns the List of Issue16Assignees
     */
    @JsonGetter("assignees")
    public List<Issue16Assignees> getAssignees() {
        return assignees;
    }

    /**
     * Setter for Assignees.
     * @param assignees Value for List of Issue16Assignees
     */
    @JsonSetter("assignees")
    public void setAssignees(List<Issue16Assignees> assignees) {
        this.assignees = assignees;
    }

    /**
     * Getter for AuthorAssociation.
     * @return Returns the AuthorAssociationEnum
     */
    @JsonGetter("author_association")
    public AuthorAssociationEnum getAuthorAssociation() {
        return authorAssociation;
    }

    /**
     * Setter for AuthorAssociation.
     * @param authorAssociation Value for AuthorAssociationEnum
     */
    @JsonSetter("author_association")
    public void setAuthorAssociation(AuthorAssociationEnum authorAssociation) {
        this.authorAssociation = authorAssociation;
    }

    /**
     * Getter for Body.
     * Contents of the issue
     * @return Returns the String
     */
    @JsonGetter("body")
    public String getBody() {
        return body;
    }

    /**
     * Setter for Body.
     * Contents of the issue
     * @param body Value for String
     */
    @JsonSetter("body")
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Getter for ClosedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("closed_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getClosedAt() {
        return closedAt;
    }

    /**
     * Setter for ClosedAt.
     * @param closedAt Value for LocalDateTime
     */
    @JsonSetter("closed_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setClosedAt(LocalDateTime closedAt) {
        this.closedAt = closedAt;
    }

    /**
     * Getter for Comments.
     * @return Returns the int
     */
    @JsonGetter("comments")
    public int getComments() {
        return comments;
    }

    /**
     * Setter for Comments.
     * @param comments Value for int
     */
    @JsonSetter("comments")
    public void setComments(int comments) {
        this.comments = comments;
    }

    /**
     * Getter for CommentsUrl.
     * @return Returns the String
     */
    @JsonGetter("comments_url")
    public String getCommentsUrl() {
        return commentsUrl;
    }

    /**
     * Setter for CommentsUrl.
     * @param commentsUrl Value for String
     */
    @JsonSetter("comments_url")
    public void setCommentsUrl(String commentsUrl) {
        this.commentsUrl = commentsUrl;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for Draft.
     * @return Returns the Boolean
     */
    @JsonGetter("draft")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDraft() {
        return draft;
    }

    /**
     * Setter for Draft.
     * @param draft Value for Boolean
     */
    @JsonSetter("draft")
    public void setDraft(Boolean draft) {
        this.draft = draft;
    }

    /**
     * Getter for EventsUrl.
     * @return Returns the String
     */
    @JsonGetter("events_url")
    public String getEventsUrl() {
        return eventsUrl;
    }

    /**
     * Setter for EventsUrl.
     * @param eventsUrl Value for String
     */
    @JsonSetter("events_url")
    public void setEventsUrl(String eventsUrl) {
        this.eventsUrl = eventsUrl;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for Labels.
     * @return Returns the List of Label10
     */
    @JsonGetter("labels")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Label10> getLabels() {
        return labels;
    }

    /**
     * Setter for Labels.
     * @param labels Value for List of Label10
     */
    @JsonSetter("labels")
    public void setLabels(List<Label10> labels) {
        this.labels = labels;
    }

    /**
     * Getter for LabelsUrl.
     * @return Returns the String
     */
    @JsonGetter("labels_url")
    public String getLabelsUrl() {
        return labelsUrl;
    }

    /**
     * Setter for LabelsUrl.
     * @param labelsUrl Value for String
     */
    @JsonSetter("labels_url")
    public void setLabelsUrl(String labelsUrl) {
        this.labelsUrl = labelsUrl;
    }

    /**
     * Getter for Locked.
     * @return Returns the Boolean
     */
    @JsonGetter("locked")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getLocked() {
        return locked;
    }

    /**
     * Setter for Locked.
     * @param locked Value for Boolean
     */
    @JsonSetter("locked")
    public void setLocked(Boolean locked) {
        this.locked = locked;
    }

    /**
     * Getter for Milestone.
     * @return Returns the Object
     */
    @JsonGetter("milestone")
    public Object getMilestone() {
        return milestone;
    }

    /**
     * Setter for Milestone.
     * @param milestone Value for Object
     */
    @JsonSetter("milestone")
    public void setMilestone(Object milestone) {
        this.milestone = milestone;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Number.
     * @return Returns the int
     */
    @JsonGetter("number")
    public int getNumber() {
        return number;
    }

    /**
     * Setter for Number.
     * @param number Value for int
     */
    @JsonSetter("number")
    public void setNumber(int number) {
        this.number = number;
    }

    /**
     * Getter for PerformedViaGithubApp.
     * @return Returns the Object
     */
    @JsonGetter("performed_via_github_app")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getPerformedViaGithubApp() {
        return performedViaGithubApp;
    }

    /**
     * Setter for PerformedViaGithubApp.
     * @param performedViaGithubApp Value for Object
     */
    @JsonSetter("performed_via_github_app")
    public void setPerformedViaGithubApp(Object performedViaGithubApp) {
        this.performedViaGithubApp = performedViaGithubApp;
    }

    /**
     * Getter for PullRequest.
     * @return Returns the PullRequest7
     */
    @JsonGetter("pull_request")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PullRequest7 getPullRequest() {
        return pullRequest;
    }

    /**
     * Setter for PullRequest.
     * @param pullRequest Value for PullRequest7
     */
    @JsonSetter("pull_request")
    public void setPullRequest(PullRequest7 pullRequest) {
        this.pullRequest = pullRequest;
    }

    /**
     * Getter for Reactions.
     * @return Returns the ReactionRollup
     */
    @JsonGetter("reactions")
    public ReactionRollup getReactions() {
        return reactions;
    }

    /**
     * Setter for Reactions.
     * @param reactions Value for ReactionRollup
     */
    @JsonSetter("reactions")
    public void setReactions(ReactionRollup reactions) {
        this.reactions = reactions;
    }

    /**
     * Getter for RepositoryUrl.
     * @return Returns the String
     */
    @JsonGetter("repository_url")
    public String getRepositoryUrl() {
        return repositoryUrl;
    }

    /**
     * Setter for RepositoryUrl.
     * @param repositoryUrl Value for String
     */
    @JsonSetter("repository_url")
    public void setRepositoryUrl(String repositoryUrl) {
        this.repositoryUrl = repositoryUrl;
    }

    /**
     * Getter for State.
     * @return Returns the State45Enum
     */
    @JsonGetter("state")
    public State45Enum getState() {
        return state;
    }

    /**
     * Setter for State.
     * @param state Value for State45Enum
     */
    @JsonSetter("state")
    public void setState(State45Enum state) {
        this.state = state;
    }

    /**
     * Internal Getter for StateReason.
     * @return Returns the Internal String
     */
    @JsonGetter("state_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStateReason() {
        return this.stateReason;
    }

    /**
     * Getter for StateReason.
     * @return Returns the String
     */
    public String getStateReason() {
        return OptionalNullable.getFrom(stateReason);
    }

    /**
     * Setter for StateReason.
     * @param stateReason Value for String
     */
    @JsonSetter("state_reason")
    public void setStateReason(String stateReason) {
        this.stateReason = OptionalNullable.of(stateReason);
    }

    /**
     * UnSetter for StateReason.
     */
    public void unsetStateReason() {
        stateReason = null;
    }

    /**
     * Getter for TimelineUrl.
     * @return Returns the String
     */
    @JsonGetter("timeline_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTimelineUrl() {
        return timelineUrl;
    }

    /**
     * Setter for TimelineUrl.
     * @param timelineUrl Value for String
     */
    @JsonSetter("timeline_url")
    public void setTimelineUrl(String timelineUrl) {
        this.timelineUrl = timelineUrl;
    }

    /**
     * Getter for Title.
     * Title of the issue
     * @return Returns the String
     */
    @JsonGetter("title")
    public String getTitle() {
        return title;
    }

    /**
     * Setter for Title.
     * Title of the issue
     * @param title Value for String
     */
    @JsonSetter("title")
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Url.
     * URL for the issue
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * URL for the issue
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for User.
     * @return Returns the Object
     */
    @JsonGetter("user")
    public Object getUser() {
        return user;
    }

    /**
     * Setter for User.
     * @param user Value for Object
     */
    @JsonSetter("user")
    public void setUser(Object user) {
        this.user = user;
    }

    /**
     * Converts this Issue16 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Issue16 [" + "activeLockReason=" + activeLockReason + ", assignees=" + assignees
                + ", authorAssociation=" + authorAssociation + ", body=" + body + ", closedAt="
                + closedAt + ", comments=" + comments + ", commentsUrl=" + commentsUrl
                + ", createdAt=" + createdAt + ", eventsUrl=" + eventsUrl + ", htmlUrl=" + htmlUrl
                + ", id=" + id + ", labelsUrl=" + labelsUrl + ", milestone=" + milestone
                + ", nodeId=" + nodeId + ", number=" + number + ", reactions=" + reactions
                + ", repositoryUrl=" + repositoryUrl + ", state=" + state + ", title=" + title
                + ", updatedAt=" + updatedAt + ", url=" + url + ", user=" + user + ", assignee="
                + assignee + ", draft=" + draft + ", labels=" + labels + ", locked=" + locked
                + ", performedViaGithubApp=" + performedViaGithubApp + ", pullRequest="
                + pullRequest + ", stateReason=" + stateReason + ", timelineUrl=" + timelineUrl
                + "]";
    }

    /**
     * Builds a new {@link Issue16.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Issue16.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(activeLockReason, assignees, authorAssociation, body,
                closedAt, comments, commentsUrl, createdAt, eventsUrl, htmlUrl, id, labelsUrl,
                milestone, nodeId, number, reactions, repositoryUrl, state, title, updatedAt, url,
                user)
                .assignee(getAssignee())
                .draft(getDraft())
                .labels(getLabels())
                .locked(getLocked())
                .performedViaGithubApp(getPerformedViaGithubApp())
                .pullRequest(getPullRequest())
                .timelineUrl(getTimelineUrl());
        builder.stateReason = internalGetStateReason();
        return builder;
    }

    /**
     * Class to build instances of {@link Issue16}.
     */
    public static class Builder {
        private Object activeLockReason;
        private List<Issue16Assignees> assignees;
        private AuthorAssociationEnum authorAssociation;
        private String body;
        private LocalDateTime closedAt;
        private int comments;
        private String commentsUrl;
        private LocalDateTime createdAt;
        private String eventsUrl;
        private String htmlUrl;
        private int id;
        private String labelsUrl;
        private Object milestone;
        private String nodeId;
        private int number;
        private ReactionRollup reactions;
        private String repositoryUrl;
        private State45Enum state;
        private String title;
        private LocalDateTime updatedAt;
        private String url;
        private Object user;
        private Object assignee;
        private Boolean draft;
        private List<Label10> labels;
        private Boolean locked;
        private Object performedViaGithubApp;
        private PullRequest7 pullRequest;
        private OptionalNullable<String> stateReason;
        private String timelineUrl;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  activeLockReason  Object value for activeLockReason.
         * @param  assignees  List of Issue16Assignees value for assignees.
         * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
         * @param  body  String value for body.
         * @param  closedAt  LocalDateTime value for closedAt.
         * @param  comments  int value for comments.
         * @param  commentsUrl  String value for commentsUrl.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  eventsUrl  String value for eventsUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  id  int value for id.
         * @param  labelsUrl  String value for labelsUrl.
         * @param  milestone  Object value for milestone.
         * @param  nodeId  String value for nodeId.
         * @param  number  int value for number.
         * @param  reactions  ReactionRollup value for reactions.
         * @param  repositoryUrl  String value for repositoryUrl.
         * @param  state  State45Enum value for state.
         * @param  title  String value for title.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  url  String value for url.
         * @param  user  Object value for user.
         */
        public Builder(Object activeLockReason, List<Issue16Assignees> assignees,
                AuthorAssociationEnum authorAssociation, String body, LocalDateTime closedAt,
                int comments, String commentsUrl, LocalDateTime createdAt, String eventsUrl,
                String htmlUrl, int id, String labelsUrl, Object milestone, String nodeId,
                int number, ReactionRollup reactions, String repositoryUrl, State45Enum state,
                String title, LocalDateTime updatedAt, String url, Object user) {
            this.activeLockReason = activeLockReason;
            this.assignees = assignees;
            this.authorAssociation = authorAssociation;
            this.body = body;
            this.closedAt = closedAt;
            this.comments = comments;
            this.commentsUrl = commentsUrl;
            this.createdAt = createdAt;
            this.eventsUrl = eventsUrl;
            this.htmlUrl = htmlUrl;
            this.id = id;
            this.labelsUrl = labelsUrl;
            this.milestone = milestone;
            this.nodeId = nodeId;
            this.number = number;
            this.reactions = reactions;
            this.repositoryUrl = repositoryUrl;
            this.state = state;
            this.title = title;
            this.updatedAt = updatedAt;
            this.url = url;
            this.user = user;
        }

        /**
         * Setter for activeLockReason.
         * @param  activeLockReason  Object value for activeLockReason.
         * @return Builder
         */
        public Builder activeLockReason(Object activeLockReason) {
            this.activeLockReason = activeLockReason;
            return this;
        }

        /**
         * Setter for assignees.
         * @param  assignees  List of Issue16Assignees value for assignees.
         * @return Builder
         */
        public Builder assignees(List<Issue16Assignees> assignees) {
            this.assignees = assignees;
            return this;
        }

        /**
         * Setter for authorAssociation.
         * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
         * @return Builder
         */
        public Builder authorAssociation(AuthorAssociationEnum authorAssociation) {
            this.authorAssociation = authorAssociation;
            return this;
        }

        /**
         * Setter for body.
         * @param  body  String value for body.
         * @return Builder
         */
        public Builder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Setter for closedAt.
         * @param  closedAt  LocalDateTime value for closedAt.
         * @return Builder
         */
        public Builder closedAt(LocalDateTime closedAt) {
            this.closedAt = closedAt;
            return this;
        }

        /**
         * Setter for comments.
         * @param  comments  int value for comments.
         * @return Builder
         */
        public Builder comments(int comments) {
            this.comments = comments;
            return this;
        }

        /**
         * Setter for commentsUrl.
         * @param  commentsUrl  String value for commentsUrl.
         * @return Builder
         */
        public Builder commentsUrl(String commentsUrl) {
            this.commentsUrl = commentsUrl;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for eventsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @return Builder
         */
        public Builder eventsUrl(String eventsUrl) {
            this.eventsUrl = eventsUrl;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for labelsUrl.
         * @param  labelsUrl  String value for labelsUrl.
         * @return Builder
         */
        public Builder labelsUrl(String labelsUrl) {
            this.labelsUrl = labelsUrl;
            return this;
        }

        /**
         * Setter for milestone.
         * @param  milestone  Object value for milestone.
         * @return Builder
         */
        public Builder milestone(Object milestone) {
            this.milestone = milestone;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for number.
         * @param  number  int value for number.
         * @return Builder
         */
        public Builder number(int number) {
            this.number = number;
            return this;
        }

        /**
         * Setter for reactions.
         * @param  reactions  ReactionRollup value for reactions.
         * @return Builder
         */
        public Builder reactions(ReactionRollup reactions) {
            this.reactions = reactions;
            return this;
        }

        /**
         * Setter for repositoryUrl.
         * @param  repositoryUrl  String value for repositoryUrl.
         * @return Builder
         */
        public Builder repositoryUrl(String repositoryUrl) {
            this.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  State45Enum value for state.
         * @return Builder
         */
        public Builder state(State45Enum state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for title.
         * @param  title  String value for title.
         * @return Builder
         */
        public Builder title(String title) {
            this.title = title;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for user.
         * @param  user  Object value for user.
         * @return Builder
         */
        public Builder user(Object user) {
            this.user = user;
            return this;
        }

        /**
         * Setter for assignee.
         * @param  assignee  Object value for assignee.
         * @return Builder
         */
        public Builder assignee(Object assignee) {
            this.assignee = assignee;
            return this;
        }

        /**
         * Setter for draft.
         * @param  draft  Boolean value for draft.
         * @return Builder
         */
        public Builder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }

        /**
         * Setter for labels.
         * @param  labels  List of Label10 value for labels.
         * @return Builder
         */
        public Builder labels(List<Label10> labels) {
            this.labels = labels;
            return this;
        }

        /**
         * Setter for locked.
         * @param  locked  Boolean value for locked.
         * @return Builder
         */
        public Builder locked(Boolean locked) {
            this.locked = locked;
            return this;
        }

        /**
         * Setter for performedViaGithubApp.
         * @param  performedViaGithubApp  Object value for performedViaGithubApp.
         * @return Builder
         */
        public Builder performedViaGithubApp(Object performedViaGithubApp) {
            this.performedViaGithubApp = performedViaGithubApp;
            return this;
        }

        /**
         * Setter for pullRequest.
         * @param  pullRequest  PullRequest7 value for pullRequest.
         * @return Builder
         */
        public Builder pullRequest(PullRequest7 pullRequest) {
            this.pullRequest = pullRequest;
            return this;
        }

        /**
         * Setter for stateReason.
         * @param  stateReason  String value for stateReason.
         * @return Builder
         */
        public Builder stateReason(String stateReason) {
            this.stateReason = OptionalNullable.of(stateReason);
            return this;
        }

        /**
         * UnSetter for stateReason.
         * @return Builder
         */
        public Builder unsetStateReason() {
            stateReason = null;
            return this;
        }

        /**
         * Setter for timelineUrl.
         * @param  timelineUrl  String value for timelineUrl.
         * @return Builder
         */
        public Builder timelineUrl(String timelineUrl) {
            this.timelineUrl = timelineUrl;
            return this;
        }

        /**
         * Builds a new {@link Issue16} object using the set fields.
         * @return {@link Issue16}
         */
        public Issue16 build() {
            return new Issue16(activeLockReason, assignees, authorAssociation, body, closedAt,
                    comments, commentsUrl, createdAt, eventsUrl, htmlUrl, id, labelsUrl, milestone,
                    nodeId, number, reactions, repositoryUrl, state, title, updatedAt, url, user,
                    assignee, draft, labels, locked, performedViaGithubApp, pullRequest,
                    stateReason, timelineUrl);
        }
    }
}

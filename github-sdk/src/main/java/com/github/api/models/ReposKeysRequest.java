/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for ReposKeysRequest type.
 */
public class ReposKeysRequest {
    private String title;
    private String key;
    private Boolean readOnly;

    /**
     * Default constructor.
     */
    public ReposKeysRequest() {
    }

    /**
     * Initialization constructor.
     * @param  key  String value for key.
     * @param  title  String value for title.
     * @param  readOnly  Boolean value for readOnly.
     */
    public ReposKeysRequest(
            String key,
            String title,
            Boolean readOnly) {
        this.title = title;
        this.key = key;
        this.readOnly = readOnly;
    }

    /**
     * Getter for Title.
     * A name for the key.
     * @return Returns the String
     */
    @JsonGetter("title")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTitle() {
        return title;
    }

    /**
     * Setter for Title.
     * A name for the key.
     * @param title Value for String
     */
    @JsonSetter("title")
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Getter for Key.
     * The contents of the key.
     * @return Returns the String
     */
    @JsonGetter("key")
    public String getKey() {
        return key;
    }

    /**
     * Setter for Key.
     * The contents of the key.
     * @param key Value for String
     */
    @JsonSetter("key")
    public void setKey(String key) {
        this.key = key;
    }

    /**
     * Getter for ReadOnly.
     * If `true`, the key will only be able to read repository contents. Otherwise, the key will be
     * able to read and write. Deploy keys with write access can perform the same actions as an
     * organization member with admin access, or a collaborator on a personal repository. For more
     * information, see "[Repository permission levels for an
     * organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)"
     * and "[Permission levels for a user account
     * repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
     * @return Returns the Boolean
     */
    @JsonGetter("read_only")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getReadOnly() {
        return readOnly;
    }

    /**
     * Setter for ReadOnly.
     * If `true`, the key will only be able to read repository contents. Otherwise, the key will be
     * able to read and write. Deploy keys with write access can perform the same actions as an
     * organization member with admin access, or a collaborator on a personal repository. For more
     * information, see "[Repository permission levels for an
     * organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)"
     * and "[Permission levels for a user account
     * repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
     * @param readOnly Value for Boolean
     */
    @JsonSetter("read_only")
    public void setReadOnly(Boolean readOnly) {
        this.readOnly = readOnly;
    }

    /**
     * Converts this ReposKeysRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposKeysRequest [" + "key=" + key + ", title=" + title + ", readOnly=" + readOnly
                + "]";
    }

    /**
     * Builds a new {@link ReposKeysRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposKeysRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(key)
                .title(getTitle())
                .readOnly(getReadOnly());
        return builder;
    }

    /**
     * Class to build instances of {@link ReposKeysRequest}.
     */
    public static class Builder {
        private String key;
        private String title;
        private Boolean readOnly;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  key  String value for key.
         */
        public Builder(String key) {
            this.key = key;
        }

        /**
         * Setter for key.
         * @param  key  String value for key.
         * @return Builder
         */
        public Builder key(String key) {
            this.key = key;
            return this;
        }

        /**
         * Setter for title.
         * @param  title  String value for title.
         * @return Builder
         */
        public Builder title(String title) {
            this.title = title;
            return this;
        }

        /**
         * Setter for readOnly.
         * @param  readOnly  Boolean value for readOnly.
         * @return Builder
         */
        public Builder readOnly(Boolean readOnly) {
            this.readOnly = readOnly;
            return this;
        }

        /**
         * Builds a new {@link ReposKeysRequest} object using the set fields.
         * @return {@link ReposKeysRequest}
         */
        public ReposKeysRequest build() {
            return new ReposKeysRequest(key, title, readOnly);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for ReposMergesRequest type.
 */
public class ReposMergesRequest {
    private String base;
    private String head;
    private String commitMessage;

    /**
     * Default constructor.
     */
    public ReposMergesRequest() {
    }

    /**
     * Initialization constructor.
     * @param  base  String value for base.
     * @param  head  String value for head.
     * @param  commitMessage  String value for commitMessage.
     */
    public ReposMergesRequest(
            String base,
            String head,
            String commitMessage) {
        this.base = base;
        this.head = head;
        this.commitMessage = commitMessage;
    }

    /**
     * Getter for Base.
     * The name of the base branch that the head will be merged into.
     * @return Returns the String
     */
    @JsonGetter("base")
    public String getBase() {
        return base;
    }

    /**
     * Setter for Base.
     * The name of the base branch that the head will be merged into.
     * @param base Value for String
     */
    @JsonSetter("base")
    public void setBase(String base) {
        this.base = base;
    }

    /**
     * Getter for Head.
     * The head to merge. This can be a branch name or a commit SHA1.
     * @return Returns the String
     */
    @JsonGetter("head")
    public String getHead() {
        return head;
    }

    /**
     * Setter for Head.
     * The head to merge. This can be a branch name or a commit SHA1.
     * @param head Value for String
     */
    @JsonSetter("head")
    public void setHead(String head) {
        this.head = head;
    }

    /**
     * Getter for CommitMessage.
     * Commit message to use for the merge commit. If omitted, a default message will be used.
     * @return Returns the String
     */
    @JsonGetter("commit_message")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCommitMessage() {
        return commitMessage;
    }

    /**
     * Setter for CommitMessage.
     * Commit message to use for the merge commit. If omitted, a default message will be used.
     * @param commitMessage Value for String
     */
    @JsonSetter("commit_message")
    public void setCommitMessage(String commitMessage) {
        this.commitMessage = commitMessage;
    }

    /**
     * Converts this ReposMergesRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposMergesRequest [" + "base=" + base + ", head=" + head + ", commitMessage="
                + commitMessage + "]";
    }

    /**
     * Builds a new {@link ReposMergesRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposMergesRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(base, head)
                .commitMessage(getCommitMessage());
        return builder;
    }

    /**
     * Class to build instances of {@link ReposMergesRequest}.
     */
    public static class Builder {
        private String base;
        private String head;
        private String commitMessage;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  base  String value for base.
         * @param  head  String value for head.
         */
        public Builder(String base, String head) {
            this.base = base;
            this.head = head;
        }

        /**
         * Setter for base.
         * @param  base  String value for base.
         * @return Builder
         */
        public Builder base(String base) {
            this.base = base;
            return this;
        }

        /**
         * Setter for head.
         * @param  head  String value for head.
         * @return Builder
         */
        public Builder head(String head) {
            this.head = head;
            return this;
        }

        /**
         * Setter for commitMessage.
         * @param  commitMessage  String value for commitMessage.
         * @return Builder
         */
        public Builder commitMessage(String commitMessage) {
            this.commitMessage = commitMessage;
            return this;
        }

        /**
         * Builds a new {@link ReposMergesRequest} object using the set fields.
         * @return {@link ReposMergesRequest}
         */
        public ReposMergesRequest build() {
            return new ReposMergesRequest(base, head, commitMessage);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for Repository2 type.
 */
public class Repository2 {
    private String archiveUrl;
    private String assigneesUrl;
    private String blobsUrl;
    private String branchesUrl;
    private String collaboratorsUrl;
    private String commentsUrl;
    private String commitsUrl;
    private String compareUrl;
    private String contentsUrl;
    private String contributorsUrl;
    private String deploymentsUrl;
    private OptionalNullable<Object> description;
    private String downloadsUrl;
    private String eventsUrl;
    private Boolean fork;
    private String forksUrl;
    private String fullName;
    private String gitCommitsUrl;
    private String gitRefsUrl;
    private String gitTagsUrl;
    private String hooksUrl;
    private String htmlUrl;
    private Integer id;
    private String issueCommentUrl;
    private String issueEventsUrl;
    private String issuesUrl;
    private String keysUrl;
    private String labelsUrl;
    private String languagesUrl;
    private String mergesUrl;
    private String milestonesUrl;
    private String name;
    private String nodeId;
    private String notificationsUrl;
    private Author7 owner;
    private Boolean mPrivate;
    private String pullsUrl;
    private String releasesUrl;
    private String stargazersUrl;
    private String statusesUrl;
    private String subscribersUrl;
    private String subscriptionUrl;
    private String tagsUrl;
    private String teamsUrl;
    private String treesUrl;
    private String url;

    /**
     * Default constructor.
     */
    public Repository2() {
    }

    /**
     * Initialization constructor.
     * @param  archiveUrl  String value for archiveUrl.
     * @param  assigneesUrl  String value for assigneesUrl.
     * @param  blobsUrl  String value for blobsUrl.
     * @param  branchesUrl  String value for branchesUrl.
     * @param  collaboratorsUrl  String value for collaboratorsUrl.
     * @param  commentsUrl  String value for commentsUrl.
     * @param  commitsUrl  String value for commitsUrl.
     * @param  compareUrl  String value for compareUrl.
     * @param  contentsUrl  String value for contentsUrl.
     * @param  contributorsUrl  String value for contributorsUrl.
     * @param  deploymentsUrl  String value for deploymentsUrl.
     * @param  description  Object value for description.
     * @param  downloadsUrl  String value for downloadsUrl.
     * @param  eventsUrl  String value for eventsUrl.
     * @param  fork  Boolean value for fork.
     * @param  forksUrl  String value for forksUrl.
     * @param  fullName  String value for fullName.
     * @param  gitCommitsUrl  String value for gitCommitsUrl.
     * @param  gitRefsUrl  String value for gitRefsUrl.
     * @param  gitTagsUrl  String value for gitTagsUrl.
     * @param  hooksUrl  String value for hooksUrl.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  id  Integer value for id.
     * @param  issueCommentUrl  String value for issueCommentUrl.
     * @param  issueEventsUrl  String value for issueEventsUrl.
     * @param  issuesUrl  String value for issuesUrl.
     * @param  keysUrl  String value for keysUrl.
     * @param  labelsUrl  String value for labelsUrl.
     * @param  languagesUrl  String value for languagesUrl.
     * @param  mergesUrl  String value for mergesUrl.
     * @param  milestonesUrl  String value for milestonesUrl.
     * @param  name  String value for name.
     * @param  nodeId  String value for nodeId.
     * @param  notificationsUrl  String value for notificationsUrl.
     * @param  owner  Author7 value for owner.
     * @param  mPrivate  Boolean value for mPrivate.
     * @param  pullsUrl  String value for pullsUrl.
     * @param  releasesUrl  String value for releasesUrl.
     * @param  stargazersUrl  String value for stargazersUrl.
     * @param  statusesUrl  String value for statusesUrl.
     * @param  subscribersUrl  String value for subscribersUrl.
     * @param  subscriptionUrl  String value for subscriptionUrl.
     * @param  tagsUrl  String value for tagsUrl.
     * @param  teamsUrl  String value for teamsUrl.
     * @param  treesUrl  String value for treesUrl.
     * @param  url  String value for url.
     */
    public Repository2(
            String archiveUrl,
            String assigneesUrl,
            String blobsUrl,
            String branchesUrl,
            String collaboratorsUrl,
            String commentsUrl,
            String commitsUrl,
            String compareUrl,
            String contentsUrl,
            String contributorsUrl,
            String deploymentsUrl,
            Object description,
            String downloadsUrl,
            String eventsUrl,
            Boolean fork,
            String forksUrl,
            String fullName,
            String gitCommitsUrl,
            String gitRefsUrl,
            String gitTagsUrl,
            String hooksUrl,
            String htmlUrl,
            Integer id,
            String issueCommentUrl,
            String issueEventsUrl,
            String issuesUrl,
            String keysUrl,
            String labelsUrl,
            String languagesUrl,
            String mergesUrl,
            String milestonesUrl,
            String name,
            String nodeId,
            String notificationsUrl,
            Author7 owner,
            Boolean mPrivate,
            String pullsUrl,
            String releasesUrl,
            String stargazersUrl,
            String statusesUrl,
            String subscribersUrl,
            String subscriptionUrl,
            String tagsUrl,
            String teamsUrl,
            String treesUrl,
            String url) {
        this.archiveUrl = archiveUrl;
        this.assigneesUrl = assigneesUrl;
        this.blobsUrl = blobsUrl;
        this.branchesUrl = branchesUrl;
        this.collaboratorsUrl = collaboratorsUrl;
        this.commentsUrl = commentsUrl;
        this.commitsUrl = commitsUrl;
        this.compareUrl = compareUrl;
        this.contentsUrl = contentsUrl;
        this.contributorsUrl = contributorsUrl;
        this.deploymentsUrl = deploymentsUrl;
        this.description = OptionalNullable.of(description);
        this.downloadsUrl = downloadsUrl;
        this.eventsUrl = eventsUrl;
        this.fork = fork;
        this.forksUrl = forksUrl;
        this.fullName = fullName;
        this.gitCommitsUrl = gitCommitsUrl;
        this.gitRefsUrl = gitRefsUrl;
        this.gitTagsUrl = gitTagsUrl;
        this.hooksUrl = hooksUrl;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.issueCommentUrl = issueCommentUrl;
        this.issueEventsUrl = issueEventsUrl;
        this.issuesUrl = issuesUrl;
        this.keysUrl = keysUrl;
        this.labelsUrl = labelsUrl;
        this.languagesUrl = languagesUrl;
        this.mergesUrl = mergesUrl;
        this.milestonesUrl = milestonesUrl;
        this.name = name;
        this.nodeId = nodeId;
        this.notificationsUrl = notificationsUrl;
        this.owner = owner;
        this.mPrivate = mPrivate;
        this.pullsUrl = pullsUrl;
        this.releasesUrl = releasesUrl;
        this.stargazersUrl = stargazersUrl;
        this.statusesUrl = statusesUrl;
        this.subscribersUrl = subscribersUrl;
        this.subscriptionUrl = subscriptionUrl;
        this.tagsUrl = tagsUrl;
        this.teamsUrl = teamsUrl;
        this.treesUrl = treesUrl;
        this.url = url;
    }

    /**
     * Internal initialization constructor.
     */
    protected Repository2(String archiveUrl, String assigneesUrl, String blobsUrl,
            String branchesUrl, String collaboratorsUrl, String commentsUrl, String commitsUrl,
            String compareUrl, String contentsUrl, String contributorsUrl, String deploymentsUrl,
            OptionalNullable<Object> description, String downloadsUrl, String eventsUrl,
            Boolean fork, String forksUrl, String fullName, String gitCommitsUrl, String gitRefsUrl,
            String gitTagsUrl, String hooksUrl, String htmlUrl, Integer id, String issueCommentUrl,
            String issueEventsUrl, String issuesUrl, String keysUrl, String labelsUrl,
            String languagesUrl, String mergesUrl, String milestonesUrl, String name, String nodeId,
            String notificationsUrl, Author7 owner, Boolean mPrivate, String pullsUrl,
            String releasesUrl, String stargazersUrl, String statusesUrl, String subscribersUrl,
            String subscriptionUrl, String tagsUrl, String teamsUrl, String treesUrl,
            String url) {
        this.archiveUrl = archiveUrl;
        this.assigneesUrl = assigneesUrl;
        this.blobsUrl = blobsUrl;
        this.branchesUrl = branchesUrl;
        this.collaboratorsUrl = collaboratorsUrl;
        this.commentsUrl = commentsUrl;
        this.commitsUrl = commitsUrl;
        this.compareUrl = compareUrl;
        this.contentsUrl = contentsUrl;
        this.contributorsUrl = contributorsUrl;
        this.deploymentsUrl = deploymentsUrl;
        this.description = description;
        this.downloadsUrl = downloadsUrl;
        this.eventsUrl = eventsUrl;
        this.fork = fork;
        this.forksUrl = forksUrl;
        this.fullName = fullName;
        this.gitCommitsUrl = gitCommitsUrl;
        this.gitRefsUrl = gitRefsUrl;
        this.gitTagsUrl = gitTagsUrl;
        this.hooksUrl = hooksUrl;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.issueCommentUrl = issueCommentUrl;
        this.issueEventsUrl = issueEventsUrl;
        this.issuesUrl = issuesUrl;
        this.keysUrl = keysUrl;
        this.labelsUrl = labelsUrl;
        this.languagesUrl = languagesUrl;
        this.mergesUrl = mergesUrl;
        this.milestonesUrl = milestonesUrl;
        this.name = name;
        this.nodeId = nodeId;
        this.notificationsUrl = notificationsUrl;
        this.owner = owner;
        this.mPrivate = mPrivate;
        this.pullsUrl = pullsUrl;
        this.releasesUrl = releasesUrl;
        this.stargazersUrl = stargazersUrl;
        this.statusesUrl = statusesUrl;
        this.subscribersUrl = subscribersUrl;
        this.subscriptionUrl = subscriptionUrl;
        this.tagsUrl = tagsUrl;
        this.teamsUrl = teamsUrl;
        this.treesUrl = treesUrl;
        this.url = url;
    }

    /**
     * Getter for ArchiveUrl.
     * @return Returns the String
     */
    @JsonGetter("archive_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getArchiveUrl() {
        return archiveUrl;
    }

    /**
     * Setter for ArchiveUrl.
     * @param archiveUrl Value for String
     */
    @JsonSetter("archive_url")
    public void setArchiveUrl(String archiveUrl) {
        this.archiveUrl = archiveUrl;
    }

    /**
     * Getter for AssigneesUrl.
     * @return Returns the String
     */
    @JsonGetter("assignees_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAssigneesUrl() {
        return assigneesUrl;
    }

    /**
     * Setter for AssigneesUrl.
     * @param assigneesUrl Value for String
     */
    @JsonSetter("assignees_url")
    public void setAssigneesUrl(String assigneesUrl) {
        this.assigneesUrl = assigneesUrl;
    }

    /**
     * Getter for BlobsUrl.
     * @return Returns the String
     */
    @JsonGetter("blobs_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBlobsUrl() {
        return blobsUrl;
    }

    /**
     * Setter for BlobsUrl.
     * @param blobsUrl Value for String
     */
    @JsonSetter("blobs_url")
    public void setBlobsUrl(String blobsUrl) {
        this.blobsUrl = blobsUrl;
    }

    /**
     * Getter for BranchesUrl.
     * @return Returns the String
     */
    @JsonGetter("branches_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBranchesUrl() {
        return branchesUrl;
    }

    /**
     * Setter for BranchesUrl.
     * @param branchesUrl Value for String
     */
    @JsonSetter("branches_url")
    public void setBranchesUrl(String branchesUrl) {
        this.branchesUrl = branchesUrl;
    }

    /**
     * Getter for CollaboratorsUrl.
     * @return Returns the String
     */
    @JsonGetter("collaborators_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCollaboratorsUrl() {
        return collaboratorsUrl;
    }

    /**
     * Setter for CollaboratorsUrl.
     * @param collaboratorsUrl Value for String
     */
    @JsonSetter("collaborators_url")
    public void setCollaboratorsUrl(String collaboratorsUrl) {
        this.collaboratorsUrl = collaboratorsUrl;
    }

    /**
     * Getter for CommentsUrl.
     * @return Returns the String
     */
    @JsonGetter("comments_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCommentsUrl() {
        return commentsUrl;
    }

    /**
     * Setter for CommentsUrl.
     * @param commentsUrl Value for String
     */
    @JsonSetter("comments_url")
    public void setCommentsUrl(String commentsUrl) {
        this.commentsUrl = commentsUrl;
    }

    /**
     * Getter for CommitsUrl.
     * @return Returns the String
     */
    @JsonGetter("commits_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCommitsUrl() {
        return commitsUrl;
    }

    /**
     * Setter for CommitsUrl.
     * @param commitsUrl Value for String
     */
    @JsonSetter("commits_url")
    public void setCommitsUrl(String commitsUrl) {
        this.commitsUrl = commitsUrl;
    }

    /**
     * Getter for CompareUrl.
     * @return Returns the String
     */
    @JsonGetter("compare_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCompareUrl() {
        return compareUrl;
    }

    /**
     * Setter for CompareUrl.
     * @param compareUrl Value for String
     */
    @JsonSetter("compare_url")
    public void setCompareUrl(String compareUrl) {
        this.compareUrl = compareUrl;
    }

    /**
     * Getter for ContentsUrl.
     * @return Returns the String
     */
    @JsonGetter("contents_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getContentsUrl() {
        return contentsUrl;
    }

    /**
     * Setter for ContentsUrl.
     * @param contentsUrl Value for String
     */
    @JsonSetter("contents_url")
    public void setContentsUrl(String contentsUrl) {
        this.contentsUrl = contentsUrl;
    }

    /**
     * Getter for ContributorsUrl.
     * @return Returns the String
     */
    @JsonGetter("contributors_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getContributorsUrl() {
        return contributorsUrl;
    }

    /**
     * Setter for ContributorsUrl.
     * @param contributorsUrl Value for String
     */
    @JsonSetter("contributors_url")
    public void setContributorsUrl(String contributorsUrl) {
        this.contributorsUrl = contributorsUrl;
    }

    /**
     * Getter for DeploymentsUrl.
     * @return Returns the String
     */
    @JsonGetter("deployments_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDeploymentsUrl() {
        return deploymentsUrl;
    }

    /**
     * Setter for DeploymentsUrl.
     * @param deploymentsUrl Value for String
     */
    @JsonSetter("deployments_url")
    public void setDeploymentsUrl(String deploymentsUrl) {
        this.deploymentsUrl = deploymentsUrl;
    }

    /**
     * Internal Getter for Description.
     * @return Returns the Internal Object
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * @return Returns the Object
     */
    public Object getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * @param description Value for Object
     */
    @JsonSetter("description")
    public void setDescription(Object description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for DownloadsUrl.
     * @return Returns the String
     */
    @JsonGetter("downloads_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDownloadsUrl() {
        return downloadsUrl;
    }

    /**
     * Setter for DownloadsUrl.
     * @param downloadsUrl Value for String
     */
    @JsonSetter("downloads_url")
    public void setDownloadsUrl(String downloadsUrl) {
        this.downloadsUrl = downloadsUrl;
    }

    /**
     * Getter for EventsUrl.
     * @return Returns the String
     */
    @JsonGetter("events_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEventsUrl() {
        return eventsUrl;
    }

    /**
     * Setter for EventsUrl.
     * @param eventsUrl Value for String
     */
    @JsonSetter("events_url")
    public void setEventsUrl(String eventsUrl) {
        this.eventsUrl = eventsUrl;
    }

    /**
     * Getter for Fork.
     * @return Returns the Boolean
     */
    @JsonGetter("fork")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getFork() {
        return fork;
    }

    /**
     * Setter for Fork.
     * @param fork Value for Boolean
     */
    @JsonSetter("fork")
    public void setFork(Boolean fork) {
        this.fork = fork;
    }

    /**
     * Getter for ForksUrl.
     * @return Returns the String
     */
    @JsonGetter("forks_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getForksUrl() {
        return forksUrl;
    }

    /**
     * Setter for ForksUrl.
     * @param forksUrl Value for String
     */
    @JsonSetter("forks_url")
    public void setForksUrl(String forksUrl) {
        this.forksUrl = forksUrl;
    }

    /**
     * Getter for FullName.
     * @return Returns the String
     */
    @JsonGetter("full_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getFullName() {
        return fullName;
    }

    /**
     * Setter for FullName.
     * @param fullName Value for String
     */
    @JsonSetter("full_name")
    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    /**
     * Getter for GitCommitsUrl.
     * @return Returns the String
     */
    @JsonGetter("git_commits_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getGitCommitsUrl() {
        return gitCommitsUrl;
    }

    /**
     * Setter for GitCommitsUrl.
     * @param gitCommitsUrl Value for String
     */
    @JsonSetter("git_commits_url")
    public void setGitCommitsUrl(String gitCommitsUrl) {
        this.gitCommitsUrl = gitCommitsUrl;
    }

    /**
     * Getter for GitRefsUrl.
     * @return Returns the String
     */
    @JsonGetter("git_refs_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getGitRefsUrl() {
        return gitRefsUrl;
    }

    /**
     * Setter for GitRefsUrl.
     * @param gitRefsUrl Value for String
     */
    @JsonSetter("git_refs_url")
    public void setGitRefsUrl(String gitRefsUrl) {
        this.gitRefsUrl = gitRefsUrl;
    }

    /**
     * Getter for GitTagsUrl.
     * @return Returns the String
     */
    @JsonGetter("git_tags_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getGitTagsUrl() {
        return gitTagsUrl;
    }

    /**
     * Setter for GitTagsUrl.
     * @param gitTagsUrl Value for String
     */
    @JsonSetter("git_tags_url")
    public void setGitTagsUrl(String gitTagsUrl) {
        this.gitTagsUrl = gitTagsUrl;
    }

    /**
     * Getter for HooksUrl.
     * @return Returns the String
     */
    @JsonGetter("hooks_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHooksUrl() {
        return hooksUrl;
    }

    /**
     * Setter for HooksUrl.
     * @param hooksUrl Value for String
     */
    @JsonSetter("hooks_url")
    public void setHooksUrl(String hooksUrl) {
        this.hooksUrl = hooksUrl;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Id.
     * @return Returns the Integer
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for Integer
     */
    @JsonSetter("id")
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for IssueCommentUrl.
     * @return Returns the String
     */
    @JsonGetter("issue_comment_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getIssueCommentUrl() {
        return issueCommentUrl;
    }

    /**
     * Setter for IssueCommentUrl.
     * @param issueCommentUrl Value for String
     */
    @JsonSetter("issue_comment_url")
    public void setIssueCommentUrl(String issueCommentUrl) {
        this.issueCommentUrl = issueCommentUrl;
    }

    /**
     * Getter for IssueEventsUrl.
     * @return Returns the String
     */
    @JsonGetter("issue_events_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getIssueEventsUrl() {
        return issueEventsUrl;
    }

    /**
     * Setter for IssueEventsUrl.
     * @param issueEventsUrl Value for String
     */
    @JsonSetter("issue_events_url")
    public void setIssueEventsUrl(String issueEventsUrl) {
        this.issueEventsUrl = issueEventsUrl;
    }

    /**
     * Getter for IssuesUrl.
     * @return Returns the String
     */
    @JsonGetter("issues_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getIssuesUrl() {
        return issuesUrl;
    }

    /**
     * Setter for IssuesUrl.
     * @param issuesUrl Value for String
     */
    @JsonSetter("issues_url")
    public void setIssuesUrl(String issuesUrl) {
        this.issuesUrl = issuesUrl;
    }

    /**
     * Getter for KeysUrl.
     * @return Returns the String
     */
    @JsonGetter("keys_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getKeysUrl() {
        return keysUrl;
    }

    /**
     * Setter for KeysUrl.
     * @param keysUrl Value for String
     */
    @JsonSetter("keys_url")
    public void setKeysUrl(String keysUrl) {
        this.keysUrl = keysUrl;
    }

    /**
     * Getter for LabelsUrl.
     * @return Returns the String
     */
    @JsonGetter("labels_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLabelsUrl() {
        return labelsUrl;
    }

    /**
     * Setter for LabelsUrl.
     * @param labelsUrl Value for String
     */
    @JsonSetter("labels_url")
    public void setLabelsUrl(String labelsUrl) {
        this.labelsUrl = labelsUrl;
    }

    /**
     * Getter for LanguagesUrl.
     * @return Returns the String
     */
    @JsonGetter("languages_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLanguagesUrl() {
        return languagesUrl;
    }

    /**
     * Setter for LanguagesUrl.
     * @param languagesUrl Value for String
     */
    @JsonSetter("languages_url")
    public void setLanguagesUrl(String languagesUrl) {
        this.languagesUrl = languagesUrl;
    }

    /**
     * Getter for MergesUrl.
     * @return Returns the String
     */
    @JsonGetter("merges_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMergesUrl() {
        return mergesUrl;
    }

    /**
     * Setter for MergesUrl.
     * @param mergesUrl Value for String
     */
    @JsonSetter("merges_url")
    public void setMergesUrl(String mergesUrl) {
        this.mergesUrl = mergesUrl;
    }

    /**
     * Getter for MilestonesUrl.
     * @return Returns the String
     */
    @JsonGetter("milestones_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMilestonesUrl() {
        return milestonesUrl;
    }

    /**
     * Setter for MilestonesUrl.
     * @param milestonesUrl Value for String
     */
    @JsonSetter("milestones_url")
    public void setMilestonesUrl(String milestonesUrl) {
        this.milestonesUrl = milestonesUrl;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for NotificationsUrl.
     * @return Returns the String
     */
    @JsonGetter("notifications_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNotificationsUrl() {
        return notificationsUrl;
    }

    /**
     * Setter for NotificationsUrl.
     * @param notificationsUrl Value for String
     */
    @JsonSetter("notifications_url")
    public void setNotificationsUrl(String notificationsUrl) {
        this.notificationsUrl = notificationsUrl;
    }

    /**
     * Getter for Owner.
     * @return Returns the Author7
     */
    @JsonGetter("owner")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Author7 getOwner() {
        return owner;
    }

    /**
     * Setter for Owner.
     * @param owner Value for Author7
     */
    @JsonSetter("owner")
    public void setOwner(Author7 owner) {
        this.owner = owner;
    }

    /**
     * Getter for Private.
     * @return Returns the Boolean
     */
    @JsonGetter("private")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getPrivate() {
        return mPrivate;
    }

    /**
     * Setter for Private.
     * @param mPrivate Value for Boolean
     */
    @JsonSetter("private")
    public void setPrivate(Boolean mPrivate) {
        this.mPrivate = mPrivate;
    }

    /**
     * Getter for PullsUrl.
     * @return Returns the String
     */
    @JsonGetter("pulls_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPullsUrl() {
        return pullsUrl;
    }

    /**
     * Setter for PullsUrl.
     * @param pullsUrl Value for String
     */
    @JsonSetter("pulls_url")
    public void setPullsUrl(String pullsUrl) {
        this.pullsUrl = pullsUrl;
    }

    /**
     * Getter for ReleasesUrl.
     * @return Returns the String
     */
    @JsonGetter("releases_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getReleasesUrl() {
        return releasesUrl;
    }

    /**
     * Setter for ReleasesUrl.
     * @param releasesUrl Value for String
     */
    @JsonSetter("releases_url")
    public void setReleasesUrl(String releasesUrl) {
        this.releasesUrl = releasesUrl;
    }

    /**
     * Getter for StargazersUrl.
     * @return Returns the String
     */
    @JsonGetter("stargazers_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getStargazersUrl() {
        return stargazersUrl;
    }

    /**
     * Setter for StargazersUrl.
     * @param stargazersUrl Value for String
     */
    @JsonSetter("stargazers_url")
    public void setStargazersUrl(String stargazersUrl) {
        this.stargazersUrl = stargazersUrl;
    }

    /**
     * Getter for StatusesUrl.
     * @return Returns the String
     */
    @JsonGetter("statuses_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getStatusesUrl() {
        return statusesUrl;
    }

    /**
     * Setter for StatusesUrl.
     * @param statusesUrl Value for String
     */
    @JsonSetter("statuses_url")
    public void setStatusesUrl(String statusesUrl) {
        this.statusesUrl = statusesUrl;
    }

    /**
     * Getter for SubscribersUrl.
     * @return Returns the String
     */
    @JsonGetter("subscribers_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSubscribersUrl() {
        return subscribersUrl;
    }

    /**
     * Setter for SubscribersUrl.
     * @param subscribersUrl Value for String
     */
    @JsonSetter("subscribers_url")
    public void setSubscribersUrl(String subscribersUrl) {
        this.subscribersUrl = subscribersUrl;
    }

    /**
     * Getter for SubscriptionUrl.
     * @return Returns the String
     */
    @JsonGetter("subscription_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSubscriptionUrl() {
        return subscriptionUrl;
    }

    /**
     * Setter for SubscriptionUrl.
     * @param subscriptionUrl Value for String
     */
    @JsonSetter("subscription_url")
    public void setSubscriptionUrl(String subscriptionUrl) {
        this.subscriptionUrl = subscriptionUrl;
    }

    /**
     * Getter for TagsUrl.
     * @return Returns the String
     */
    @JsonGetter("tags_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTagsUrl() {
        return tagsUrl;
    }

    /**
     * Setter for TagsUrl.
     * @param tagsUrl Value for String
     */
    @JsonSetter("tags_url")
    public void setTagsUrl(String tagsUrl) {
        this.tagsUrl = tagsUrl;
    }

    /**
     * Getter for TeamsUrl.
     * @return Returns the String
     */
    @JsonGetter("teams_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTeamsUrl() {
        return teamsUrl;
    }

    /**
     * Setter for TeamsUrl.
     * @param teamsUrl Value for String
     */
    @JsonSetter("teams_url")
    public void setTeamsUrl(String teamsUrl) {
        this.teamsUrl = teamsUrl;
    }

    /**
     * Getter for TreesUrl.
     * @return Returns the String
     */
    @JsonGetter("trees_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTreesUrl() {
        return treesUrl;
    }

    /**
     * Setter for TreesUrl.
     * @param treesUrl Value for String
     */
    @JsonSetter("trees_url")
    public void setTreesUrl(String treesUrl) {
        this.treesUrl = treesUrl;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Converts this Repository2 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Repository2 [" + "archiveUrl=" + archiveUrl + ", assigneesUrl=" + assigneesUrl
                + ", blobsUrl=" + blobsUrl + ", branchesUrl=" + branchesUrl + ", collaboratorsUrl="
                + collaboratorsUrl + ", commentsUrl=" + commentsUrl + ", commitsUrl=" + commitsUrl
                + ", compareUrl=" + compareUrl + ", contentsUrl=" + contentsUrl
                + ", contributorsUrl=" + contributorsUrl + ", deploymentsUrl=" + deploymentsUrl
                + ", description=" + description + ", downloadsUrl=" + downloadsUrl + ", eventsUrl="
                + eventsUrl + ", fork=" + fork + ", forksUrl=" + forksUrl + ", fullName=" + fullName
                + ", gitCommitsUrl=" + gitCommitsUrl + ", gitRefsUrl=" + gitRefsUrl
                + ", gitTagsUrl=" + gitTagsUrl + ", hooksUrl=" + hooksUrl + ", htmlUrl=" + htmlUrl
                + ", id=" + id + ", issueCommentUrl=" + issueCommentUrl + ", issueEventsUrl="
                + issueEventsUrl + ", issuesUrl=" + issuesUrl + ", keysUrl=" + keysUrl
                + ", labelsUrl=" + labelsUrl + ", languagesUrl=" + languagesUrl + ", mergesUrl="
                + mergesUrl + ", milestonesUrl=" + milestonesUrl + ", name=" + name + ", nodeId="
                + nodeId + ", notificationsUrl=" + notificationsUrl + ", owner=" + owner
                + ", mPrivate=" + mPrivate + ", pullsUrl=" + pullsUrl + ", releasesUrl="
                + releasesUrl + ", stargazersUrl=" + stargazersUrl + ", statusesUrl=" + statusesUrl
                + ", subscribersUrl=" + subscribersUrl + ", subscriptionUrl=" + subscriptionUrl
                + ", tagsUrl=" + tagsUrl + ", teamsUrl=" + teamsUrl + ", treesUrl=" + treesUrl
                + ", url=" + url + "]";
    }

    /**
     * Builds a new {@link Repository2.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Repository2.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .archiveUrl(getArchiveUrl())
                .assigneesUrl(getAssigneesUrl())
                .blobsUrl(getBlobsUrl())
                .branchesUrl(getBranchesUrl())
                .collaboratorsUrl(getCollaboratorsUrl())
                .commentsUrl(getCommentsUrl())
                .commitsUrl(getCommitsUrl())
                .compareUrl(getCompareUrl())
                .contentsUrl(getContentsUrl())
                .contributorsUrl(getContributorsUrl())
                .deploymentsUrl(getDeploymentsUrl())
                .downloadsUrl(getDownloadsUrl())
                .eventsUrl(getEventsUrl())
                .fork(getFork())
                .forksUrl(getForksUrl())
                .fullName(getFullName())
                .gitCommitsUrl(getGitCommitsUrl())
                .gitRefsUrl(getGitRefsUrl())
                .gitTagsUrl(getGitTagsUrl())
                .hooksUrl(getHooksUrl())
                .htmlUrl(getHtmlUrl())
                .id(getId())
                .issueCommentUrl(getIssueCommentUrl())
                .issueEventsUrl(getIssueEventsUrl())
                .issuesUrl(getIssuesUrl())
                .keysUrl(getKeysUrl())
                .labelsUrl(getLabelsUrl())
                .languagesUrl(getLanguagesUrl())
                .mergesUrl(getMergesUrl())
                .milestonesUrl(getMilestonesUrl())
                .name(getName())
                .nodeId(getNodeId())
                .notificationsUrl(getNotificationsUrl())
                .owner(getOwner())
                .mPrivate(getPrivate())
                .pullsUrl(getPullsUrl())
                .releasesUrl(getReleasesUrl())
                .stargazersUrl(getStargazersUrl())
                .statusesUrl(getStatusesUrl())
                .subscribersUrl(getSubscribersUrl())
                .subscriptionUrl(getSubscriptionUrl())
                .tagsUrl(getTagsUrl())
                .teamsUrl(getTeamsUrl())
                .treesUrl(getTreesUrl())
                .url(getUrl());
        builder.description = internalGetDescription();
        return builder;
    }

    /**
     * Class to build instances of {@link Repository2}.
     */
    public static class Builder {
        private String archiveUrl;
        private String assigneesUrl;
        private String blobsUrl;
        private String branchesUrl;
        private String collaboratorsUrl;
        private String commentsUrl;
        private String commitsUrl;
        private String compareUrl;
        private String contentsUrl;
        private String contributorsUrl;
        private String deploymentsUrl;
        private OptionalNullable<Object> description;
        private String downloadsUrl;
        private String eventsUrl;
        private Boolean fork;
        private String forksUrl;
        private String fullName;
        private String gitCommitsUrl;
        private String gitRefsUrl;
        private String gitTagsUrl;
        private String hooksUrl;
        private String htmlUrl;
        private Integer id;
        private String issueCommentUrl;
        private String issueEventsUrl;
        private String issuesUrl;
        private String keysUrl;
        private String labelsUrl;
        private String languagesUrl;
        private String mergesUrl;
        private String milestonesUrl;
        private String name;
        private String nodeId;
        private String notificationsUrl;
        private Author7 owner;
        private Boolean mPrivate;
        private String pullsUrl;
        private String releasesUrl;
        private String stargazersUrl;
        private String statusesUrl;
        private String subscribersUrl;
        private String subscriptionUrl;
        private String tagsUrl;
        private String teamsUrl;
        private String treesUrl;
        private String url;



        /**
         * Setter for archiveUrl.
         * @param  archiveUrl  String value for archiveUrl.
         * @return Builder
         */
        public Builder archiveUrl(String archiveUrl) {
            this.archiveUrl = archiveUrl;
            return this;
        }

        /**
         * Setter for assigneesUrl.
         * @param  assigneesUrl  String value for assigneesUrl.
         * @return Builder
         */
        public Builder assigneesUrl(String assigneesUrl) {
            this.assigneesUrl = assigneesUrl;
            return this;
        }

        /**
         * Setter for blobsUrl.
         * @param  blobsUrl  String value for blobsUrl.
         * @return Builder
         */
        public Builder blobsUrl(String blobsUrl) {
            this.blobsUrl = blobsUrl;
            return this;
        }

        /**
         * Setter for branchesUrl.
         * @param  branchesUrl  String value for branchesUrl.
         * @return Builder
         */
        public Builder branchesUrl(String branchesUrl) {
            this.branchesUrl = branchesUrl;
            return this;
        }

        /**
         * Setter for collaboratorsUrl.
         * @param  collaboratorsUrl  String value for collaboratorsUrl.
         * @return Builder
         */
        public Builder collaboratorsUrl(String collaboratorsUrl) {
            this.collaboratorsUrl = collaboratorsUrl;
            return this;
        }

        /**
         * Setter for commentsUrl.
         * @param  commentsUrl  String value for commentsUrl.
         * @return Builder
         */
        public Builder commentsUrl(String commentsUrl) {
            this.commentsUrl = commentsUrl;
            return this;
        }

        /**
         * Setter for commitsUrl.
         * @param  commitsUrl  String value for commitsUrl.
         * @return Builder
         */
        public Builder commitsUrl(String commitsUrl) {
            this.commitsUrl = commitsUrl;
            return this;
        }

        /**
         * Setter for compareUrl.
         * @param  compareUrl  String value for compareUrl.
         * @return Builder
         */
        public Builder compareUrl(String compareUrl) {
            this.compareUrl = compareUrl;
            return this;
        }

        /**
         * Setter for contentsUrl.
         * @param  contentsUrl  String value for contentsUrl.
         * @return Builder
         */
        public Builder contentsUrl(String contentsUrl) {
            this.contentsUrl = contentsUrl;
            return this;
        }

        /**
         * Setter for contributorsUrl.
         * @param  contributorsUrl  String value for contributorsUrl.
         * @return Builder
         */
        public Builder contributorsUrl(String contributorsUrl) {
            this.contributorsUrl = contributorsUrl;
            return this;
        }

        /**
         * Setter for deploymentsUrl.
         * @param  deploymentsUrl  String value for deploymentsUrl.
         * @return Builder
         */
        public Builder deploymentsUrl(String deploymentsUrl) {
            this.deploymentsUrl = deploymentsUrl;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  Object value for description.
         * @return Builder
         */
        public Builder description(Object description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for downloadsUrl.
         * @param  downloadsUrl  String value for downloadsUrl.
         * @return Builder
         */
        public Builder downloadsUrl(String downloadsUrl) {
            this.downloadsUrl = downloadsUrl;
            return this;
        }

        /**
         * Setter for eventsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @return Builder
         */
        public Builder eventsUrl(String eventsUrl) {
            this.eventsUrl = eventsUrl;
            return this;
        }

        /**
         * Setter for fork.
         * @param  fork  Boolean value for fork.
         * @return Builder
         */
        public Builder fork(Boolean fork) {
            this.fork = fork;
            return this;
        }

        /**
         * Setter for forksUrl.
         * @param  forksUrl  String value for forksUrl.
         * @return Builder
         */
        public Builder forksUrl(String forksUrl) {
            this.forksUrl = forksUrl;
            return this;
        }

        /**
         * Setter for fullName.
         * @param  fullName  String value for fullName.
         * @return Builder
         */
        public Builder fullName(String fullName) {
            this.fullName = fullName;
            return this;
        }

        /**
         * Setter for gitCommitsUrl.
         * @param  gitCommitsUrl  String value for gitCommitsUrl.
         * @return Builder
         */
        public Builder gitCommitsUrl(String gitCommitsUrl) {
            this.gitCommitsUrl = gitCommitsUrl;
            return this;
        }

        /**
         * Setter for gitRefsUrl.
         * @param  gitRefsUrl  String value for gitRefsUrl.
         * @return Builder
         */
        public Builder gitRefsUrl(String gitRefsUrl) {
            this.gitRefsUrl = gitRefsUrl;
            return this;
        }

        /**
         * Setter for gitTagsUrl.
         * @param  gitTagsUrl  String value for gitTagsUrl.
         * @return Builder
         */
        public Builder gitTagsUrl(String gitTagsUrl) {
            this.gitTagsUrl = gitTagsUrl;
            return this;
        }

        /**
         * Setter for hooksUrl.
         * @param  hooksUrl  String value for hooksUrl.
         * @return Builder
         */
        public Builder hooksUrl(String hooksUrl) {
            this.hooksUrl = hooksUrl;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  Integer value for id.
         * @return Builder
         */
        public Builder id(Integer id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for issueCommentUrl.
         * @param  issueCommentUrl  String value for issueCommentUrl.
         * @return Builder
         */
        public Builder issueCommentUrl(String issueCommentUrl) {
            this.issueCommentUrl = issueCommentUrl;
            return this;
        }

        /**
         * Setter for issueEventsUrl.
         * @param  issueEventsUrl  String value for issueEventsUrl.
         * @return Builder
         */
        public Builder issueEventsUrl(String issueEventsUrl) {
            this.issueEventsUrl = issueEventsUrl;
            return this;
        }

        /**
         * Setter for issuesUrl.
         * @param  issuesUrl  String value for issuesUrl.
         * @return Builder
         */
        public Builder issuesUrl(String issuesUrl) {
            this.issuesUrl = issuesUrl;
            return this;
        }

        /**
         * Setter for keysUrl.
         * @param  keysUrl  String value for keysUrl.
         * @return Builder
         */
        public Builder keysUrl(String keysUrl) {
            this.keysUrl = keysUrl;
            return this;
        }

        /**
         * Setter for labelsUrl.
         * @param  labelsUrl  String value for labelsUrl.
         * @return Builder
         */
        public Builder labelsUrl(String labelsUrl) {
            this.labelsUrl = labelsUrl;
            return this;
        }

        /**
         * Setter for languagesUrl.
         * @param  languagesUrl  String value for languagesUrl.
         * @return Builder
         */
        public Builder languagesUrl(String languagesUrl) {
            this.languagesUrl = languagesUrl;
            return this;
        }

        /**
         * Setter for mergesUrl.
         * @param  mergesUrl  String value for mergesUrl.
         * @return Builder
         */
        public Builder mergesUrl(String mergesUrl) {
            this.mergesUrl = mergesUrl;
            return this;
        }

        /**
         * Setter for milestonesUrl.
         * @param  milestonesUrl  String value for milestonesUrl.
         * @return Builder
         */
        public Builder milestonesUrl(String milestonesUrl) {
            this.milestonesUrl = milestonesUrl;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for notificationsUrl.
         * @param  notificationsUrl  String value for notificationsUrl.
         * @return Builder
         */
        public Builder notificationsUrl(String notificationsUrl) {
            this.notificationsUrl = notificationsUrl;
            return this;
        }

        /**
         * Setter for owner.
         * @param  owner  Author7 value for owner.
         * @return Builder
         */
        public Builder owner(Author7 owner) {
            this.owner = owner;
            return this;
        }

        /**
         * Setter for mPrivate.
         * @param  mPrivate  Boolean value for mPrivate.
         * @return Builder
         */
        public Builder mPrivate(Boolean mPrivate) {
            this.mPrivate = mPrivate;
            return this;
        }

        /**
         * Setter for pullsUrl.
         * @param  pullsUrl  String value for pullsUrl.
         * @return Builder
         */
        public Builder pullsUrl(String pullsUrl) {
            this.pullsUrl = pullsUrl;
            return this;
        }

        /**
         * Setter for releasesUrl.
         * @param  releasesUrl  String value for releasesUrl.
         * @return Builder
         */
        public Builder releasesUrl(String releasesUrl) {
            this.releasesUrl = releasesUrl;
            return this;
        }

        /**
         * Setter for stargazersUrl.
         * @param  stargazersUrl  String value for stargazersUrl.
         * @return Builder
         */
        public Builder stargazersUrl(String stargazersUrl) {
            this.stargazersUrl = stargazersUrl;
            return this;
        }

        /**
         * Setter for statusesUrl.
         * @param  statusesUrl  String value for statusesUrl.
         * @return Builder
         */
        public Builder statusesUrl(String statusesUrl) {
            this.statusesUrl = statusesUrl;
            return this;
        }

        /**
         * Setter for subscribersUrl.
         * @param  subscribersUrl  String value for subscribersUrl.
         * @return Builder
         */
        public Builder subscribersUrl(String subscribersUrl) {
            this.subscribersUrl = subscribersUrl;
            return this;
        }

        /**
         * Setter for subscriptionUrl.
         * @param  subscriptionUrl  String value for subscriptionUrl.
         * @return Builder
         */
        public Builder subscriptionUrl(String subscriptionUrl) {
            this.subscriptionUrl = subscriptionUrl;
            return this;
        }

        /**
         * Setter for tagsUrl.
         * @param  tagsUrl  String value for tagsUrl.
         * @return Builder
         */
        public Builder tagsUrl(String tagsUrl) {
            this.tagsUrl = tagsUrl;
            return this;
        }

        /**
         * Setter for teamsUrl.
         * @param  teamsUrl  String value for teamsUrl.
         * @return Builder
         */
        public Builder teamsUrl(String teamsUrl) {
            this.teamsUrl = teamsUrl;
            return this;
        }

        /**
         * Setter for treesUrl.
         * @param  treesUrl  String value for treesUrl.
         * @return Builder
         */
        public Builder treesUrl(String treesUrl) {
            this.treesUrl = treesUrl;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Builds a new {@link Repository2} object using the set fields.
         * @return {@link Repository2}
         */
        public Repository2 build() {
            return new Repository2(archiveUrl, assigneesUrl, blobsUrl, branchesUrl,
                    collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl,
                    contributorsUrl, deploymentsUrl, description, downloadsUrl, eventsUrl, fork,
                    forksUrl, fullName, gitCommitsUrl, gitRefsUrl, gitTagsUrl, hooksUrl, htmlUrl,
                    id, issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl,
                    languagesUrl, mergesUrl, milestonesUrl, name, nodeId, notificationsUrl, owner,
                    mPrivate, pullsUrl, releasesUrl, stargazersUrl, statusesUrl, subscribersUrl,
                    subscriptionUrl, tagsUrl, teamsUrl, treesUrl, url);
        }
    }
}

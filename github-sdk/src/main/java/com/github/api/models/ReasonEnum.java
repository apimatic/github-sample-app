/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * ReasonEnum to be used.
 */
public enum ReasonEnum {
    EXPIRED_KEY,

    NOT_SIGNING_KEY,

    GPGVERIFY_ERROR,

    GPGVERIFY_UNAVAILABLE,

    UNSIGNED,

    UNKNOWN_SIGNATURE_TYPE,

    NO_USER,

    UNVERIFIED_EMAIL,

    BAD_EMAIL,

    UNKNOWN_KEY,

    MALFORMED_SIGNATURE,

    INVALID,

    VALID,

    BAD_CERT,

    OCSP_PENDING;


    private static TreeMap<String, ReasonEnum> valueMap = new TreeMap<>();
    private String value;

    static {
        EXPIRED_KEY.value = "expired_key";
        NOT_SIGNING_KEY.value = "not_signing_key";
        GPGVERIFY_ERROR.value = "gpgverify_error";
        GPGVERIFY_UNAVAILABLE.value = "gpgverify_unavailable";
        UNSIGNED.value = "unsigned";
        UNKNOWN_SIGNATURE_TYPE.value = "unknown_signature_type";
        NO_USER.value = "no_user";
        UNVERIFIED_EMAIL.value = "unverified_email";
        BAD_EMAIL.value = "bad_email";
        UNKNOWN_KEY.value = "unknown_key";
        MALFORMED_SIGNATURE.value = "malformed_signature";
        INVALID.value = "invalid";
        VALID.value = "valid";
        BAD_CERT.value = "bad_cert";
        OCSP_PENDING.value = "ocsp_pending";

        valueMap.put("expired_key", EXPIRED_KEY);
        valueMap.put("not_signing_key", NOT_SIGNING_KEY);
        valueMap.put("gpgverify_error", GPGVERIFY_ERROR);
        valueMap.put("gpgverify_unavailable", GPGVERIFY_UNAVAILABLE);
        valueMap.put("unsigned", UNSIGNED);
        valueMap.put("unknown_signature_type", UNKNOWN_SIGNATURE_TYPE);
        valueMap.put("no_user", NO_USER);
        valueMap.put("unverified_email", UNVERIFIED_EMAIL);
        valueMap.put("bad_email", BAD_EMAIL);
        valueMap.put("unknown_key", UNKNOWN_KEY);
        valueMap.put("malformed_signature", MALFORMED_SIGNATURE);
        valueMap.put("invalid", INVALID);
        valueMap.put("valid", VALID);
        valueMap.put("bad_cert", BAD_CERT);
        valueMap.put("ocsp_pending", OCSP_PENDING);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    @com.fasterxml.jackson.annotation.JsonCreator
    public static ReasonEnum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @com.fasterxml.jackson.annotation.JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of ReasonEnum values to list of string values.
     * @param toConvert The list of ReasonEnum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<ReasonEnum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (ReasonEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 
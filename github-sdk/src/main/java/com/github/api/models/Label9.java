/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for Label9 type.
 */
public class Label9 {
    private Long id;
    private String nodeId;
    private String url;
    private String name;
    private String color;
    private Boolean mDefault;
    private OptionalNullable<String> description;

    /**
     * Default constructor.
     */
    public Label9() {
    }

    /**
     * Initialization constructor.
     * @param  id  Long value for id.
     * @param  nodeId  String value for nodeId.
     * @param  url  String value for url.
     * @param  name  String value for name.
     * @param  color  String value for color.
     * @param  mDefault  Boolean value for mDefault.
     * @param  description  String value for description.
     */
    public Label9(
            Long id,
            String nodeId,
            String url,
            String name,
            String color,
            Boolean mDefault,
            String description) {
        this.id = id;
        this.nodeId = nodeId;
        this.url = url;
        this.name = name;
        this.color = color;
        this.mDefault = mDefault;
        this.description = OptionalNullable.of(description);
    }

    /**
     * Internal initialization constructor.
     */
    protected Label9(Long id, String nodeId, String url, String name, String color,
            Boolean mDefault, OptionalNullable<String> description) {
        this.id = id;
        this.nodeId = nodeId;
        this.url = url;
        this.name = name;
        this.color = color;
        this.mDefault = mDefault;
        this.description = description;
    }

    /**
     * Getter for Id.
     * @return Returns the Long
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for Long
     */
    @JsonSetter("id")
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Color.
     * @return Returns the String
     */
    @JsonGetter("color")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getColor() {
        return color;
    }

    /**
     * Setter for Color.
     * @param color Value for String
     */
    @JsonSetter("color")
    public void setColor(String color) {
        this.color = color;
    }

    /**
     * Getter for Default.
     * @return Returns the Boolean
     */
    @JsonGetter("default")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDefault() {
        return mDefault;
    }

    /**
     * Setter for Default.
     * @param mDefault Value for Boolean
     */
    @JsonSetter("default")
    public void setDefault(Boolean mDefault) {
        this.mDefault = mDefault;
    }

    /**
     * Internal Getter for Description.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Converts this Label9 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Label9 [" + "id=" + id + ", nodeId=" + nodeId + ", url=" + url + ", name=" + name
                + ", color=" + color + ", mDefault=" + mDefault + ", description=" + description
                + "]";
    }

    /**
     * Builds a new {@link Label9.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Label9.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .id(getId())
                .nodeId(getNodeId())
                .url(getUrl())
                .name(getName())
                .color(getColor())
                .mDefault(getDefault());
        builder.description = internalGetDescription();
        return builder;
    }

    /**
     * Class to build instances of {@link Label9}.
     */
    public static class Builder {
        private Long id;
        private String nodeId;
        private String url;
        private String name;
        private String color;
        private Boolean mDefault;
        private OptionalNullable<String> description;



        /**
         * Setter for id.
         * @param  id  Long value for id.
         * @return Builder
         */
        public Builder id(Long id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for color.
         * @param  color  String value for color.
         * @return Builder
         */
        public Builder color(String color) {
            this.color = color;
            return this;
        }

        /**
         * Setter for mDefault.
         * @param  mDefault  Boolean value for mDefault.
         * @return Builder
         */
        public Builder mDefault(Boolean mDefault) {
            this.mDefault = mDefault;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Builds a new {@link Label9} object using the set fields.
         * @return {@link Label9}
         */
        public Label9 build() {
            return new Label9(id, nodeId, url, name, color, mDefault, description);
        }
    }
}

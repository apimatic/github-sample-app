/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Dependency1 type.
 */
public class Dependency1 {
    private Package6 mPackage;
    private String manifestPath;
    private Object scope;

    /**
     * Default constructor.
     */
    public Dependency1() {
    }

    /**
     * Initialization constructor.
     * @param  mPackage  Package6 value for mPackage.
     * @param  manifestPath  String value for manifestPath.
     * @param  scope  Object value for scope.
     */
    public Dependency1(
            Package6 mPackage,
            String manifestPath,
            Object scope) {
        this.mPackage = mPackage;
        this.manifestPath = manifestPath;
        this.scope = scope;
    }

    /**
     * Getter for Package.
     * @return Returns the Package6
     */
    @JsonGetter("package")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Package6 getPackage() {
        return mPackage;
    }

    /**
     * Setter for Package.
     * @param mPackage Value for Package6
     */
    @JsonSetter("package")
    public void setPackage(Package6 mPackage) {
        this.mPackage = mPackage;
    }

    /**
     * Getter for ManifestPath.
     * The full path to the dependency manifest file, relative to the root of the repository.
     * @return Returns the String
     */
    @JsonGetter("manifest_path")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getManifestPath() {
        return manifestPath;
    }

    /**
     * Setter for ManifestPath.
     * The full path to the dependency manifest file, relative to the root of the repository.
     * @param manifestPath Value for String
     */
    @JsonSetter("manifest_path")
    public void setManifestPath(String manifestPath) {
        this.manifestPath = manifestPath;
    }

    /**
     * Getter for Scope.
     * @return Returns the Object
     */
    @JsonGetter("scope")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getScope() {
        return scope;
    }

    /**
     * Setter for Scope.
     * @param scope Value for Object
     */
    @JsonSetter("scope")
    public void setScope(Object scope) {
        this.scope = scope;
    }

    /**
     * Converts this Dependency1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Dependency1 [" + "mPackage=" + mPackage + ", manifestPath=" + manifestPath
                + ", scope=" + scope + "]";
    }

    /**
     * Builds a new {@link Dependency1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Dependency1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .mPackage(getPackage())
                .manifestPath(getManifestPath())
                .scope(getScope());
        return builder;
    }

    /**
     * Class to build instances of {@link Dependency1}.
     */
    public static class Builder {
        private Package6 mPackage;
        private String manifestPath;
        private Object scope;



        /**
         * Setter for mPackage.
         * @param  mPackage  Package6 value for mPackage.
         * @return Builder
         */
        public Builder mPackage(Package6 mPackage) {
            this.mPackage = mPackage;
            return this;
        }

        /**
         * Setter for manifestPath.
         * @param  manifestPath  String value for manifestPath.
         * @return Builder
         */
        public Builder manifestPath(String manifestPath) {
            this.manifestPath = manifestPath;
            return this;
        }

        /**
         * Setter for scope.
         * @param  scope  Object value for scope.
         * @return Builder
         */
        public Builder scope(Object scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Builds a new {@link Dependency1} object using the set fields.
         * @return {@link Dependency1}
         */
        public Dependency1 build() {
            return new Dependency1(mPackage, manifestPath, scope);
        }
    }
}

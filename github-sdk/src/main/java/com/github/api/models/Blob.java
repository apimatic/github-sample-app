/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Blob type.
 */
public class Blob {
    private String content;
    private String encoding;
    private String url;
    private String sha;
    private Integer size;
    private String nodeId;
    private String highlightedContent;

    /**
     * Default constructor.
     */
    public Blob() {
    }

    /**
     * Initialization constructor.
     * @param  content  String value for content.
     * @param  encoding  String value for encoding.
     * @param  url  String value for url.
     * @param  sha  String value for sha.
     * @param  size  Integer value for size.
     * @param  nodeId  String value for nodeId.
     * @param  highlightedContent  String value for highlightedContent.
     */
    public Blob(
            String content,
            String encoding,
            String url,
            String sha,
            Integer size,
            String nodeId,
            String highlightedContent) {
        this.content = content;
        this.encoding = encoding;
        this.url = url;
        this.sha = sha;
        this.size = size;
        this.nodeId = nodeId;
        this.highlightedContent = highlightedContent;
    }

    /**
     * Getter for Content.
     * @return Returns the String
     */
    @JsonGetter("content")
    public String getContent() {
        return content;
    }

    /**
     * Setter for Content.
     * @param content Value for String
     */
    @JsonSetter("content")
    public void setContent(String content) {
        this.content = content;
    }

    /**
     * Getter for Encoding.
     * @return Returns the String
     */
    @JsonGetter("encoding")
    public String getEncoding() {
        return encoding;
    }

    /**
     * Setter for Encoding.
     * @param encoding Value for String
     */
    @JsonSetter("encoding")
    public void setEncoding(String encoding) {
        this.encoding = encoding;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for Sha.
     * @return Returns the String
     */
    @JsonGetter("sha")
    public String getSha() {
        return sha;
    }

    /**
     * Setter for Sha.
     * @param sha Value for String
     */
    @JsonSetter("sha")
    public void setSha(String sha) {
        this.sha = sha;
    }

    /**
     * Getter for Size.
     * @return Returns the Integer
     */
    @JsonGetter("size")
    public Integer getSize() {
        return size;
    }

    /**
     * Setter for Size.
     * @param size Value for Integer
     */
    @JsonSetter("size")
    public void setSize(Integer size) {
        this.size = size;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for HighlightedContent.
     * @return Returns the String
     */
    @JsonGetter("highlighted_content")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHighlightedContent() {
        return highlightedContent;
    }

    /**
     * Setter for HighlightedContent.
     * @param highlightedContent Value for String
     */
    @JsonSetter("highlighted_content")
    public void setHighlightedContent(String highlightedContent) {
        this.highlightedContent = highlightedContent;
    }

    /**
     * Converts this Blob into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Blob [" + "content=" + content + ", encoding=" + encoding + ", url=" + url
                + ", sha=" + sha + ", size=" + size + ", nodeId=" + nodeId + ", highlightedContent="
                + highlightedContent + "]";
    }

    /**
     * Builds a new {@link Blob.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Blob.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(content, encoding, url, sha, size, nodeId)
                .highlightedContent(getHighlightedContent());
        return builder;
    }

    /**
     * Class to build instances of {@link Blob}.
     */
    public static class Builder {
        private String content;
        private String encoding;
        private String url;
        private String sha;
        private Integer size;
        private String nodeId;
        private String highlightedContent;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  content  String value for content.
         * @param  encoding  String value for encoding.
         * @param  url  String value for url.
         * @param  sha  String value for sha.
         * @param  size  Integer value for size.
         * @param  nodeId  String value for nodeId.
         */
        public Builder(String content, String encoding, String url, String sha, Integer size,
                String nodeId) {
            this.content = content;
            this.encoding = encoding;
            this.url = url;
            this.sha = sha;
            this.size = size;
            this.nodeId = nodeId;
        }

        /**
         * Setter for content.
         * @param  content  String value for content.
         * @return Builder
         */
        public Builder content(String content) {
            this.content = content;
            return this;
        }

        /**
         * Setter for encoding.
         * @param  encoding  String value for encoding.
         * @return Builder
         */
        public Builder encoding(String encoding) {
            this.encoding = encoding;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for sha.
         * @param  sha  String value for sha.
         * @return Builder
         */
        public Builder sha(String sha) {
            this.sha = sha;
            return this;
        }

        /**
         * Setter for size.
         * @param  size  Integer value for size.
         * @return Builder
         */
        public Builder size(Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for highlightedContent.
         * @param  highlightedContent  String value for highlightedContent.
         * @return Builder
         */
        public Builder highlightedContent(String highlightedContent) {
            this.highlightedContent = highlightedContent;
            return this;
        }

        /**
         * Builds a new {@link Blob} object using the set fields.
         * @return {@link Blob}
         */
        public Blob build() {
            return new Blob(content, encoding, url, sha, size, nodeId, highlightedContent);
        }
    }
}

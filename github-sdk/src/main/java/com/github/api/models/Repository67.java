/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import com.github.api.models.containers.Repository67CreatedAt;
import com.github.api.models.containers.Repository67PushedAt;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for Repository67 type.
 */
public class Repository67 {
    private Boolean allowAutoMerge;
    private Boolean allowForking;
    private Boolean allowMergeCommit;
    private Boolean allowRebaseMerge;
    private Boolean allowSquashMerge;
    private Boolean allowUpdateBranch;
    private String archiveUrl;
    private boolean archived;
    private String assigneesUrl;
    private String blobsUrl;
    private String branchesUrl;
    private String cloneUrl;
    private String collaboratorsUrl;
    private String commentsUrl;
    private String commitsUrl;
    private String compareUrl;
    private String contentsUrl;
    private String contributorsUrl;
    private Repository67CreatedAt createdAt;
    private String defaultBranch;
    private Boolean deleteBranchOnMerge;
    private String deploymentsUrl;
    private String description;
    private Boolean disabled;
    private String downloadsUrl;
    private String eventsUrl;
    private boolean fork;
    private int forks;
    private int forksCount;
    private String forksUrl;
    private String fullName;
    private String gitCommitsUrl;
    private String gitRefsUrl;
    private String gitTagsUrl;
    private String gitUrl;
    private boolean hasDownloads;
    private boolean hasIssues;
    private boolean hasPages;
    private boolean hasProjects;
    private boolean hasWiki;
    private boolean hasDiscussions;
    private String homepage;
    private String hooksUrl;
    private String htmlUrl;
    private int id;
    private Boolean isTemplate;
    private String issueCommentUrl;
    private String issueEventsUrl;
    private String issuesUrl;
    private String keysUrl;
    private String labelsUrl;
    private String language;
    private String languagesUrl;
    private Object license;
    private String masterBranch;
    private MergeCommitMessage12Enum mergeCommitMessage;
    private MergeCommitTitle12Enum mergeCommitTitle;
    private String mergesUrl;
    private String milestonesUrl;
    private String mirrorUrl;
    private String name;
    private String nodeId;
    private String notificationsUrl;
    private int openIssues;
    private int openIssuesCount;
    private String organization;
    private Object owner;
    private Permissions1 permissions;
    private boolean mPrivate;
    private Boolean mPublic;
    private String pullsUrl;
    private Repository67PushedAt pushedAt;
    private String releasesUrl;
    private OptionalNullable<String> roleName;
    private int size;
    private SquashMergeCommitMessageEnum squashMergeCommitMessage;
    private SquashMergeCommitTitleEnum squashMergeCommitTitle;
    private String sshUrl;
    private Integer stargazers;
    private int stargazersCount;
    private String stargazersUrl;
    private String statusesUrl;
    private String subscribersUrl;
    private String subscriptionUrl;
    private String svnUrl;
    private String tagsUrl;
    private String teamsUrl;
    private List<String> topics;
    private String treesUrl;
    private LocalDateTime updatedAt;
    private String url;
    private Boolean useSquashPrTitleAsDefault;
    private Visibility6Enum visibility;
    private int watchers;
    private int watchersCount;
    private Boolean webCommitSignoffRequired;

    /**
     * Default constructor.
     */
    public Repository67() {
        allowAutoMerge = false;
        allowMergeCommit = true;
        allowRebaseMerge = true;
        allowSquashMerge = true;
        deleteBranchOnMerge = false;
        useSquashPrTitleAsDefault = false;
    }

    /**
     * Initialization constructor.
     * @param  archiveUrl  String value for archiveUrl.
     * @param  archived  boolean value for archived.
     * @param  assigneesUrl  String value for assigneesUrl.
     * @param  blobsUrl  String value for blobsUrl.
     * @param  branchesUrl  String value for branchesUrl.
     * @param  cloneUrl  String value for cloneUrl.
     * @param  collaboratorsUrl  String value for collaboratorsUrl.
     * @param  commentsUrl  String value for commentsUrl.
     * @param  commitsUrl  String value for commitsUrl.
     * @param  compareUrl  String value for compareUrl.
     * @param  contentsUrl  String value for contentsUrl.
     * @param  contributorsUrl  String value for contributorsUrl.
     * @param  createdAt  Repository67CreatedAt value for createdAt.
     * @param  defaultBranch  String value for defaultBranch.
     * @param  deploymentsUrl  String value for deploymentsUrl.
     * @param  description  String value for description.
     * @param  downloadsUrl  String value for downloadsUrl.
     * @param  eventsUrl  String value for eventsUrl.
     * @param  fork  boolean value for fork.
     * @param  forks  int value for forks.
     * @param  forksCount  int value for forksCount.
     * @param  forksUrl  String value for forksUrl.
     * @param  fullName  String value for fullName.
     * @param  gitCommitsUrl  String value for gitCommitsUrl.
     * @param  gitRefsUrl  String value for gitRefsUrl.
     * @param  gitTagsUrl  String value for gitTagsUrl.
     * @param  gitUrl  String value for gitUrl.
     * @param  hasDownloads  boolean value for hasDownloads.
     * @param  hasIssues  boolean value for hasIssues.
     * @param  hasPages  boolean value for hasPages.
     * @param  hasProjects  boolean value for hasProjects.
     * @param  hasWiki  boolean value for hasWiki.
     * @param  hasDiscussions  boolean value for hasDiscussions.
     * @param  homepage  String value for homepage.
     * @param  hooksUrl  String value for hooksUrl.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  id  int value for id.
     * @param  issueCommentUrl  String value for issueCommentUrl.
     * @param  issueEventsUrl  String value for issueEventsUrl.
     * @param  issuesUrl  String value for issuesUrl.
     * @param  keysUrl  String value for keysUrl.
     * @param  labelsUrl  String value for labelsUrl.
     * @param  language  String value for language.
     * @param  languagesUrl  String value for languagesUrl.
     * @param  license  Object value for license.
     * @param  mergesUrl  String value for mergesUrl.
     * @param  milestonesUrl  String value for milestonesUrl.
     * @param  mirrorUrl  String value for mirrorUrl.
     * @param  name  String value for name.
     * @param  nodeId  String value for nodeId.
     * @param  notificationsUrl  String value for notificationsUrl.
     * @param  openIssues  int value for openIssues.
     * @param  openIssuesCount  int value for openIssuesCount.
     * @param  owner  Object value for owner.
     * @param  mPrivate  boolean value for mPrivate.
     * @param  pullsUrl  String value for pullsUrl.
     * @param  pushedAt  Repository67PushedAt value for pushedAt.
     * @param  releasesUrl  String value for releasesUrl.
     * @param  size  int value for size.
     * @param  sshUrl  String value for sshUrl.
     * @param  stargazersCount  int value for stargazersCount.
     * @param  stargazersUrl  String value for stargazersUrl.
     * @param  statusesUrl  String value for statusesUrl.
     * @param  subscribersUrl  String value for subscribersUrl.
     * @param  subscriptionUrl  String value for subscriptionUrl.
     * @param  svnUrl  String value for svnUrl.
     * @param  tagsUrl  String value for tagsUrl.
     * @param  teamsUrl  String value for teamsUrl.
     * @param  topics  List of String value for topics.
     * @param  treesUrl  String value for treesUrl.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  url  String value for url.
     * @param  visibility  Visibility6Enum value for visibility.
     * @param  watchers  int value for watchers.
     * @param  watchersCount  int value for watchersCount.
     * @param  allowAutoMerge  Boolean value for allowAutoMerge.
     * @param  allowForking  Boolean value for allowForking.
     * @param  allowMergeCommit  Boolean value for allowMergeCommit.
     * @param  allowRebaseMerge  Boolean value for allowRebaseMerge.
     * @param  allowSquashMerge  Boolean value for allowSquashMerge.
     * @param  allowUpdateBranch  Boolean value for allowUpdateBranch.
     * @param  deleteBranchOnMerge  Boolean value for deleteBranchOnMerge.
     * @param  disabled  Boolean value for disabled.
     * @param  isTemplate  Boolean value for isTemplate.
     * @param  masterBranch  String value for masterBranch.
     * @param  mergeCommitMessage  MergeCommitMessage12Enum value for mergeCommitMessage.
     * @param  mergeCommitTitle  MergeCommitTitle12Enum value for mergeCommitTitle.
     * @param  organization  String value for organization.
     * @param  permissions  Permissions1 value for permissions.
     * @param  mPublic  Boolean value for mPublic.
     * @param  roleName  String value for roleName.
     * @param  squashMergeCommitMessage  SquashMergeCommitMessageEnum value for
     *         squashMergeCommitMessage.
     * @param  squashMergeCommitTitle  SquashMergeCommitTitleEnum value for squashMergeCommitTitle.
     * @param  stargazers  Integer value for stargazers.
     * @param  useSquashPrTitleAsDefault  Boolean value for useSquashPrTitleAsDefault.
     * @param  webCommitSignoffRequired  Boolean value for webCommitSignoffRequired.
     */
    public Repository67(
            String archiveUrl,
            boolean archived,
            String assigneesUrl,
            String blobsUrl,
            String branchesUrl,
            String cloneUrl,
            String collaboratorsUrl,
            String commentsUrl,
            String commitsUrl,
            String compareUrl,
            String contentsUrl,
            String contributorsUrl,
            Repository67CreatedAt createdAt,
            String defaultBranch,
            String deploymentsUrl,
            String description,
            String downloadsUrl,
            String eventsUrl,
            boolean fork,
            int forks,
            int forksCount,
            String forksUrl,
            String fullName,
            String gitCommitsUrl,
            String gitRefsUrl,
            String gitTagsUrl,
            String gitUrl,
            boolean hasDownloads,
            boolean hasIssues,
            boolean hasPages,
            boolean hasProjects,
            boolean hasWiki,
            boolean hasDiscussions,
            String homepage,
            String hooksUrl,
            String htmlUrl,
            int id,
            String issueCommentUrl,
            String issueEventsUrl,
            String issuesUrl,
            String keysUrl,
            String labelsUrl,
            String language,
            String languagesUrl,
            Object license,
            String mergesUrl,
            String milestonesUrl,
            String mirrorUrl,
            String name,
            String nodeId,
            String notificationsUrl,
            int openIssues,
            int openIssuesCount,
            Object owner,
            boolean mPrivate,
            String pullsUrl,
            Repository67PushedAt pushedAt,
            String releasesUrl,
            int size,
            String sshUrl,
            int stargazersCount,
            String stargazersUrl,
            String statusesUrl,
            String subscribersUrl,
            String subscriptionUrl,
            String svnUrl,
            String tagsUrl,
            String teamsUrl,
            List<String> topics,
            String treesUrl,
            LocalDateTime updatedAt,
            String url,
            Visibility6Enum visibility,
            int watchers,
            int watchersCount,
            Boolean allowAutoMerge,
            Boolean allowForking,
            Boolean allowMergeCommit,
            Boolean allowRebaseMerge,
            Boolean allowSquashMerge,
            Boolean allowUpdateBranch,
            Boolean deleteBranchOnMerge,
            Boolean disabled,
            Boolean isTemplate,
            String masterBranch,
            MergeCommitMessage12Enum mergeCommitMessage,
            MergeCommitTitle12Enum mergeCommitTitle,
            String organization,
            Permissions1 permissions,
            Boolean mPublic,
            String roleName,
            SquashMergeCommitMessageEnum squashMergeCommitMessage,
            SquashMergeCommitTitleEnum squashMergeCommitTitle,
            Integer stargazers,
            Boolean useSquashPrTitleAsDefault,
            Boolean webCommitSignoffRequired) {
        this.allowAutoMerge = allowAutoMerge;
        this.allowForking = allowForking;
        this.allowMergeCommit = allowMergeCommit;
        this.allowRebaseMerge = allowRebaseMerge;
        this.allowSquashMerge = allowSquashMerge;
        this.allowUpdateBranch = allowUpdateBranch;
        this.archiveUrl = archiveUrl;
        this.archived = archived;
        this.assigneesUrl = assigneesUrl;
        this.blobsUrl = blobsUrl;
        this.branchesUrl = branchesUrl;
        this.cloneUrl = cloneUrl;
        this.collaboratorsUrl = collaboratorsUrl;
        this.commentsUrl = commentsUrl;
        this.commitsUrl = commitsUrl;
        this.compareUrl = compareUrl;
        this.contentsUrl = contentsUrl;
        this.contributorsUrl = contributorsUrl;
        this.createdAt = createdAt;
        this.defaultBranch = defaultBranch;
        this.deleteBranchOnMerge = deleteBranchOnMerge;
        this.deploymentsUrl = deploymentsUrl;
        this.description = description;
        this.disabled = disabled;
        this.downloadsUrl = downloadsUrl;
        this.eventsUrl = eventsUrl;
        this.fork = fork;
        this.forks = forks;
        this.forksCount = forksCount;
        this.forksUrl = forksUrl;
        this.fullName = fullName;
        this.gitCommitsUrl = gitCommitsUrl;
        this.gitRefsUrl = gitRefsUrl;
        this.gitTagsUrl = gitTagsUrl;
        this.gitUrl = gitUrl;
        this.hasDownloads = hasDownloads;
        this.hasIssues = hasIssues;
        this.hasPages = hasPages;
        this.hasProjects = hasProjects;
        this.hasWiki = hasWiki;
        this.hasDiscussions = hasDiscussions;
        this.homepage = homepage;
        this.hooksUrl = hooksUrl;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.isTemplate = isTemplate;
        this.issueCommentUrl = issueCommentUrl;
        this.issueEventsUrl = issueEventsUrl;
        this.issuesUrl = issuesUrl;
        this.keysUrl = keysUrl;
        this.labelsUrl = labelsUrl;
        this.language = language;
        this.languagesUrl = languagesUrl;
        this.license = license;
        this.masterBranch = masterBranch;
        this.mergeCommitMessage = mergeCommitMessage;
        this.mergeCommitTitle = mergeCommitTitle;
        this.mergesUrl = mergesUrl;
        this.milestonesUrl = milestonesUrl;
        this.mirrorUrl = mirrorUrl;
        this.name = name;
        this.nodeId = nodeId;
        this.notificationsUrl = notificationsUrl;
        this.openIssues = openIssues;
        this.openIssuesCount = openIssuesCount;
        this.organization = organization;
        this.owner = owner;
        this.permissions = permissions;
        this.mPrivate = mPrivate;
        this.mPublic = mPublic;
        this.pullsUrl = pullsUrl;
        this.pushedAt = pushedAt;
        this.releasesUrl = releasesUrl;
        this.roleName = OptionalNullable.of(roleName);
        this.size = size;
        this.squashMergeCommitMessage = squashMergeCommitMessage;
        this.squashMergeCommitTitle = squashMergeCommitTitle;
        this.sshUrl = sshUrl;
        this.stargazers = stargazers;
        this.stargazersCount = stargazersCount;
        this.stargazersUrl = stargazersUrl;
        this.statusesUrl = statusesUrl;
        this.subscribersUrl = subscribersUrl;
        this.subscriptionUrl = subscriptionUrl;
        this.svnUrl = svnUrl;
        this.tagsUrl = tagsUrl;
        this.teamsUrl = teamsUrl;
        this.topics = topics;
        this.treesUrl = treesUrl;
        this.updatedAt = updatedAt;
        this.url = url;
        this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
        this.visibility = visibility;
        this.watchers = watchers;
        this.watchersCount = watchersCount;
        this.webCommitSignoffRequired = webCommitSignoffRequired;
    }

    /**
     * Internal initialization constructor.
     */
    protected Repository67(String archiveUrl, boolean archived, String assigneesUrl,
            String blobsUrl, String branchesUrl, String cloneUrl, String collaboratorsUrl,
            String commentsUrl, String commitsUrl, String compareUrl, String contentsUrl,
            String contributorsUrl, Repository67CreatedAt createdAt, String defaultBranch,
            String deploymentsUrl, String description, String downloadsUrl, String eventsUrl,
            boolean fork, int forks, int forksCount, String forksUrl, String fullName,
            String gitCommitsUrl, String gitRefsUrl, String gitTagsUrl, String gitUrl,
            boolean hasDownloads, boolean hasIssues, boolean hasPages, boolean hasProjects,
            boolean hasWiki, boolean hasDiscussions, String homepage, String hooksUrl,
            String htmlUrl, int id, String issueCommentUrl, String issueEventsUrl, String issuesUrl,
            String keysUrl, String labelsUrl, String language, String languagesUrl, Object license,
            String mergesUrl, String milestonesUrl, String mirrorUrl, String name, String nodeId,
            String notificationsUrl, int openIssues, int openIssuesCount, Object owner,
            boolean mPrivate, String pullsUrl, Repository67PushedAt pushedAt, String releasesUrl,
            int size, String sshUrl, int stargazersCount, String stargazersUrl, String statusesUrl,
            String subscribersUrl, String subscriptionUrl, String svnUrl, String tagsUrl,
            String teamsUrl, List<String> topics, String treesUrl, LocalDateTime updatedAt,
            String url, Visibility6Enum visibility, int watchers, int watchersCount,
            Boolean allowAutoMerge, Boolean allowForking, Boolean allowMergeCommit,
            Boolean allowRebaseMerge, Boolean allowSquashMerge, Boolean allowUpdateBranch,
            Boolean deleteBranchOnMerge, Boolean disabled, Boolean isTemplate, String masterBranch,
            MergeCommitMessage12Enum mergeCommitMessage, MergeCommitTitle12Enum mergeCommitTitle,
            String organization, Permissions1 permissions, Boolean mPublic,
            OptionalNullable<String> roleName,
            SquashMergeCommitMessageEnum squashMergeCommitMessage,
            SquashMergeCommitTitleEnum squashMergeCommitTitle, Integer stargazers,
            Boolean useSquashPrTitleAsDefault, Boolean webCommitSignoffRequired) {
        this.allowAutoMerge = allowAutoMerge;
        this.allowForking = allowForking;
        this.allowMergeCommit = allowMergeCommit;
        this.allowRebaseMerge = allowRebaseMerge;
        this.allowSquashMerge = allowSquashMerge;
        this.allowUpdateBranch = allowUpdateBranch;
        this.archiveUrl = archiveUrl;
        this.archived = archived;
        this.assigneesUrl = assigneesUrl;
        this.blobsUrl = blobsUrl;
        this.branchesUrl = branchesUrl;
        this.cloneUrl = cloneUrl;
        this.collaboratorsUrl = collaboratorsUrl;
        this.commentsUrl = commentsUrl;
        this.commitsUrl = commitsUrl;
        this.compareUrl = compareUrl;
        this.contentsUrl = contentsUrl;
        this.contributorsUrl = contributorsUrl;
        this.createdAt = createdAt;
        this.defaultBranch = defaultBranch;
        this.deleteBranchOnMerge = deleteBranchOnMerge;
        this.deploymentsUrl = deploymentsUrl;
        this.description = description;
        this.disabled = disabled;
        this.downloadsUrl = downloadsUrl;
        this.eventsUrl = eventsUrl;
        this.fork = fork;
        this.forks = forks;
        this.forksCount = forksCount;
        this.forksUrl = forksUrl;
        this.fullName = fullName;
        this.gitCommitsUrl = gitCommitsUrl;
        this.gitRefsUrl = gitRefsUrl;
        this.gitTagsUrl = gitTagsUrl;
        this.gitUrl = gitUrl;
        this.hasDownloads = hasDownloads;
        this.hasIssues = hasIssues;
        this.hasPages = hasPages;
        this.hasProjects = hasProjects;
        this.hasWiki = hasWiki;
        this.hasDiscussions = hasDiscussions;
        this.homepage = homepage;
        this.hooksUrl = hooksUrl;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.isTemplate = isTemplate;
        this.issueCommentUrl = issueCommentUrl;
        this.issueEventsUrl = issueEventsUrl;
        this.issuesUrl = issuesUrl;
        this.keysUrl = keysUrl;
        this.labelsUrl = labelsUrl;
        this.language = language;
        this.languagesUrl = languagesUrl;
        this.license = license;
        this.masterBranch = masterBranch;
        this.mergeCommitMessage = mergeCommitMessage;
        this.mergeCommitTitle = mergeCommitTitle;
        this.mergesUrl = mergesUrl;
        this.milestonesUrl = milestonesUrl;
        this.mirrorUrl = mirrorUrl;
        this.name = name;
        this.nodeId = nodeId;
        this.notificationsUrl = notificationsUrl;
        this.openIssues = openIssues;
        this.openIssuesCount = openIssuesCount;
        this.organization = organization;
        this.owner = owner;
        this.permissions = permissions;
        this.mPrivate = mPrivate;
        this.mPublic = mPublic;
        this.pullsUrl = pullsUrl;
        this.pushedAt = pushedAt;
        this.releasesUrl = releasesUrl;
        this.roleName = roleName;
        this.size = size;
        this.squashMergeCommitMessage = squashMergeCommitMessage;
        this.squashMergeCommitTitle = squashMergeCommitTitle;
        this.sshUrl = sshUrl;
        this.stargazers = stargazers;
        this.stargazersCount = stargazersCount;
        this.stargazersUrl = stargazersUrl;
        this.statusesUrl = statusesUrl;
        this.subscribersUrl = subscribersUrl;
        this.subscriptionUrl = subscriptionUrl;
        this.svnUrl = svnUrl;
        this.tagsUrl = tagsUrl;
        this.teamsUrl = teamsUrl;
        this.topics = topics;
        this.treesUrl = treesUrl;
        this.updatedAt = updatedAt;
        this.url = url;
        this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
        this.visibility = visibility;
        this.watchers = watchers;
        this.watchersCount = watchersCount;
        this.webCommitSignoffRequired = webCommitSignoffRequired;
    }

    /**
     * Getter for AllowAutoMerge.
     * Whether to allow auto-merge for pull requests.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_auto_merge")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowAutoMerge() {
        return allowAutoMerge;
    }

    /**
     * Setter for AllowAutoMerge.
     * Whether to allow auto-merge for pull requests.
     * @param allowAutoMerge Value for Boolean
     */
    @JsonSetter("allow_auto_merge")
    public void setAllowAutoMerge(Boolean allowAutoMerge) {
        this.allowAutoMerge = allowAutoMerge;
    }

    /**
     * Getter for AllowForking.
     * Whether to allow private forks
     * @return Returns the Boolean
     */
    @JsonGetter("allow_forking")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowForking() {
        return allowForking;
    }

    /**
     * Setter for AllowForking.
     * Whether to allow private forks
     * @param allowForking Value for Boolean
     */
    @JsonSetter("allow_forking")
    public void setAllowForking(Boolean allowForking) {
        this.allowForking = allowForking;
    }

    /**
     * Getter for AllowMergeCommit.
     * Whether to allow merge commits for pull requests.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_merge_commit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowMergeCommit() {
        return allowMergeCommit;
    }

    /**
     * Setter for AllowMergeCommit.
     * Whether to allow merge commits for pull requests.
     * @param allowMergeCommit Value for Boolean
     */
    @JsonSetter("allow_merge_commit")
    public void setAllowMergeCommit(Boolean allowMergeCommit) {
        this.allowMergeCommit = allowMergeCommit;
    }

    /**
     * Getter for AllowRebaseMerge.
     * Whether to allow rebase merges for pull requests.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_rebase_merge")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowRebaseMerge() {
        return allowRebaseMerge;
    }

    /**
     * Setter for AllowRebaseMerge.
     * Whether to allow rebase merges for pull requests.
     * @param allowRebaseMerge Value for Boolean
     */
    @JsonSetter("allow_rebase_merge")
    public void setAllowRebaseMerge(Boolean allowRebaseMerge) {
        this.allowRebaseMerge = allowRebaseMerge;
    }

    /**
     * Getter for AllowSquashMerge.
     * Whether to allow squash merges for pull requests.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_squash_merge")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowSquashMerge() {
        return allowSquashMerge;
    }

    /**
     * Setter for AllowSquashMerge.
     * Whether to allow squash merges for pull requests.
     * @param allowSquashMerge Value for Boolean
     */
    @JsonSetter("allow_squash_merge")
    public void setAllowSquashMerge(Boolean allowSquashMerge) {
        this.allowSquashMerge = allowSquashMerge;
    }

    /**
     * Getter for AllowUpdateBranch.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_update_branch")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowUpdateBranch() {
        return allowUpdateBranch;
    }

    /**
     * Setter for AllowUpdateBranch.
     * @param allowUpdateBranch Value for Boolean
     */
    @JsonSetter("allow_update_branch")
    public void setAllowUpdateBranch(Boolean allowUpdateBranch) {
        this.allowUpdateBranch = allowUpdateBranch;
    }

    /**
     * Getter for ArchiveUrl.
     * @return Returns the String
     */
    @JsonGetter("archive_url")
    public String getArchiveUrl() {
        return archiveUrl;
    }

    /**
     * Setter for ArchiveUrl.
     * @param archiveUrl Value for String
     */
    @JsonSetter("archive_url")
    public void setArchiveUrl(String archiveUrl) {
        this.archiveUrl = archiveUrl;
    }

    /**
     * Getter for Archived.
     * Whether the repository is archived.
     * @return Returns the boolean
     */
    @JsonGetter("archived")
    public boolean getArchived() {
        return archived;
    }

    /**
     * Setter for Archived.
     * Whether the repository is archived.
     * @param archived Value for boolean
     */
    @JsonSetter("archived")
    public void setArchived(boolean archived) {
        this.archived = archived;
    }

    /**
     * Getter for AssigneesUrl.
     * @return Returns the String
     */
    @JsonGetter("assignees_url")
    public String getAssigneesUrl() {
        return assigneesUrl;
    }

    /**
     * Setter for AssigneesUrl.
     * @param assigneesUrl Value for String
     */
    @JsonSetter("assignees_url")
    public void setAssigneesUrl(String assigneesUrl) {
        this.assigneesUrl = assigneesUrl;
    }

    /**
     * Getter for BlobsUrl.
     * @return Returns the String
     */
    @JsonGetter("blobs_url")
    public String getBlobsUrl() {
        return blobsUrl;
    }

    /**
     * Setter for BlobsUrl.
     * @param blobsUrl Value for String
     */
    @JsonSetter("blobs_url")
    public void setBlobsUrl(String blobsUrl) {
        this.blobsUrl = blobsUrl;
    }

    /**
     * Getter for BranchesUrl.
     * @return Returns the String
     */
    @JsonGetter("branches_url")
    public String getBranchesUrl() {
        return branchesUrl;
    }

    /**
     * Setter for BranchesUrl.
     * @param branchesUrl Value for String
     */
    @JsonSetter("branches_url")
    public void setBranchesUrl(String branchesUrl) {
        this.branchesUrl = branchesUrl;
    }

    /**
     * Getter for CloneUrl.
     * @return Returns the String
     */
    @JsonGetter("clone_url")
    public String getCloneUrl() {
        return cloneUrl;
    }

    /**
     * Setter for CloneUrl.
     * @param cloneUrl Value for String
     */
    @JsonSetter("clone_url")
    public void setCloneUrl(String cloneUrl) {
        this.cloneUrl = cloneUrl;
    }

    /**
     * Getter for CollaboratorsUrl.
     * @return Returns the String
     */
    @JsonGetter("collaborators_url")
    public String getCollaboratorsUrl() {
        return collaboratorsUrl;
    }

    /**
     * Setter for CollaboratorsUrl.
     * @param collaboratorsUrl Value for String
     */
    @JsonSetter("collaborators_url")
    public void setCollaboratorsUrl(String collaboratorsUrl) {
        this.collaboratorsUrl = collaboratorsUrl;
    }

    /**
     * Getter for CommentsUrl.
     * @return Returns the String
     */
    @JsonGetter("comments_url")
    public String getCommentsUrl() {
        return commentsUrl;
    }

    /**
     * Setter for CommentsUrl.
     * @param commentsUrl Value for String
     */
    @JsonSetter("comments_url")
    public void setCommentsUrl(String commentsUrl) {
        this.commentsUrl = commentsUrl;
    }

    /**
     * Getter for CommitsUrl.
     * @return Returns the String
     */
    @JsonGetter("commits_url")
    public String getCommitsUrl() {
        return commitsUrl;
    }

    /**
     * Setter for CommitsUrl.
     * @param commitsUrl Value for String
     */
    @JsonSetter("commits_url")
    public void setCommitsUrl(String commitsUrl) {
        this.commitsUrl = commitsUrl;
    }

    /**
     * Getter for CompareUrl.
     * @return Returns the String
     */
    @JsonGetter("compare_url")
    public String getCompareUrl() {
        return compareUrl;
    }

    /**
     * Setter for CompareUrl.
     * @param compareUrl Value for String
     */
    @JsonSetter("compare_url")
    public void setCompareUrl(String compareUrl) {
        this.compareUrl = compareUrl;
    }

    /**
     * Getter for ContentsUrl.
     * @return Returns the String
     */
    @JsonGetter("contents_url")
    public String getContentsUrl() {
        return contentsUrl;
    }

    /**
     * Setter for ContentsUrl.
     * @param contentsUrl Value for String
     */
    @JsonSetter("contents_url")
    public void setContentsUrl(String contentsUrl) {
        this.contentsUrl = contentsUrl;
    }

    /**
     * Getter for ContributorsUrl.
     * @return Returns the String
     */
    @JsonGetter("contributors_url")
    public String getContributorsUrl() {
        return contributorsUrl;
    }

    /**
     * Setter for ContributorsUrl.
     * @param contributorsUrl Value for String
     */
    @JsonSetter("contributors_url")
    public void setContributorsUrl(String contributorsUrl) {
        this.contributorsUrl = contributorsUrl;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the Repository67CreatedAt
     */
    @JsonGetter("created_at")
    public Repository67CreatedAt getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for Repository67CreatedAt
     */
    @JsonSetter("created_at")
    public void setCreatedAt(Repository67CreatedAt createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for DefaultBranch.
     * The default branch of the repository.
     * @return Returns the String
     */
    @JsonGetter("default_branch")
    public String getDefaultBranch() {
        return defaultBranch;
    }

    /**
     * Setter for DefaultBranch.
     * The default branch of the repository.
     * @param defaultBranch Value for String
     */
    @JsonSetter("default_branch")
    public void setDefaultBranch(String defaultBranch) {
        this.defaultBranch = defaultBranch;
    }

    /**
     * Getter for DeleteBranchOnMerge.
     * Whether to delete head branches when pull requests are merged
     * @return Returns the Boolean
     */
    @JsonGetter("delete_branch_on_merge")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDeleteBranchOnMerge() {
        return deleteBranchOnMerge;
    }

    /**
     * Setter for DeleteBranchOnMerge.
     * Whether to delete head branches when pull requests are merged
     * @param deleteBranchOnMerge Value for Boolean
     */
    @JsonSetter("delete_branch_on_merge")
    public void setDeleteBranchOnMerge(Boolean deleteBranchOnMerge) {
        this.deleteBranchOnMerge = deleteBranchOnMerge;
    }

    /**
     * Getter for DeploymentsUrl.
     * @return Returns the String
     */
    @JsonGetter("deployments_url")
    public String getDeploymentsUrl() {
        return deploymentsUrl;
    }

    /**
     * Setter for DeploymentsUrl.
     * @param deploymentsUrl Value for String
     */
    @JsonSetter("deployments_url")
    public void setDeploymentsUrl(String deploymentsUrl) {
        this.deploymentsUrl = deploymentsUrl;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Disabled.
     * Returns whether or not this repository is disabled.
     * @return Returns the Boolean
     */
    @JsonGetter("disabled")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDisabled() {
        return disabled;
    }

    /**
     * Setter for Disabled.
     * Returns whether or not this repository is disabled.
     * @param disabled Value for Boolean
     */
    @JsonSetter("disabled")
    public void setDisabled(Boolean disabled) {
        this.disabled = disabled;
    }

    /**
     * Getter for DownloadsUrl.
     * @return Returns the String
     */
    @JsonGetter("downloads_url")
    public String getDownloadsUrl() {
        return downloadsUrl;
    }

    /**
     * Setter for DownloadsUrl.
     * @param downloadsUrl Value for String
     */
    @JsonSetter("downloads_url")
    public void setDownloadsUrl(String downloadsUrl) {
        this.downloadsUrl = downloadsUrl;
    }

    /**
     * Getter for EventsUrl.
     * @return Returns the String
     */
    @JsonGetter("events_url")
    public String getEventsUrl() {
        return eventsUrl;
    }

    /**
     * Setter for EventsUrl.
     * @param eventsUrl Value for String
     */
    @JsonSetter("events_url")
    public void setEventsUrl(String eventsUrl) {
        this.eventsUrl = eventsUrl;
    }

    /**
     * Getter for Fork.
     * @return Returns the boolean
     */
    @JsonGetter("fork")
    public boolean getFork() {
        return fork;
    }

    /**
     * Setter for Fork.
     * @param fork Value for boolean
     */
    @JsonSetter("fork")
    public void setFork(boolean fork) {
        this.fork = fork;
    }

    /**
     * Getter for Forks.
     * @return Returns the int
     */
    @JsonGetter("forks")
    public int getForks() {
        return forks;
    }

    /**
     * Setter for Forks.
     * @param forks Value for int
     */
    @JsonSetter("forks")
    public void setForks(int forks) {
        this.forks = forks;
    }

    /**
     * Getter for ForksCount.
     * @return Returns the int
     */
    @JsonGetter("forks_count")
    public int getForksCount() {
        return forksCount;
    }

    /**
     * Setter for ForksCount.
     * @param forksCount Value for int
     */
    @JsonSetter("forks_count")
    public void setForksCount(int forksCount) {
        this.forksCount = forksCount;
    }

    /**
     * Getter for ForksUrl.
     * @return Returns the String
     */
    @JsonGetter("forks_url")
    public String getForksUrl() {
        return forksUrl;
    }

    /**
     * Setter for ForksUrl.
     * @param forksUrl Value for String
     */
    @JsonSetter("forks_url")
    public void setForksUrl(String forksUrl) {
        this.forksUrl = forksUrl;
    }

    /**
     * Getter for FullName.
     * @return Returns the String
     */
    @JsonGetter("full_name")
    public String getFullName() {
        return fullName;
    }

    /**
     * Setter for FullName.
     * @param fullName Value for String
     */
    @JsonSetter("full_name")
    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    /**
     * Getter for GitCommitsUrl.
     * @return Returns the String
     */
    @JsonGetter("git_commits_url")
    public String getGitCommitsUrl() {
        return gitCommitsUrl;
    }

    /**
     * Setter for GitCommitsUrl.
     * @param gitCommitsUrl Value for String
     */
    @JsonSetter("git_commits_url")
    public void setGitCommitsUrl(String gitCommitsUrl) {
        this.gitCommitsUrl = gitCommitsUrl;
    }

    /**
     * Getter for GitRefsUrl.
     * @return Returns the String
     */
    @JsonGetter("git_refs_url")
    public String getGitRefsUrl() {
        return gitRefsUrl;
    }

    /**
     * Setter for GitRefsUrl.
     * @param gitRefsUrl Value for String
     */
    @JsonSetter("git_refs_url")
    public void setGitRefsUrl(String gitRefsUrl) {
        this.gitRefsUrl = gitRefsUrl;
    }

    /**
     * Getter for GitTagsUrl.
     * @return Returns the String
     */
    @JsonGetter("git_tags_url")
    public String getGitTagsUrl() {
        return gitTagsUrl;
    }

    /**
     * Setter for GitTagsUrl.
     * @param gitTagsUrl Value for String
     */
    @JsonSetter("git_tags_url")
    public void setGitTagsUrl(String gitTagsUrl) {
        this.gitTagsUrl = gitTagsUrl;
    }

    /**
     * Getter for GitUrl.
     * @return Returns the String
     */
    @JsonGetter("git_url")
    public String getGitUrl() {
        return gitUrl;
    }

    /**
     * Setter for GitUrl.
     * @param gitUrl Value for String
     */
    @JsonSetter("git_url")
    public void setGitUrl(String gitUrl) {
        this.gitUrl = gitUrl;
    }

    /**
     * Getter for HasDownloads.
     * Whether downloads are enabled.
     * @return Returns the boolean
     */
    @JsonGetter("has_downloads")
    public boolean getHasDownloads() {
        return hasDownloads;
    }

    /**
     * Setter for HasDownloads.
     * Whether downloads are enabled.
     * @param hasDownloads Value for boolean
     */
    @JsonSetter("has_downloads")
    public void setHasDownloads(boolean hasDownloads) {
        this.hasDownloads = hasDownloads;
    }

    /**
     * Getter for HasIssues.
     * Whether issues are enabled.
     * @return Returns the boolean
     */
    @JsonGetter("has_issues")
    public boolean getHasIssues() {
        return hasIssues;
    }

    /**
     * Setter for HasIssues.
     * Whether issues are enabled.
     * @param hasIssues Value for boolean
     */
    @JsonSetter("has_issues")
    public void setHasIssues(boolean hasIssues) {
        this.hasIssues = hasIssues;
    }

    /**
     * Getter for HasPages.
     * @return Returns the boolean
     */
    @JsonGetter("has_pages")
    public boolean getHasPages() {
        return hasPages;
    }

    /**
     * Setter for HasPages.
     * @param hasPages Value for boolean
     */
    @JsonSetter("has_pages")
    public void setHasPages(boolean hasPages) {
        this.hasPages = hasPages;
    }

    /**
     * Getter for HasProjects.
     * Whether projects are enabled.
     * @return Returns the boolean
     */
    @JsonGetter("has_projects")
    public boolean getHasProjects() {
        return hasProjects;
    }

    /**
     * Setter for HasProjects.
     * Whether projects are enabled.
     * @param hasProjects Value for boolean
     */
    @JsonSetter("has_projects")
    public void setHasProjects(boolean hasProjects) {
        this.hasProjects = hasProjects;
    }

    /**
     * Getter for HasWiki.
     * Whether the wiki is enabled.
     * @return Returns the boolean
     */
    @JsonGetter("has_wiki")
    public boolean getHasWiki() {
        return hasWiki;
    }

    /**
     * Setter for HasWiki.
     * Whether the wiki is enabled.
     * @param hasWiki Value for boolean
     */
    @JsonSetter("has_wiki")
    public void setHasWiki(boolean hasWiki) {
        this.hasWiki = hasWiki;
    }

    /**
     * Getter for HasDiscussions.
     * Whether discussions are enabled.
     * @return Returns the boolean
     */
    @JsonGetter("has_discussions")
    public boolean getHasDiscussions() {
        return hasDiscussions;
    }

    /**
     * Setter for HasDiscussions.
     * Whether discussions are enabled.
     * @param hasDiscussions Value for boolean
     */
    @JsonSetter("has_discussions")
    public void setHasDiscussions(boolean hasDiscussions) {
        this.hasDiscussions = hasDiscussions;
    }

    /**
     * Getter for Homepage.
     * @return Returns the String
     */
    @JsonGetter("homepage")
    public String getHomepage() {
        return homepage;
    }

    /**
     * Setter for Homepage.
     * @param homepage Value for String
     */
    @JsonSetter("homepage")
    public void setHomepage(String homepage) {
        this.homepage = homepage;
    }

    /**
     * Getter for HooksUrl.
     * @return Returns the String
     */
    @JsonGetter("hooks_url")
    public String getHooksUrl() {
        return hooksUrl;
    }

    /**
     * Setter for HooksUrl.
     * @param hooksUrl Value for String
     */
    @JsonSetter("hooks_url")
    public void setHooksUrl(String hooksUrl) {
        this.hooksUrl = hooksUrl;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Id.
     * Unique identifier of the repository
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier of the repository
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for IsTemplate.
     * @return Returns the Boolean
     */
    @JsonGetter("is_template")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsTemplate() {
        return isTemplate;
    }

    /**
     * Setter for IsTemplate.
     * @param isTemplate Value for Boolean
     */
    @JsonSetter("is_template")
    public void setIsTemplate(Boolean isTemplate) {
        this.isTemplate = isTemplate;
    }

    /**
     * Getter for IssueCommentUrl.
     * @return Returns the String
     */
    @JsonGetter("issue_comment_url")
    public String getIssueCommentUrl() {
        return issueCommentUrl;
    }

    /**
     * Setter for IssueCommentUrl.
     * @param issueCommentUrl Value for String
     */
    @JsonSetter("issue_comment_url")
    public void setIssueCommentUrl(String issueCommentUrl) {
        this.issueCommentUrl = issueCommentUrl;
    }

    /**
     * Getter for IssueEventsUrl.
     * @return Returns the String
     */
    @JsonGetter("issue_events_url")
    public String getIssueEventsUrl() {
        return issueEventsUrl;
    }

    /**
     * Setter for IssueEventsUrl.
     * @param issueEventsUrl Value for String
     */
    @JsonSetter("issue_events_url")
    public void setIssueEventsUrl(String issueEventsUrl) {
        this.issueEventsUrl = issueEventsUrl;
    }

    /**
     * Getter for IssuesUrl.
     * @return Returns the String
     */
    @JsonGetter("issues_url")
    public String getIssuesUrl() {
        return issuesUrl;
    }

    /**
     * Setter for IssuesUrl.
     * @param issuesUrl Value for String
     */
    @JsonSetter("issues_url")
    public void setIssuesUrl(String issuesUrl) {
        this.issuesUrl = issuesUrl;
    }

    /**
     * Getter for KeysUrl.
     * @return Returns the String
     */
    @JsonGetter("keys_url")
    public String getKeysUrl() {
        return keysUrl;
    }

    /**
     * Setter for KeysUrl.
     * @param keysUrl Value for String
     */
    @JsonSetter("keys_url")
    public void setKeysUrl(String keysUrl) {
        this.keysUrl = keysUrl;
    }

    /**
     * Getter for LabelsUrl.
     * @return Returns the String
     */
    @JsonGetter("labels_url")
    public String getLabelsUrl() {
        return labelsUrl;
    }

    /**
     * Setter for LabelsUrl.
     * @param labelsUrl Value for String
     */
    @JsonSetter("labels_url")
    public void setLabelsUrl(String labelsUrl) {
        this.labelsUrl = labelsUrl;
    }

    /**
     * Getter for Language.
     * @return Returns the String
     */
    @JsonGetter("language")
    public String getLanguage() {
        return language;
    }

    /**
     * Setter for Language.
     * @param language Value for String
     */
    @JsonSetter("language")
    public void setLanguage(String language) {
        this.language = language;
    }

    /**
     * Getter for LanguagesUrl.
     * @return Returns the String
     */
    @JsonGetter("languages_url")
    public String getLanguagesUrl() {
        return languagesUrl;
    }

    /**
     * Setter for LanguagesUrl.
     * @param languagesUrl Value for String
     */
    @JsonSetter("languages_url")
    public void setLanguagesUrl(String languagesUrl) {
        this.languagesUrl = languagesUrl;
    }

    /**
     * Getter for License.
     * @return Returns the Object
     */
    @JsonGetter("license")
    public Object getLicense() {
        return license;
    }

    /**
     * Setter for License.
     * @param license Value for Object
     */
    @JsonSetter("license")
    public void setLicense(Object license) {
        this.license = license;
    }

    /**
     * Getter for MasterBranch.
     * @return Returns the String
     */
    @JsonGetter("master_branch")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMasterBranch() {
        return masterBranch;
    }

    /**
     * Setter for MasterBranch.
     * @param masterBranch Value for String
     */
    @JsonSetter("master_branch")
    public void setMasterBranch(String masterBranch) {
        this.masterBranch = masterBranch;
    }

    /**
     * Getter for MergeCommitMessage.
     * @return Returns the MergeCommitMessage12Enum
     */
    @JsonGetter("merge_commit_message")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MergeCommitMessage12Enum getMergeCommitMessage() {
        return mergeCommitMessage;
    }

    /**
     * Setter for MergeCommitMessage.
     * @param mergeCommitMessage Value for MergeCommitMessage12Enum
     */
    @JsonSetter("merge_commit_message")
    public void setMergeCommitMessage(MergeCommitMessage12Enum mergeCommitMessage) {
        this.mergeCommitMessage = mergeCommitMessage;
    }

    /**
     * Getter for MergeCommitTitle.
     * @return Returns the MergeCommitTitle12Enum
     */
    @JsonGetter("merge_commit_title")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MergeCommitTitle12Enum getMergeCommitTitle() {
        return mergeCommitTitle;
    }

    /**
     * Setter for MergeCommitTitle.
     * @param mergeCommitTitle Value for MergeCommitTitle12Enum
     */
    @JsonSetter("merge_commit_title")
    public void setMergeCommitTitle(MergeCommitTitle12Enum mergeCommitTitle) {
        this.mergeCommitTitle = mergeCommitTitle;
    }

    /**
     * Getter for MergesUrl.
     * @return Returns the String
     */
    @JsonGetter("merges_url")
    public String getMergesUrl() {
        return mergesUrl;
    }

    /**
     * Setter for MergesUrl.
     * @param mergesUrl Value for String
     */
    @JsonSetter("merges_url")
    public void setMergesUrl(String mergesUrl) {
        this.mergesUrl = mergesUrl;
    }

    /**
     * Getter for MilestonesUrl.
     * @return Returns the String
     */
    @JsonGetter("milestones_url")
    public String getMilestonesUrl() {
        return milestonesUrl;
    }

    /**
     * Setter for MilestonesUrl.
     * @param milestonesUrl Value for String
     */
    @JsonSetter("milestones_url")
    public void setMilestonesUrl(String milestonesUrl) {
        this.milestonesUrl = milestonesUrl;
    }

    /**
     * Getter for MirrorUrl.
     * @return Returns the String
     */
    @JsonGetter("mirror_url")
    public String getMirrorUrl() {
        return mirrorUrl;
    }

    /**
     * Setter for MirrorUrl.
     * @param mirrorUrl Value for String
     */
    @JsonSetter("mirror_url")
    public void setMirrorUrl(String mirrorUrl) {
        this.mirrorUrl = mirrorUrl;
    }

    /**
     * Getter for Name.
     * The name of the repository.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the repository.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for NotificationsUrl.
     * @return Returns the String
     */
    @JsonGetter("notifications_url")
    public String getNotificationsUrl() {
        return notificationsUrl;
    }

    /**
     * Setter for NotificationsUrl.
     * @param notificationsUrl Value for String
     */
    @JsonSetter("notifications_url")
    public void setNotificationsUrl(String notificationsUrl) {
        this.notificationsUrl = notificationsUrl;
    }

    /**
     * Getter for OpenIssues.
     * @return Returns the int
     */
    @JsonGetter("open_issues")
    public int getOpenIssues() {
        return openIssues;
    }

    /**
     * Setter for OpenIssues.
     * @param openIssues Value for int
     */
    @JsonSetter("open_issues")
    public void setOpenIssues(int openIssues) {
        this.openIssues = openIssues;
    }

    /**
     * Getter for OpenIssuesCount.
     * @return Returns the int
     */
    @JsonGetter("open_issues_count")
    public int getOpenIssuesCount() {
        return openIssuesCount;
    }

    /**
     * Setter for OpenIssuesCount.
     * @param openIssuesCount Value for int
     */
    @JsonSetter("open_issues_count")
    public void setOpenIssuesCount(int openIssuesCount) {
        this.openIssuesCount = openIssuesCount;
    }

    /**
     * Getter for Organization.
     * @return Returns the String
     */
    @JsonGetter("organization")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getOrganization() {
        return organization;
    }

    /**
     * Setter for Organization.
     * @param organization Value for String
     */
    @JsonSetter("organization")
    public void setOrganization(String organization) {
        this.organization = organization;
    }

    /**
     * Getter for Owner.
     * @return Returns the Object
     */
    @JsonGetter("owner")
    public Object getOwner() {
        return owner;
    }

    /**
     * Setter for Owner.
     * @param owner Value for Object
     */
    @JsonSetter("owner")
    public void setOwner(Object owner) {
        this.owner = owner;
    }

    /**
     * Getter for Permissions.
     * @return Returns the Permissions1
     */
    @JsonGetter("permissions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Permissions1 getPermissions() {
        return permissions;
    }

    /**
     * Setter for Permissions.
     * @param permissions Value for Permissions1
     */
    @JsonSetter("permissions")
    public void setPermissions(Permissions1 permissions) {
        this.permissions = permissions;
    }

    /**
     * Getter for Private.
     * Whether the repository is private or public.
     * @return Returns the boolean
     */
    @JsonGetter("private")
    public boolean getPrivate() {
        return mPrivate;
    }

    /**
     * Setter for Private.
     * Whether the repository is private or public.
     * @param mPrivate Value for boolean
     */
    @JsonSetter("private")
    public void setPrivate(boolean mPrivate) {
        this.mPrivate = mPrivate;
    }

    /**
     * Getter for Public.
     * @return Returns the Boolean
     */
    @JsonGetter("public")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getPublic() {
        return mPublic;
    }

    /**
     * Setter for Public.
     * @param mPublic Value for Boolean
     */
    @JsonSetter("public")
    public void setPublic(Boolean mPublic) {
        this.mPublic = mPublic;
    }

    /**
     * Getter for PullsUrl.
     * @return Returns the String
     */
    @JsonGetter("pulls_url")
    public String getPullsUrl() {
        return pullsUrl;
    }

    /**
     * Setter for PullsUrl.
     * @param pullsUrl Value for String
     */
    @JsonSetter("pulls_url")
    public void setPullsUrl(String pullsUrl) {
        this.pullsUrl = pullsUrl;
    }

    /**
     * Getter for PushedAt.
     * @return Returns the Repository67PushedAt
     */
    @JsonGetter("pushed_at")
    public Repository67PushedAt getPushedAt() {
        return pushedAt;
    }

    /**
     * Setter for PushedAt.
     * @param pushedAt Value for Repository67PushedAt
     */
    @JsonSetter("pushed_at")
    public void setPushedAt(Repository67PushedAt pushedAt) {
        this.pushedAt = pushedAt;
    }

    /**
     * Getter for ReleasesUrl.
     * @return Returns the String
     */
    @JsonGetter("releases_url")
    public String getReleasesUrl() {
        return releasesUrl;
    }

    /**
     * Setter for ReleasesUrl.
     * @param releasesUrl Value for String
     */
    @JsonSetter("releases_url")
    public void setReleasesUrl(String releasesUrl) {
        this.releasesUrl = releasesUrl;
    }

    /**
     * Internal Getter for RoleName.
     * @return Returns the Internal String
     */
    @JsonGetter("role_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetRoleName() {
        return this.roleName;
    }

    /**
     * Getter for RoleName.
     * @return Returns the String
     */
    public String getRoleName() {
        return OptionalNullable.getFrom(roleName);
    }

    /**
     * Setter for RoleName.
     * @param roleName Value for String
     */
    @JsonSetter("role_name")
    public void setRoleName(String roleName) {
        this.roleName = OptionalNullable.of(roleName);
    }

    /**
     * UnSetter for RoleName.
     */
    public void unsetRoleName() {
        roleName = null;
    }

    /**
     * Getter for Size.
     * @return Returns the int
     */
    @JsonGetter("size")
    public int getSize() {
        return size;
    }

    /**
     * Setter for Size.
     * @param size Value for int
     */
    @JsonSetter("size")
    public void setSize(int size) {
        this.size = size;
    }

    /**
     * Getter for SquashMergeCommitMessage.
     * @return Returns the SquashMergeCommitMessageEnum
     */
    @JsonGetter("squash_merge_commit_message")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SquashMergeCommitMessageEnum getSquashMergeCommitMessage() {
        return squashMergeCommitMessage;
    }

    /**
     * Setter for SquashMergeCommitMessage.
     * @param squashMergeCommitMessage Value for SquashMergeCommitMessageEnum
     */
    @JsonSetter("squash_merge_commit_message")
    public void setSquashMergeCommitMessage(SquashMergeCommitMessageEnum squashMergeCommitMessage) {
        this.squashMergeCommitMessage = squashMergeCommitMessage;
    }

    /**
     * Getter for SquashMergeCommitTitle.
     * @return Returns the SquashMergeCommitTitleEnum
     */
    @JsonGetter("squash_merge_commit_title")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SquashMergeCommitTitleEnum getSquashMergeCommitTitle() {
        return squashMergeCommitTitle;
    }

    /**
     * Setter for SquashMergeCommitTitle.
     * @param squashMergeCommitTitle Value for SquashMergeCommitTitleEnum
     */
    @JsonSetter("squash_merge_commit_title")
    public void setSquashMergeCommitTitle(SquashMergeCommitTitleEnum squashMergeCommitTitle) {
        this.squashMergeCommitTitle = squashMergeCommitTitle;
    }

    /**
     * Getter for SshUrl.
     * @return Returns the String
     */
    @JsonGetter("ssh_url")
    public String getSshUrl() {
        return sshUrl;
    }

    /**
     * Setter for SshUrl.
     * @param sshUrl Value for String
     */
    @JsonSetter("ssh_url")
    public void setSshUrl(String sshUrl) {
        this.sshUrl = sshUrl;
    }

    /**
     * Getter for Stargazers.
     * @return Returns the Integer
     */
    @JsonGetter("stargazers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getStargazers() {
        return stargazers;
    }

    /**
     * Setter for Stargazers.
     * @param stargazers Value for Integer
     */
    @JsonSetter("stargazers")
    public void setStargazers(Integer stargazers) {
        this.stargazers = stargazers;
    }

    /**
     * Getter for StargazersCount.
     * @return Returns the int
     */
    @JsonGetter("stargazers_count")
    public int getStargazersCount() {
        return stargazersCount;
    }

    /**
     * Setter for StargazersCount.
     * @param stargazersCount Value for int
     */
    @JsonSetter("stargazers_count")
    public void setStargazersCount(int stargazersCount) {
        this.stargazersCount = stargazersCount;
    }

    /**
     * Getter for StargazersUrl.
     * @return Returns the String
     */
    @JsonGetter("stargazers_url")
    public String getStargazersUrl() {
        return stargazersUrl;
    }

    /**
     * Setter for StargazersUrl.
     * @param stargazersUrl Value for String
     */
    @JsonSetter("stargazers_url")
    public void setStargazersUrl(String stargazersUrl) {
        this.stargazersUrl = stargazersUrl;
    }

    /**
     * Getter for StatusesUrl.
     * @return Returns the String
     */
    @JsonGetter("statuses_url")
    public String getStatusesUrl() {
        return statusesUrl;
    }

    /**
     * Setter for StatusesUrl.
     * @param statusesUrl Value for String
     */
    @JsonSetter("statuses_url")
    public void setStatusesUrl(String statusesUrl) {
        this.statusesUrl = statusesUrl;
    }

    /**
     * Getter for SubscribersUrl.
     * @return Returns the String
     */
    @JsonGetter("subscribers_url")
    public String getSubscribersUrl() {
        return subscribersUrl;
    }

    /**
     * Setter for SubscribersUrl.
     * @param subscribersUrl Value for String
     */
    @JsonSetter("subscribers_url")
    public void setSubscribersUrl(String subscribersUrl) {
        this.subscribersUrl = subscribersUrl;
    }

    /**
     * Getter for SubscriptionUrl.
     * @return Returns the String
     */
    @JsonGetter("subscription_url")
    public String getSubscriptionUrl() {
        return subscriptionUrl;
    }

    /**
     * Setter for SubscriptionUrl.
     * @param subscriptionUrl Value for String
     */
    @JsonSetter("subscription_url")
    public void setSubscriptionUrl(String subscriptionUrl) {
        this.subscriptionUrl = subscriptionUrl;
    }

    /**
     * Getter for SvnUrl.
     * @return Returns the String
     */
    @JsonGetter("svn_url")
    public String getSvnUrl() {
        return svnUrl;
    }

    /**
     * Setter for SvnUrl.
     * @param svnUrl Value for String
     */
    @JsonSetter("svn_url")
    public void setSvnUrl(String svnUrl) {
        this.svnUrl = svnUrl;
    }

    /**
     * Getter for TagsUrl.
     * @return Returns the String
     */
    @JsonGetter("tags_url")
    public String getTagsUrl() {
        return tagsUrl;
    }

    /**
     * Setter for TagsUrl.
     * @param tagsUrl Value for String
     */
    @JsonSetter("tags_url")
    public void setTagsUrl(String tagsUrl) {
        this.tagsUrl = tagsUrl;
    }

    /**
     * Getter for TeamsUrl.
     * @return Returns the String
     */
    @JsonGetter("teams_url")
    public String getTeamsUrl() {
        return teamsUrl;
    }

    /**
     * Setter for TeamsUrl.
     * @param teamsUrl Value for String
     */
    @JsonSetter("teams_url")
    public void setTeamsUrl(String teamsUrl) {
        this.teamsUrl = teamsUrl;
    }

    /**
     * Getter for Topics.
     * @return Returns the List of String
     */
    @JsonGetter("topics")
    public List<String> getTopics() {
        return topics;
    }

    /**
     * Setter for Topics.
     * @param topics Value for List of String
     */
    @JsonSetter("topics")
    public void setTopics(List<String> topics) {
        this.topics = topics;
    }

    /**
     * Getter for TreesUrl.
     * @return Returns the String
     */
    @JsonGetter("trees_url")
    public String getTreesUrl() {
        return treesUrl;
    }

    /**
     * Setter for TreesUrl.
     * @param treesUrl Value for String
     */
    @JsonSetter("trees_url")
    public void setTreesUrl(String treesUrl) {
        this.treesUrl = treesUrl;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for UseSquashPrTitleAsDefault.
     * Whether a squash merge commit can use the pull request title as default. **This property has
     * been deprecated. Please use `squash_merge_commit_title` instead.
     * @return Returns the Boolean
     */
    @JsonGetter("use_squash_pr_title_as_default")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getUseSquashPrTitleAsDefault() {
        return useSquashPrTitleAsDefault;
    }

    /**
     * Setter for UseSquashPrTitleAsDefault.
     * Whether a squash merge commit can use the pull request title as default. **This property has
     * been deprecated. Please use `squash_merge_commit_title` instead.
     * @param useSquashPrTitleAsDefault Value for Boolean
     */
    @JsonSetter("use_squash_pr_title_as_default")
    public void setUseSquashPrTitleAsDefault(Boolean useSquashPrTitleAsDefault) {
        this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
    }

    /**
     * Getter for Visibility.
     * @return Returns the Visibility6Enum
     */
    @JsonGetter("visibility")
    public Visibility6Enum getVisibility() {
        return visibility;
    }

    /**
     * Setter for Visibility.
     * @param visibility Value for Visibility6Enum
     */
    @JsonSetter("visibility")
    public void setVisibility(Visibility6Enum visibility) {
        this.visibility = visibility;
    }

    /**
     * Getter for Watchers.
     * @return Returns the int
     */
    @JsonGetter("watchers")
    public int getWatchers() {
        return watchers;
    }

    /**
     * Setter for Watchers.
     * @param watchers Value for int
     */
    @JsonSetter("watchers")
    public void setWatchers(int watchers) {
        this.watchers = watchers;
    }

    /**
     * Getter for WatchersCount.
     * @return Returns the int
     */
    @JsonGetter("watchers_count")
    public int getWatchersCount() {
        return watchersCount;
    }

    /**
     * Setter for WatchersCount.
     * @param watchersCount Value for int
     */
    @JsonSetter("watchers_count")
    public void setWatchersCount(int watchersCount) {
        this.watchersCount = watchersCount;
    }

    /**
     * Getter for WebCommitSignoffRequired.
     * Whether to require contributors to sign off on web-based commits
     * @return Returns the Boolean
     */
    @JsonGetter("web_commit_signoff_required")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getWebCommitSignoffRequired() {
        return webCommitSignoffRequired;
    }

    /**
     * Setter for WebCommitSignoffRequired.
     * Whether to require contributors to sign off on web-based commits
     * @param webCommitSignoffRequired Value for Boolean
     */
    @JsonSetter("web_commit_signoff_required")
    public void setWebCommitSignoffRequired(Boolean webCommitSignoffRequired) {
        this.webCommitSignoffRequired = webCommitSignoffRequired;
    }

    /**
     * Converts this Repository67 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Repository67 [" + "archiveUrl=" + archiveUrl + ", archived=" + archived
                + ", assigneesUrl=" + assigneesUrl + ", blobsUrl=" + blobsUrl + ", branchesUrl="
                + branchesUrl + ", cloneUrl=" + cloneUrl + ", collaboratorsUrl=" + collaboratorsUrl
                + ", commentsUrl=" + commentsUrl + ", commitsUrl=" + commitsUrl + ", compareUrl="
                + compareUrl + ", contentsUrl=" + contentsUrl + ", contributorsUrl="
                + contributorsUrl + ", createdAt=" + createdAt + ", defaultBranch=" + defaultBranch
                + ", deploymentsUrl=" + deploymentsUrl + ", description=" + description
                + ", downloadsUrl=" + downloadsUrl + ", eventsUrl=" + eventsUrl + ", fork=" + fork
                + ", forks=" + forks + ", forksCount=" + forksCount + ", forksUrl=" + forksUrl
                + ", fullName=" + fullName + ", gitCommitsUrl=" + gitCommitsUrl + ", gitRefsUrl="
                + gitRefsUrl + ", gitTagsUrl=" + gitTagsUrl + ", gitUrl=" + gitUrl
                + ", hasDownloads=" + hasDownloads + ", hasIssues=" + hasIssues + ", hasPages="
                + hasPages + ", hasProjects=" + hasProjects + ", hasWiki=" + hasWiki
                + ", hasDiscussions=" + hasDiscussions + ", homepage=" + homepage + ", hooksUrl="
                + hooksUrl + ", htmlUrl=" + htmlUrl + ", id=" + id + ", issueCommentUrl="
                + issueCommentUrl + ", issueEventsUrl=" + issueEventsUrl + ", issuesUrl="
                + issuesUrl + ", keysUrl=" + keysUrl + ", labelsUrl=" + labelsUrl + ", language="
                + language + ", languagesUrl=" + languagesUrl + ", license=" + license
                + ", mergesUrl=" + mergesUrl + ", milestonesUrl=" + milestonesUrl + ", mirrorUrl="
                + mirrorUrl + ", name=" + name + ", nodeId=" + nodeId + ", notificationsUrl="
                + notificationsUrl + ", openIssues=" + openIssues + ", openIssuesCount="
                + openIssuesCount + ", owner=" + owner + ", mPrivate=" + mPrivate + ", pullsUrl="
                + pullsUrl + ", pushedAt=" + pushedAt + ", releasesUrl=" + releasesUrl + ", size="
                + size + ", sshUrl=" + sshUrl + ", stargazersCount=" + stargazersCount
                + ", stargazersUrl=" + stargazersUrl + ", statusesUrl=" + statusesUrl
                + ", subscribersUrl=" + subscribersUrl + ", subscriptionUrl=" + subscriptionUrl
                + ", svnUrl=" + svnUrl + ", tagsUrl=" + tagsUrl + ", teamsUrl=" + teamsUrl
                + ", topics=" + topics + ", treesUrl=" + treesUrl + ", updatedAt=" + updatedAt
                + ", url=" + url + ", visibility=" + visibility + ", watchers=" + watchers
                + ", watchersCount=" + watchersCount + ", allowAutoMerge=" + allowAutoMerge
                + ", allowForking=" + allowForking + ", allowMergeCommit=" + allowMergeCommit
                + ", allowRebaseMerge=" + allowRebaseMerge + ", allowSquashMerge="
                + allowSquashMerge + ", allowUpdateBranch=" + allowUpdateBranch
                + ", deleteBranchOnMerge=" + deleteBranchOnMerge + ", disabled=" + disabled
                + ", isTemplate=" + isTemplate + ", masterBranch=" + masterBranch
                + ", mergeCommitMessage=" + mergeCommitMessage + ", mergeCommitTitle="
                + mergeCommitTitle + ", organization=" + organization + ", permissions="
                + permissions + ", mPublic=" + mPublic + ", roleName=" + roleName
                + ", squashMergeCommitMessage=" + squashMergeCommitMessage
                + ", squashMergeCommitTitle=" + squashMergeCommitTitle + ", stargazers="
                + stargazers + ", useSquashPrTitleAsDefault=" + useSquashPrTitleAsDefault
                + ", webCommitSignoffRequired=" + webCommitSignoffRequired + "]";
    }

    /**
     * Builds a new {@link Repository67.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Repository67.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(archiveUrl, archived, assigneesUrl, blobsUrl, branchesUrl,
                cloneUrl, collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl,
                contributorsUrl, createdAt, defaultBranch, deploymentsUrl, description,
                downloadsUrl, eventsUrl, fork, forks, forksCount, forksUrl, fullName, gitCommitsUrl,
                gitRefsUrl, gitTagsUrl, gitUrl, hasDownloads, hasIssues, hasPages, hasProjects,
                hasWiki, hasDiscussions, homepage, hooksUrl, htmlUrl, id, issueCommentUrl,
                issueEventsUrl, issuesUrl, keysUrl, labelsUrl, language, languagesUrl, license,
                mergesUrl, milestonesUrl, mirrorUrl, name, nodeId, notificationsUrl, openIssues,
                openIssuesCount, owner, mPrivate, pullsUrl, pushedAt, releasesUrl, size, sshUrl,
                stargazersCount, stargazersUrl, statusesUrl, subscribersUrl, subscriptionUrl,
                svnUrl, tagsUrl, teamsUrl, topics, treesUrl, updatedAt, url, visibility, watchers,
                watchersCount)
                .allowAutoMerge(getAllowAutoMerge())
                .allowForking(getAllowForking())
                .allowMergeCommit(getAllowMergeCommit())
                .allowRebaseMerge(getAllowRebaseMerge())
                .allowSquashMerge(getAllowSquashMerge())
                .allowUpdateBranch(getAllowUpdateBranch())
                .deleteBranchOnMerge(getDeleteBranchOnMerge())
                .disabled(getDisabled())
                .isTemplate(getIsTemplate())
                .masterBranch(getMasterBranch())
                .mergeCommitMessage(getMergeCommitMessage())
                .mergeCommitTitle(getMergeCommitTitle())
                .organization(getOrganization())
                .permissions(getPermissions())
                .mPublic(getPublic())
                .squashMergeCommitMessage(getSquashMergeCommitMessage())
                .squashMergeCommitTitle(getSquashMergeCommitTitle())
                .stargazers(getStargazers())
                .useSquashPrTitleAsDefault(getUseSquashPrTitleAsDefault())
                .webCommitSignoffRequired(getWebCommitSignoffRequired());
        builder.roleName = internalGetRoleName();
        return builder;
    }

    /**
     * Class to build instances of {@link Repository67}.
     */
    public static class Builder {
        private String archiveUrl;
        private boolean archived;
        private String assigneesUrl;
        private String blobsUrl;
        private String branchesUrl;
        private String cloneUrl;
        private String collaboratorsUrl;
        private String commentsUrl;
        private String commitsUrl;
        private String compareUrl;
        private String contentsUrl;
        private String contributorsUrl;
        private Repository67CreatedAt createdAt;
        private String defaultBranch;
        private String deploymentsUrl;
        private String description;
        private String downloadsUrl;
        private String eventsUrl;
        private boolean fork;
        private int forks;
        private int forksCount;
        private String forksUrl;
        private String fullName;
        private String gitCommitsUrl;
        private String gitRefsUrl;
        private String gitTagsUrl;
        private String gitUrl;
        private boolean hasDownloads;
        private boolean hasIssues;
        private boolean hasPages;
        private boolean hasProjects;
        private boolean hasWiki;
        private boolean hasDiscussions;
        private String homepage;
        private String hooksUrl;
        private String htmlUrl;
        private int id;
        private String issueCommentUrl;
        private String issueEventsUrl;
        private String issuesUrl;
        private String keysUrl;
        private String labelsUrl;
        private String language;
        private String languagesUrl;
        private Object license;
        private String mergesUrl;
        private String milestonesUrl;
        private String mirrorUrl;
        private String name;
        private String nodeId;
        private String notificationsUrl;
        private int openIssues;
        private int openIssuesCount;
        private Object owner;
        private boolean mPrivate;
        private String pullsUrl;
        private Repository67PushedAt pushedAt;
        private String releasesUrl;
        private int size;
        private String sshUrl;
        private int stargazersCount;
        private String stargazersUrl;
        private String statusesUrl;
        private String subscribersUrl;
        private String subscriptionUrl;
        private String svnUrl;
        private String tagsUrl;
        private String teamsUrl;
        private List<String> topics;
        private String treesUrl;
        private LocalDateTime updatedAt;
        private String url;
        private Visibility6Enum visibility;
        private int watchers;
        private int watchersCount;
        private Boolean allowAutoMerge = false;
        private Boolean allowForking;
        private Boolean allowMergeCommit = true;
        private Boolean allowRebaseMerge = true;
        private Boolean allowSquashMerge = true;
        private Boolean allowUpdateBranch;
        private Boolean deleteBranchOnMerge = false;
        private Boolean disabled;
        private Boolean isTemplate;
        private String masterBranch;
        private MergeCommitMessage12Enum mergeCommitMessage;
        private MergeCommitTitle12Enum mergeCommitTitle;
        private String organization;
        private Permissions1 permissions;
        private Boolean mPublic;
        private OptionalNullable<String> roleName;
        private SquashMergeCommitMessageEnum squashMergeCommitMessage;
        private SquashMergeCommitTitleEnum squashMergeCommitTitle;
        private Integer stargazers;
        private Boolean useSquashPrTitleAsDefault = false;
        private Boolean webCommitSignoffRequired;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  archiveUrl  String value for archiveUrl.
         * @param  archived  boolean value for archived.
         * @param  assigneesUrl  String value for assigneesUrl.
         * @param  blobsUrl  String value for blobsUrl.
         * @param  branchesUrl  String value for branchesUrl.
         * @param  cloneUrl  String value for cloneUrl.
         * @param  collaboratorsUrl  String value for collaboratorsUrl.
         * @param  commentsUrl  String value for commentsUrl.
         * @param  commitsUrl  String value for commitsUrl.
         * @param  compareUrl  String value for compareUrl.
         * @param  contentsUrl  String value for contentsUrl.
         * @param  contributorsUrl  String value for contributorsUrl.
         * @param  createdAt  Repository67CreatedAt value for createdAt.
         * @param  defaultBranch  String value for defaultBranch.
         * @param  deploymentsUrl  String value for deploymentsUrl.
         * @param  description  String value for description.
         * @param  downloadsUrl  String value for downloadsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @param  fork  boolean value for fork.
         * @param  forks  int value for forks.
         * @param  forksCount  int value for forksCount.
         * @param  forksUrl  String value for forksUrl.
         * @param  fullName  String value for fullName.
         * @param  gitCommitsUrl  String value for gitCommitsUrl.
         * @param  gitRefsUrl  String value for gitRefsUrl.
         * @param  gitTagsUrl  String value for gitTagsUrl.
         * @param  gitUrl  String value for gitUrl.
         * @param  hasDownloads  boolean value for hasDownloads.
         * @param  hasIssues  boolean value for hasIssues.
         * @param  hasPages  boolean value for hasPages.
         * @param  hasProjects  boolean value for hasProjects.
         * @param  hasWiki  boolean value for hasWiki.
         * @param  hasDiscussions  boolean value for hasDiscussions.
         * @param  homepage  String value for homepage.
         * @param  hooksUrl  String value for hooksUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  id  int value for id.
         * @param  issueCommentUrl  String value for issueCommentUrl.
         * @param  issueEventsUrl  String value for issueEventsUrl.
         * @param  issuesUrl  String value for issuesUrl.
         * @param  keysUrl  String value for keysUrl.
         * @param  labelsUrl  String value for labelsUrl.
         * @param  language  String value for language.
         * @param  languagesUrl  String value for languagesUrl.
         * @param  license  Object value for license.
         * @param  mergesUrl  String value for mergesUrl.
         * @param  milestonesUrl  String value for milestonesUrl.
         * @param  mirrorUrl  String value for mirrorUrl.
         * @param  name  String value for name.
         * @param  nodeId  String value for nodeId.
         * @param  notificationsUrl  String value for notificationsUrl.
         * @param  openIssues  int value for openIssues.
         * @param  openIssuesCount  int value for openIssuesCount.
         * @param  owner  Object value for owner.
         * @param  mPrivate  boolean value for mPrivate.
         * @param  pullsUrl  String value for pullsUrl.
         * @param  pushedAt  Repository67PushedAt value for pushedAt.
         * @param  releasesUrl  String value for releasesUrl.
         * @param  size  int value for size.
         * @param  sshUrl  String value for sshUrl.
         * @param  stargazersCount  int value for stargazersCount.
         * @param  stargazersUrl  String value for stargazersUrl.
         * @param  statusesUrl  String value for statusesUrl.
         * @param  subscribersUrl  String value for subscribersUrl.
         * @param  subscriptionUrl  String value for subscriptionUrl.
         * @param  svnUrl  String value for svnUrl.
         * @param  tagsUrl  String value for tagsUrl.
         * @param  teamsUrl  String value for teamsUrl.
         * @param  topics  List of String value for topics.
         * @param  treesUrl  String value for treesUrl.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  url  String value for url.
         * @param  visibility  Visibility6Enum value for visibility.
         * @param  watchers  int value for watchers.
         * @param  watchersCount  int value for watchersCount.
         */
        public Builder(String archiveUrl, boolean archived, String assigneesUrl, String blobsUrl,
                String branchesUrl, String cloneUrl, String collaboratorsUrl, String commentsUrl,
                String commitsUrl, String compareUrl, String contentsUrl, String contributorsUrl,
                Repository67CreatedAt createdAt, String defaultBranch, String deploymentsUrl,
                String description, String downloadsUrl, String eventsUrl, boolean fork, int forks,
                int forksCount, String forksUrl, String fullName, String gitCommitsUrl,
                String gitRefsUrl, String gitTagsUrl, String gitUrl, boolean hasDownloads,
                boolean hasIssues, boolean hasPages, boolean hasProjects, boolean hasWiki,
                boolean hasDiscussions, String homepage, String hooksUrl, String htmlUrl, int id,
                String issueCommentUrl, String issueEventsUrl, String issuesUrl, String keysUrl,
                String labelsUrl, String language, String languagesUrl, Object license,
                String mergesUrl, String milestonesUrl, String mirrorUrl, String name,
                String nodeId, String notificationsUrl, int openIssues, int openIssuesCount,
                Object owner, boolean mPrivate, String pullsUrl, Repository67PushedAt pushedAt,
                String releasesUrl, int size, String sshUrl, int stargazersCount,
                String stargazersUrl, String statusesUrl, String subscribersUrl,
                String subscriptionUrl, String svnUrl, String tagsUrl, String teamsUrl,
                List<String> topics, String treesUrl, LocalDateTime updatedAt, String url,
                Visibility6Enum visibility, int watchers, int watchersCount) {
            this.archiveUrl = archiveUrl;
            this.archived = archived;
            this.assigneesUrl = assigneesUrl;
            this.blobsUrl = blobsUrl;
            this.branchesUrl = branchesUrl;
            this.cloneUrl = cloneUrl;
            this.collaboratorsUrl = collaboratorsUrl;
            this.commentsUrl = commentsUrl;
            this.commitsUrl = commitsUrl;
            this.compareUrl = compareUrl;
            this.contentsUrl = contentsUrl;
            this.contributorsUrl = contributorsUrl;
            this.createdAt = createdAt;
            this.defaultBranch = defaultBranch;
            this.deploymentsUrl = deploymentsUrl;
            this.description = description;
            this.downloadsUrl = downloadsUrl;
            this.eventsUrl = eventsUrl;
            this.fork = fork;
            this.forks = forks;
            this.forksCount = forksCount;
            this.forksUrl = forksUrl;
            this.fullName = fullName;
            this.gitCommitsUrl = gitCommitsUrl;
            this.gitRefsUrl = gitRefsUrl;
            this.gitTagsUrl = gitTagsUrl;
            this.gitUrl = gitUrl;
            this.hasDownloads = hasDownloads;
            this.hasIssues = hasIssues;
            this.hasPages = hasPages;
            this.hasProjects = hasProjects;
            this.hasWiki = hasWiki;
            this.hasDiscussions = hasDiscussions;
            this.homepage = homepage;
            this.hooksUrl = hooksUrl;
            this.htmlUrl = htmlUrl;
            this.id = id;
            this.issueCommentUrl = issueCommentUrl;
            this.issueEventsUrl = issueEventsUrl;
            this.issuesUrl = issuesUrl;
            this.keysUrl = keysUrl;
            this.labelsUrl = labelsUrl;
            this.language = language;
            this.languagesUrl = languagesUrl;
            this.license = license;
            this.mergesUrl = mergesUrl;
            this.milestonesUrl = milestonesUrl;
            this.mirrorUrl = mirrorUrl;
            this.name = name;
            this.nodeId = nodeId;
            this.notificationsUrl = notificationsUrl;
            this.openIssues = openIssues;
            this.openIssuesCount = openIssuesCount;
            this.owner = owner;
            this.mPrivate = mPrivate;
            this.pullsUrl = pullsUrl;
            this.pushedAt = pushedAt;
            this.releasesUrl = releasesUrl;
            this.size = size;
            this.sshUrl = sshUrl;
            this.stargazersCount = stargazersCount;
            this.stargazersUrl = stargazersUrl;
            this.statusesUrl = statusesUrl;
            this.subscribersUrl = subscribersUrl;
            this.subscriptionUrl = subscriptionUrl;
            this.svnUrl = svnUrl;
            this.tagsUrl = tagsUrl;
            this.teamsUrl = teamsUrl;
            this.topics = topics;
            this.treesUrl = treesUrl;
            this.updatedAt = updatedAt;
            this.url = url;
            this.visibility = visibility;
            this.watchers = watchers;
            this.watchersCount = watchersCount;
        }

        /**
         * Setter for archiveUrl.
         * @param  archiveUrl  String value for archiveUrl.
         * @return Builder
         */
        public Builder archiveUrl(String archiveUrl) {
            this.archiveUrl = archiveUrl;
            return this;
        }

        /**
         * Setter for archived.
         * @param  archived  boolean value for archived.
         * @return Builder
         */
        public Builder archived(boolean archived) {
            this.archived = archived;
            return this;
        }

        /**
         * Setter for assigneesUrl.
         * @param  assigneesUrl  String value for assigneesUrl.
         * @return Builder
         */
        public Builder assigneesUrl(String assigneesUrl) {
            this.assigneesUrl = assigneesUrl;
            return this;
        }

        /**
         * Setter for blobsUrl.
         * @param  blobsUrl  String value for blobsUrl.
         * @return Builder
         */
        public Builder blobsUrl(String blobsUrl) {
            this.blobsUrl = blobsUrl;
            return this;
        }

        /**
         * Setter for branchesUrl.
         * @param  branchesUrl  String value for branchesUrl.
         * @return Builder
         */
        public Builder branchesUrl(String branchesUrl) {
            this.branchesUrl = branchesUrl;
            return this;
        }

        /**
         * Setter for cloneUrl.
         * @param  cloneUrl  String value for cloneUrl.
         * @return Builder
         */
        public Builder cloneUrl(String cloneUrl) {
            this.cloneUrl = cloneUrl;
            return this;
        }

        /**
         * Setter for collaboratorsUrl.
         * @param  collaboratorsUrl  String value for collaboratorsUrl.
         * @return Builder
         */
        public Builder collaboratorsUrl(String collaboratorsUrl) {
            this.collaboratorsUrl = collaboratorsUrl;
            return this;
        }

        /**
         * Setter for commentsUrl.
         * @param  commentsUrl  String value for commentsUrl.
         * @return Builder
         */
        public Builder commentsUrl(String commentsUrl) {
            this.commentsUrl = commentsUrl;
            return this;
        }

        /**
         * Setter for commitsUrl.
         * @param  commitsUrl  String value for commitsUrl.
         * @return Builder
         */
        public Builder commitsUrl(String commitsUrl) {
            this.commitsUrl = commitsUrl;
            return this;
        }

        /**
         * Setter for compareUrl.
         * @param  compareUrl  String value for compareUrl.
         * @return Builder
         */
        public Builder compareUrl(String compareUrl) {
            this.compareUrl = compareUrl;
            return this;
        }

        /**
         * Setter for contentsUrl.
         * @param  contentsUrl  String value for contentsUrl.
         * @return Builder
         */
        public Builder contentsUrl(String contentsUrl) {
            this.contentsUrl = contentsUrl;
            return this;
        }

        /**
         * Setter for contributorsUrl.
         * @param  contributorsUrl  String value for contributorsUrl.
         * @return Builder
         */
        public Builder contributorsUrl(String contributorsUrl) {
            this.contributorsUrl = contributorsUrl;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  Repository67CreatedAt value for createdAt.
         * @return Builder
         */
        public Builder createdAt(Repository67CreatedAt createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for defaultBranch.
         * @param  defaultBranch  String value for defaultBranch.
         * @return Builder
         */
        public Builder defaultBranch(String defaultBranch) {
            this.defaultBranch = defaultBranch;
            return this;
        }

        /**
         * Setter for deploymentsUrl.
         * @param  deploymentsUrl  String value for deploymentsUrl.
         * @return Builder
         */
        public Builder deploymentsUrl(String deploymentsUrl) {
            this.deploymentsUrl = deploymentsUrl;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for downloadsUrl.
         * @param  downloadsUrl  String value for downloadsUrl.
         * @return Builder
         */
        public Builder downloadsUrl(String downloadsUrl) {
            this.downloadsUrl = downloadsUrl;
            return this;
        }

        /**
         * Setter for eventsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @return Builder
         */
        public Builder eventsUrl(String eventsUrl) {
            this.eventsUrl = eventsUrl;
            return this;
        }

        /**
         * Setter for fork.
         * @param  fork  boolean value for fork.
         * @return Builder
         */
        public Builder fork(boolean fork) {
            this.fork = fork;
            return this;
        }

        /**
         * Setter for forks.
         * @param  forks  int value for forks.
         * @return Builder
         */
        public Builder forks(int forks) {
            this.forks = forks;
            return this;
        }

        /**
         * Setter for forksCount.
         * @param  forksCount  int value for forksCount.
         * @return Builder
         */
        public Builder forksCount(int forksCount) {
            this.forksCount = forksCount;
            return this;
        }

        /**
         * Setter for forksUrl.
         * @param  forksUrl  String value for forksUrl.
         * @return Builder
         */
        public Builder forksUrl(String forksUrl) {
            this.forksUrl = forksUrl;
            return this;
        }

        /**
         * Setter for fullName.
         * @param  fullName  String value for fullName.
         * @return Builder
         */
        public Builder fullName(String fullName) {
            this.fullName = fullName;
            return this;
        }

        /**
         * Setter for gitCommitsUrl.
         * @param  gitCommitsUrl  String value for gitCommitsUrl.
         * @return Builder
         */
        public Builder gitCommitsUrl(String gitCommitsUrl) {
            this.gitCommitsUrl = gitCommitsUrl;
            return this;
        }

        /**
         * Setter for gitRefsUrl.
         * @param  gitRefsUrl  String value for gitRefsUrl.
         * @return Builder
         */
        public Builder gitRefsUrl(String gitRefsUrl) {
            this.gitRefsUrl = gitRefsUrl;
            return this;
        }

        /**
         * Setter for gitTagsUrl.
         * @param  gitTagsUrl  String value for gitTagsUrl.
         * @return Builder
         */
        public Builder gitTagsUrl(String gitTagsUrl) {
            this.gitTagsUrl = gitTagsUrl;
            return this;
        }

        /**
         * Setter for gitUrl.
         * @param  gitUrl  String value for gitUrl.
         * @return Builder
         */
        public Builder gitUrl(String gitUrl) {
            this.gitUrl = gitUrl;
            return this;
        }

        /**
         * Setter for hasDownloads.
         * @param  hasDownloads  boolean value for hasDownloads.
         * @return Builder
         */
        public Builder hasDownloads(boolean hasDownloads) {
            this.hasDownloads = hasDownloads;
            return this;
        }

        /**
         * Setter for hasIssues.
         * @param  hasIssues  boolean value for hasIssues.
         * @return Builder
         */
        public Builder hasIssues(boolean hasIssues) {
            this.hasIssues = hasIssues;
            return this;
        }

        /**
         * Setter for hasPages.
         * @param  hasPages  boolean value for hasPages.
         * @return Builder
         */
        public Builder hasPages(boolean hasPages) {
            this.hasPages = hasPages;
            return this;
        }

        /**
         * Setter for hasProjects.
         * @param  hasProjects  boolean value for hasProjects.
         * @return Builder
         */
        public Builder hasProjects(boolean hasProjects) {
            this.hasProjects = hasProjects;
            return this;
        }

        /**
         * Setter for hasWiki.
         * @param  hasWiki  boolean value for hasWiki.
         * @return Builder
         */
        public Builder hasWiki(boolean hasWiki) {
            this.hasWiki = hasWiki;
            return this;
        }

        /**
         * Setter for hasDiscussions.
         * @param  hasDiscussions  boolean value for hasDiscussions.
         * @return Builder
         */
        public Builder hasDiscussions(boolean hasDiscussions) {
            this.hasDiscussions = hasDiscussions;
            return this;
        }

        /**
         * Setter for homepage.
         * @param  homepage  String value for homepage.
         * @return Builder
         */
        public Builder homepage(String homepage) {
            this.homepage = homepage;
            return this;
        }

        /**
         * Setter for hooksUrl.
         * @param  hooksUrl  String value for hooksUrl.
         * @return Builder
         */
        public Builder hooksUrl(String hooksUrl) {
            this.hooksUrl = hooksUrl;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for issueCommentUrl.
         * @param  issueCommentUrl  String value for issueCommentUrl.
         * @return Builder
         */
        public Builder issueCommentUrl(String issueCommentUrl) {
            this.issueCommentUrl = issueCommentUrl;
            return this;
        }

        /**
         * Setter for issueEventsUrl.
         * @param  issueEventsUrl  String value for issueEventsUrl.
         * @return Builder
         */
        public Builder issueEventsUrl(String issueEventsUrl) {
            this.issueEventsUrl = issueEventsUrl;
            return this;
        }

        /**
         * Setter for issuesUrl.
         * @param  issuesUrl  String value for issuesUrl.
         * @return Builder
         */
        public Builder issuesUrl(String issuesUrl) {
            this.issuesUrl = issuesUrl;
            return this;
        }

        /**
         * Setter for keysUrl.
         * @param  keysUrl  String value for keysUrl.
         * @return Builder
         */
        public Builder keysUrl(String keysUrl) {
            this.keysUrl = keysUrl;
            return this;
        }

        /**
         * Setter for labelsUrl.
         * @param  labelsUrl  String value for labelsUrl.
         * @return Builder
         */
        public Builder labelsUrl(String labelsUrl) {
            this.labelsUrl = labelsUrl;
            return this;
        }

        /**
         * Setter for language.
         * @param  language  String value for language.
         * @return Builder
         */
        public Builder language(String language) {
            this.language = language;
            return this;
        }

        /**
         * Setter for languagesUrl.
         * @param  languagesUrl  String value for languagesUrl.
         * @return Builder
         */
        public Builder languagesUrl(String languagesUrl) {
            this.languagesUrl = languagesUrl;
            return this;
        }

        /**
         * Setter for license.
         * @param  license  Object value for license.
         * @return Builder
         */
        public Builder license(Object license) {
            this.license = license;
            return this;
        }

        /**
         * Setter for mergesUrl.
         * @param  mergesUrl  String value for mergesUrl.
         * @return Builder
         */
        public Builder mergesUrl(String mergesUrl) {
            this.mergesUrl = mergesUrl;
            return this;
        }

        /**
         * Setter for milestonesUrl.
         * @param  milestonesUrl  String value for milestonesUrl.
         * @return Builder
         */
        public Builder milestonesUrl(String milestonesUrl) {
            this.milestonesUrl = milestonesUrl;
            return this;
        }

        /**
         * Setter for mirrorUrl.
         * @param  mirrorUrl  String value for mirrorUrl.
         * @return Builder
         */
        public Builder mirrorUrl(String mirrorUrl) {
            this.mirrorUrl = mirrorUrl;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for notificationsUrl.
         * @param  notificationsUrl  String value for notificationsUrl.
         * @return Builder
         */
        public Builder notificationsUrl(String notificationsUrl) {
            this.notificationsUrl = notificationsUrl;
            return this;
        }

        /**
         * Setter for openIssues.
         * @param  openIssues  int value for openIssues.
         * @return Builder
         */
        public Builder openIssues(int openIssues) {
            this.openIssues = openIssues;
            return this;
        }

        /**
         * Setter for openIssuesCount.
         * @param  openIssuesCount  int value for openIssuesCount.
         * @return Builder
         */
        public Builder openIssuesCount(int openIssuesCount) {
            this.openIssuesCount = openIssuesCount;
            return this;
        }

        /**
         * Setter for owner.
         * @param  owner  Object value for owner.
         * @return Builder
         */
        public Builder owner(Object owner) {
            this.owner = owner;
            return this;
        }

        /**
         * Setter for mPrivate.
         * @param  mPrivate  boolean value for mPrivate.
         * @return Builder
         */
        public Builder mPrivate(boolean mPrivate) {
            this.mPrivate = mPrivate;
            return this;
        }

        /**
         * Setter for pullsUrl.
         * @param  pullsUrl  String value for pullsUrl.
         * @return Builder
         */
        public Builder pullsUrl(String pullsUrl) {
            this.pullsUrl = pullsUrl;
            return this;
        }

        /**
         * Setter for pushedAt.
         * @param  pushedAt  Repository67PushedAt value for pushedAt.
         * @return Builder
         */
        public Builder pushedAt(Repository67PushedAt pushedAt) {
            this.pushedAt = pushedAt;
            return this;
        }

        /**
         * Setter for releasesUrl.
         * @param  releasesUrl  String value for releasesUrl.
         * @return Builder
         */
        public Builder releasesUrl(String releasesUrl) {
            this.releasesUrl = releasesUrl;
            return this;
        }

        /**
         * Setter for size.
         * @param  size  int value for size.
         * @return Builder
         */
        public Builder size(int size) {
            this.size = size;
            return this;
        }

        /**
         * Setter for sshUrl.
         * @param  sshUrl  String value for sshUrl.
         * @return Builder
         */
        public Builder sshUrl(String sshUrl) {
            this.sshUrl = sshUrl;
            return this;
        }

        /**
         * Setter for stargazersCount.
         * @param  stargazersCount  int value for stargazersCount.
         * @return Builder
         */
        public Builder stargazersCount(int stargazersCount) {
            this.stargazersCount = stargazersCount;
            return this;
        }

        /**
         * Setter for stargazersUrl.
         * @param  stargazersUrl  String value for stargazersUrl.
         * @return Builder
         */
        public Builder stargazersUrl(String stargazersUrl) {
            this.stargazersUrl = stargazersUrl;
            return this;
        }

        /**
         * Setter for statusesUrl.
         * @param  statusesUrl  String value for statusesUrl.
         * @return Builder
         */
        public Builder statusesUrl(String statusesUrl) {
            this.statusesUrl = statusesUrl;
            return this;
        }

        /**
         * Setter for subscribersUrl.
         * @param  subscribersUrl  String value for subscribersUrl.
         * @return Builder
         */
        public Builder subscribersUrl(String subscribersUrl) {
            this.subscribersUrl = subscribersUrl;
            return this;
        }

        /**
         * Setter for subscriptionUrl.
         * @param  subscriptionUrl  String value for subscriptionUrl.
         * @return Builder
         */
        public Builder subscriptionUrl(String subscriptionUrl) {
            this.subscriptionUrl = subscriptionUrl;
            return this;
        }

        /**
         * Setter for svnUrl.
         * @param  svnUrl  String value for svnUrl.
         * @return Builder
         */
        public Builder svnUrl(String svnUrl) {
            this.svnUrl = svnUrl;
            return this;
        }

        /**
         * Setter for tagsUrl.
         * @param  tagsUrl  String value for tagsUrl.
         * @return Builder
         */
        public Builder tagsUrl(String tagsUrl) {
            this.tagsUrl = tagsUrl;
            return this;
        }

        /**
         * Setter for teamsUrl.
         * @param  teamsUrl  String value for teamsUrl.
         * @return Builder
         */
        public Builder teamsUrl(String teamsUrl) {
            this.teamsUrl = teamsUrl;
            return this;
        }

        /**
         * Setter for topics.
         * @param  topics  List of String value for topics.
         * @return Builder
         */
        public Builder topics(List<String> topics) {
            this.topics = topics;
            return this;
        }

        /**
         * Setter for treesUrl.
         * @param  treesUrl  String value for treesUrl.
         * @return Builder
         */
        public Builder treesUrl(String treesUrl) {
            this.treesUrl = treesUrl;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for visibility.
         * @param  visibility  Visibility6Enum value for visibility.
         * @return Builder
         */
        public Builder visibility(Visibility6Enum visibility) {
            this.visibility = visibility;
            return this;
        }

        /**
         * Setter for watchers.
         * @param  watchers  int value for watchers.
         * @return Builder
         */
        public Builder watchers(int watchers) {
            this.watchers = watchers;
            return this;
        }

        /**
         * Setter for watchersCount.
         * @param  watchersCount  int value for watchersCount.
         * @return Builder
         */
        public Builder watchersCount(int watchersCount) {
            this.watchersCount = watchersCount;
            return this;
        }

        /**
         * Setter for allowAutoMerge.
         * @param  allowAutoMerge  Boolean value for allowAutoMerge.
         * @return Builder
         */
        public Builder allowAutoMerge(Boolean allowAutoMerge) {
            this.allowAutoMerge = allowAutoMerge;
            return this;
        }

        /**
         * Setter for allowForking.
         * @param  allowForking  Boolean value for allowForking.
         * @return Builder
         */
        public Builder allowForking(Boolean allowForking) {
            this.allowForking = allowForking;
            return this;
        }

        /**
         * Setter for allowMergeCommit.
         * @param  allowMergeCommit  Boolean value for allowMergeCommit.
         * @return Builder
         */
        public Builder allowMergeCommit(Boolean allowMergeCommit) {
            this.allowMergeCommit = allowMergeCommit;
            return this;
        }

        /**
         * Setter for allowRebaseMerge.
         * @param  allowRebaseMerge  Boolean value for allowRebaseMerge.
         * @return Builder
         */
        public Builder allowRebaseMerge(Boolean allowRebaseMerge) {
            this.allowRebaseMerge = allowRebaseMerge;
            return this;
        }

        /**
         * Setter for allowSquashMerge.
         * @param  allowSquashMerge  Boolean value for allowSquashMerge.
         * @return Builder
         */
        public Builder allowSquashMerge(Boolean allowSquashMerge) {
            this.allowSquashMerge = allowSquashMerge;
            return this;
        }

        /**
         * Setter for allowUpdateBranch.
         * @param  allowUpdateBranch  Boolean value for allowUpdateBranch.
         * @return Builder
         */
        public Builder allowUpdateBranch(Boolean allowUpdateBranch) {
            this.allowUpdateBranch = allowUpdateBranch;
            return this;
        }

        /**
         * Setter for deleteBranchOnMerge.
         * @param  deleteBranchOnMerge  Boolean value for deleteBranchOnMerge.
         * @return Builder
         */
        public Builder deleteBranchOnMerge(Boolean deleteBranchOnMerge) {
            this.deleteBranchOnMerge = deleteBranchOnMerge;
            return this;
        }

        /**
         * Setter for disabled.
         * @param  disabled  Boolean value for disabled.
         * @return Builder
         */
        public Builder disabled(Boolean disabled) {
            this.disabled = disabled;
            return this;
        }

        /**
         * Setter for isTemplate.
         * @param  isTemplate  Boolean value for isTemplate.
         * @return Builder
         */
        public Builder isTemplate(Boolean isTemplate) {
            this.isTemplate = isTemplate;
            return this;
        }

        /**
         * Setter for masterBranch.
         * @param  masterBranch  String value for masterBranch.
         * @return Builder
         */
        public Builder masterBranch(String masterBranch) {
            this.masterBranch = masterBranch;
            return this;
        }

        /**
         * Setter for mergeCommitMessage.
         * @param  mergeCommitMessage  MergeCommitMessage12Enum value for mergeCommitMessage.
         * @return Builder
         */
        public Builder mergeCommitMessage(MergeCommitMessage12Enum mergeCommitMessage) {
            this.mergeCommitMessage = mergeCommitMessage;
            return this;
        }

        /**
         * Setter for mergeCommitTitle.
         * @param  mergeCommitTitle  MergeCommitTitle12Enum value for mergeCommitTitle.
         * @return Builder
         */
        public Builder mergeCommitTitle(MergeCommitTitle12Enum mergeCommitTitle) {
            this.mergeCommitTitle = mergeCommitTitle;
            return this;
        }

        /**
         * Setter for organization.
         * @param  organization  String value for organization.
         * @return Builder
         */
        public Builder organization(String organization) {
            this.organization = organization;
            return this;
        }

        /**
         * Setter for permissions.
         * @param  permissions  Permissions1 value for permissions.
         * @return Builder
         */
        public Builder permissions(Permissions1 permissions) {
            this.permissions = permissions;
            return this;
        }

        /**
         * Setter for mPublic.
         * @param  mPublic  Boolean value for mPublic.
         * @return Builder
         */
        public Builder mPublic(Boolean mPublic) {
            this.mPublic = mPublic;
            return this;
        }

        /**
         * Setter for roleName.
         * @param  roleName  String value for roleName.
         * @return Builder
         */
        public Builder roleName(String roleName) {
            this.roleName = OptionalNullable.of(roleName);
            return this;
        }

        /**
         * UnSetter for roleName.
         * @return Builder
         */
        public Builder unsetRoleName() {
            roleName = null;
            return this;
        }

        /**
         * Setter for squashMergeCommitMessage.
         * @param  squashMergeCommitMessage  SquashMergeCommitMessageEnum value for
         *         squashMergeCommitMessage.
         * @return Builder
         */
        public Builder squashMergeCommitMessage(
                SquashMergeCommitMessageEnum squashMergeCommitMessage) {
            this.squashMergeCommitMessage = squashMergeCommitMessage;
            return this;
        }

        /**
         * Setter for squashMergeCommitTitle.
         * @param  squashMergeCommitTitle  SquashMergeCommitTitleEnum value for
         *         squashMergeCommitTitle.
         * @return Builder
         */
        public Builder squashMergeCommitTitle(SquashMergeCommitTitleEnum squashMergeCommitTitle) {
            this.squashMergeCommitTitle = squashMergeCommitTitle;
            return this;
        }

        /**
         * Setter for stargazers.
         * @param  stargazers  Integer value for stargazers.
         * @return Builder
         */
        public Builder stargazers(Integer stargazers) {
            this.stargazers = stargazers;
            return this;
        }

        /**
         * Setter for useSquashPrTitleAsDefault.
         * @param  useSquashPrTitleAsDefault  Boolean value for useSquashPrTitleAsDefault.
         * @return Builder
         */
        public Builder useSquashPrTitleAsDefault(Boolean useSquashPrTitleAsDefault) {
            this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
            return this;
        }

        /**
         * Setter for webCommitSignoffRequired.
         * @param  webCommitSignoffRequired  Boolean value for webCommitSignoffRequired.
         * @return Builder
         */
        public Builder webCommitSignoffRequired(Boolean webCommitSignoffRequired) {
            this.webCommitSignoffRequired = webCommitSignoffRequired;
            return this;
        }

        /**
         * Builds a new {@link Repository67} object using the set fields.
         * @return {@link Repository67}
         */
        public Repository67 build() {
            return new Repository67(archiveUrl, archived, assigneesUrl, blobsUrl, branchesUrl,
                    cloneUrl, collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl,
                    contributorsUrl, createdAt, defaultBranch, deploymentsUrl, description,
                    downloadsUrl, eventsUrl, fork, forks, forksCount, forksUrl, fullName,
                    gitCommitsUrl, gitRefsUrl, gitTagsUrl, gitUrl, hasDownloads, hasIssues,
                    hasPages, hasProjects, hasWiki, hasDiscussions, homepage, hooksUrl, htmlUrl, id,
                    issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl, language,
                    languagesUrl, license, mergesUrl, milestonesUrl, mirrorUrl, name, nodeId,
                    notificationsUrl, openIssues, openIssuesCount, owner, mPrivate, pullsUrl,
                    pushedAt, releasesUrl, size, sshUrl, stargazersCount, stargazersUrl,
                    statusesUrl, subscribersUrl, subscriptionUrl, svnUrl, tagsUrl, teamsUrl, topics,
                    treesUrl, updatedAt, url, visibility, watchers, watchersCount, allowAutoMerge,
                    allowForking, allowMergeCommit, allowRebaseMerge, allowSquashMerge,
                    allowUpdateBranch, deleteBranchOnMerge, disabled, isTemplate, masterBranch,
                    mergeCommitMessage, mergeCommitTitle, organization, permissions, mPublic,
                    roleName, squashMergeCommitMessage, squashMergeCommitTitle, stargazers,
                    useSquashPrTitleAsDefault, webCommitSignoffRequired);
        }
    }
}

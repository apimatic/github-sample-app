/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for ReposHooksHookIdRequest type.
 */
public class ReposHooksHookIdRequest {
    private Config10 config;
    private List<String> events;
    private List<String> addEvents;
    private List<String> removeEvents;
    private Boolean active;

    /**
     * Default constructor.
     */
    public ReposHooksHookIdRequest() {
        active = true;
    }

    /**
     * Initialization constructor.
     * @param  config  Config10 value for config.
     * @param  events  List of String value for events.
     * @param  addEvents  List of String value for addEvents.
     * @param  removeEvents  List of String value for removeEvents.
     * @param  active  Boolean value for active.
     */
    public ReposHooksHookIdRequest(
            Config10 config,
            List<String> events,
            List<String> addEvents,
            List<String> removeEvents,
            Boolean active) {
        this.config = config;
        this.events = events;
        this.addEvents = addEvents;
        this.removeEvents = removeEvents;
        this.active = active;
    }

    /**
     * Getter for Config.
     * @return Returns the Config10
     */
    @JsonGetter("config")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Config10 getConfig() {
        return config;
    }

    /**
     * Setter for Config.
     * @param config Value for Config10
     */
    @JsonSetter("config")
    public void setConfig(Config10 config) {
        this.config = config;
    }

    /**
     * Getter for Events.
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is
     * triggered for. This replaces the entire array of events.
     * @return Returns the List of String
     */
    @JsonGetter("events")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getEvents() {
        return events;
    }

    /**
     * Setter for Events.
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is
     * triggered for. This replaces the entire array of events.
     * @param events Value for List of String
     */
    @JsonSetter("events")
    public void setEvents(List<String> events) {
        this.events = events;
    }

    /**
     * Getter for AddEvents.
     * Determines a list of events to be added to the list of events that the Hook triggers for.
     * @return Returns the List of String
     */
    @JsonGetter("add_events")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getAddEvents() {
        return addEvents;
    }

    /**
     * Setter for AddEvents.
     * Determines a list of events to be added to the list of events that the Hook triggers for.
     * @param addEvents Value for List of String
     */
    @JsonSetter("add_events")
    public void setAddEvents(List<String> addEvents) {
        this.addEvents = addEvents;
    }

    /**
     * Getter for RemoveEvents.
     * Determines a list of events to be removed from the list of events that the Hook triggers for.
     * @return Returns the List of String
     */
    @JsonGetter("remove_events")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getRemoveEvents() {
        return removeEvents;
    }

    /**
     * Setter for RemoveEvents.
     * Determines a list of events to be removed from the list of events that the Hook triggers for.
     * @param removeEvents Value for List of String
     */
    @JsonSetter("remove_events")
    public void setRemoveEvents(List<String> removeEvents) {
        this.removeEvents = removeEvents;
    }

    /**
     * Getter for Active.
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send
     * notifications.
     * @return Returns the Boolean
     */
    @JsonGetter("active")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getActive() {
        return active;
    }

    /**
     * Setter for Active.
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send
     * notifications.
     * @param active Value for Boolean
     */
    @JsonSetter("active")
    public void setActive(Boolean active) {
        this.active = active;
    }

    /**
     * Converts this ReposHooksHookIdRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposHooksHookIdRequest [" + "config=" + config + ", events=" + events
                + ", addEvents=" + addEvents + ", removeEvents=" + removeEvents + ", active="
                + active + "]";
    }

    /**
     * Builds a new {@link ReposHooksHookIdRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposHooksHookIdRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .config(getConfig())
                .events(getEvents())
                .addEvents(getAddEvents())
                .removeEvents(getRemoveEvents())
                .active(getActive());
        return builder;
    }

    /**
     * Class to build instances of {@link ReposHooksHookIdRequest}.
     */
    public static class Builder {
        private Config10 config;
        private List<String> events;
        private List<String> addEvents;
        private List<String> removeEvents;
        private Boolean active = true;



        /**
         * Setter for config.
         * @param  config  Config10 value for config.
         * @return Builder
         */
        public Builder config(Config10 config) {
            this.config = config;
            return this;
        }

        /**
         * Setter for events.
         * @param  events  List of String value for events.
         * @return Builder
         */
        public Builder events(List<String> events) {
            this.events = events;
            return this;
        }

        /**
         * Setter for addEvents.
         * @param  addEvents  List of String value for addEvents.
         * @return Builder
         */
        public Builder addEvents(List<String> addEvents) {
            this.addEvents = addEvents;
            return this;
        }

        /**
         * Setter for removeEvents.
         * @param  removeEvents  List of String value for removeEvents.
         * @return Builder
         */
        public Builder removeEvents(List<String> removeEvents) {
            this.removeEvents = removeEvents;
            return this;
        }

        /**
         * Setter for active.
         * @param  active  Boolean value for active.
         * @return Builder
         */
        public Builder active(Boolean active) {
            this.active = active;
            return this;
        }

        /**
         * Builds a new {@link ReposHooksHookIdRequest} object using the set fields.
         * @return {@link ReposHooksHookIdRequest}
         */
        public ReposHooksHookIdRequest build() {
            return new ReposHooksHookIdRequest(config, events, addEvents, removeEvents, active);
        }
    }
}

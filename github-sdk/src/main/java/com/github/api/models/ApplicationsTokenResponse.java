/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for ApplicationsTokenResponse type.
 */
public class ApplicationsTokenResponse {
    private int id;
    private String url;
    private List<String> scopes;
    private String token;
    private String tokenLastEight;
    private String hashedToken;
    private App app;
    private String note;
    private String noteUrl;
    private LocalDateTime updatedAt;
    private LocalDateTime createdAt;
    private String fingerprint;
    private Object user;
    private Object installation;
    private LocalDateTime expiresAt;

    /**
     * Default constructor.
     */
    public ApplicationsTokenResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  url  String value for url.
     * @param  scopes  List of String value for scopes.
     * @param  token  String value for token.
     * @param  tokenLastEight  String value for tokenLastEight.
     * @param  hashedToken  String value for hashedToken.
     * @param  app  App value for app.
     * @param  note  String value for note.
     * @param  noteUrl  String value for noteUrl.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  fingerprint  String value for fingerprint.
     * @param  expiresAt  LocalDateTime value for expiresAt.
     * @param  user  Object value for user.
     * @param  installation  Object value for installation.
     */
    public ApplicationsTokenResponse(
            int id,
            String url,
            List<String> scopes,
            String token,
            String tokenLastEight,
            String hashedToken,
            App app,
            String note,
            String noteUrl,
            LocalDateTime updatedAt,
            LocalDateTime createdAt,
            String fingerprint,
            LocalDateTime expiresAt,
            Object user,
            Object installation) {
        this.id = id;
        this.url = url;
        this.scopes = scopes;
        this.token = token;
        this.tokenLastEight = tokenLastEight;
        this.hashedToken = hashedToken;
        this.app = app;
        this.note = note;
        this.noteUrl = noteUrl;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.fingerprint = fingerprint;
        this.user = user;
        this.installation = installation;
        this.expiresAt = expiresAt;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for Scopes.
     * A list of scopes that this authorization is in.
     * @return Returns the List of String
     */
    @JsonGetter("scopes")
    public List<String> getScopes() {
        return scopes;
    }

    /**
     * Setter for Scopes.
     * A list of scopes that this authorization is in.
     * @param scopes Value for List of String
     */
    @JsonSetter("scopes")
    public void setScopes(List<String> scopes) {
        this.scopes = scopes;
    }

    /**
     * Getter for Token.
     * @return Returns the String
     */
    @JsonGetter("token")
    public String getToken() {
        return token;
    }

    /**
     * Setter for Token.
     * @param token Value for String
     */
    @JsonSetter("token")
    public void setToken(String token) {
        this.token = token;
    }

    /**
     * Getter for TokenLastEight.
     * @return Returns the String
     */
    @JsonGetter("token_last_eight")
    public String getTokenLastEight() {
        return tokenLastEight;
    }

    /**
     * Setter for TokenLastEight.
     * @param tokenLastEight Value for String
     */
    @JsonSetter("token_last_eight")
    public void setTokenLastEight(String tokenLastEight) {
        this.tokenLastEight = tokenLastEight;
    }

    /**
     * Getter for HashedToken.
     * @return Returns the String
     */
    @JsonGetter("hashed_token")
    public String getHashedToken() {
        return hashedToken;
    }

    /**
     * Setter for HashedToken.
     * @param hashedToken Value for String
     */
    @JsonSetter("hashed_token")
    public void setHashedToken(String hashedToken) {
        this.hashedToken = hashedToken;
    }

    /**
     * Getter for App.
     * @return Returns the App
     */
    @JsonGetter("app")
    public App getApp() {
        return app;
    }

    /**
     * Setter for App.
     * @param app Value for App
     */
    @JsonSetter("app")
    public void setApp(App app) {
        this.app = app;
    }

    /**
     * Getter for Note.
     * @return Returns the String
     */
    @JsonGetter("note")
    public String getNote() {
        return note;
    }

    /**
     * Setter for Note.
     * @param note Value for String
     */
    @JsonSetter("note")
    public void setNote(String note) {
        this.note = note;
    }

    /**
     * Getter for NoteUrl.
     * @return Returns the String
     */
    @JsonGetter("note_url")
    public String getNoteUrl() {
        return noteUrl;
    }

    /**
     * Setter for NoteUrl.
     * @param noteUrl Value for String
     */
    @JsonSetter("note_url")
    public void setNoteUrl(String noteUrl) {
        this.noteUrl = noteUrl;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for Fingerprint.
     * @return Returns the String
     */
    @JsonGetter("fingerprint")
    public String getFingerprint() {
        return fingerprint;
    }

    /**
     * Setter for Fingerprint.
     * @param fingerprint Value for String
     */
    @JsonSetter("fingerprint")
    public void setFingerprint(String fingerprint) {
        this.fingerprint = fingerprint;
    }

    /**
     * Getter for User.
     * @return Returns the Object
     */
    @JsonGetter("user")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getUser() {
        return user;
    }

    /**
     * Setter for User.
     * @param user Value for Object
     */
    @JsonSetter("user")
    public void setUser(Object user) {
        this.user = user;
    }

    /**
     * Getter for Installation.
     * @return Returns the Object
     */
    @JsonGetter("installation")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getInstallation() {
        return installation;
    }

    /**
     * Setter for Installation.
     * @param installation Value for Object
     */
    @JsonSetter("installation")
    public void setInstallation(Object installation) {
        this.installation = installation;
    }

    /**
     * Getter for ExpiresAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("expires_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getExpiresAt() {
        return expiresAt;
    }

    /**
     * Setter for ExpiresAt.
     * @param expiresAt Value for LocalDateTime
     */
    @JsonSetter("expires_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setExpiresAt(LocalDateTime expiresAt) {
        this.expiresAt = expiresAt;
    }

    /**
     * Converts this ApplicationsTokenResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ApplicationsTokenResponse [" + "id=" + id + ", url=" + url + ", scopes=" + scopes
                + ", token=" + token + ", tokenLastEight=" + tokenLastEight + ", hashedToken="
                + hashedToken + ", app=" + app + ", note=" + note + ", noteUrl=" + noteUrl
                + ", updatedAt=" + updatedAt + ", createdAt=" + createdAt + ", fingerprint="
                + fingerprint + ", expiresAt=" + expiresAt + ", user=" + user + ", installation="
                + installation + "]";
    }

    /**
     * Builds a new {@link ApplicationsTokenResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ApplicationsTokenResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, url, scopes, token, tokenLastEight, hashedToken, app,
                note, noteUrl, updatedAt, createdAt, fingerprint, expiresAt)
                .user(getUser())
                .installation(getInstallation());
        return builder;
    }

    /**
     * Class to build instances of {@link ApplicationsTokenResponse}.
     */
    public static class Builder {
        private int id;
        private String url;
        private List<String> scopes;
        private String token;
        private String tokenLastEight;
        private String hashedToken;
        private App app;
        private String note;
        private String noteUrl;
        private LocalDateTime updatedAt;
        private LocalDateTime createdAt;
        private String fingerprint;
        private LocalDateTime expiresAt;
        private Object user;
        private Object installation;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  url  String value for url.
         * @param  scopes  List of String value for scopes.
         * @param  token  String value for token.
         * @param  tokenLastEight  String value for tokenLastEight.
         * @param  hashedToken  String value for hashedToken.
         * @param  app  App value for app.
         * @param  note  String value for note.
         * @param  noteUrl  String value for noteUrl.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  fingerprint  String value for fingerprint.
         * @param  expiresAt  LocalDateTime value for expiresAt.
         */
        public Builder(int id, String url, List<String> scopes, String token, String tokenLastEight,
                String hashedToken, App app, String note, String noteUrl, LocalDateTime updatedAt,
                LocalDateTime createdAt, String fingerprint, LocalDateTime expiresAt) {
            this.id = id;
            this.url = url;
            this.scopes = scopes;
            this.token = token;
            this.tokenLastEight = tokenLastEight;
            this.hashedToken = hashedToken;
            this.app = app;
            this.note = note;
            this.noteUrl = noteUrl;
            this.updatedAt = updatedAt;
            this.createdAt = createdAt;
            this.fingerprint = fingerprint;
            this.expiresAt = expiresAt;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for scopes.
         * @param  scopes  List of String value for scopes.
         * @return Builder
         */
        public Builder scopes(List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * Setter for token.
         * @param  token  String value for token.
         * @return Builder
         */
        public Builder token(String token) {
            this.token = token;
            return this;
        }

        /**
         * Setter for tokenLastEight.
         * @param  tokenLastEight  String value for tokenLastEight.
         * @return Builder
         */
        public Builder tokenLastEight(String tokenLastEight) {
            this.tokenLastEight = tokenLastEight;
            return this;
        }

        /**
         * Setter for hashedToken.
         * @param  hashedToken  String value for hashedToken.
         * @return Builder
         */
        public Builder hashedToken(String hashedToken) {
            this.hashedToken = hashedToken;
            return this;
        }

        /**
         * Setter for app.
         * @param  app  App value for app.
         * @return Builder
         */
        public Builder app(App app) {
            this.app = app;
            return this;
        }

        /**
         * Setter for note.
         * @param  note  String value for note.
         * @return Builder
         */
        public Builder note(String note) {
            this.note = note;
            return this;
        }

        /**
         * Setter for noteUrl.
         * @param  noteUrl  String value for noteUrl.
         * @return Builder
         */
        public Builder noteUrl(String noteUrl) {
            this.noteUrl = noteUrl;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for fingerprint.
         * @param  fingerprint  String value for fingerprint.
         * @return Builder
         */
        public Builder fingerprint(String fingerprint) {
            this.fingerprint = fingerprint;
            return this;
        }

        /**
         * Setter for expiresAt.
         * @param  expiresAt  LocalDateTime value for expiresAt.
         * @return Builder
         */
        public Builder expiresAt(LocalDateTime expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * Setter for user.
         * @param  user  Object value for user.
         * @return Builder
         */
        public Builder user(Object user) {
            this.user = user;
            return this;
        }

        /**
         * Setter for installation.
         * @param  installation  Object value for installation.
         * @return Builder
         */
        public Builder installation(Object installation) {
            this.installation = installation;
            return this;
        }

        /**
         * Builds a new {@link ApplicationsTokenResponse} object using the set fields.
         * @return {@link ApplicationsTokenResponse}
         */
        public ApplicationsTokenResponse build() {
            return new ApplicationsTokenResponse(id, url, scopes, token, tokenLastEight,
                    hashedToken, app, note, noteUrl, updatedAt, createdAt, fingerprint, expiresAt,
                    user, installation);
        }
    }
}

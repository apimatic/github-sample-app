/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.github.api.ApiHelper;
import com.github.api.models.ReposIssuesIssueNumberLabelsRequest;
import com.github.api.models.ReposIssuesIssueNumberLabelsRequest1;
import com.github.api.models.ReposIssuesIssueNumberLabelsRequest2;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorStringCase;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = IssuesAddLabelsBody.IssuesAddLabelsBodyDeserializer.class)
public abstract class IssuesAddLabelsBody {
    
    /**
     * One-of type initialization method.
     * @param reposIssuesIssueNumberLabelsRequest ReposIssuesIssueNumberLabelsRequest value for reposIssuesIssueNumberLabelsRequest.
     * @return The ReposIssuesIssueNumberLabelsRequestCase object.
     */
    public static IssuesAddLabelsBody fromReposIssuesIssueNumberLabelsRequest(
            ReposIssuesIssueNumberLabelsRequest reposIssuesIssueNumberLabelsRequest) {
        return reposIssuesIssueNumberLabelsRequest == null ? null : new ReposIssuesIssueNumberLabelsRequestCase(reposIssuesIssueNumberLabelsRequest);
    }

    /**
     * One-of type initialization method.
     * @param mString List of String value for mString.
     * @return The MStringCase object.
     */
    public static IssuesAddLabelsBody fromMString(List<String> mString) {
        return mString == null ? null : new MStringCase(mString);
    }

    /**
     * One-of type initialization method.
     * @param reposIssuesIssueNumberLabelsRequest1 ReposIssuesIssueNumberLabelsRequest1 value for reposIssuesIssueNumberLabelsRequest1.
     * @return The ReposIssuesIssueNumberLabelsRequest1Case object.
     */
    public static IssuesAddLabelsBody fromReposIssuesIssueNumberLabelsRequest1(
            ReposIssuesIssueNumberLabelsRequest1 reposIssuesIssueNumberLabelsRequest1) {
        return reposIssuesIssueNumberLabelsRequest1 == null ? null : new ReposIssuesIssueNumberLabelsRequest1Case(reposIssuesIssueNumberLabelsRequest1);
    }

    /**
     * One-of type initialization method.
     * @param reposIssuesIssueNumberLabelsRequest2 List of ReposIssuesIssueNumberLabelsRequest2 value for reposIssuesIssueNumberLabelsRequest2.
     * @return The ReposIssuesIssueNumberLabelsRequest2Case object.
     */
    public static IssuesAddLabelsBody fromReposIssuesIssueNumberLabelsRequest2(
            List<ReposIssuesIssueNumberLabelsRequest2> reposIssuesIssueNumberLabelsRequest2) {
        return reposIssuesIssueNumberLabelsRequest2 == null ? null : new ReposIssuesIssueNumberLabelsRequest2Case(reposIssuesIssueNumberLabelsRequest2);
    }

    /**
     * One-of type initialization method.
     * @param string2 String value for string2.
     * @return The String2Case object.
     */
    public static IssuesAddLabelsBody fromString2(String string2) {
        return string2 == null ? null : new String2Case(string2);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * Method to get serialized content type of set one-of type.
     * @return The String value of content type.
     */
    public abstract String getContentType();

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R reposIssuesIssueNumberLabelsRequest(ReposIssuesIssueNumberLabelsRequest reposIssuesIssueNumberLabelsRequest);

        R mString(List<String> mString);

        R reposIssuesIssueNumberLabelsRequest1(ReposIssuesIssueNumberLabelsRequest1 reposIssuesIssueNumberLabelsRequest1);

        R reposIssuesIssueNumberLabelsRequest2(List<ReposIssuesIssueNumberLabelsRequest2> reposIssuesIssueNumberLabelsRequest2);

        R string2(String string2);
    }

    /**
     * This is a implementation class for ReposIssuesIssueNumberLabelsRequestCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class ReposIssuesIssueNumberLabelsRequestCase extends IssuesAddLabelsBody {

        @JsonValue
        private ReposIssuesIssueNumberLabelsRequest reposIssuesIssueNumberLabelsRequest;

        ReposIssuesIssueNumberLabelsRequestCase(ReposIssuesIssueNumberLabelsRequest reposIssuesIssueNumberLabelsRequest) {
            this.reposIssuesIssueNumberLabelsRequest = reposIssuesIssueNumberLabelsRequest;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.reposIssuesIssueNumberLabelsRequest(this.reposIssuesIssueNumberLabelsRequest);
        }

        @Override
        public String getContentType() {
            return "application/json";
        }

        @JsonCreator
        private ReposIssuesIssueNumberLabelsRequestCase(JsonNode jsonNode) throws IOException {
            this.reposIssuesIssueNumberLabelsRequest = ApiHelper.deserialize(jsonNode,
                ReposIssuesIssueNumberLabelsRequest.class);
        }

        @Override
        public String toString() {
            return reposIssuesIssueNumberLabelsRequest.toString();
        }
    }

    /**
     * This is a implementation class for MStringCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class MStringCase extends IssuesAddLabelsBody {

        @JsonValue
        private List<String> mString;

        MStringCase(List<String> mString) {
            this.mString = mString;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mString(this.mString);
        }

        @Override
        public String getContentType() {
            return "application/json";
        }

        @JsonCreator
        private MStringCase(JsonNode jsonNode) throws IOException {
            this.mString = ApiHelper.deserializeArray(jsonNode,
                String[].class);
        }

        @Override
        public String toString() {
            return mString.toString();
        }
    }

    /**
     * This is a implementation class for ReposIssuesIssueNumberLabelsRequest1Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class ReposIssuesIssueNumberLabelsRequest1Case extends IssuesAddLabelsBody {

        @JsonValue
        private ReposIssuesIssueNumberLabelsRequest1 reposIssuesIssueNumberLabelsRequest1;

        ReposIssuesIssueNumberLabelsRequest1Case(ReposIssuesIssueNumberLabelsRequest1 reposIssuesIssueNumberLabelsRequest1) {
            this.reposIssuesIssueNumberLabelsRequest1 = reposIssuesIssueNumberLabelsRequest1;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.reposIssuesIssueNumberLabelsRequest1(this.reposIssuesIssueNumberLabelsRequest1);
        }

        @Override
        public String getContentType() {
            return "application/json";
        }

        @JsonCreator
        private ReposIssuesIssueNumberLabelsRequest1Case(JsonNode jsonNode) throws IOException {
            this.reposIssuesIssueNumberLabelsRequest1 = ApiHelper.deserialize(jsonNode,
                ReposIssuesIssueNumberLabelsRequest1.class);
        }

        @Override
        public String toString() {
            return reposIssuesIssueNumberLabelsRequest1.toString();
        }
    }

    /**
     * This is a implementation class for ReposIssuesIssueNumberLabelsRequest2Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class ReposIssuesIssueNumberLabelsRequest2Case extends IssuesAddLabelsBody {

        @JsonValue
        private List<ReposIssuesIssueNumberLabelsRequest2> reposIssuesIssueNumberLabelsRequest2;

        ReposIssuesIssueNumberLabelsRequest2Case(List<ReposIssuesIssueNumberLabelsRequest2> reposIssuesIssueNumberLabelsRequest2) {
            this.reposIssuesIssueNumberLabelsRequest2 = reposIssuesIssueNumberLabelsRequest2;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.reposIssuesIssueNumberLabelsRequest2(this.reposIssuesIssueNumberLabelsRequest2);
        }

        @Override
        public String getContentType() {
            return "application/json";
        }

        @JsonCreator
        private ReposIssuesIssueNumberLabelsRequest2Case(JsonNode jsonNode) throws IOException {
            this.reposIssuesIssueNumberLabelsRequest2 = ApiHelper.deserializeArray(jsonNode,
                ReposIssuesIssueNumberLabelsRequest2[].class);
        }

        @Override
        public String toString() {
            return reposIssuesIssueNumberLabelsRequest2.toString();
        }
    }

    /**
     * This is a implementation class for String2Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorStringCase
    @TypeCombinatorCase
    private static class String2Case extends IssuesAddLabelsBody {

        @JsonValue
        private String string2;

        String2Case(String string2) {
            this.string2 = string2;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.string2(this.string2);
        }

        @Override
        public String getContentType() {
            return "text/plain; charset=utf-8";
        }

        @JsonCreator
        private String2Case(JsonNode jsonNode) throws IOException {
            if (jsonNode.isTextual()) {
                this.string2 = ApiHelper.deserialize(jsonNode, String.class);
            } else {
                throw new IllegalArgumentException();
            }
        }

        @Override
        public String toString() {
            return string2.toString();
        }
    }

    /**
     * This is a custom deserializer class for IssuesAddLabelsBody.
     */
    protected static class IssuesAddLabelsBodyDeserializer
            extends JsonDeserializer<IssuesAddLabelsBody> {

        @Override
        public IssuesAddLabelsBody deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(
                    ReposIssuesIssueNumberLabelsRequestCase.class, MStringCase.class,
                    ReposIssuesIssueNumberLabelsRequest1Case.class,
                    ReposIssuesIssueNumberLabelsRequest2Case.class, String2Case.class), true);
        }
    }

}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;

/**
 * This is a model class for Workflow type.
 */
public class Workflow {
    private int id;
    private String nodeId;
    private String name;
    private String path;
    private State8Enum state;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private String url;
    private String htmlUrl;
    private String badgeUrl;
    private LocalDateTime deletedAt;

    /**
     * Default constructor.
     */
    public Workflow() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  name  String value for name.
     * @param  path  String value for path.
     * @param  state  State8Enum value for state.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  url  String value for url.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  badgeUrl  String value for badgeUrl.
     * @param  deletedAt  LocalDateTime value for deletedAt.
     */
    public Workflow(
            int id,
            String nodeId,
            String name,
            String path,
            State8Enum state,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            String url,
            String htmlUrl,
            String badgeUrl,
            LocalDateTime deletedAt) {
        this.id = id;
        this.nodeId = nodeId;
        this.name = name;
        this.path = path;
        this.state = state;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.url = url;
        this.htmlUrl = htmlUrl;
        this.badgeUrl = badgeUrl;
        this.deletedAt = deletedAt;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Path.
     * @return Returns the String
     */
    @JsonGetter("path")
    public String getPath() {
        return path;
    }

    /**
     * Setter for Path.
     * @param path Value for String
     */
    @JsonSetter("path")
    public void setPath(String path) {
        this.path = path;
    }

    /**
     * Getter for State.
     * @return Returns the State8Enum
     */
    @JsonGetter("state")
    public State8Enum getState() {
        return state;
    }

    /**
     * Setter for State.
     * @param state Value for State8Enum
     */
    @JsonSetter("state")
    public void setState(State8Enum state) {
        this.state = state;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for BadgeUrl.
     * @return Returns the String
     */
    @JsonGetter("badge_url")
    public String getBadgeUrl() {
        return badgeUrl;
    }

    /**
     * Setter for BadgeUrl.
     * @param badgeUrl Value for String
     */
    @JsonSetter("badge_url")
    public void setBadgeUrl(String badgeUrl) {
        this.badgeUrl = badgeUrl;
    }

    /**
     * Getter for DeletedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("deleted_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDeletedAt() {
        return deletedAt;
    }

    /**
     * Setter for DeletedAt.
     * @param deletedAt Value for LocalDateTime
     */
    @JsonSetter("deleted_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDeletedAt(LocalDateTime deletedAt) {
        this.deletedAt = deletedAt;
    }

    /**
     * Converts this Workflow into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Workflow [" + "id=" + id + ", nodeId=" + nodeId + ", name=" + name + ", path="
                + path + ", state=" + state + ", createdAt=" + createdAt + ", updatedAt="
                + updatedAt + ", url=" + url + ", htmlUrl=" + htmlUrl + ", badgeUrl=" + badgeUrl
                + ", deletedAt=" + deletedAt + "]";
    }

    /**
     * Builds a new {@link Workflow.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Workflow.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, nodeId, name, path, state, createdAt, updatedAt, url,
                htmlUrl, badgeUrl)
                .deletedAt(getDeletedAt());
        return builder;
    }

    /**
     * Class to build instances of {@link Workflow}.
     */
    public static class Builder {
        private int id;
        private String nodeId;
        private String name;
        private String path;
        private State8Enum state;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private String url;
        private String htmlUrl;
        private String badgeUrl;
        private LocalDateTime deletedAt;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  name  String value for name.
         * @param  path  String value for path.
         * @param  state  State8Enum value for state.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  url  String value for url.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  badgeUrl  String value for badgeUrl.
         */
        public Builder(int id, String nodeId, String name, String path, State8Enum state,
                LocalDateTime createdAt, LocalDateTime updatedAt, String url, String htmlUrl,
                String badgeUrl) {
            this.id = id;
            this.nodeId = nodeId;
            this.name = name;
            this.path = path;
            this.state = state;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.url = url;
            this.htmlUrl = htmlUrl;
            this.badgeUrl = badgeUrl;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for path.
         * @param  path  String value for path.
         * @return Builder
         */
        public Builder path(String path) {
            this.path = path;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  State8Enum value for state.
         * @return Builder
         */
        public Builder state(State8Enum state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for badgeUrl.
         * @param  badgeUrl  String value for badgeUrl.
         * @return Builder
         */
        public Builder badgeUrl(String badgeUrl) {
            this.badgeUrl = badgeUrl;
            return this;
        }

        /**
         * Setter for deletedAt.
         * @param  deletedAt  LocalDateTime value for deletedAt.
         * @return Builder
         */
        public Builder deletedAt(LocalDateTime deletedAt) {
            this.deletedAt = deletedAt;
            return this;
        }

        /**
         * Builds a new {@link Workflow} object using the set fields.
         * @return {@link Workflow}
         */
        public Workflow build() {
            return new Workflow(id, nodeId, name, path, state, createdAt, updatedAt, url, htmlUrl,
                    badgeUrl, deletedAt);
        }
    }
}

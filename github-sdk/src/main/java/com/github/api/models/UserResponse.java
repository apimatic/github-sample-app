/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;

/**
 * This is a model class for UserResponse type.
 */
public class UserResponse {
    private String login;
    private int id;
    private String nodeId;
    private String avatarUrl;
    private String gravatarId;
    private String url;
    private String htmlUrl;
    private String followersUrl;
    private String followingUrl;
    private String gistsUrl;
    private String starredUrl;
    private String subscriptionsUrl;
    private String organizationsUrl;
    private String reposUrl;
    private String eventsUrl;
    private String receivedEventsUrl;
    private String type;
    private boolean siteAdmin;
    private String name;
    private String company;
    private String blog;
    private String location;
    private String email;
    private Boolean hireable;
    private String bio;
    private OptionalNullable<String> twitterUsername;
    private int publicRepos;
    private int publicGists;
    private int followers;
    private int following;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private int privateGists;
    private int totalPrivateRepos;
    private int ownedPrivateRepos;
    private int diskUsage;
    private int collaborators;
    private boolean twoFactorAuthentication;
    private Plan plan;
    private OptionalNullable<LocalDateTime> suspendedAt;
    private Boolean businessPlus;
    private String ldapDn;

    /**
     * Default constructor.
     */
    public UserResponse() {
    }

    /**
     * Initialization constructor.
     * @param  login  String value for login.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  avatarUrl  String value for avatarUrl.
     * @param  gravatarId  String value for gravatarId.
     * @param  url  String value for url.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  followersUrl  String value for followersUrl.
     * @param  followingUrl  String value for followingUrl.
     * @param  gistsUrl  String value for gistsUrl.
     * @param  starredUrl  String value for starredUrl.
     * @param  subscriptionsUrl  String value for subscriptionsUrl.
     * @param  organizationsUrl  String value for organizationsUrl.
     * @param  reposUrl  String value for reposUrl.
     * @param  eventsUrl  String value for eventsUrl.
     * @param  receivedEventsUrl  String value for receivedEventsUrl.
     * @param  type  String value for type.
     * @param  siteAdmin  boolean value for siteAdmin.
     * @param  name  String value for name.
     * @param  company  String value for company.
     * @param  blog  String value for blog.
     * @param  location  String value for location.
     * @param  email  String value for email.
     * @param  hireable  Boolean value for hireable.
     * @param  bio  String value for bio.
     * @param  publicRepos  int value for publicRepos.
     * @param  publicGists  int value for publicGists.
     * @param  followers  int value for followers.
     * @param  following  int value for following.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  privateGists  int value for privateGists.
     * @param  totalPrivateRepos  int value for totalPrivateRepos.
     * @param  ownedPrivateRepos  int value for ownedPrivateRepos.
     * @param  diskUsage  int value for diskUsage.
     * @param  collaborators  int value for collaborators.
     * @param  twoFactorAuthentication  boolean value for twoFactorAuthentication.
     * @param  twitterUsername  String value for twitterUsername.
     * @param  plan  Plan value for plan.
     * @param  suspendedAt  LocalDateTime value for suspendedAt.
     * @param  businessPlus  Boolean value for businessPlus.
     * @param  ldapDn  String value for ldapDn.
     */
    public UserResponse(
            String login,
            int id,
            String nodeId,
            String avatarUrl,
            String gravatarId,
            String url,
            String htmlUrl,
            String followersUrl,
            String followingUrl,
            String gistsUrl,
            String starredUrl,
            String subscriptionsUrl,
            String organizationsUrl,
            String reposUrl,
            String eventsUrl,
            String receivedEventsUrl,
            String type,
            boolean siteAdmin,
            String name,
            String company,
            String blog,
            String location,
            String email,
            Boolean hireable,
            String bio,
            int publicRepos,
            int publicGists,
            int followers,
            int following,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            int privateGists,
            int totalPrivateRepos,
            int ownedPrivateRepos,
            int diskUsage,
            int collaborators,
            boolean twoFactorAuthentication,
            String twitterUsername,
            Plan plan,
            LocalDateTime suspendedAt,
            Boolean businessPlus,
            String ldapDn) {
        this.login = login;
        this.id = id;
        this.nodeId = nodeId;
        this.avatarUrl = avatarUrl;
        this.gravatarId = gravatarId;
        this.url = url;
        this.htmlUrl = htmlUrl;
        this.followersUrl = followersUrl;
        this.followingUrl = followingUrl;
        this.gistsUrl = gistsUrl;
        this.starredUrl = starredUrl;
        this.subscriptionsUrl = subscriptionsUrl;
        this.organizationsUrl = organizationsUrl;
        this.reposUrl = reposUrl;
        this.eventsUrl = eventsUrl;
        this.receivedEventsUrl = receivedEventsUrl;
        this.type = type;
        this.siteAdmin = siteAdmin;
        this.name = name;
        this.company = company;
        this.blog = blog;
        this.location = location;
        this.email = email;
        this.hireable = hireable;
        this.bio = bio;
        this.twitterUsername = OptionalNullable.of(twitterUsername);
        this.publicRepos = publicRepos;
        this.publicGists = publicGists;
        this.followers = followers;
        this.following = following;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.privateGists = privateGists;
        this.totalPrivateRepos = totalPrivateRepos;
        this.ownedPrivateRepos = ownedPrivateRepos;
        this.diskUsage = diskUsage;
        this.collaborators = collaborators;
        this.twoFactorAuthentication = twoFactorAuthentication;
        this.plan = plan;
        this.suspendedAt = OptionalNullable.of(suspendedAt);
        this.businessPlus = businessPlus;
        this.ldapDn = ldapDn;
    }

    /**
     * Internal initialization constructor.
     */
    protected UserResponse(String login, int id, String nodeId, String avatarUrl, String gravatarId,
            String url, String htmlUrl, String followersUrl, String followingUrl, String gistsUrl,
            String starredUrl, String subscriptionsUrl, String organizationsUrl, String reposUrl,
            String eventsUrl, String receivedEventsUrl, String type, boolean siteAdmin, String name,
            String company, String blog, String location, String email, Boolean hireable,
            String bio, int publicRepos, int publicGists, int followers, int following,
            LocalDateTime createdAt, LocalDateTime updatedAt, int privateGists,
            int totalPrivateRepos, int ownedPrivateRepos, int diskUsage, int collaborators,
            boolean twoFactorAuthentication, OptionalNullable<String> twitterUsername, Plan plan,
            OptionalNullable<LocalDateTime> suspendedAt, Boolean businessPlus, String ldapDn) {
        this.login = login;
        this.id = id;
        this.nodeId = nodeId;
        this.avatarUrl = avatarUrl;
        this.gravatarId = gravatarId;
        this.url = url;
        this.htmlUrl = htmlUrl;
        this.followersUrl = followersUrl;
        this.followingUrl = followingUrl;
        this.gistsUrl = gistsUrl;
        this.starredUrl = starredUrl;
        this.subscriptionsUrl = subscriptionsUrl;
        this.organizationsUrl = organizationsUrl;
        this.reposUrl = reposUrl;
        this.eventsUrl = eventsUrl;
        this.receivedEventsUrl = receivedEventsUrl;
        this.type = type;
        this.siteAdmin = siteAdmin;
        this.name = name;
        this.company = company;
        this.blog = blog;
        this.location = location;
        this.email = email;
        this.hireable = hireable;
        this.bio = bio;
        this.twitterUsername = twitterUsername;
        this.publicRepos = publicRepos;
        this.publicGists = publicGists;
        this.followers = followers;
        this.following = following;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.privateGists = privateGists;
        this.totalPrivateRepos = totalPrivateRepos;
        this.ownedPrivateRepos = ownedPrivateRepos;
        this.diskUsage = diskUsage;
        this.collaborators = collaborators;
        this.twoFactorAuthentication = twoFactorAuthentication;
        this.plan = plan;
        this.suspendedAt = suspendedAt;
        this.businessPlus = businessPlus;
        this.ldapDn = ldapDn;
    }

    /**
     * Getter for Login.
     * @return Returns the String
     */
    @JsonGetter("login")
    public String getLogin() {
        return login;
    }

    /**
     * Setter for Login.
     * @param login Value for String
     */
    @JsonSetter("login")
    public void setLogin(String login) {
        this.login = login;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for AvatarUrl.
     * @return Returns the String
     */
    @JsonGetter("avatar_url")
    public String getAvatarUrl() {
        return avatarUrl;
    }

    /**
     * Setter for AvatarUrl.
     * @param avatarUrl Value for String
     */
    @JsonSetter("avatar_url")
    public void setAvatarUrl(String avatarUrl) {
        this.avatarUrl = avatarUrl;
    }

    /**
     * Getter for GravatarId.
     * @return Returns the String
     */
    @JsonGetter("gravatar_id")
    public String getGravatarId() {
        return gravatarId;
    }

    /**
     * Setter for GravatarId.
     * @param gravatarId Value for String
     */
    @JsonSetter("gravatar_id")
    public void setGravatarId(String gravatarId) {
        this.gravatarId = gravatarId;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for FollowersUrl.
     * @return Returns the String
     */
    @JsonGetter("followers_url")
    public String getFollowersUrl() {
        return followersUrl;
    }

    /**
     * Setter for FollowersUrl.
     * @param followersUrl Value for String
     */
    @JsonSetter("followers_url")
    public void setFollowersUrl(String followersUrl) {
        this.followersUrl = followersUrl;
    }

    /**
     * Getter for FollowingUrl.
     * @return Returns the String
     */
    @JsonGetter("following_url")
    public String getFollowingUrl() {
        return followingUrl;
    }

    /**
     * Setter for FollowingUrl.
     * @param followingUrl Value for String
     */
    @JsonSetter("following_url")
    public void setFollowingUrl(String followingUrl) {
        this.followingUrl = followingUrl;
    }

    /**
     * Getter for GistsUrl.
     * @return Returns the String
     */
    @JsonGetter("gists_url")
    public String getGistsUrl() {
        return gistsUrl;
    }

    /**
     * Setter for GistsUrl.
     * @param gistsUrl Value for String
     */
    @JsonSetter("gists_url")
    public void setGistsUrl(String gistsUrl) {
        this.gistsUrl = gistsUrl;
    }

    /**
     * Getter for StarredUrl.
     * @return Returns the String
     */
    @JsonGetter("starred_url")
    public String getStarredUrl() {
        return starredUrl;
    }

    /**
     * Setter for StarredUrl.
     * @param starredUrl Value for String
     */
    @JsonSetter("starred_url")
    public void setStarredUrl(String starredUrl) {
        this.starredUrl = starredUrl;
    }

    /**
     * Getter for SubscriptionsUrl.
     * @return Returns the String
     */
    @JsonGetter("subscriptions_url")
    public String getSubscriptionsUrl() {
        return subscriptionsUrl;
    }

    /**
     * Setter for SubscriptionsUrl.
     * @param subscriptionsUrl Value for String
     */
    @JsonSetter("subscriptions_url")
    public void setSubscriptionsUrl(String subscriptionsUrl) {
        this.subscriptionsUrl = subscriptionsUrl;
    }

    /**
     * Getter for OrganizationsUrl.
     * @return Returns the String
     */
    @JsonGetter("organizations_url")
    public String getOrganizationsUrl() {
        return organizationsUrl;
    }

    /**
     * Setter for OrganizationsUrl.
     * @param organizationsUrl Value for String
     */
    @JsonSetter("organizations_url")
    public void setOrganizationsUrl(String organizationsUrl) {
        this.organizationsUrl = organizationsUrl;
    }

    /**
     * Getter for ReposUrl.
     * @return Returns the String
     */
    @JsonGetter("repos_url")
    public String getReposUrl() {
        return reposUrl;
    }

    /**
     * Setter for ReposUrl.
     * @param reposUrl Value for String
     */
    @JsonSetter("repos_url")
    public void setReposUrl(String reposUrl) {
        this.reposUrl = reposUrl;
    }

    /**
     * Getter for EventsUrl.
     * @return Returns the String
     */
    @JsonGetter("events_url")
    public String getEventsUrl() {
        return eventsUrl;
    }

    /**
     * Setter for EventsUrl.
     * @param eventsUrl Value for String
     */
    @JsonSetter("events_url")
    public void setEventsUrl(String eventsUrl) {
        this.eventsUrl = eventsUrl;
    }

    /**
     * Getter for ReceivedEventsUrl.
     * @return Returns the String
     */
    @JsonGetter("received_events_url")
    public String getReceivedEventsUrl() {
        return receivedEventsUrl;
    }

    /**
     * Setter for ReceivedEventsUrl.
     * @param receivedEventsUrl Value for String
     */
    @JsonSetter("received_events_url")
    public void setReceivedEventsUrl(String receivedEventsUrl) {
        this.receivedEventsUrl = receivedEventsUrl;
    }

    /**
     * Getter for Type.
     * @return Returns the String
     */
    @JsonGetter("type")
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for SiteAdmin.
     * @return Returns the boolean
     */
    @JsonGetter("site_admin")
    public boolean getSiteAdmin() {
        return siteAdmin;
    }

    /**
     * Setter for SiteAdmin.
     * @param siteAdmin Value for boolean
     */
    @JsonSetter("site_admin")
    public void setSiteAdmin(boolean siteAdmin) {
        this.siteAdmin = siteAdmin;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Company.
     * @return Returns the String
     */
    @JsonGetter("company")
    public String getCompany() {
        return company;
    }

    /**
     * Setter for Company.
     * @param company Value for String
     */
    @JsonSetter("company")
    public void setCompany(String company) {
        this.company = company;
    }

    /**
     * Getter for Blog.
     * @return Returns the String
     */
    @JsonGetter("blog")
    public String getBlog() {
        return blog;
    }

    /**
     * Setter for Blog.
     * @param blog Value for String
     */
    @JsonSetter("blog")
    public void setBlog(String blog) {
        this.blog = blog;
    }

    /**
     * Getter for Location.
     * @return Returns the String
     */
    @JsonGetter("location")
    public String getLocation() {
        return location;
    }

    /**
     * Setter for Location.
     * @param location Value for String
     */
    @JsonSetter("location")
    public void setLocation(String location) {
        this.location = location;
    }

    /**
     * Getter for Email.
     * @return Returns the String
     */
    @JsonGetter("email")
    public String getEmail() {
        return email;
    }

    /**
     * Setter for Email.
     * @param email Value for String
     */
    @JsonSetter("email")
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Getter for Hireable.
     * @return Returns the Boolean
     */
    @JsonGetter("hireable")
    public Boolean getHireable() {
        return hireable;
    }

    /**
     * Setter for Hireable.
     * @param hireable Value for Boolean
     */
    @JsonSetter("hireable")
    public void setHireable(Boolean hireable) {
        this.hireable = hireable;
    }

    /**
     * Getter for Bio.
     * @return Returns the String
     */
    @JsonGetter("bio")
    public String getBio() {
        return bio;
    }

    /**
     * Setter for Bio.
     * @param bio Value for String
     */
    @JsonSetter("bio")
    public void setBio(String bio) {
        this.bio = bio;
    }

    /**
     * Internal Getter for TwitterUsername.
     * @return Returns the Internal String
     */
    @JsonGetter("twitter_username")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTwitterUsername() {
        return this.twitterUsername;
    }

    /**
     * Getter for TwitterUsername.
     * @return Returns the String
     */
    public String getTwitterUsername() {
        return OptionalNullable.getFrom(twitterUsername);
    }

    /**
     * Setter for TwitterUsername.
     * @param twitterUsername Value for String
     */
    @JsonSetter("twitter_username")
    public void setTwitterUsername(String twitterUsername) {
        this.twitterUsername = OptionalNullable.of(twitterUsername);
    }

    /**
     * UnSetter for TwitterUsername.
     */
    public void unsetTwitterUsername() {
        twitterUsername = null;
    }

    /**
     * Getter for PublicRepos.
     * @return Returns the int
     */
    @JsonGetter("public_repos")
    public int getPublicRepos() {
        return publicRepos;
    }

    /**
     * Setter for PublicRepos.
     * @param publicRepos Value for int
     */
    @JsonSetter("public_repos")
    public void setPublicRepos(int publicRepos) {
        this.publicRepos = publicRepos;
    }

    /**
     * Getter for PublicGists.
     * @return Returns the int
     */
    @JsonGetter("public_gists")
    public int getPublicGists() {
        return publicGists;
    }

    /**
     * Setter for PublicGists.
     * @param publicGists Value for int
     */
    @JsonSetter("public_gists")
    public void setPublicGists(int publicGists) {
        this.publicGists = publicGists;
    }

    /**
     * Getter for Followers.
     * @return Returns the int
     */
    @JsonGetter("followers")
    public int getFollowers() {
        return followers;
    }

    /**
     * Setter for Followers.
     * @param followers Value for int
     */
    @JsonSetter("followers")
    public void setFollowers(int followers) {
        this.followers = followers;
    }

    /**
     * Getter for Following.
     * @return Returns the int
     */
    @JsonGetter("following")
    public int getFollowing() {
        return following;
    }

    /**
     * Setter for Following.
     * @param following Value for int
     */
    @JsonSetter("following")
    public void setFollowing(int following) {
        this.following = following;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for PrivateGists.
     * @return Returns the int
     */
    @JsonGetter("private_gists")
    public int getPrivateGists() {
        return privateGists;
    }

    /**
     * Setter for PrivateGists.
     * @param privateGists Value for int
     */
    @JsonSetter("private_gists")
    public void setPrivateGists(int privateGists) {
        this.privateGists = privateGists;
    }

    /**
     * Getter for TotalPrivateRepos.
     * @return Returns the int
     */
    @JsonGetter("total_private_repos")
    public int getTotalPrivateRepos() {
        return totalPrivateRepos;
    }

    /**
     * Setter for TotalPrivateRepos.
     * @param totalPrivateRepos Value for int
     */
    @JsonSetter("total_private_repos")
    public void setTotalPrivateRepos(int totalPrivateRepos) {
        this.totalPrivateRepos = totalPrivateRepos;
    }

    /**
     * Getter for OwnedPrivateRepos.
     * @return Returns the int
     */
    @JsonGetter("owned_private_repos")
    public int getOwnedPrivateRepos() {
        return ownedPrivateRepos;
    }

    /**
     * Setter for OwnedPrivateRepos.
     * @param ownedPrivateRepos Value for int
     */
    @JsonSetter("owned_private_repos")
    public void setOwnedPrivateRepos(int ownedPrivateRepos) {
        this.ownedPrivateRepos = ownedPrivateRepos;
    }

    /**
     * Getter for DiskUsage.
     * @return Returns the int
     */
    @JsonGetter("disk_usage")
    public int getDiskUsage() {
        return diskUsage;
    }

    /**
     * Setter for DiskUsage.
     * @param diskUsage Value for int
     */
    @JsonSetter("disk_usage")
    public void setDiskUsage(int diskUsage) {
        this.diskUsage = diskUsage;
    }

    /**
     * Getter for Collaborators.
     * @return Returns the int
     */
    @JsonGetter("collaborators")
    public int getCollaborators() {
        return collaborators;
    }

    /**
     * Setter for Collaborators.
     * @param collaborators Value for int
     */
    @JsonSetter("collaborators")
    public void setCollaborators(int collaborators) {
        this.collaborators = collaborators;
    }

    /**
     * Getter for TwoFactorAuthentication.
     * @return Returns the boolean
     */
    @JsonGetter("two_factor_authentication")
    public boolean getTwoFactorAuthentication() {
        return twoFactorAuthentication;
    }

    /**
     * Setter for TwoFactorAuthentication.
     * @param twoFactorAuthentication Value for boolean
     */
    @JsonSetter("two_factor_authentication")
    public void setTwoFactorAuthentication(boolean twoFactorAuthentication) {
        this.twoFactorAuthentication = twoFactorAuthentication;
    }

    /**
     * Getter for Plan.
     * @return Returns the Plan
     */
    @JsonGetter("plan")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Plan getPlan() {
        return plan;
    }

    /**
     * Setter for Plan.
     * @param plan Value for Plan
     */
    @JsonSetter("plan")
    public void setPlan(Plan plan) {
        this.plan = plan;
    }

    /**
     * Internal Getter for SuspendedAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("suspended_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetSuspendedAt() {
        return this.suspendedAt;
    }

    /**
     * Getter for SuspendedAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getSuspendedAt() {
        return OptionalNullable.getFrom(suspendedAt);
    }

    /**
     * Setter for SuspendedAt.
     * @param suspendedAt Value for LocalDateTime
     */
    @JsonSetter("suspended_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setSuspendedAt(LocalDateTime suspendedAt) {
        this.suspendedAt = OptionalNullable.of(suspendedAt);
    }

    /**
     * UnSetter for SuspendedAt.
     */
    public void unsetSuspendedAt() {
        suspendedAt = null;
    }

    /**
     * Getter for BusinessPlus.
     * @return Returns the Boolean
     */
    @JsonGetter("business_plus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getBusinessPlus() {
        return businessPlus;
    }

    /**
     * Setter for BusinessPlus.
     * @param businessPlus Value for Boolean
     */
    @JsonSetter("business_plus")
    public void setBusinessPlus(Boolean businessPlus) {
        this.businessPlus = businessPlus;
    }

    /**
     * Getter for LdapDn.
     * @return Returns the String
     */
    @JsonGetter("ldap_dn")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLdapDn() {
        return ldapDn;
    }

    /**
     * Setter for LdapDn.
     * @param ldapDn Value for String
     */
    @JsonSetter("ldap_dn")
    public void setLdapDn(String ldapDn) {
        this.ldapDn = ldapDn;
    }

    /**
     * Converts this UserResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "UserResponse [" + "login=" + login + ", id=" + id + ", nodeId=" + nodeId
                + ", avatarUrl=" + avatarUrl + ", gravatarId=" + gravatarId + ", url=" + url
                + ", htmlUrl=" + htmlUrl + ", followersUrl=" + followersUrl + ", followingUrl="
                + followingUrl + ", gistsUrl=" + gistsUrl + ", starredUrl=" + starredUrl
                + ", subscriptionsUrl=" + subscriptionsUrl + ", organizationsUrl="
                + organizationsUrl + ", reposUrl=" + reposUrl + ", eventsUrl=" + eventsUrl
                + ", receivedEventsUrl=" + receivedEventsUrl + ", type=" + type + ", siteAdmin="
                + siteAdmin + ", name=" + name + ", company=" + company + ", blog=" + blog
                + ", location=" + location + ", email=" + email + ", hireable=" + hireable
                + ", bio=" + bio + ", publicRepos=" + publicRepos + ", publicGists=" + publicGists
                + ", followers=" + followers + ", following=" + following + ", createdAt="
                + createdAt + ", updatedAt=" + updatedAt + ", privateGists=" + privateGists
                + ", totalPrivateRepos=" + totalPrivateRepos + ", ownedPrivateRepos="
                + ownedPrivateRepos + ", diskUsage=" + diskUsage + ", collaborators="
                + collaborators + ", twoFactorAuthentication=" + twoFactorAuthentication
                + ", twitterUsername=" + twitterUsername + ", plan=" + plan + ", suspendedAt="
                + suspendedAt + ", businessPlus=" + businessPlus + ", ldapDn=" + ldapDn + "]";
    }

    /**
     * Builds a new {@link UserResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link UserResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(login, id, nodeId, avatarUrl, gravatarId, url, htmlUrl,
                followersUrl, followingUrl, gistsUrl, starredUrl, subscriptionsUrl,
                organizationsUrl, reposUrl, eventsUrl, receivedEventsUrl, type, siteAdmin, name,
                company, blog, location, email, hireable, bio, publicRepos, publicGists, followers,
                following, createdAt, updatedAt, privateGists, totalPrivateRepos, ownedPrivateRepos,
                diskUsage, collaborators, twoFactorAuthentication)
                .plan(getPlan())
                .businessPlus(getBusinessPlus())
                .ldapDn(getLdapDn());
        builder.twitterUsername = internalGetTwitterUsername();
        builder.suspendedAt = internalGetSuspendedAt();
        return builder;
    }

    /**
     * Class to build instances of {@link UserResponse}.
     */
    public static class Builder {
        private String login;
        private int id;
        private String nodeId;
        private String avatarUrl;
        private String gravatarId;
        private String url;
        private String htmlUrl;
        private String followersUrl;
        private String followingUrl;
        private String gistsUrl;
        private String starredUrl;
        private String subscriptionsUrl;
        private String organizationsUrl;
        private String reposUrl;
        private String eventsUrl;
        private String receivedEventsUrl;
        private String type;
        private boolean siteAdmin;
        private String name;
        private String company;
        private String blog;
        private String location;
        private String email;
        private Boolean hireable;
        private String bio;
        private int publicRepos;
        private int publicGists;
        private int followers;
        private int following;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private int privateGists;
        private int totalPrivateRepos;
        private int ownedPrivateRepos;
        private int diskUsage;
        private int collaborators;
        private boolean twoFactorAuthentication;
        private OptionalNullable<String> twitterUsername;
        private Plan plan;
        private OptionalNullable<LocalDateTime> suspendedAt;
        private Boolean businessPlus;
        private String ldapDn;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  login  String value for login.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  avatarUrl  String value for avatarUrl.
         * @param  gravatarId  String value for gravatarId.
         * @param  url  String value for url.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  followersUrl  String value for followersUrl.
         * @param  followingUrl  String value for followingUrl.
         * @param  gistsUrl  String value for gistsUrl.
         * @param  starredUrl  String value for starredUrl.
         * @param  subscriptionsUrl  String value for subscriptionsUrl.
         * @param  organizationsUrl  String value for organizationsUrl.
         * @param  reposUrl  String value for reposUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @param  receivedEventsUrl  String value for receivedEventsUrl.
         * @param  type  String value for type.
         * @param  siteAdmin  boolean value for siteAdmin.
         * @param  name  String value for name.
         * @param  company  String value for company.
         * @param  blog  String value for blog.
         * @param  location  String value for location.
         * @param  email  String value for email.
         * @param  hireable  Boolean value for hireable.
         * @param  bio  String value for bio.
         * @param  publicRepos  int value for publicRepos.
         * @param  publicGists  int value for publicGists.
         * @param  followers  int value for followers.
         * @param  following  int value for following.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  privateGists  int value for privateGists.
         * @param  totalPrivateRepos  int value for totalPrivateRepos.
         * @param  ownedPrivateRepos  int value for ownedPrivateRepos.
         * @param  diskUsage  int value for diskUsage.
         * @param  collaborators  int value for collaborators.
         * @param  twoFactorAuthentication  boolean value for twoFactorAuthentication.
         */
        public Builder(String login, int id, String nodeId, String avatarUrl, String gravatarId,
                String url, String htmlUrl, String followersUrl, String followingUrl,
                String gistsUrl, String starredUrl, String subscriptionsUrl,
                String organizationsUrl, String reposUrl, String eventsUrl,
                String receivedEventsUrl, String type, boolean siteAdmin, String name,
                String company, String blog, String location, String email, Boolean hireable,
                String bio, int publicRepos, int publicGists, int followers, int following,
                LocalDateTime createdAt, LocalDateTime updatedAt, int privateGists,
                int totalPrivateRepos, int ownedPrivateRepos, int diskUsage, int collaborators,
                boolean twoFactorAuthentication) {
            this.login = login;
            this.id = id;
            this.nodeId = nodeId;
            this.avatarUrl = avatarUrl;
            this.gravatarId = gravatarId;
            this.url = url;
            this.htmlUrl = htmlUrl;
            this.followersUrl = followersUrl;
            this.followingUrl = followingUrl;
            this.gistsUrl = gistsUrl;
            this.starredUrl = starredUrl;
            this.subscriptionsUrl = subscriptionsUrl;
            this.organizationsUrl = organizationsUrl;
            this.reposUrl = reposUrl;
            this.eventsUrl = eventsUrl;
            this.receivedEventsUrl = receivedEventsUrl;
            this.type = type;
            this.siteAdmin = siteAdmin;
            this.name = name;
            this.company = company;
            this.blog = blog;
            this.location = location;
            this.email = email;
            this.hireable = hireable;
            this.bio = bio;
            this.publicRepos = publicRepos;
            this.publicGists = publicGists;
            this.followers = followers;
            this.following = following;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.privateGists = privateGists;
            this.totalPrivateRepos = totalPrivateRepos;
            this.ownedPrivateRepos = ownedPrivateRepos;
            this.diskUsage = diskUsage;
            this.collaborators = collaborators;
            this.twoFactorAuthentication = twoFactorAuthentication;
        }

        /**
         * Setter for login.
         * @param  login  String value for login.
         * @return Builder
         */
        public Builder login(String login) {
            this.login = login;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for avatarUrl.
         * @param  avatarUrl  String value for avatarUrl.
         * @return Builder
         */
        public Builder avatarUrl(String avatarUrl) {
            this.avatarUrl = avatarUrl;
            return this;
        }

        /**
         * Setter for gravatarId.
         * @param  gravatarId  String value for gravatarId.
         * @return Builder
         */
        public Builder gravatarId(String gravatarId) {
            this.gravatarId = gravatarId;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for followersUrl.
         * @param  followersUrl  String value for followersUrl.
         * @return Builder
         */
        public Builder followersUrl(String followersUrl) {
            this.followersUrl = followersUrl;
            return this;
        }

        /**
         * Setter for followingUrl.
         * @param  followingUrl  String value for followingUrl.
         * @return Builder
         */
        public Builder followingUrl(String followingUrl) {
            this.followingUrl = followingUrl;
            return this;
        }

        /**
         * Setter for gistsUrl.
         * @param  gistsUrl  String value for gistsUrl.
         * @return Builder
         */
        public Builder gistsUrl(String gistsUrl) {
            this.gistsUrl = gistsUrl;
            return this;
        }

        /**
         * Setter for starredUrl.
         * @param  starredUrl  String value for starredUrl.
         * @return Builder
         */
        public Builder starredUrl(String starredUrl) {
            this.starredUrl = starredUrl;
            return this;
        }

        /**
         * Setter for subscriptionsUrl.
         * @param  subscriptionsUrl  String value for subscriptionsUrl.
         * @return Builder
         */
        public Builder subscriptionsUrl(String subscriptionsUrl) {
            this.subscriptionsUrl = subscriptionsUrl;
            return this;
        }

        /**
         * Setter for organizationsUrl.
         * @param  organizationsUrl  String value for organizationsUrl.
         * @return Builder
         */
        public Builder organizationsUrl(String organizationsUrl) {
            this.organizationsUrl = organizationsUrl;
            return this;
        }

        /**
         * Setter for reposUrl.
         * @param  reposUrl  String value for reposUrl.
         * @return Builder
         */
        public Builder reposUrl(String reposUrl) {
            this.reposUrl = reposUrl;
            return this;
        }

        /**
         * Setter for eventsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @return Builder
         */
        public Builder eventsUrl(String eventsUrl) {
            this.eventsUrl = eventsUrl;
            return this;
        }

        /**
         * Setter for receivedEventsUrl.
         * @param  receivedEventsUrl  String value for receivedEventsUrl.
         * @return Builder
         */
        public Builder receivedEventsUrl(String receivedEventsUrl) {
            this.receivedEventsUrl = receivedEventsUrl;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for siteAdmin.
         * @param  siteAdmin  boolean value for siteAdmin.
         * @return Builder
         */
        public Builder siteAdmin(boolean siteAdmin) {
            this.siteAdmin = siteAdmin;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for company.
         * @param  company  String value for company.
         * @return Builder
         */
        public Builder company(String company) {
            this.company = company;
            return this;
        }

        /**
         * Setter for blog.
         * @param  blog  String value for blog.
         * @return Builder
         */
        public Builder blog(String blog) {
            this.blog = blog;
            return this;
        }

        /**
         * Setter for location.
         * @param  location  String value for location.
         * @return Builder
         */
        public Builder location(String location) {
            this.location = location;
            return this;
        }

        /**
         * Setter for email.
         * @param  email  String value for email.
         * @return Builder
         */
        public Builder email(String email) {
            this.email = email;
            return this;
        }

        /**
         * Setter for hireable.
         * @param  hireable  Boolean value for hireable.
         * @return Builder
         */
        public Builder hireable(Boolean hireable) {
            this.hireable = hireable;
            return this;
        }

        /**
         * Setter for bio.
         * @param  bio  String value for bio.
         * @return Builder
         */
        public Builder bio(String bio) {
            this.bio = bio;
            return this;
        }

        /**
         * Setter for publicRepos.
         * @param  publicRepos  int value for publicRepos.
         * @return Builder
         */
        public Builder publicRepos(int publicRepos) {
            this.publicRepos = publicRepos;
            return this;
        }

        /**
         * Setter for publicGists.
         * @param  publicGists  int value for publicGists.
         * @return Builder
         */
        public Builder publicGists(int publicGists) {
            this.publicGists = publicGists;
            return this;
        }

        /**
         * Setter for followers.
         * @param  followers  int value for followers.
         * @return Builder
         */
        public Builder followers(int followers) {
            this.followers = followers;
            return this;
        }

        /**
         * Setter for following.
         * @param  following  int value for following.
         * @return Builder
         */
        public Builder following(int following) {
            this.following = following;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for privateGists.
         * @param  privateGists  int value for privateGists.
         * @return Builder
         */
        public Builder privateGists(int privateGists) {
            this.privateGists = privateGists;
            return this;
        }

        /**
         * Setter for totalPrivateRepos.
         * @param  totalPrivateRepos  int value for totalPrivateRepos.
         * @return Builder
         */
        public Builder totalPrivateRepos(int totalPrivateRepos) {
            this.totalPrivateRepos = totalPrivateRepos;
            return this;
        }

        /**
         * Setter for ownedPrivateRepos.
         * @param  ownedPrivateRepos  int value for ownedPrivateRepos.
         * @return Builder
         */
        public Builder ownedPrivateRepos(int ownedPrivateRepos) {
            this.ownedPrivateRepos = ownedPrivateRepos;
            return this;
        }

        /**
         * Setter for diskUsage.
         * @param  diskUsage  int value for diskUsage.
         * @return Builder
         */
        public Builder diskUsage(int diskUsage) {
            this.diskUsage = diskUsage;
            return this;
        }

        /**
         * Setter for collaborators.
         * @param  collaborators  int value for collaborators.
         * @return Builder
         */
        public Builder collaborators(int collaborators) {
            this.collaborators = collaborators;
            return this;
        }

        /**
         * Setter for twoFactorAuthentication.
         * @param  twoFactorAuthentication  boolean value for twoFactorAuthentication.
         * @return Builder
         */
        public Builder twoFactorAuthentication(boolean twoFactorAuthentication) {
            this.twoFactorAuthentication = twoFactorAuthentication;
            return this;
        }

        /**
         * Setter for twitterUsername.
         * @param  twitterUsername  String value for twitterUsername.
         * @return Builder
         */
        public Builder twitterUsername(String twitterUsername) {
            this.twitterUsername = OptionalNullable.of(twitterUsername);
            return this;
        }

        /**
         * UnSetter for twitterUsername.
         * @return Builder
         */
        public Builder unsetTwitterUsername() {
            twitterUsername = null;
            return this;
        }

        /**
         * Setter for plan.
         * @param  plan  Plan value for plan.
         * @return Builder
         */
        public Builder plan(Plan plan) {
            this.plan = plan;
            return this;
        }

        /**
         * Setter for suspendedAt.
         * @param  suspendedAt  LocalDateTime value for suspendedAt.
         * @return Builder
         */
        public Builder suspendedAt(LocalDateTime suspendedAt) {
            this.suspendedAt = OptionalNullable.of(suspendedAt);
            return this;
        }

        /**
         * UnSetter for suspendedAt.
         * @return Builder
         */
        public Builder unsetSuspendedAt() {
            suspendedAt = null;
            return this;
        }

        /**
         * Setter for businessPlus.
         * @param  businessPlus  Boolean value for businessPlus.
         * @return Builder
         */
        public Builder businessPlus(Boolean businessPlus) {
            this.businessPlus = businessPlus;
            return this;
        }

        /**
         * Setter for ldapDn.
         * @param  ldapDn  String value for ldapDn.
         * @return Builder
         */
        public Builder ldapDn(String ldapDn) {
            this.ldapDn = ldapDn;
            return this;
        }

        /**
         * Builds a new {@link UserResponse} object using the set fields.
         * @return {@link UserResponse}
         */
        public UserResponse build() {
            return new UserResponse(login, id, nodeId, avatarUrl, gravatarId, url, htmlUrl,
                    followersUrl, followingUrl, gistsUrl, starredUrl, subscriptionsUrl,
                    organizationsUrl, reposUrl, eventsUrl, receivedEventsUrl, type, siteAdmin, name,
                    company, blog, location, email, hireable, bio, publicRepos, publicGists,
                    followers, following, createdAt, updatedAt, privateGists, totalPrivateRepos,
                    ownedPrivateRepos, diskUsage, collaborators, twoFactorAuthentication,
                    twitterUsername, plan, suspendedAt, businessPlus, ldapDn);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import com.github.api.models.containers.ReposInstallationResponseAccount;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for ReposInstallationResponse type.
 */
public class ReposInstallationResponse {
    private int id;
    private Account account;
    private RepositorySelectionEnum repositorySelection;
    private String accessTokensUrl;
    private String repositoriesUrl;
    private String htmlUrl;
    private int appId;
    private int targetId;
    private String targetType;
    private Permissions3 permissions;
    private List<String> events;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private String singleFileName;
    private Boolean hasMultipleSingleFiles;
    private List<String> singleFilePaths;
    private String appSlug;
    private Object suspendedBy;
    private LocalDateTime suspendedAt;
    private OptionalNullable<String> contactEmail;

    /**
     * Default constructor.
     */
    public ReposInstallationResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  account  Account value for account.
     * @param  repositorySelection  RepositorySelectionEnum value for repositorySelection.
     * @param  accessTokensUrl  String value for accessTokensUrl.
     * @param  repositoriesUrl  String value for repositoriesUrl.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  appId  int value for appId.
     * @param  targetId  int value for targetId.
     * @param  targetType  String value for targetType.
     * @param  permissions  Permissions3 value for permissions.
     * @param  events  List of String value for events.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  singleFileName  String value for singleFileName.
     * @param  appSlug  String value for appSlug.
     * @param  suspendedBy  Object value for suspendedBy.
     * @param  suspendedAt  LocalDateTime value for suspendedAt.
     * @param  hasMultipleSingleFiles  Boolean value for hasMultipleSingleFiles.
     * @param  singleFilePaths  List of String value for singleFilePaths.
     * @param  contactEmail  String value for contactEmail.
     */
    public ReposInstallationResponse(
            int id,
            Account account,
            RepositorySelectionEnum repositorySelection,
            String accessTokensUrl,
            String repositoriesUrl,
            String htmlUrl,
            int appId,
            int targetId,
            String targetType,
            Permissions3 permissions,
            List<String> events,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            String singleFileName,
            String appSlug,
            Object suspendedBy,
            LocalDateTime suspendedAt,
            Boolean hasMultipleSingleFiles,
            List<String> singleFilePaths,
            String contactEmail) {
        this.id = id;
        this.account = account;
        this.repositorySelection = repositorySelection;
        this.accessTokensUrl = accessTokensUrl;
        this.repositoriesUrl = repositoriesUrl;
        this.htmlUrl = htmlUrl;
        this.appId = appId;
        this.targetId = targetId;
        this.targetType = targetType;
        this.permissions = permissions;
        this.events = events;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.singleFileName = singleFileName;
        this.hasMultipleSingleFiles = hasMultipleSingleFiles;
        this.singleFilePaths = singleFilePaths;
        this.appSlug = appSlug;
        this.suspendedBy = suspendedBy;
        this.suspendedAt = suspendedAt;
        this.contactEmail = OptionalNullable.of(contactEmail);
    }

    /**
     * Internal initialization constructor.
     */
    protected ReposInstallationResponse(int id, Account account,
            RepositorySelectionEnum repositorySelection, String accessTokensUrl,
            String repositoriesUrl, String htmlUrl, int appId, int targetId, String targetType,
            Permissions3 permissions, List<String> events, LocalDateTime createdAt,
            LocalDateTime updatedAt, String singleFileName, String appSlug, Object suspendedBy,
            LocalDateTime suspendedAt, Boolean hasMultipleSingleFiles, List<String> singleFilePaths,
            OptionalNullable<String> contactEmail) {
        this.id = id;
        this.account = account;
        this.repositorySelection = repositorySelection;
        this.accessTokensUrl = accessTokensUrl;
        this.repositoriesUrl = repositoriesUrl;
        this.htmlUrl = htmlUrl;
        this.appId = appId;
        this.targetId = targetId;
        this.targetType = targetType;
        this.permissions = permissions;
        this.events = events;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.singleFileName = singleFileName;
        this.hasMultipleSingleFiles = hasMultipleSingleFiles;
        this.singleFilePaths = singleFilePaths;
        this.appSlug = appSlug;
        this.suspendedBy = suspendedBy;
        this.suspendedAt = suspendedAt;
        this.contactEmail = contactEmail;
    }

    /**
     * Getter for Id.
     * The ID of the installation.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The ID of the installation.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for Account.
     * @return Returns the Account
     */
    @JsonGetter("account")
    public Account getAccount() {
        return account;
    }

    /**
     * Setter for Account.
     * @param account Value for Account
     */
    @JsonSetter("account")
    public void setAccount(Account account) {
        this.account = account;
    }

    /**
     * Getter for RepositorySelection.
     * @return Returns the RepositorySelectionEnum
     */
    @JsonGetter("repository_selection")
    public RepositorySelectionEnum getRepositorySelection() {
        return repositorySelection;
    }

    /**
     * Setter for RepositorySelection.
     * @param repositorySelection Value for RepositorySelectionEnum
     */
    @JsonSetter("repository_selection")
    public void setRepositorySelection(RepositorySelectionEnum repositorySelection) {
        this.repositorySelection = repositorySelection;
    }

    /**
     * Getter for AccessTokensUrl.
     * @return Returns the String
     */
    @JsonGetter("access_tokens_url")
    public String getAccessTokensUrl() {
        return accessTokensUrl;
    }

    /**
     * Setter for AccessTokensUrl.
     * @param accessTokensUrl Value for String
     */
    @JsonSetter("access_tokens_url")
    public void setAccessTokensUrl(String accessTokensUrl) {
        this.accessTokensUrl = accessTokensUrl;
    }

    /**
     * Getter for RepositoriesUrl.
     * @return Returns the String
     */
    @JsonGetter("repositories_url")
    public String getRepositoriesUrl() {
        return repositoriesUrl;
    }

    /**
     * Setter for RepositoriesUrl.
     * @param repositoriesUrl Value for String
     */
    @JsonSetter("repositories_url")
    public void setRepositoriesUrl(String repositoriesUrl) {
        this.repositoriesUrl = repositoriesUrl;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for AppId.
     * @return Returns the int
     */
    @JsonGetter("app_id")
    public int getAppId() {
        return appId;
    }

    /**
     * Setter for AppId.
     * @param appId Value for int
     */
    @JsonSetter("app_id")
    public void setAppId(int appId) {
        this.appId = appId;
    }

    /**
     * Getter for TargetId.
     * The ID of the user or organization this token is being scoped to.
     * @return Returns the int
     */
    @JsonGetter("target_id")
    public int getTargetId() {
        return targetId;
    }

    /**
     * Setter for TargetId.
     * The ID of the user or organization this token is being scoped to.
     * @param targetId Value for int
     */
    @JsonSetter("target_id")
    public void setTargetId(int targetId) {
        this.targetId = targetId;
    }

    /**
     * Getter for TargetType.
     * @return Returns the String
     */
    @JsonGetter("target_type")
    public String getTargetType() {
        return targetType;
    }

    /**
     * Setter for TargetType.
     * @param targetType Value for String
     */
    @JsonSetter("target_type")
    public void setTargetType(String targetType) {
        this.targetType = targetType;
    }

    /**
     * Getter for Permissions.
     * @return Returns the Permissions3
     */
    @JsonGetter("permissions")
    public Permissions3 getPermissions() {
        return permissions;
    }

    /**
     * Setter for Permissions.
     * @param permissions Value for Permissions3
     */
    @JsonSetter("permissions")
    public void setPermissions(Permissions3 permissions) {
        this.permissions = permissions;
    }

    /**
     * Getter for Events.
     * @return Returns the List of String
     */
    @JsonGetter("events")
    public List<String> getEvents() {
        return events;
    }

    /**
     * Setter for Events.
     * @param events Value for List of String
     */
    @JsonSetter("events")
    public void setEvents(List<String> events) {
        this.events = events;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for SingleFileName.
     * @return Returns the String
     */
    @JsonGetter("single_file_name")
    public String getSingleFileName() {
        return singleFileName;
    }

    /**
     * Setter for SingleFileName.
     * @param singleFileName Value for String
     */
    @JsonSetter("single_file_name")
    public void setSingleFileName(String singleFileName) {
        this.singleFileName = singleFileName;
    }

    /**
     * Getter for HasMultipleSingleFiles.
     * @return Returns the Boolean
     */
    @JsonGetter("has_multiple_single_files")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasMultipleSingleFiles() {
        return hasMultipleSingleFiles;
    }

    /**
     * Setter for HasMultipleSingleFiles.
     * @param hasMultipleSingleFiles Value for Boolean
     */
    @JsonSetter("has_multiple_single_files")
    public void setHasMultipleSingleFiles(Boolean hasMultipleSingleFiles) {
        this.hasMultipleSingleFiles = hasMultipleSingleFiles;
    }

    /**
     * Getter for SingleFilePaths.
     * @return Returns the List of String
     */
    @JsonGetter("single_file_paths")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getSingleFilePaths() {
        return singleFilePaths;
    }

    /**
     * Setter for SingleFilePaths.
     * @param singleFilePaths Value for List of String
     */
    @JsonSetter("single_file_paths")
    public void setSingleFilePaths(List<String> singleFilePaths) {
        this.singleFilePaths = singleFilePaths;
    }

    /**
     * Getter for AppSlug.
     * @return Returns the String
     */
    @JsonGetter("app_slug")
    public String getAppSlug() {
        return appSlug;
    }

    /**
     * Setter for AppSlug.
     * @param appSlug Value for String
     */
    @JsonSetter("app_slug")
    public void setAppSlug(String appSlug) {
        this.appSlug = appSlug;
    }

    /**
     * Getter for SuspendedBy.
     * @return Returns the Object
     */
    @JsonGetter("suspended_by")
    public Object getSuspendedBy() {
        return suspendedBy;
    }

    /**
     * Setter for SuspendedBy.
     * @param suspendedBy Value for Object
     */
    @JsonSetter("suspended_by")
    public void setSuspendedBy(Object suspendedBy) {
        this.suspendedBy = suspendedBy;
    }

    /**
     * Getter for SuspendedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("suspended_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getSuspendedAt() {
        return suspendedAt;
    }

    /**
     * Setter for SuspendedAt.
     * @param suspendedAt Value for LocalDateTime
     */
    @JsonSetter("suspended_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setSuspendedAt(LocalDateTime suspendedAt) {
        this.suspendedAt = suspendedAt;
    }

    /**
     * Internal Getter for ContactEmail.
     * @return Returns the Internal String
     */
    @JsonGetter("contact_email")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetContactEmail() {
        return this.contactEmail;
    }

    /**
     * Getter for ContactEmail.
     * @return Returns the String
     */
    public String getContactEmail() {
        return OptionalNullable.getFrom(contactEmail);
    }

    /**
     * Setter for ContactEmail.
     * @param contactEmail Value for String
     */
    @JsonSetter("contact_email")
    public void setContactEmail(String contactEmail) {
        this.contactEmail = OptionalNullable.of(contactEmail);
    }

    /**
     * UnSetter for ContactEmail.
     */
    public void unsetContactEmail() {
        contactEmail = null;
    }

    /**
     * Converts this ReposInstallationResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposInstallationResponse [" + "id=" + id + ", account=" + account
                + ", repositorySelection=" + repositorySelection + ", accessTokensUrl="
                + accessTokensUrl + ", repositoriesUrl=" + repositoriesUrl + ", htmlUrl=" + htmlUrl
                + ", appId=" + appId + ", targetId=" + targetId + ", targetType=" + targetType
                + ", permissions=" + permissions + ", events=" + events + ", createdAt=" + createdAt
                + ", updatedAt=" + updatedAt + ", singleFileName=" + singleFileName + ", appSlug="
                + appSlug + ", suspendedBy=" + suspendedBy + ", suspendedAt=" + suspendedAt
                + ", hasMultipleSingleFiles=" + hasMultipleSingleFiles + ", singleFilePaths="
                + singleFilePaths + ", contactEmail=" + contactEmail + "]";
    }

    /**
     * Builds a new {@link ReposInstallationResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposInstallationResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, account, repositorySelection, accessTokensUrl,
                repositoriesUrl, htmlUrl, appId, targetId, targetType, permissions, events,
                createdAt, updatedAt, singleFileName, appSlug, suspendedBy, suspendedAt)
                .hasMultipleSingleFiles(getHasMultipleSingleFiles())
                .singleFilePaths(getSingleFilePaths());
        builder.contactEmail = internalGetContactEmail();
        return builder;
    }

    /**
     * Class to build instances of {@link ReposInstallationResponse}.
     */
    public static class Builder {
        private int id;
        private Account account;
        private RepositorySelectionEnum repositorySelection;
        private String accessTokensUrl;
        private String repositoriesUrl;
        private String htmlUrl;
        private int appId;
        private int targetId;
        private String targetType;
        private Permissions3 permissions;
        private List<String> events;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private String singleFileName;
        private String appSlug;
        private Object suspendedBy;
        private LocalDateTime suspendedAt;
        private Boolean hasMultipleSingleFiles;
        private List<String> singleFilePaths;
        private OptionalNullable<String> contactEmail;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  account  Account value for account.
         * @param  repositorySelection  RepositorySelectionEnum value for repositorySelection.
         * @param  accessTokensUrl  String value for accessTokensUrl.
         * @param  repositoriesUrl  String value for repositoriesUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  appId  int value for appId.
         * @param  targetId  int value for targetId.
         * @param  targetType  String value for targetType.
         * @param  permissions  Permissions3 value for permissions.
         * @param  events  List of String value for events.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  singleFileName  String value for singleFileName.
         * @param  appSlug  String value for appSlug.
         * @param  suspendedBy  Object value for suspendedBy.
         * @param  suspendedAt  LocalDateTime value for suspendedAt.
         */
        public Builder(int id, Account account, RepositorySelectionEnum repositorySelection,
                String accessTokensUrl, String repositoriesUrl, String htmlUrl, int appId,
                int targetId, String targetType, Permissions3 permissions, List<String> events,
                LocalDateTime createdAt, LocalDateTime updatedAt, String singleFileName,
                String appSlug, Object suspendedBy, LocalDateTime suspendedAt) {
            this.id = id;
            this.account = account;
            this.repositorySelection = repositorySelection;
            this.accessTokensUrl = accessTokensUrl;
            this.repositoriesUrl = repositoriesUrl;
            this.htmlUrl = htmlUrl;
            this.appId = appId;
            this.targetId = targetId;
            this.targetType = targetType;
            this.permissions = permissions;
            this.events = events;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.singleFileName = singleFileName;
            this.appSlug = appSlug;
            this.suspendedBy = suspendedBy;
            this.suspendedAt = suspendedAt;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for account.
         * @param  account  Account value for account.
         * @return Builder
         */
        public Builder account(Account account) {
            this.account = account;
            return this;
        }

        /**
         * Setter for repositorySelection.
         * @param  repositorySelection  RepositorySelectionEnum value for repositorySelection.
         * @return Builder
         */
        public Builder repositorySelection(RepositorySelectionEnum repositorySelection) {
            this.repositorySelection = repositorySelection;
            return this;
        }

        /**
         * Setter for accessTokensUrl.
         * @param  accessTokensUrl  String value for accessTokensUrl.
         * @return Builder
         */
        public Builder accessTokensUrl(String accessTokensUrl) {
            this.accessTokensUrl = accessTokensUrl;
            return this;
        }

        /**
         * Setter for repositoriesUrl.
         * @param  repositoriesUrl  String value for repositoriesUrl.
         * @return Builder
         */
        public Builder repositoriesUrl(String repositoriesUrl) {
            this.repositoriesUrl = repositoriesUrl;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for appId.
         * @param  appId  int value for appId.
         * @return Builder
         */
        public Builder appId(int appId) {
            this.appId = appId;
            return this;
        }

        /**
         * Setter for targetId.
         * @param  targetId  int value for targetId.
         * @return Builder
         */
        public Builder targetId(int targetId) {
            this.targetId = targetId;
            return this;
        }

        /**
         * Setter for targetType.
         * @param  targetType  String value for targetType.
         * @return Builder
         */
        public Builder targetType(String targetType) {
            this.targetType = targetType;
            return this;
        }

        /**
         * Setter for permissions.
         * @param  permissions  Permissions3 value for permissions.
         * @return Builder
         */
        public Builder permissions(Permissions3 permissions) {
            this.permissions = permissions;
            return this;
        }

        /**
         * Setter for events.
         * @param  events  List of String value for events.
         * @return Builder
         */
        public Builder events(List<String> events) {
            this.events = events;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for singleFileName.
         * @param  singleFileName  String value for singleFileName.
         * @return Builder
         */
        public Builder singleFileName(String singleFileName) {
            this.singleFileName = singleFileName;
            return this;
        }

        /**
         * Setter for appSlug.
         * @param  appSlug  String value for appSlug.
         * @return Builder
         */
        public Builder appSlug(String appSlug) {
            this.appSlug = appSlug;
            return this;
        }

        /**
         * Setter for suspendedBy.
         * @param  suspendedBy  Object value for suspendedBy.
         * @return Builder
         */
        public Builder suspendedBy(Object suspendedBy) {
            this.suspendedBy = suspendedBy;
            return this;
        }

        /**
         * Setter for suspendedAt.
         * @param  suspendedAt  LocalDateTime value for suspendedAt.
         * @return Builder
         */
        public Builder suspendedAt(LocalDateTime suspendedAt) {
            this.suspendedAt = suspendedAt;
            return this;
        }

        /**
         * Setter for hasMultipleSingleFiles.
         * @param  hasMultipleSingleFiles  Boolean value for hasMultipleSingleFiles.
         * @return Builder
         */
        public Builder hasMultipleSingleFiles(Boolean hasMultipleSingleFiles) {
            this.hasMultipleSingleFiles = hasMultipleSingleFiles;
            return this;
        }

        /**
         * Setter for singleFilePaths.
         * @param  singleFilePaths  List of String value for singleFilePaths.
         * @return Builder
         */
        public Builder singleFilePaths(List<String> singleFilePaths) {
            this.singleFilePaths = singleFilePaths;
            return this;
        }

        /**
         * Setter for contactEmail.
         * @param  contactEmail  String value for contactEmail.
         * @return Builder
         */
        public Builder contactEmail(String contactEmail) {
            this.contactEmail = OptionalNullable.of(contactEmail);
            return this;
        }

        /**
         * UnSetter for contactEmail.
         * @return Builder
         */
        public Builder unsetContactEmail() {
            contactEmail = null;
            return this;
        }

        /**
         * Builds a new {@link ReposInstallationResponse} object using the set fields.
         * @return {@link ReposInstallationResponse}
         */
        public ReposInstallationResponse build() {
            return new ReposInstallationResponse(id, account, repositorySelection, accessTokensUrl,
                    repositoriesUrl, htmlUrl, appId, targetId, targetType, permissions, events,
                    createdAt, updatedAt, singleFileName, appSlug, suspendedBy, suspendedAt,
                    hasMultipleSingleFiles, singleFilePaths, contactEmail);
        }
    }
}

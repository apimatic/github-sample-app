/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;

/**
 * This is a model class for OrganizationFull type.
 */
public class OrganizationFull {
    private String login;
    private int id;
    private String nodeId;
    private String url;
    private String reposUrl;
    private String eventsUrl;
    private String hooksUrl;
    private String issuesUrl;
    private String membersUrl;
    private String publicMembersUrl;
    private String avatarUrl;
    private String description;
    private String name;
    private String company;
    private String blog;
    private String location;
    private String email;
    private OptionalNullable<String> twitterUsername;
    private Boolean isVerified;
    private boolean hasOrganizationProjects;
    private boolean hasRepositoryProjects;
    private int publicRepos;
    private int publicGists;
    private int followers;
    private int following;
    private String htmlUrl;
    private LocalDateTime createdAt;
    private String type;
    private Integer totalPrivateRepos;
    private Integer ownedPrivateRepos;
    private OptionalNullable<Integer> privateGists;
    private OptionalNullable<Integer> diskUsage;
    private OptionalNullable<Integer> collaborators;
    private OptionalNullable<String> billingEmail;
    private Plan1 plan;
    private OptionalNullable<String> defaultRepositoryPermission;
    private OptionalNullable<Boolean> membersCanCreateRepositories;
    private OptionalNullable<Boolean> twoFactorRequirementEnabled;
    private String membersAllowedRepositoryCreationType;
    private Boolean membersCanCreatePublicRepositories;
    private Boolean membersCanCreatePrivateRepositories;
    private Boolean membersCanCreateInternalRepositories;
    private Boolean membersCanCreatePages;
    private Boolean membersCanCreatePublicPages;
    private Boolean membersCanCreatePrivatePages;
    private OptionalNullable<Boolean> membersCanForkPrivateRepositories;
    private Boolean webCommitSignoffRequired;
    private LocalDateTime updatedAt;
    private Boolean advancedSecurityEnabledForNewRepositories;
    private Boolean dependabotAlertsEnabledForNewRepositories;
    private Boolean dependabotSecurityUpdatesEnabledForNewRepositories;
    private Boolean dependencyGraphEnabledForNewRepositories;
    private Boolean secretScanningEnabledForNewRepositories;
    private Boolean secretScanningPushProtectionEnabledForNewRepositories;
    private Boolean secretScanningPushProtectionCustomLinkEnabled;
    private OptionalNullable<String> secretScanningPushProtectionCustomLink;

    /**
     * Default constructor.
     */
    public OrganizationFull() {
    }

    /**
     * Initialization constructor.
     * @param  login  String value for login.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  url  String value for url.
     * @param  reposUrl  String value for reposUrl.
     * @param  eventsUrl  String value for eventsUrl.
     * @param  hooksUrl  String value for hooksUrl.
     * @param  issuesUrl  String value for issuesUrl.
     * @param  membersUrl  String value for membersUrl.
     * @param  publicMembersUrl  String value for publicMembersUrl.
     * @param  avatarUrl  String value for avatarUrl.
     * @param  description  String value for description.
     * @param  hasOrganizationProjects  boolean value for hasOrganizationProjects.
     * @param  hasRepositoryProjects  boolean value for hasRepositoryProjects.
     * @param  publicRepos  int value for publicRepos.
     * @param  publicGists  int value for publicGists.
     * @param  followers  int value for followers.
     * @param  following  int value for following.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  type  String value for type.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  name  String value for name.
     * @param  company  String value for company.
     * @param  blog  String value for blog.
     * @param  location  String value for location.
     * @param  email  String value for email.
     * @param  twitterUsername  String value for twitterUsername.
     * @param  isVerified  Boolean value for isVerified.
     * @param  totalPrivateRepos  Integer value for totalPrivateRepos.
     * @param  ownedPrivateRepos  Integer value for ownedPrivateRepos.
     * @param  privateGists  Integer value for privateGists.
     * @param  diskUsage  Integer value for diskUsage.
     * @param  collaborators  Integer value for collaborators.
     * @param  billingEmail  String value for billingEmail.
     * @param  plan  Plan1 value for plan.
     * @param  defaultRepositoryPermission  String value for defaultRepositoryPermission.
     * @param  membersCanCreateRepositories  Boolean value for membersCanCreateRepositories.
     * @param  twoFactorRequirementEnabled  Boolean value for twoFactorRequirementEnabled.
     * @param  membersAllowedRepositoryCreationType  String value for
     *         membersAllowedRepositoryCreationType.
     * @param  membersCanCreatePublicRepositories  Boolean value for
     *         membersCanCreatePublicRepositories.
     * @param  membersCanCreatePrivateRepositories  Boolean value for
     *         membersCanCreatePrivateRepositories.
     * @param  membersCanCreateInternalRepositories  Boolean value for
     *         membersCanCreateInternalRepositories.
     * @param  membersCanCreatePages  Boolean value for membersCanCreatePages.
     * @param  membersCanCreatePublicPages  Boolean value for membersCanCreatePublicPages.
     * @param  membersCanCreatePrivatePages  Boolean value for membersCanCreatePrivatePages.
     * @param  membersCanForkPrivateRepositories  Boolean value for
     *         membersCanForkPrivateRepositories.
     * @param  webCommitSignoffRequired  Boolean value for webCommitSignoffRequired.
     * @param  advancedSecurityEnabledForNewRepositories  Boolean value for
     *         advancedSecurityEnabledForNewRepositories.
     * @param  dependabotAlertsEnabledForNewRepositories  Boolean value for
     *         dependabotAlertsEnabledForNewRepositories.
     * @param  dependabotSecurityUpdatesEnabledForNewRepositories  Boolean value for
     *         dependabotSecurityUpdatesEnabledForNewRepositories.
     * @param  dependencyGraphEnabledForNewRepositories  Boolean value for
     *         dependencyGraphEnabledForNewRepositories.
     * @param  secretScanningEnabledForNewRepositories  Boolean value for
     *         secretScanningEnabledForNewRepositories.
     * @param  secretScanningPushProtectionEnabledForNewRepositories  Boolean value for
     *         secretScanningPushProtectionEnabledForNewRepositories.
     * @param  secretScanningPushProtectionCustomLinkEnabled  Boolean value for
     *         secretScanningPushProtectionCustomLinkEnabled.
     * @param  secretScanningPushProtectionCustomLink  String value for
     *         secretScanningPushProtectionCustomLink.
     */
    public OrganizationFull(
            String login,
            int id,
            String nodeId,
            String url,
            String reposUrl,
            String eventsUrl,
            String hooksUrl,
            String issuesUrl,
            String membersUrl,
            String publicMembersUrl,
            String avatarUrl,
            String description,
            boolean hasOrganizationProjects,
            boolean hasRepositoryProjects,
            int publicRepos,
            int publicGists,
            int followers,
            int following,
            String htmlUrl,
            LocalDateTime createdAt,
            String type,
            LocalDateTime updatedAt,
            String name,
            String company,
            String blog,
            String location,
            String email,
            String twitterUsername,
            Boolean isVerified,
            Integer totalPrivateRepos,
            Integer ownedPrivateRepos,
            Integer privateGists,
            Integer diskUsage,
            Integer collaborators,
            String billingEmail,
            Plan1 plan,
            String defaultRepositoryPermission,
            Boolean membersCanCreateRepositories,
            Boolean twoFactorRequirementEnabled,
            String membersAllowedRepositoryCreationType,
            Boolean membersCanCreatePublicRepositories,
            Boolean membersCanCreatePrivateRepositories,
            Boolean membersCanCreateInternalRepositories,
            Boolean membersCanCreatePages,
            Boolean membersCanCreatePublicPages,
            Boolean membersCanCreatePrivatePages,
            Boolean membersCanForkPrivateRepositories,
            Boolean webCommitSignoffRequired,
            Boolean advancedSecurityEnabledForNewRepositories,
            Boolean dependabotAlertsEnabledForNewRepositories,
            Boolean dependabotSecurityUpdatesEnabledForNewRepositories,
            Boolean dependencyGraphEnabledForNewRepositories,
            Boolean secretScanningEnabledForNewRepositories,
            Boolean secretScanningPushProtectionEnabledForNewRepositories,
            Boolean secretScanningPushProtectionCustomLinkEnabled,
            String secretScanningPushProtectionCustomLink) {
        this.login = login;
        this.id = id;
        this.nodeId = nodeId;
        this.url = url;
        this.reposUrl = reposUrl;
        this.eventsUrl = eventsUrl;
        this.hooksUrl = hooksUrl;
        this.issuesUrl = issuesUrl;
        this.membersUrl = membersUrl;
        this.publicMembersUrl = publicMembersUrl;
        this.avatarUrl = avatarUrl;
        this.description = description;
        this.name = name;
        this.company = company;
        this.blog = blog;
        this.location = location;
        this.email = email;
        this.twitterUsername = OptionalNullable.of(twitterUsername);
        this.isVerified = isVerified;
        this.hasOrganizationProjects = hasOrganizationProjects;
        this.hasRepositoryProjects = hasRepositoryProjects;
        this.publicRepos = publicRepos;
        this.publicGists = publicGists;
        this.followers = followers;
        this.following = following;
        this.htmlUrl = htmlUrl;
        this.createdAt = createdAt;
        this.type = type;
        this.totalPrivateRepos = totalPrivateRepos;
        this.ownedPrivateRepos = ownedPrivateRepos;
        this.privateGists = OptionalNullable.of(privateGists);
        this.diskUsage = OptionalNullable.of(diskUsage);
        this.collaborators = OptionalNullable.of(collaborators);
        this.billingEmail = OptionalNullable.of(billingEmail);
        this.plan = plan;
        this.defaultRepositoryPermission = OptionalNullable.of(defaultRepositoryPermission);
        this.membersCanCreateRepositories = OptionalNullable.of(membersCanCreateRepositories);
        this.twoFactorRequirementEnabled = OptionalNullable.of(twoFactorRequirementEnabled);
        this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
        this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
        this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
        this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
        this.membersCanCreatePages = membersCanCreatePages;
        this.membersCanCreatePublicPages = membersCanCreatePublicPages;
        this.membersCanCreatePrivatePages = membersCanCreatePrivatePages;
        this.membersCanForkPrivateRepositories =
                OptionalNullable.of(membersCanForkPrivateRepositories);
        this.webCommitSignoffRequired = webCommitSignoffRequired;
        this.updatedAt = updatedAt;
        this.advancedSecurityEnabledForNewRepositories = advancedSecurityEnabledForNewRepositories;
        this.dependabotAlertsEnabledForNewRepositories = dependabotAlertsEnabledForNewRepositories;
        this.dependabotSecurityUpdatesEnabledForNewRepositories =
                dependabotSecurityUpdatesEnabledForNewRepositories;
        this.dependencyGraphEnabledForNewRepositories = dependencyGraphEnabledForNewRepositories;
        this.secretScanningEnabledForNewRepositories = secretScanningEnabledForNewRepositories;
        this.secretScanningPushProtectionEnabledForNewRepositories =
                secretScanningPushProtectionEnabledForNewRepositories;
        this.secretScanningPushProtectionCustomLinkEnabled =
                secretScanningPushProtectionCustomLinkEnabled;
        this.secretScanningPushProtectionCustomLink =
                OptionalNullable.of(secretScanningPushProtectionCustomLink);
    }

    /**
     * Internal initialization constructor.
     */
    protected OrganizationFull(String login, int id, String nodeId, String url, String reposUrl,
            String eventsUrl, String hooksUrl, String issuesUrl, String membersUrl,
            String publicMembersUrl, String avatarUrl, String description,
            boolean hasOrganizationProjects, boolean hasRepositoryProjects, int publicRepos,
            int publicGists, int followers, int following, String htmlUrl, LocalDateTime createdAt,
            String type, LocalDateTime updatedAt, String name, String company, String blog,
            String location, String email, OptionalNullable<String> twitterUsername,
            Boolean isVerified, Integer totalPrivateRepos, Integer ownedPrivateRepos,
            OptionalNullable<Integer> privateGists, OptionalNullable<Integer> diskUsage,
            OptionalNullable<Integer> collaborators, OptionalNullable<String> billingEmail,
            Plan1 plan, OptionalNullable<String> defaultRepositoryPermission,
            OptionalNullable<Boolean> membersCanCreateRepositories,
            OptionalNullable<Boolean> twoFactorRequirementEnabled,
            String membersAllowedRepositoryCreationType, Boolean membersCanCreatePublicRepositories,
            Boolean membersCanCreatePrivateRepositories,
            Boolean membersCanCreateInternalRepositories, Boolean membersCanCreatePages,
            Boolean membersCanCreatePublicPages, Boolean membersCanCreatePrivatePages,
            OptionalNullable<Boolean> membersCanForkPrivateRepositories,
            Boolean webCommitSignoffRequired, Boolean advancedSecurityEnabledForNewRepositories,
            Boolean dependabotAlertsEnabledForNewRepositories,
            Boolean dependabotSecurityUpdatesEnabledForNewRepositories,
            Boolean dependencyGraphEnabledForNewRepositories,
            Boolean secretScanningEnabledForNewRepositories,
            Boolean secretScanningPushProtectionEnabledForNewRepositories,
            Boolean secretScanningPushProtectionCustomLinkEnabled,
            OptionalNullable<String> secretScanningPushProtectionCustomLink) {
        this.login = login;
        this.id = id;
        this.nodeId = nodeId;
        this.url = url;
        this.reposUrl = reposUrl;
        this.eventsUrl = eventsUrl;
        this.hooksUrl = hooksUrl;
        this.issuesUrl = issuesUrl;
        this.membersUrl = membersUrl;
        this.publicMembersUrl = publicMembersUrl;
        this.avatarUrl = avatarUrl;
        this.description = description;
        this.name = name;
        this.company = company;
        this.blog = blog;
        this.location = location;
        this.email = email;
        this.twitterUsername = twitterUsername;
        this.isVerified = isVerified;
        this.hasOrganizationProjects = hasOrganizationProjects;
        this.hasRepositoryProjects = hasRepositoryProjects;
        this.publicRepos = publicRepos;
        this.publicGists = publicGists;
        this.followers = followers;
        this.following = following;
        this.htmlUrl = htmlUrl;
        this.createdAt = createdAt;
        this.type = type;
        this.totalPrivateRepos = totalPrivateRepos;
        this.ownedPrivateRepos = ownedPrivateRepos;
        this.privateGists = privateGists;
        this.diskUsage = diskUsage;
        this.collaborators = collaborators;
        this.billingEmail = billingEmail;
        this.plan = plan;
        this.defaultRepositoryPermission = defaultRepositoryPermission;
        this.membersCanCreateRepositories = membersCanCreateRepositories;
        this.twoFactorRequirementEnabled = twoFactorRequirementEnabled;
        this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
        this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
        this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
        this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
        this.membersCanCreatePages = membersCanCreatePages;
        this.membersCanCreatePublicPages = membersCanCreatePublicPages;
        this.membersCanCreatePrivatePages = membersCanCreatePrivatePages;
        this.membersCanForkPrivateRepositories = membersCanForkPrivateRepositories;
        this.webCommitSignoffRequired = webCommitSignoffRequired;
        this.updatedAt = updatedAt;
        this.advancedSecurityEnabledForNewRepositories = advancedSecurityEnabledForNewRepositories;
        this.dependabotAlertsEnabledForNewRepositories = dependabotAlertsEnabledForNewRepositories;
        this.dependabotSecurityUpdatesEnabledForNewRepositories =
                dependabotSecurityUpdatesEnabledForNewRepositories;
        this.dependencyGraphEnabledForNewRepositories = dependencyGraphEnabledForNewRepositories;
        this.secretScanningEnabledForNewRepositories = secretScanningEnabledForNewRepositories;
        this.secretScanningPushProtectionEnabledForNewRepositories =
                secretScanningPushProtectionEnabledForNewRepositories;
        this.secretScanningPushProtectionCustomLinkEnabled =
                secretScanningPushProtectionCustomLinkEnabled;
        this.secretScanningPushProtectionCustomLink = secretScanningPushProtectionCustomLink;
    }

    /**
     * Getter for Login.
     * @return Returns the String
     */
    @JsonGetter("login")
    public String getLogin() {
        return login;
    }

    /**
     * Setter for Login.
     * @param login Value for String
     */
    @JsonSetter("login")
    public void setLogin(String login) {
        this.login = login;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for ReposUrl.
     * @return Returns the String
     */
    @JsonGetter("repos_url")
    public String getReposUrl() {
        return reposUrl;
    }

    /**
     * Setter for ReposUrl.
     * @param reposUrl Value for String
     */
    @JsonSetter("repos_url")
    public void setReposUrl(String reposUrl) {
        this.reposUrl = reposUrl;
    }

    /**
     * Getter for EventsUrl.
     * @return Returns the String
     */
    @JsonGetter("events_url")
    public String getEventsUrl() {
        return eventsUrl;
    }

    /**
     * Setter for EventsUrl.
     * @param eventsUrl Value for String
     */
    @JsonSetter("events_url")
    public void setEventsUrl(String eventsUrl) {
        this.eventsUrl = eventsUrl;
    }

    /**
     * Getter for HooksUrl.
     * @return Returns the String
     */
    @JsonGetter("hooks_url")
    public String getHooksUrl() {
        return hooksUrl;
    }

    /**
     * Setter for HooksUrl.
     * @param hooksUrl Value for String
     */
    @JsonSetter("hooks_url")
    public void setHooksUrl(String hooksUrl) {
        this.hooksUrl = hooksUrl;
    }

    /**
     * Getter for IssuesUrl.
     * @return Returns the String
     */
    @JsonGetter("issues_url")
    public String getIssuesUrl() {
        return issuesUrl;
    }

    /**
     * Setter for IssuesUrl.
     * @param issuesUrl Value for String
     */
    @JsonSetter("issues_url")
    public void setIssuesUrl(String issuesUrl) {
        this.issuesUrl = issuesUrl;
    }

    /**
     * Getter for MembersUrl.
     * @return Returns the String
     */
    @JsonGetter("members_url")
    public String getMembersUrl() {
        return membersUrl;
    }

    /**
     * Setter for MembersUrl.
     * @param membersUrl Value for String
     */
    @JsonSetter("members_url")
    public void setMembersUrl(String membersUrl) {
        this.membersUrl = membersUrl;
    }

    /**
     * Getter for PublicMembersUrl.
     * @return Returns the String
     */
    @JsonGetter("public_members_url")
    public String getPublicMembersUrl() {
        return publicMembersUrl;
    }

    /**
     * Setter for PublicMembersUrl.
     * @param publicMembersUrl Value for String
     */
    @JsonSetter("public_members_url")
    public void setPublicMembersUrl(String publicMembersUrl) {
        this.publicMembersUrl = publicMembersUrl;
    }

    /**
     * Getter for AvatarUrl.
     * @return Returns the String
     */
    @JsonGetter("avatar_url")
    public String getAvatarUrl() {
        return avatarUrl;
    }

    /**
     * Setter for AvatarUrl.
     * @param avatarUrl Value for String
     */
    @JsonSetter("avatar_url")
    public void setAvatarUrl(String avatarUrl) {
        this.avatarUrl = avatarUrl;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Company.
     * @return Returns the String
     */
    @JsonGetter("company")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCompany() {
        return company;
    }

    /**
     * Setter for Company.
     * @param company Value for String
     */
    @JsonSetter("company")
    public void setCompany(String company) {
        this.company = company;
    }

    /**
     * Getter for Blog.
     * @return Returns the String
     */
    @JsonGetter("blog")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBlog() {
        return blog;
    }

    /**
     * Setter for Blog.
     * @param blog Value for String
     */
    @JsonSetter("blog")
    public void setBlog(String blog) {
        this.blog = blog;
    }

    /**
     * Getter for Location.
     * @return Returns the String
     */
    @JsonGetter("location")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLocation() {
        return location;
    }

    /**
     * Setter for Location.
     * @param location Value for String
     */
    @JsonSetter("location")
    public void setLocation(String location) {
        this.location = location;
    }

    /**
     * Getter for Email.
     * @return Returns the String
     */
    @JsonGetter("email")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEmail() {
        return email;
    }

    /**
     * Setter for Email.
     * @param email Value for String
     */
    @JsonSetter("email")
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Internal Getter for TwitterUsername.
     * @return Returns the Internal String
     */
    @JsonGetter("twitter_username")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTwitterUsername() {
        return this.twitterUsername;
    }

    /**
     * Getter for TwitterUsername.
     * @return Returns the String
     */
    public String getTwitterUsername() {
        return OptionalNullable.getFrom(twitterUsername);
    }

    /**
     * Setter for TwitterUsername.
     * @param twitterUsername Value for String
     */
    @JsonSetter("twitter_username")
    public void setTwitterUsername(String twitterUsername) {
        this.twitterUsername = OptionalNullable.of(twitterUsername);
    }

    /**
     * UnSetter for TwitterUsername.
     */
    public void unsetTwitterUsername() {
        twitterUsername = null;
    }

    /**
     * Getter for IsVerified.
     * @return Returns the Boolean
     */
    @JsonGetter("is_verified")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsVerified() {
        return isVerified;
    }

    /**
     * Setter for IsVerified.
     * @param isVerified Value for Boolean
     */
    @JsonSetter("is_verified")
    public void setIsVerified(Boolean isVerified) {
        this.isVerified = isVerified;
    }

    /**
     * Getter for HasOrganizationProjects.
     * @return Returns the boolean
     */
    @JsonGetter("has_organization_projects")
    public boolean getHasOrganizationProjects() {
        return hasOrganizationProjects;
    }

    /**
     * Setter for HasOrganizationProjects.
     * @param hasOrganizationProjects Value for boolean
     */
    @JsonSetter("has_organization_projects")
    public void setHasOrganizationProjects(boolean hasOrganizationProjects) {
        this.hasOrganizationProjects = hasOrganizationProjects;
    }

    /**
     * Getter for HasRepositoryProjects.
     * @return Returns the boolean
     */
    @JsonGetter("has_repository_projects")
    public boolean getHasRepositoryProjects() {
        return hasRepositoryProjects;
    }

    /**
     * Setter for HasRepositoryProjects.
     * @param hasRepositoryProjects Value for boolean
     */
    @JsonSetter("has_repository_projects")
    public void setHasRepositoryProjects(boolean hasRepositoryProjects) {
        this.hasRepositoryProjects = hasRepositoryProjects;
    }

    /**
     * Getter for PublicRepos.
     * @return Returns the int
     */
    @JsonGetter("public_repos")
    public int getPublicRepos() {
        return publicRepos;
    }

    /**
     * Setter for PublicRepos.
     * @param publicRepos Value for int
     */
    @JsonSetter("public_repos")
    public void setPublicRepos(int publicRepos) {
        this.publicRepos = publicRepos;
    }

    /**
     * Getter for PublicGists.
     * @return Returns the int
     */
    @JsonGetter("public_gists")
    public int getPublicGists() {
        return publicGists;
    }

    /**
     * Setter for PublicGists.
     * @param publicGists Value for int
     */
    @JsonSetter("public_gists")
    public void setPublicGists(int publicGists) {
        this.publicGists = publicGists;
    }

    /**
     * Getter for Followers.
     * @return Returns the int
     */
    @JsonGetter("followers")
    public int getFollowers() {
        return followers;
    }

    /**
     * Setter for Followers.
     * @param followers Value for int
     */
    @JsonSetter("followers")
    public void setFollowers(int followers) {
        this.followers = followers;
    }

    /**
     * Getter for Following.
     * @return Returns the int
     */
    @JsonGetter("following")
    public int getFollowing() {
        return following;
    }

    /**
     * Setter for Following.
     * @param following Value for int
     */
    @JsonSetter("following")
    public void setFollowing(int following) {
        this.following = following;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for Type.
     * @return Returns the String
     */
    @JsonGetter("type")
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for TotalPrivateRepos.
     * @return Returns the Integer
     */
    @JsonGetter("total_private_repos")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTotalPrivateRepos() {
        return totalPrivateRepos;
    }

    /**
     * Setter for TotalPrivateRepos.
     * @param totalPrivateRepos Value for Integer
     */
    @JsonSetter("total_private_repos")
    public void setTotalPrivateRepos(Integer totalPrivateRepos) {
        this.totalPrivateRepos = totalPrivateRepos;
    }

    /**
     * Getter for OwnedPrivateRepos.
     * @return Returns the Integer
     */
    @JsonGetter("owned_private_repos")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getOwnedPrivateRepos() {
        return ownedPrivateRepos;
    }

    /**
     * Setter for OwnedPrivateRepos.
     * @param ownedPrivateRepos Value for Integer
     */
    @JsonSetter("owned_private_repos")
    public void setOwnedPrivateRepos(Integer ownedPrivateRepos) {
        this.ownedPrivateRepos = ownedPrivateRepos;
    }

    /**
     * Internal Getter for PrivateGists.
     * @return Returns the Internal Integer
     */
    @JsonGetter("private_gists")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPrivateGists() {
        return this.privateGists;
    }

    /**
     * Getter for PrivateGists.
     * @return Returns the Integer
     */
    public Integer getPrivateGists() {
        return OptionalNullable.getFrom(privateGists);
    }

    /**
     * Setter for PrivateGists.
     * @param privateGists Value for Integer
     */
    @JsonSetter("private_gists")
    public void setPrivateGists(Integer privateGists) {
        this.privateGists = OptionalNullable.of(privateGists);
    }

    /**
     * UnSetter for PrivateGists.
     */
    public void unsetPrivateGists() {
        privateGists = null;
    }

    /**
     * Internal Getter for DiskUsage.
     * @return Returns the Internal Integer
     */
    @JsonGetter("disk_usage")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDiskUsage() {
        return this.diskUsage;
    }

    /**
     * Getter for DiskUsage.
     * @return Returns the Integer
     */
    public Integer getDiskUsage() {
        return OptionalNullable.getFrom(diskUsage);
    }

    /**
     * Setter for DiskUsage.
     * @param diskUsage Value for Integer
     */
    @JsonSetter("disk_usage")
    public void setDiskUsage(Integer diskUsage) {
        this.diskUsage = OptionalNullable.of(diskUsage);
    }

    /**
     * UnSetter for DiskUsage.
     */
    public void unsetDiskUsage() {
        diskUsage = null;
    }

    /**
     * Internal Getter for Collaborators.
     * @return Returns the Internal Integer
     */
    @JsonGetter("collaborators")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCollaborators() {
        return this.collaborators;
    }

    /**
     * Getter for Collaborators.
     * @return Returns the Integer
     */
    public Integer getCollaborators() {
        return OptionalNullable.getFrom(collaborators);
    }

    /**
     * Setter for Collaborators.
     * @param collaborators Value for Integer
     */
    @JsonSetter("collaborators")
    public void setCollaborators(Integer collaborators) {
        this.collaborators = OptionalNullable.of(collaborators);
    }

    /**
     * UnSetter for Collaborators.
     */
    public void unsetCollaborators() {
        collaborators = null;
    }

    /**
     * Internal Getter for BillingEmail.
     * @return Returns the Internal String
     */
    @JsonGetter("billing_email")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBillingEmail() {
        return this.billingEmail;
    }

    /**
     * Getter for BillingEmail.
     * @return Returns the String
     */
    public String getBillingEmail() {
        return OptionalNullable.getFrom(billingEmail);
    }

    /**
     * Setter for BillingEmail.
     * @param billingEmail Value for String
     */
    @JsonSetter("billing_email")
    public void setBillingEmail(String billingEmail) {
        this.billingEmail = OptionalNullable.of(billingEmail);
    }

    /**
     * UnSetter for BillingEmail.
     */
    public void unsetBillingEmail() {
        billingEmail = null;
    }

    /**
     * Getter for Plan.
     * @return Returns the Plan1
     */
    @JsonGetter("plan")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Plan1 getPlan() {
        return plan;
    }

    /**
     * Setter for Plan.
     * @param plan Value for Plan1
     */
    @JsonSetter("plan")
    public void setPlan(Plan1 plan) {
        this.plan = plan;
    }

    /**
     * Internal Getter for DefaultRepositoryPermission.
     * @return Returns the Internal String
     */
    @JsonGetter("default_repository_permission")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDefaultRepositoryPermission() {
        return this.defaultRepositoryPermission;
    }

    /**
     * Getter for DefaultRepositoryPermission.
     * @return Returns the String
     */
    public String getDefaultRepositoryPermission() {
        return OptionalNullable.getFrom(defaultRepositoryPermission);
    }

    /**
     * Setter for DefaultRepositoryPermission.
     * @param defaultRepositoryPermission Value for String
     */
    @JsonSetter("default_repository_permission")
    public void setDefaultRepositoryPermission(String defaultRepositoryPermission) {
        this.defaultRepositoryPermission = OptionalNullable.of(defaultRepositoryPermission);
    }

    /**
     * UnSetter for DefaultRepositoryPermission.
     */
    public void unsetDefaultRepositoryPermission() {
        defaultRepositoryPermission = null;
    }

    /**
     * Internal Getter for MembersCanCreateRepositories.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("members_can_create_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetMembersCanCreateRepositories() {
        return this.membersCanCreateRepositories;
    }

    /**
     * Getter for MembersCanCreateRepositories.
     * @return Returns the Boolean
     */
    public Boolean getMembersCanCreateRepositories() {
        return OptionalNullable.getFrom(membersCanCreateRepositories);
    }

    /**
     * Setter for MembersCanCreateRepositories.
     * @param membersCanCreateRepositories Value for Boolean
     */
    @JsonSetter("members_can_create_repositories")
    public void setMembersCanCreateRepositories(Boolean membersCanCreateRepositories) {
        this.membersCanCreateRepositories = OptionalNullable.of(membersCanCreateRepositories);
    }

    /**
     * UnSetter for MembersCanCreateRepositories.
     */
    public void unsetMembersCanCreateRepositories() {
        membersCanCreateRepositories = null;
    }

    /**
     * Internal Getter for TwoFactorRequirementEnabled.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("two_factor_requirement_enabled")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetTwoFactorRequirementEnabled() {
        return this.twoFactorRequirementEnabled;
    }

    /**
     * Getter for TwoFactorRequirementEnabled.
     * @return Returns the Boolean
     */
    public Boolean getTwoFactorRequirementEnabled() {
        return OptionalNullable.getFrom(twoFactorRequirementEnabled);
    }

    /**
     * Setter for TwoFactorRequirementEnabled.
     * @param twoFactorRequirementEnabled Value for Boolean
     */
    @JsonSetter("two_factor_requirement_enabled")
    public void setTwoFactorRequirementEnabled(Boolean twoFactorRequirementEnabled) {
        this.twoFactorRequirementEnabled = OptionalNullable.of(twoFactorRequirementEnabled);
    }

    /**
     * UnSetter for TwoFactorRequirementEnabled.
     */
    public void unsetTwoFactorRequirementEnabled() {
        twoFactorRequirementEnabled = null;
    }

    /**
     * Getter for MembersAllowedRepositoryCreationType.
     * @return Returns the String
     */
    @JsonGetter("members_allowed_repository_creation_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMembersAllowedRepositoryCreationType() {
        return membersAllowedRepositoryCreationType;
    }

    /**
     * Setter for MembersAllowedRepositoryCreationType.
     * @param membersAllowedRepositoryCreationType Value for String
     */
    @JsonSetter("members_allowed_repository_creation_type")
    public void setMembersAllowedRepositoryCreationType(String membersAllowedRepositoryCreationType) {
        this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
    }

    /**
     * Getter for MembersCanCreatePublicRepositories.
     * @return Returns the Boolean
     */
    @JsonGetter("members_can_create_public_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMembersCanCreatePublicRepositories() {
        return membersCanCreatePublicRepositories;
    }

    /**
     * Setter for MembersCanCreatePublicRepositories.
     * @param membersCanCreatePublicRepositories Value for Boolean
     */
    @JsonSetter("members_can_create_public_repositories")
    public void setMembersCanCreatePublicRepositories(Boolean membersCanCreatePublicRepositories) {
        this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
    }

    /**
     * Getter for MembersCanCreatePrivateRepositories.
     * @return Returns the Boolean
     */
    @JsonGetter("members_can_create_private_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMembersCanCreatePrivateRepositories() {
        return membersCanCreatePrivateRepositories;
    }

    /**
     * Setter for MembersCanCreatePrivateRepositories.
     * @param membersCanCreatePrivateRepositories Value for Boolean
     */
    @JsonSetter("members_can_create_private_repositories")
    public void setMembersCanCreatePrivateRepositories(Boolean membersCanCreatePrivateRepositories) {
        this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
    }

    /**
     * Getter for MembersCanCreateInternalRepositories.
     * @return Returns the Boolean
     */
    @JsonGetter("members_can_create_internal_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMembersCanCreateInternalRepositories() {
        return membersCanCreateInternalRepositories;
    }

    /**
     * Setter for MembersCanCreateInternalRepositories.
     * @param membersCanCreateInternalRepositories Value for Boolean
     */
    @JsonSetter("members_can_create_internal_repositories")
    public void setMembersCanCreateInternalRepositories(Boolean membersCanCreateInternalRepositories) {
        this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
    }

    /**
     * Getter for MembersCanCreatePages.
     * @return Returns the Boolean
     */
    @JsonGetter("members_can_create_pages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMembersCanCreatePages() {
        return membersCanCreatePages;
    }

    /**
     * Setter for MembersCanCreatePages.
     * @param membersCanCreatePages Value for Boolean
     */
    @JsonSetter("members_can_create_pages")
    public void setMembersCanCreatePages(Boolean membersCanCreatePages) {
        this.membersCanCreatePages = membersCanCreatePages;
    }

    /**
     * Getter for MembersCanCreatePublicPages.
     * @return Returns the Boolean
     */
    @JsonGetter("members_can_create_public_pages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMembersCanCreatePublicPages() {
        return membersCanCreatePublicPages;
    }

    /**
     * Setter for MembersCanCreatePublicPages.
     * @param membersCanCreatePublicPages Value for Boolean
     */
    @JsonSetter("members_can_create_public_pages")
    public void setMembersCanCreatePublicPages(Boolean membersCanCreatePublicPages) {
        this.membersCanCreatePublicPages = membersCanCreatePublicPages;
    }

    /**
     * Getter for MembersCanCreatePrivatePages.
     * @return Returns the Boolean
     */
    @JsonGetter("members_can_create_private_pages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMembersCanCreatePrivatePages() {
        return membersCanCreatePrivatePages;
    }

    /**
     * Setter for MembersCanCreatePrivatePages.
     * @param membersCanCreatePrivatePages Value for Boolean
     */
    @JsonSetter("members_can_create_private_pages")
    public void setMembersCanCreatePrivatePages(Boolean membersCanCreatePrivatePages) {
        this.membersCanCreatePrivatePages = membersCanCreatePrivatePages;
    }

    /**
     * Internal Getter for MembersCanForkPrivateRepositories.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("members_can_fork_private_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetMembersCanForkPrivateRepositories() {
        return this.membersCanForkPrivateRepositories;
    }

    /**
     * Getter for MembersCanForkPrivateRepositories.
     * @return Returns the Boolean
     */
    public Boolean getMembersCanForkPrivateRepositories() {
        return OptionalNullable.getFrom(membersCanForkPrivateRepositories);
    }

    /**
     * Setter for MembersCanForkPrivateRepositories.
     * @param membersCanForkPrivateRepositories Value for Boolean
     */
    @JsonSetter("members_can_fork_private_repositories")
    public void setMembersCanForkPrivateRepositories(Boolean membersCanForkPrivateRepositories) {
        this.membersCanForkPrivateRepositories = OptionalNullable.of(membersCanForkPrivateRepositories);
    }

    /**
     * UnSetter for MembersCanForkPrivateRepositories.
     */
    public void unsetMembersCanForkPrivateRepositories() {
        membersCanForkPrivateRepositories = null;
    }

    /**
     * Getter for WebCommitSignoffRequired.
     * @return Returns the Boolean
     */
    @JsonGetter("web_commit_signoff_required")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getWebCommitSignoffRequired() {
        return webCommitSignoffRequired;
    }

    /**
     * Setter for WebCommitSignoffRequired.
     * @param webCommitSignoffRequired Value for Boolean
     */
    @JsonSetter("web_commit_signoff_required")
    public void setWebCommitSignoffRequired(Boolean webCommitSignoffRequired) {
        this.webCommitSignoffRequired = webCommitSignoffRequired;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for AdvancedSecurityEnabledForNewRepositories.
     * Whether GitHub Advanced Security is enabled for new repositories and repositories transferred
     * to this organization. This field is only visible to organization owners or members of a team
     * with the security manager role.
     * @return Returns the Boolean
     */
    @JsonGetter("advanced_security_enabled_for_new_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAdvancedSecurityEnabledForNewRepositories() {
        return advancedSecurityEnabledForNewRepositories;
    }

    /**
     * Setter for AdvancedSecurityEnabledForNewRepositories.
     * Whether GitHub Advanced Security is enabled for new repositories and repositories transferred
     * to this organization. This field is only visible to organization owners or members of a team
     * with the security manager role.
     * @param advancedSecurityEnabledForNewRepositories Value for Boolean
     */
    @JsonSetter("advanced_security_enabled_for_new_repositories")
    public void setAdvancedSecurityEnabledForNewRepositories(Boolean advancedSecurityEnabledForNewRepositories) {
        this.advancedSecurityEnabledForNewRepositories = advancedSecurityEnabledForNewRepositories;
    }

    /**
     * Getter for DependabotAlertsEnabledForNewRepositories.
     * Whether GitHub Advanced Security is automatically enabled for new repositories and
     * repositories transferred to this organization. This field is only visible to organization
     * owners or members of a team with the security manager role.
     * @return Returns the Boolean
     */
    @JsonGetter("dependabot_alerts_enabled_for_new_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDependabotAlertsEnabledForNewRepositories() {
        return dependabotAlertsEnabledForNewRepositories;
    }

    /**
     * Setter for DependabotAlertsEnabledForNewRepositories.
     * Whether GitHub Advanced Security is automatically enabled for new repositories and
     * repositories transferred to this organization. This field is only visible to organization
     * owners or members of a team with the security manager role.
     * @param dependabotAlertsEnabledForNewRepositories Value for Boolean
     */
    @JsonSetter("dependabot_alerts_enabled_for_new_repositories")
    public void setDependabotAlertsEnabledForNewRepositories(Boolean dependabotAlertsEnabledForNewRepositories) {
        this.dependabotAlertsEnabledForNewRepositories = dependabotAlertsEnabledForNewRepositories;
    }

    /**
     * Getter for DependabotSecurityUpdatesEnabledForNewRepositories.
     * Whether dependabot security updates are automatically enabled for new repositories and
     * repositories transferred to this organization. This field is only visible to organization
     * owners or members of a team with the security manager role.
     * @return Returns the Boolean
     */
    @JsonGetter("dependabot_security_updates_enabled_for_new_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDependabotSecurityUpdatesEnabledForNewRepositories() {
        return dependabotSecurityUpdatesEnabledForNewRepositories;
    }

    /**
     * Setter for DependabotSecurityUpdatesEnabledForNewRepositories.
     * Whether dependabot security updates are automatically enabled for new repositories and
     * repositories transferred to this organization. This field is only visible to organization
     * owners or members of a team with the security manager role.
     * @param dependabotSecurityUpdatesEnabledForNewRepositories Value for Boolean
     */
    @JsonSetter("dependabot_security_updates_enabled_for_new_repositories")
    public void setDependabotSecurityUpdatesEnabledForNewRepositories(Boolean dependabotSecurityUpdatesEnabledForNewRepositories) {
        this.dependabotSecurityUpdatesEnabledForNewRepositories = dependabotSecurityUpdatesEnabledForNewRepositories;
    }

    /**
     * Getter for DependencyGraphEnabledForNewRepositories.
     * Whether dependency graph is automatically enabled for new repositories and repositories
     * transferred to this organization. This field is only visible to organization owners or
     * members of a team with the security manager role.
     * @return Returns the Boolean
     */
    @JsonGetter("dependency_graph_enabled_for_new_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDependencyGraphEnabledForNewRepositories() {
        return dependencyGraphEnabledForNewRepositories;
    }

    /**
     * Setter for DependencyGraphEnabledForNewRepositories.
     * Whether dependency graph is automatically enabled for new repositories and repositories
     * transferred to this organization. This field is only visible to organization owners or
     * members of a team with the security manager role.
     * @param dependencyGraphEnabledForNewRepositories Value for Boolean
     */
    @JsonSetter("dependency_graph_enabled_for_new_repositories")
    public void setDependencyGraphEnabledForNewRepositories(Boolean dependencyGraphEnabledForNewRepositories) {
        this.dependencyGraphEnabledForNewRepositories = dependencyGraphEnabledForNewRepositories;
    }

    /**
     * Getter for SecretScanningEnabledForNewRepositories.
     * Whether secret scanning is automatically enabled for new repositories and repositories
     * transferred to this organization. This field is only visible to organization owners or
     * members of a team with the security manager role.
     * @return Returns the Boolean
     */
    @JsonGetter("secret_scanning_enabled_for_new_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSecretScanningEnabledForNewRepositories() {
        return secretScanningEnabledForNewRepositories;
    }

    /**
     * Setter for SecretScanningEnabledForNewRepositories.
     * Whether secret scanning is automatically enabled for new repositories and repositories
     * transferred to this organization. This field is only visible to organization owners or
     * members of a team with the security manager role.
     * @param secretScanningEnabledForNewRepositories Value for Boolean
     */
    @JsonSetter("secret_scanning_enabled_for_new_repositories")
    public void setSecretScanningEnabledForNewRepositories(Boolean secretScanningEnabledForNewRepositories) {
        this.secretScanningEnabledForNewRepositories = secretScanningEnabledForNewRepositories;
    }

    /**
     * Getter for SecretScanningPushProtectionEnabledForNewRepositories.
     * Whether secret scanning push protection is automatically enabled for new repositories and
     * repositories transferred to this organization. This field is only visible to organization
     * owners or members of a team with the security manager role.
     * @return Returns the Boolean
     */
    @JsonGetter("secret_scanning_push_protection_enabled_for_new_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSecretScanningPushProtectionEnabledForNewRepositories() {
        return secretScanningPushProtectionEnabledForNewRepositories;
    }

    /**
     * Setter for SecretScanningPushProtectionEnabledForNewRepositories.
     * Whether secret scanning push protection is automatically enabled for new repositories and
     * repositories transferred to this organization. This field is only visible to organization
     * owners or members of a team with the security manager role.
     * @param secretScanningPushProtectionEnabledForNewRepositories Value for Boolean
     */
    @JsonSetter("secret_scanning_push_protection_enabled_for_new_repositories")
    public void setSecretScanningPushProtectionEnabledForNewRepositories(Boolean secretScanningPushProtectionEnabledForNewRepositories) {
        this.secretScanningPushProtectionEnabledForNewRepositories = secretScanningPushProtectionEnabledForNewRepositories;
    }

    /**
     * Getter for SecretScanningPushProtectionCustomLinkEnabled.
     * Whether a custom link is shown to contributors who are blocked from pushing a secret by push
     * protection.
     * @return Returns the Boolean
     */
    @JsonGetter("secret_scanning_push_protection_custom_link_enabled")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSecretScanningPushProtectionCustomLinkEnabled() {
        return secretScanningPushProtectionCustomLinkEnabled;
    }

    /**
     * Setter for SecretScanningPushProtectionCustomLinkEnabled.
     * Whether a custom link is shown to contributors who are blocked from pushing a secret by push
     * protection.
     * @param secretScanningPushProtectionCustomLinkEnabled Value for Boolean
     */
    @JsonSetter("secret_scanning_push_protection_custom_link_enabled")
    public void setSecretScanningPushProtectionCustomLinkEnabled(Boolean secretScanningPushProtectionCustomLinkEnabled) {
        this.secretScanningPushProtectionCustomLinkEnabled = secretScanningPushProtectionCustomLinkEnabled;
    }

    /**
     * Internal Getter for SecretScanningPushProtectionCustomLink.
     * An optional URL string to display to contributors who are blocked from pushing a secret.
     * @return Returns the Internal String
     */
    @JsonGetter("secret_scanning_push_protection_custom_link")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSecretScanningPushProtectionCustomLink() {
        return this.secretScanningPushProtectionCustomLink;
    }

    /**
     * Getter for SecretScanningPushProtectionCustomLink.
     * An optional URL string to display to contributors who are blocked from pushing a secret.
     * @return Returns the String
     */
    public String getSecretScanningPushProtectionCustomLink() {
        return OptionalNullable.getFrom(secretScanningPushProtectionCustomLink);
    }

    /**
     * Setter for SecretScanningPushProtectionCustomLink.
     * An optional URL string to display to contributors who are blocked from pushing a secret.
     * @param secretScanningPushProtectionCustomLink Value for String
     */
    @JsonSetter("secret_scanning_push_protection_custom_link")
    public void setSecretScanningPushProtectionCustomLink(String secretScanningPushProtectionCustomLink) {
        this.secretScanningPushProtectionCustomLink = OptionalNullable.of(secretScanningPushProtectionCustomLink);
    }

    /**
     * UnSetter for SecretScanningPushProtectionCustomLink.
     * An optional URL string to display to contributors who are blocked from pushing a secret.
     */
    public void unsetSecretScanningPushProtectionCustomLink() {
        secretScanningPushProtectionCustomLink = null;
    }

    /**
     * Converts this OrganizationFull into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "OrganizationFull [" + "login=" + login + ", id=" + id + ", nodeId=" + nodeId
                + ", url=" + url + ", reposUrl=" + reposUrl + ", eventsUrl=" + eventsUrl
                + ", hooksUrl=" + hooksUrl + ", issuesUrl=" + issuesUrl + ", membersUrl="
                + membersUrl + ", publicMembersUrl=" + publicMembersUrl + ", avatarUrl=" + avatarUrl
                + ", description=" + description + ", hasOrganizationProjects="
                + hasOrganizationProjects + ", hasRepositoryProjects=" + hasRepositoryProjects
                + ", publicRepos=" + publicRepos + ", publicGists=" + publicGists + ", followers="
                + followers + ", following=" + following + ", htmlUrl=" + htmlUrl + ", createdAt="
                + createdAt + ", type=" + type + ", updatedAt=" + updatedAt + ", name=" + name
                + ", company=" + company + ", blog=" + blog + ", location=" + location + ", email="
                + email + ", twitterUsername=" + twitterUsername + ", isVerified=" + isVerified
                + ", totalPrivateRepos=" + totalPrivateRepos + ", ownedPrivateRepos="
                + ownedPrivateRepos + ", privateGists=" + privateGists + ", diskUsage=" + diskUsage
                + ", collaborators=" + collaborators + ", billingEmail=" + billingEmail + ", plan="
                + plan + ", defaultRepositoryPermission=" + defaultRepositoryPermission
                + ", membersCanCreateRepositories=" + membersCanCreateRepositories
                + ", twoFactorRequirementEnabled=" + twoFactorRequirementEnabled
                + ", membersAllowedRepositoryCreationType=" + membersAllowedRepositoryCreationType
                + ", membersCanCreatePublicRepositories=" + membersCanCreatePublicRepositories
                + ", membersCanCreatePrivateRepositories=" + membersCanCreatePrivateRepositories
                + ", membersCanCreateInternalRepositories=" + membersCanCreateInternalRepositories
                + ", membersCanCreatePages=" + membersCanCreatePages
                + ", membersCanCreatePublicPages=" + membersCanCreatePublicPages
                + ", membersCanCreatePrivatePages=" + membersCanCreatePrivatePages
                + ", membersCanForkPrivateRepositories=" + membersCanForkPrivateRepositories
                + ", webCommitSignoffRequired=" + webCommitSignoffRequired
                + ", advancedSecurityEnabledForNewRepositories="
                + advancedSecurityEnabledForNewRepositories
                + ", dependabotAlertsEnabledForNewRepositories="
                + dependabotAlertsEnabledForNewRepositories
                + ", dependabotSecurityUpdatesEnabledForNewRepositories="
                + dependabotSecurityUpdatesEnabledForNewRepositories
                + ", dependencyGraphEnabledForNewRepositories="
                + dependencyGraphEnabledForNewRepositories
                + ", secretScanningEnabledForNewRepositories="
                + secretScanningEnabledForNewRepositories
                + ", secretScanningPushProtectionEnabledForNewRepositories="
                + secretScanningPushProtectionEnabledForNewRepositories
                + ", secretScanningPushProtectionCustomLinkEnabled="
                + secretScanningPushProtectionCustomLinkEnabled
                + ", secretScanningPushProtectionCustomLink="
                + secretScanningPushProtectionCustomLink + "]";
    }

    /**
     * Builds a new {@link OrganizationFull.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link OrganizationFull.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(login, id, nodeId, url, reposUrl, eventsUrl, hooksUrl,
                issuesUrl, membersUrl, publicMembersUrl, avatarUrl, description,
                hasOrganizationProjects, hasRepositoryProjects, publicRepos, publicGists, followers,
                following, htmlUrl, createdAt, type, updatedAt)
                .name(getName())
                .company(getCompany())
                .blog(getBlog())
                .location(getLocation())
                .email(getEmail())
                .isVerified(getIsVerified())
                .totalPrivateRepos(getTotalPrivateRepos())
                .ownedPrivateRepos(getOwnedPrivateRepos())
                .plan(getPlan())
                .membersAllowedRepositoryCreationType(getMembersAllowedRepositoryCreationType())
                .membersCanCreatePublicRepositories(getMembersCanCreatePublicRepositories())
                .membersCanCreatePrivateRepositories(getMembersCanCreatePrivateRepositories())
                .membersCanCreateInternalRepositories(getMembersCanCreateInternalRepositories())
                .membersCanCreatePages(getMembersCanCreatePages())
                .membersCanCreatePublicPages(getMembersCanCreatePublicPages())
                .membersCanCreatePrivatePages(getMembersCanCreatePrivatePages())
                .webCommitSignoffRequired(getWebCommitSignoffRequired())
                .advancedSecurityEnabledForNewRepositories(getAdvancedSecurityEnabledForNewRepositories())
                .dependabotAlertsEnabledForNewRepositories(getDependabotAlertsEnabledForNewRepositories())
                .dependabotSecurityUpdatesEnabledForNewRepositories(getDependabotSecurityUpdatesEnabledForNewRepositories())
                .dependencyGraphEnabledForNewRepositories(getDependencyGraphEnabledForNewRepositories())
                .secretScanningEnabledForNewRepositories(getSecretScanningEnabledForNewRepositories())
                .secretScanningPushProtectionEnabledForNewRepositories(getSecretScanningPushProtectionEnabledForNewRepositories())
                .secretScanningPushProtectionCustomLinkEnabled(getSecretScanningPushProtectionCustomLinkEnabled());
        builder.twitterUsername = internalGetTwitterUsername();
        builder.privateGists = internalGetPrivateGists();
        builder.diskUsage = internalGetDiskUsage();
        builder.collaborators = internalGetCollaborators();
        builder.billingEmail = internalGetBillingEmail();
        builder.defaultRepositoryPermission = internalGetDefaultRepositoryPermission();
        builder.membersCanCreateRepositories = internalGetMembersCanCreateRepositories();
        builder.twoFactorRequirementEnabled = internalGetTwoFactorRequirementEnabled();
        builder.membersCanForkPrivateRepositories = internalGetMembersCanForkPrivateRepositories();
        builder.secretScanningPushProtectionCustomLink =
                internalGetSecretScanningPushProtectionCustomLink();
        return builder;
    }

    /**
     * Class to build instances of {@link OrganizationFull}.
     */
    public static class Builder {
        private String login;
        private int id;
        private String nodeId;
        private String url;
        private String reposUrl;
        private String eventsUrl;
        private String hooksUrl;
        private String issuesUrl;
        private String membersUrl;
        private String publicMembersUrl;
        private String avatarUrl;
        private String description;
        private boolean hasOrganizationProjects;
        private boolean hasRepositoryProjects;
        private int publicRepos;
        private int publicGists;
        private int followers;
        private int following;
        private String htmlUrl;
        private LocalDateTime createdAt;
        private String type;
        private LocalDateTime updatedAt;
        private String name;
        private String company;
        private String blog;
        private String location;
        private String email;
        private OptionalNullable<String> twitterUsername;
        private Boolean isVerified;
        private Integer totalPrivateRepos;
        private Integer ownedPrivateRepos;
        private OptionalNullable<Integer> privateGists;
        private OptionalNullable<Integer> diskUsage;
        private OptionalNullable<Integer> collaborators;
        private OptionalNullable<String> billingEmail;
        private Plan1 plan;
        private OptionalNullable<String> defaultRepositoryPermission;
        private OptionalNullable<Boolean> membersCanCreateRepositories;
        private OptionalNullable<Boolean> twoFactorRequirementEnabled;
        private String membersAllowedRepositoryCreationType;
        private Boolean membersCanCreatePublicRepositories;
        private Boolean membersCanCreatePrivateRepositories;
        private Boolean membersCanCreateInternalRepositories;
        private Boolean membersCanCreatePages;
        private Boolean membersCanCreatePublicPages;
        private Boolean membersCanCreatePrivatePages;
        private OptionalNullable<Boolean> membersCanForkPrivateRepositories;
        private Boolean webCommitSignoffRequired;
        private Boolean advancedSecurityEnabledForNewRepositories;
        private Boolean dependabotAlertsEnabledForNewRepositories;
        private Boolean dependabotSecurityUpdatesEnabledForNewRepositories;
        private Boolean dependencyGraphEnabledForNewRepositories;
        private Boolean secretScanningEnabledForNewRepositories;
        private Boolean secretScanningPushProtectionEnabledForNewRepositories;
        private Boolean secretScanningPushProtectionCustomLinkEnabled;
        private OptionalNullable<String> secretScanningPushProtectionCustomLink;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  login  String value for login.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  url  String value for url.
         * @param  reposUrl  String value for reposUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @param  hooksUrl  String value for hooksUrl.
         * @param  issuesUrl  String value for issuesUrl.
         * @param  membersUrl  String value for membersUrl.
         * @param  publicMembersUrl  String value for publicMembersUrl.
         * @param  avatarUrl  String value for avatarUrl.
         * @param  description  String value for description.
         * @param  hasOrganizationProjects  boolean value for hasOrganizationProjects.
         * @param  hasRepositoryProjects  boolean value for hasRepositoryProjects.
         * @param  publicRepos  int value for publicRepos.
         * @param  publicGists  int value for publicGists.
         * @param  followers  int value for followers.
         * @param  following  int value for following.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  type  String value for type.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         */
        public Builder(String login, int id, String nodeId, String url, String reposUrl,
                String eventsUrl, String hooksUrl, String issuesUrl, String membersUrl,
                String publicMembersUrl, String avatarUrl, String description,
                boolean hasOrganizationProjects, boolean hasRepositoryProjects, int publicRepos,
                int publicGists, int followers, int following, String htmlUrl,
                LocalDateTime createdAt, String type, LocalDateTime updatedAt) {
            this.login = login;
            this.id = id;
            this.nodeId = nodeId;
            this.url = url;
            this.reposUrl = reposUrl;
            this.eventsUrl = eventsUrl;
            this.hooksUrl = hooksUrl;
            this.issuesUrl = issuesUrl;
            this.membersUrl = membersUrl;
            this.publicMembersUrl = publicMembersUrl;
            this.avatarUrl = avatarUrl;
            this.description = description;
            this.hasOrganizationProjects = hasOrganizationProjects;
            this.hasRepositoryProjects = hasRepositoryProjects;
            this.publicRepos = publicRepos;
            this.publicGists = publicGists;
            this.followers = followers;
            this.following = following;
            this.htmlUrl = htmlUrl;
            this.createdAt = createdAt;
            this.type = type;
            this.updatedAt = updatedAt;
        }

        /**
         * Setter for login.
         * @param  login  String value for login.
         * @return Builder
         */
        public Builder login(String login) {
            this.login = login;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for reposUrl.
         * @param  reposUrl  String value for reposUrl.
         * @return Builder
         */
        public Builder reposUrl(String reposUrl) {
            this.reposUrl = reposUrl;
            return this;
        }

        /**
         * Setter for eventsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @return Builder
         */
        public Builder eventsUrl(String eventsUrl) {
            this.eventsUrl = eventsUrl;
            return this;
        }

        /**
         * Setter for hooksUrl.
         * @param  hooksUrl  String value for hooksUrl.
         * @return Builder
         */
        public Builder hooksUrl(String hooksUrl) {
            this.hooksUrl = hooksUrl;
            return this;
        }

        /**
         * Setter for issuesUrl.
         * @param  issuesUrl  String value for issuesUrl.
         * @return Builder
         */
        public Builder issuesUrl(String issuesUrl) {
            this.issuesUrl = issuesUrl;
            return this;
        }

        /**
         * Setter for membersUrl.
         * @param  membersUrl  String value for membersUrl.
         * @return Builder
         */
        public Builder membersUrl(String membersUrl) {
            this.membersUrl = membersUrl;
            return this;
        }

        /**
         * Setter for publicMembersUrl.
         * @param  publicMembersUrl  String value for publicMembersUrl.
         * @return Builder
         */
        public Builder publicMembersUrl(String publicMembersUrl) {
            this.publicMembersUrl = publicMembersUrl;
            return this;
        }

        /**
         * Setter for avatarUrl.
         * @param  avatarUrl  String value for avatarUrl.
         * @return Builder
         */
        public Builder avatarUrl(String avatarUrl) {
            this.avatarUrl = avatarUrl;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for hasOrganizationProjects.
         * @param  hasOrganizationProjects  boolean value for hasOrganizationProjects.
         * @return Builder
         */
        public Builder hasOrganizationProjects(boolean hasOrganizationProjects) {
            this.hasOrganizationProjects = hasOrganizationProjects;
            return this;
        }

        /**
         * Setter for hasRepositoryProjects.
         * @param  hasRepositoryProjects  boolean value for hasRepositoryProjects.
         * @return Builder
         */
        public Builder hasRepositoryProjects(boolean hasRepositoryProjects) {
            this.hasRepositoryProjects = hasRepositoryProjects;
            return this;
        }

        /**
         * Setter for publicRepos.
         * @param  publicRepos  int value for publicRepos.
         * @return Builder
         */
        public Builder publicRepos(int publicRepos) {
            this.publicRepos = publicRepos;
            return this;
        }

        /**
         * Setter for publicGists.
         * @param  publicGists  int value for publicGists.
         * @return Builder
         */
        public Builder publicGists(int publicGists) {
            this.publicGists = publicGists;
            return this;
        }

        /**
         * Setter for followers.
         * @param  followers  int value for followers.
         * @return Builder
         */
        public Builder followers(int followers) {
            this.followers = followers;
            return this;
        }

        /**
         * Setter for following.
         * @param  following  int value for following.
         * @return Builder
         */
        public Builder following(int following) {
            this.following = following;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for company.
         * @param  company  String value for company.
         * @return Builder
         */
        public Builder company(String company) {
            this.company = company;
            return this;
        }

        /**
         * Setter for blog.
         * @param  blog  String value for blog.
         * @return Builder
         */
        public Builder blog(String blog) {
            this.blog = blog;
            return this;
        }

        /**
         * Setter for location.
         * @param  location  String value for location.
         * @return Builder
         */
        public Builder location(String location) {
            this.location = location;
            return this;
        }

        /**
         * Setter for email.
         * @param  email  String value for email.
         * @return Builder
         */
        public Builder email(String email) {
            this.email = email;
            return this;
        }

        /**
         * Setter for twitterUsername.
         * @param  twitterUsername  String value for twitterUsername.
         * @return Builder
         */
        public Builder twitterUsername(String twitterUsername) {
            this.twitterUsername = OptionalNullable.of(twitterUsername);
            return this;
        }

        /**
         * UnSetter for twitterUsername.
         * @return Builder
         */
        public Builder unsetTwitterUsername() {
            twitterUsername = null;
            return this;
        }

        /**
         * Setter for isVerified.
         * @param  isVerified  Boolean value for isVerified.
         * @return Builder
         */
        public Builder isVerified(Boolean isVerified) {
            this.isVerified = isVerified;
            return this;
        }

        /**
         * Setter for totalPrivateRepos.
         * @param  totalPrivateRepos  Integer value for totalPrivateRepos.
         * @return Builder
         */
        public Builder totalPrivateRepos(Integer totalPrivateRepos) {
            this.totalPrivateRepos = totalPrivateRepos;
            return this;
        }

        /**
         * Setter for ownedPrivateRepos.
         * @param  ownedPrivateRepos  Integer value for ownedPrivateRepos.
         * @return Builder
         */
        public Builder ownedPrivateRepos(Integer ownedPrivateRepos) {
            this.ownedPrivateRepos = ownedPrivateRepos;
            return this;
        }

        /**
         * Setter for privateGists.
         * @param  privateGists  Integer value for privateGists.
         * @return Builder
         */
        public Builder privateGists(Integer privateGists) {
            this.privateGists = OptionalNullable.of(privateGists);
            return this;
        }

        /**
         * UnSetter for privateGists.
         * @return Builder
         */
        public Builder unsetPrivateGists() {
            privateGists = null;
            return this;
        }

        /**
         * Setter for diskUsage.
         * @param  diskUsage  Integer value for diskUsage.
         * @return Builder
         */
        public Builder diskUsage(Integer diskUsage) {
            this.diskUsage = OptionalNullable.of(diskUsage);
            return this;
        }

        /**
         * UnSetter for diskUsage.
         * @return Builder
         */
        public Builder unsetDiskUsage() {
            diskUsage = null;
            return this;
        }

        /**
         * Setter for collaborators.
         * @param  collaborators  Integer value for collaborators.
         * @return Builder
         */
        public Builder collaborators(Integer collaborators) {
            this.collaborators = OptionalNullable.of(collaborators);
            return this;
        }

        /**
         * UnSetter for collaborators.
         * @return Builder
         */
        public Builder unsetCollaborators() {
            collaborators = null;
            return this;
        }

        /**
         * Setter for billingEmail.
         * @param  billingEmail  String value for billingEmail.
         * @return Builder
         */
        public Builder billingEmail(String billingEmail) {
            this.billingEmail = OptionalNullable.of(billingEmail);
            return this;
        }

        /**
         * UnSetter for billingEmail.
         * @return Builder
         */
        public Builder unsetBillingEmail() {
            billingEmail = null;
            return this;
        }

        /**
         * Setter for plan.
         * @param  plan  Plan1 value for plan.
         * @return Builder
         */
        public Builder plan(Plan1 plan) {
            this.plan = plan;
            return this;
        }

        /**
         * Setter for defaultRepositoryPermission.
         * @param  defaultRepositoryPermission  String value for defaultRepositoryPermission.
         * @return Builder
         */
        public Builder defaultRepositoryPermission(String defaultRepositoryPermission) {
            this.defaultRepositoryPermission = OptionalNullable.of(defaultRepositoryPermission);
            return this;
        }

        /**
         * UnSetter for defaultRepositoryPermission.
         * @return Builder
         */
        public Builder unsetDefaultRepositoryPermission() {
            defaultRepositoryPermission = null;
            return this;
        }

        /**
         * Setter for membersCanCreateRepositories.
         * @param  membersCanCreateRepositories  Boolean value for membersCanCreateRepositories.
         * @return Builder
         */
        public Builder membersCanCreateRepositories(Boolean membersCanCreateRepositories) {
            this.membersCanCreateRepositories = OptionalNullable.of(membersCanCreateRepositories);
            return this;
        }

        /**
         * UnSetter for membersCanCreateRepositories.
         * @return Builder
         */
        public Builder unsetMembersCanCreateRepositories() {
            membersCanCreateRepositories = null;
            return this;
        }

        /**
         * Setter for twoFactorRequirementEnabled.
         * @param  twoFactorRequirementEnabled  Boolean value for twoFactorRequirementEnabled.
         * @return Builder
         */
        public Builder twoFactorRequirementEnabled(Boolean twoFactorRequirementEnabled) {
            this.twoFactorRequirementEnabled = OptionalNullable.of(twoFactorRequirementEnabled);
            return this;
        }

        /**
         * UnSetter for twoFactorRequirementEnabled.
         * @return Builder
         */
        public Builder unsetTwoFactorRequirementEnabled() {
            twoFactorRequirementEnabled = null;
            return this;
        }

        /**
         * Setter for membersAllowedRepositoryCreationType.
         * @param  membersAllowedRepositoryCreationType  String value for
         *         membersAllowedRepositoryCreationType.
         * @return Builder
         */
        public Builder membersAllowedRepositoryCreationType(
                String membersAllowedRepositoryCreationType) {
            this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
            return this;
        }

        /**
         * Setter for membersCanCreatePublicRepositories.
         * @param  membersCanCreatePublicRepositories  Boolean value for
         *         membersCanCreatePublicRepositories.
         * @return Builder
         */
        public Builder membersCanCreatePublicRepositories(
                Boolean membersCanCreatePublicRepositories) {
            this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
            return this;
        }

        /**
         * Setter for membersCanCreatePrivateRepositories.
         * @param  membersCanCreatePrivateRepositories  Boolean value for
         *         membersCanCreatePrivateRepositories.
         * @return Builder
         */
        public Builder membersCanCreatePrivateRepositories(
                Boolean membersCanCreatePrivateRepositories) {
            this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
            return this;
        }

        /**
         * Setter for membersCanCreateInternalRepositories.
         * @param  membersCanCreateInternalRepositories  Boolean value for
         *         membersCanCreateInternalRepositories.
         * @return Builder
         */
        public Builder membersCanCreateInternalRepositories(
                Boolean membersCanCreateInternalRepositories) {
            this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
            return this;
        }

        /**
         * Setter for membersCanCreatePages.
         * @param  membersCanCreatePages  Boolean value for membersCanCreatePages.
         * @return Builder
         */
        public Builder membersCanCreatePages(Boolean membersCanCreatePages) {
            this.membersCanCreatePages = membersCanCreatePages;
            return this;
        }

        /**
         * Setter for membersCanCreatePublicPages.
         * @param  membersCanCreatePublicPages  Boolean value for membersCanCreatePublicPages.
         * @return Builder
         */
        public Builder membersCanCreatePublicPages(Boolean membersCanCreatePublicPages) {
            this.membersCanCreatePublicPages = membersCanCreatePublicPages;
            return this;
        }

        /**
         * Setter for membersCanCreatePrivatePages.
         * @param  membersCanCreatePrivatePages  Boolean value for membersCanCreatePrivatePages.
         * @return Builder
         */
        public Builder membersCanCreatePrivatePages(Boolean membersCanCreatePrivatePages) {
            this.membersCanCreatePrivatePages = membersCanCreatePrivatePages;
            return this;
        }

        /**
         * Setter for membersCanForkPrivateRepositories.
         * @param  membersCanForkPrivateRepositories  Boolean value for
         *         membersCanForkPrivateRepositories.
         * @return Builder
         */
        public Builder membersCanForkPrivateRepositories(
                Boolean membersCanForkPrivateRepositories) {
            this.membersCanForkPrivateRepositories =
                    OptionalNullable.of(membersCanForkPrivateRepositories);
            return this;
        }

        /**
         * UnSetter for membersCanForkPrivateRepositories.
         * @return Builder
         */
        public Builder unsetMembersCanForkPrivateRepositories() {
            membersCanForkPrivateRepositories = null;
            return this;
        }

        /**
         * Setter for webCommitSignoffRequired.
         * @param  webCommitSignoffRequired  Boolean value for webCommitSignoffRequired.
         * @return Builder
         */
        public Builder webCommitSignoffRequired(Boolean webCommitSignoffRequired) {
            this.webCommitSignoffRequired = webCommitSignoffRequired;
            return this;
        }

        /**
         * Setter for advancedSecurityEnabledForNewRepositories.
         * @param  advancedSecurityEnabledForNewRepositories  Boolean value for
         *         advancedSecurityEnabledForNewRepositories.
         * @return Builder
         */
        public Builder advancedSecurityEnabledForNewRepositories(
                Boolean advancedSecurityEnabledForNewRepositories) {
            this.advancedSecurityEnabledForNewRepositories =
                    advancedSecurityEnabledForNewRepositories;
            return this;
        }

        /**
         * Setter for dependabotAlertsEnabledForNewRepositories.
         * @param  dependabotAlertsEnabledForNewRepositories  Boolean value for
         *         dependabotAlertsEnabledForNewRepositories.
         * @return Builder
         */
        public Builder dependabotAlertsEnabledForNewRepositories(
                Boolean dependabotAlertsEnabledForNewRepositories) {
            this.dependabotAlertsEnabledForNewRepositories =
                    dependabotAlertsEnabledForNewRepositories;
            return this;
        }

        /**
         * Setter for dependabotSecurityUpdatesEnabledForNewRepositories.
         * @param  dependabotSecurityUpdatesEnabledForNewRepositories  Boolean value for
         *         dependabotSecurityUpdatesEnabledForNewRepositories.
         * @return Builder
         */
        public Builder dependabotSecurityUpdatesEnabledForNewRepositories(
                Boolean dependabotSecurityUpdatesEnabledForNewRepositories) {
            this.dependabotSecurityUpdatesEnabledForNewRepositories =
                    dependabotSecurityUpdatesEnabledForNewRepositories;
            return this;
        }

        /**
         * Setter for dependencyGraphEnabledForNewRepositories.
         * @param  dependencyGraphEnabledForNewRepositories  Boolean value for
         *         dependencyGraphEnabledForNewRepositories.
         * @return Builder
         */
        public Builder dependencyGraphEnabledForNewRepositories(
                Boolean dependencyGraphEnabledForNewRepositories) {
            this.dependencyGraphEnabledForNewRepositories =
                    dependencyGraphEnabledForNewRepositories;
            return this;
        }

        /**
         * Setter for secretScanningEnabledForNewRepositories.
         * @param  secretScanningEnabledForNewRepositories  Boolean value for
         *         secretScanningEnabledForNewRepositories.
         * @return Builder
         */
        public Builder secretScanningEnabledForNewRepositories(
                Boolean secretScanningEnabledForNewRepositories) {
            this.secretScanningEnabledForNewRepositories = secretScanningEnabledForNewRepositories;
            return this;
        }

        /**
         * Setter for secretScanningPushProtectionEnabledForNewRepositories.
         * @param  secretScanningPushProtectionEnabledForNewRepositories  Boolean value for
         *         secretScanningPushProtectionEnabledForNewRepositories.
         * @return Builder
         */
        public Builder secretScanningPushProtectionEnabledForNewRepositories(
                Boolean secretScanningPushProtectionEnabledForNewRepositories) {
            this.secretScanningPushProtectionEnabledForNewRepositories =
                    secretScanningPushProtectionEnabledForNewRepositories;
            return this;
        }

        /**
         * Setter for secretScanningPushProtectionCustomLinkEnabled.
         * @param  secretScanningPushProtectionCustomLinkEnabled  Boolean value for
         *         secretScanningPushProtectionCustomLinkEnabled.
         * @return Builder
         */
        public Builder secretScanningPushProtectionCustomLinkEnabled(
                Boolean secretScanningPushProtectionCustomLinkEnabled) {
            this.secretScanningPushProtectionCustomLinkEnabled =
                    secretScanningPushProtectionCustomLinkEnabled;
            return this;
        }

        /**
         * Setter for secretScanningPushProtectionCustomLink.
         * @param  secretScanningPushProtectionCustomLink  String value for
         *         secretScanningPushProtectionCustomLink.
         * @return Builder
         */
        public Builder secretScanningPushProtectionCustomLink(
                String secretScanningPushProtectionCustomLink) {
            this.secretScanningPushProtectionCustomLink =
                    OptionalNullable.of(secretScanningPushProtectionCustomLink);
            return this;
        }

        /**
         * UnSetter for secretScanningPushProtectionCustomLink.
         * @return Builder
         */
        public Builder unsetSecretScanningPushProtectionCustomLink() {
            secretScanningPushProtectionCustomLink = null;
            return this;
        }

        /**
         * Builds a new {@link OrganizationFull} object using the set fields.
         * @return {@link OrganizationFull}
         */
        public OrganizationFull build() {
            return new OrganizationFull(login, id, nodeId, url, reposUrl, eventsUrl, hooksUrl,
                    issuesUrl, membersUrl, publicMembersUrl, avatarUrl, description,
                    hasOrganizationProjects, hasRepositoryProjects, publicRepos, publicGists,
                    followers, following, htmlUrl, createdAt, type, updatedAt, name, company, blog,
                    location, email, twitterUsername, isVerified, totalPrivateRepos,
                    ownedPrivateRepos, privateGists, diskUsage, collaborators, billingEmail, plan,
                    defaultRepositoryPermission, membersCanCreateRepositories,
                    twoFactorRequirementEnabled, membersAllowedRepositoryCreationType,
                    membersCanCreatePublicRepositories, membersCanCreatePrivateRepositories,
                    membersCanCreateInternalRepositories, membersCanCreatePages,
                    membersCanCreatePublicPages, membersCanCreatePrivatePages,
                    membersCanForkPrivateRepositories, webCommitSignoffRequired,
                    advancedSecurityEnabledForNewRepositories,
                    dependabotAlertsEnabledForNewRepositories,
                    dependabotSecurityUpdatesEnabledForNewRepositories,
                    dependencyGraphEnabledForNewRepositories,
                    secretScanningEnabledForNewRepositories,
                    secretScanningPushProtectionEnabledForNewRepositories,
                    secretScanningPushProtectionCustomLinkEnabled,
                    secretScanningPushProtectionCustomLink);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for Statusevent type.
 */
public class Statusevent {
    private OptionalNullable<String> avatarUrl;
    private List<Branch> branches;
    private Commit10 commit;
    private String context;
    private String createdAt;
    private String description;
    private Enterprise1 enterprise;
    private int id;
    private Installation1 installation;
    private String name;
    private Organization2 organization;
    private Repository3 repository;
    private Sender sender;
    private String sha;
    private State165Enum state;
    private String targetUrl;
    private String updatedAt;

    /**
     * Default constructor.
     */
    public Statusevent() {
    }

    /**
     * Initialization constructor.
     * @param  branches  List of Branch value for branches.
     * @param  commit  Commit10 value for commit.
     * @param  context  String value for context.
     * @param  createdAt  String value for createdAt.
     * @param  description  String value for description.
     * @param  id  int value for id.
     * @param  name  String value for name.
     * @param  repository  Repository3 value for repository.
     * @param  sender  Sender value for sender.
     * @param  sha  String value for sha.
     * @param  state  State165Enum value for state.
     * @param  targetUrl  String value for targetUrl.
     * @param  updatedAt  String value for updatedAt.
     * @param  avatarUrl  String value for avatarUrl.
     * @param  enterprise  Enterprise1 value for enterprise.
     * @param  installation  Installation1 value for installation.
     * @param  organization  Organization2 value for organization.
     */
    public Statusevent(
            List<Branch> branches,
            Commit10 commit,
            String context,
            String createdAt,
            String description,
            int id,
            String name,
            Repository3 repository,
            Sender sender,
            String sha,
            State165Enum state,
            String targetUrl,
            String updatedAt,
            String avatarUrl,
            Enterprise1 enterprise,
            Installation1 installation,
            Organization2 organization) {
        this.avatarUrl = OptionalNullable.of(avatarUrl);
        this.branches = branches;
        this.commit = commit;
        this.context = context;
        this.createdAt = createdAt;
        this.description = description;
        this.enterprise = enterprise;
        this.id = id;
        this.installation = installation;
        this.name = name;
        this.organization = organization;
        this.repository = repository;
        this.sender = sender;
        this.sha = sha;
        this.state = state;
        this.targetUrl = targetUrl;
        this.updatedAt = updatedAt;
    }

    /**
     * Internal initialization constructor.
     */
    protected Statusevent(List<Branch> branches, Commit10 commit, String context, String createdAt,
            String description, int id, String name, Repository3 repository, Sender sender,
            String sha, State165Enum state, String targetUrl, String updatedAt,
            OptionalNullable<String> avatarUrl, Enterprise1 enterprise, Installation1 installation,
            Organization2 organization) {
        this.avatarUrl = avatarUrl;
        this.branches = branches;
        this.commit = commit;
        this.context = context;
        this.createdAt = createdAt;
        this.description = description;
        this.enterprise = enterprise;
        this.id = id;
        this.installation = installation;
        this.name = name;
        this.organization = organization;
        this.repository = repository;
        this.sender = sender;
        this.sha = sha;
        this.state = state;
        this.targetUrl = targetUrl;
        this.updatedAt = updatedAt;
    }

    /**
     * Internal Getter for AvatarUrl.
     * @return Returns the Internal String
     */
    @JsonGetter("avatar_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAvatarUrl() {
        return this.avatarUrl;
    }

    /**
     * Getter for AvatarUrl.
     * @return Returns the String
     */
    public String getAvatarUrl() {
        return OptionalNullable.getFrom(avatarUrl);
    }

    /**
     * Setter for AvatarUrl.
     * @param avatarUrl Value for String
     */
    @JsonSetter("avatar_url")
    public void setAvatarUrl(String avatarUrl) {
        this.avatarUrl = OptionalNullable.of(avatarUrl);
    }

    /**
     * UnSetter for AvatarUrl.
     */
    public void unsetAvatarUrl() {
        avatarUrl = null;
    }

    /**
     * Getter for Branches.
     * An array of branch objects containing the status' SHA. Each branch contains the given SHA,
     * but the SHA may or may not be the head of the branch. The array includes a maximum of 10
     * branches.
     * @return Returns the List of Branch
     */
    @JsonGetter("branches")
    public List<Branch> getBranches() {
        return branches;
    }

    /**
     * Setter for Branches.
     * An array of branch objects containing the status' SHA. Each branch contains the given SHA,
     * but the SHA may or may not be the head of the branch. The array includes a maximum of 10
     * branches.
     * @param branches Value for List of Branch
     */
    @JsonSetter("branches")
    public void setBranches(List<Branch> branches) {
        this.branches = branches;
    }

    /**
     * Getter for Commit.
     * @return Returns the Commit10
     */
    @JsonGetter("commit")
    public Commit10 getCommit() {
        return commit;
    }

    /**
     * Setter for Commit.
     * @param commit Value for Commit10
     */
    @JsonSetter("commit")
    public void setCommit(Commit10 commit) {
        this.commit = commit;
    }

    /**
     * Getter for Context.
     * @return Returns the String
     */
    @JsonGetter("context")
    public String getContext() {
        return context;
    }

    /**
     * Setter for Context.
     * @param context Value for String
     */
    @JsonSetter("context")
    public void setContext(String context) {
        this.context = context;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the String
     */
    @JsonGetter("created_at")
    public String getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for String
     */
    @JsonSetter("created_at")
    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for Description.
     * The optional human-readable description added to the status.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * The optional human-readable description added to the status.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Enterprise.
     * @return Returns the Enterprise1
     */
    @JsonGetter("enterprise")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Enterprise1 getEnterprise() {
        return enterprise;
    }

    /**
     * Setter for Enterprise.
     * @param enterprise Value for Enterprise1
     */
    @JsonSetter("enterprise")
    public void setEnterprise(Enterprise1 enterprise) {
        this.enterprise = enterprise;
    }

    /**
     * Getter for Id.
     * The unique identifier of the status.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The unique identifier of the status.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for Installation.
     * @return Returns the Installation1
     */
    @JsonGetter("installation")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Installation1 getInstallation() {
        return installation;
    }

    /**
     * Setter for Installation.
     * @param installation Value for Installation1
     */
    @JsonSetter("installation")
    public void setInstallation(Installation1 installation) {
        this.installation = installation;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Organization.
     * @return Returns the Organization2
     */
    @JsonGetter("organization")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Organization2 getOrganization() {
        return organization;
    }

    /**
     * Setter for Organization.
     * @param organization Value for Organization2
     */
    @JsonSetter("organization")
    public void setOrganization(Organization2 organization) {
        this.organization = organization;
    }

    /**
     * Getter for Repository.
     * @return Returns the Repository3
     */
    @JsonGetter("repository")
    public Repository3 getRepository() {
        return repository;
    }

    /**
     * Setter for Repository.
     * @param repository Value for Repository3
     */
    @JsonSetter("repository")
    public void setRepository(Repository3 repository) {
        this.repository = repository;
    }

    /**
     * Getter for Sender.
     * @return Returns the Sender
     */
    @JsonGetter("sender")
    public Sender getSender() {
        return sender;
    }

    /**
     * Setter for Sender.
     * @param sender Value for Sender
     */
    @JsonSetter("sender")
    public void setSender(Sender sender) {
        this.sender = sender;
    }

    /**
     * Getter for Sha.
     * The Commit SHA.
     * @return Returns the String
     */
    @JsonGetter("sha")
    public String getSha() {
        return sha;
    }

    /**
     * Setter for Sha.
     * The Commit SHA.
     * @param sha Value for String
     */
    @JsonSetter("sha")
    public void setSha(String sha) {
        this.sha = sha;
    }

    /**
     * Getter for State.
     * @return Returns the State165Enum
     */
    @JsonGetter("state")
    public State165Enum getState() {
        return state;
    }

    /**
     * Setter for State.
     * @param state Value for State165Enum
     */
    @JsonSetter("state")
    public void setState(State165Enum state) {
        this.state = state;
    }

    /**
     * Getter for TargetUrl.
     * The optional link added to the status.
     * @return Returns the String
     */
    @JsonGetter("target_url")
    public String getTargetUrl() {
        return targetUrl;
    }

    /**
     * Setter for TargetUrl.
     * The optional link added to the status.
     * @param targetUrl Value for String
     */
    @JsonSetter("target_url")
    public void setTargetUrl(String targetUrl) {
        this.targetUrl = targetUrl;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the String
     */
    @JsonGetter("updated_at")
    public String getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for String
     */
    @JsonSetter("updated_at")
    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Converts this Statusevent into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Statusevent [" + "branches=" + branches + ", commit=" + commit + ", context="
                + context + ", createdAt=" + createdAt + ", description=" + description + ", id="
                + id + ", name=" + name + ", repository=" + repository + ", sender=" + sender
                + ", sha=" + sha + ", state=" + state + ", targetUrl=" + targetUrl + ", updatedAt="
                + updatedAt + ", avatarUrl=" + avatarUrl + ", enterprise=" + enterprise
                + ", installation=" + installation + ", organization=" + organization + "]";
    }

    /**
     * Builds a new {@link Statusevent.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Statusevent.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(branches, commit, context, createdAt, description, id, name,
                repository, sender, sha, state, targetUrl, updatedAt)
                .enterprise(getEnterprise())
                .installation(getInstallation())
                .organization(getOrganization());
        builder.avatarUrl = internalGetAvatarUrl();
        return builder;
    }

    /**
     * Class to build instances of {@link Statusevent}.
     */
    public static class Builder {
        private List<Branch> branches;
        private Commit10 commit;
        private String context;
        private String createdAt;
        private String description;
        private int id;
        private String name;
        private Repository3 repository;
        private Sender sender;
        private String sha;
        private State165Enum state;
        private String targetUrl;
        private String updatedAt;
        private OptionalNullable<String> avatarUrl;
        private Enterprise1 enterprise;
        private Installation1 installation;
        private Organization2 organization;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  branches  List of Branch value for branches.
         * @param  commit  Commit10 value for commit.
         * @param  context  String value for context.
         * @param  createdAt  String value for createdAt.
         * @param  description  String value for description.
         * @param  id  int value for id.
         * @param  name  String value for name.
         * @param  repository  Repository3 value for repository.
         * @param  sender  Sender value for sender.
         * @param  sha  String value for sha.
         * @param  state  State165Enum value for state.
         * @param  targetUrl  String value for targetUrl.
         * @param  updatedAt  String value for updatedAt.
         */
        public Builder(List<Branch> branches, Commit10 commit, String context, String createdAt,
                String description, int id, String name, Repository3 repository, Sender sender,
                String sha, State165Enum state, String targetUrl, String updatedAt) {
            this.branches = branches;
            this.commit = commit;
            this.context = context;
            this.createdAt = createdAt;
            this.description = description;
            this.id = id;
            this.name = name;
            this.repository = repository;
            this.sender = sender;
            this.sha = sha;
            this.state = state;
            this.targetUrl = targetUrl;
            this.updatedAt = updatedAt;
        }

        /**
         * Setter for branches.
         * @param  branches  List of Branch value for branches.
         * @return Builder
         */
        public Builder branches(List<Branch> branches) {
            this.branches = branches;
            return this;
        }

        /**
         * Setter for commit.
         * @param  commit  Commit10 value for commit.
         * @return Builder
         */
        public Builder commit(Commit10 commit) {
            this.commit = commit;
            return this;
        }

        /**
         * Setter for context.
         * @param  context  String value for context.
         * @return Builder
         */
        public Builder context(String context) {
            this.context = context;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  String value for createdAt.
         * @return Builder
         */
        public Builder createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for repository.
         * @param  repository  Repository3 value for repository.
         * @return Builder
         */
        public Builder repository(Repository3 repository) {
            this.repository = repository;
            return this;
        }

        /**
         * Setter for sender.
         * @param  sender  Sender value for sender.
         * @return Builder
         */
        public Builder sender(Sender sender) {
            this.sender = sender;
            return this;
        }

        /**
         * Setter for sha.
         * @param  sha  String value for sha.
         * @return Builder
         */
        public Builder sha(String sha) {
            this.sha = sha;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  State165Enum value for state.
         * @return Builder
         */
        public Builder state(State165Enum state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for targetUrl.
         * @param  targetUrl  String value for targetUrl.
         * @return Builder
         */
        public Builder targetUrl(String targetUrl) {
            this.targetUrl = targetUrl;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  String value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for avatarUrl.
         * @param  avatarUrl  String value for avatarUrl.
         * @return Builder
         */
        public Builder avatarUrl(String avatarUrl) {
            this.avatarUrl = OptionalNullable.of(avatarUrl);
            return this;
        }

        /**
         * UnSetter for avatarUrl.
         * @return Builder
         */
        public Builder unsetAvatarUrl() {
            avatarUrl = null;
            return this;
        }

        /**
         * Setter for enterprise.
         * @param  enterprise  Enterprise1 value for enterprise.
         * @return Builder
         */
        public Builder enterprise(Enterprise1 enterprise) {
            this.enterprise = enterprise;
            return this;
        }

        /**
         * Setter for installation.
         * @param  installation  Installation1 value for installation.
         * @return Builder
         */
        public Builder installation(Installation1 installation) {
            this.installation = installation;
            return this;
        }

        /**
         * Setter for organization.
         * @param  organization  Organization2 value for organization.
         * @return Builder
         */
        public Builder organization(Organization2 organization) {
            this.organization = organization;
            return this;
        }

        /**
         * Builds a new {@link Statusevent} object using the set fields.
         * @return {@link Statusevent}
         */
        public Statusevent build() {
            return new Statusevent(branches, commit, context, createdAt, description, id, name,
                    repository, sender, sha, state, targetUrl, updatedAt, avatarUrl, enterprise,
                    installation, organization);
        }
    }
}

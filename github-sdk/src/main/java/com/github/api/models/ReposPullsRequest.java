/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for ReposPullsRequest type.
 */
public class ReposPullsRequest {
    private String title;
    private String head;
    private String base;
    private String body;
    private Boolean maintainerCanModify;
    private Boolean draft;
    private Integer issue;

    /**
     * Default constructor.
     */
    public ReposPullsRequest() {
    }

    /**
     * Initialization constructor.
     * @param  head  String value for head.
     * @param  base  String value for base.
     * @param  title  String value for title.
     * @param  body  String value for body.
     * @param  maintainerCanModify  Boolean value for maintainerCanModify.
     * @param  draft  Boolean value for draft.
     * @param  issue  Integer value for issue.
     */
    public ReposPullsRequest(
            String head,
            String base,
            String title,
            String body,
            Boolean maintainerCanModify,
            Boolean draft,
            Integer issue) {
        this.title = title;
        this.head = head;
        this.base = base;
        this.body = body;
        this.maintainerCanModify = maintainerCanModify;
        this.draft = draft;
        this.issue = issue;
    }

    /**
     * Getter for Title.
     * The title of the new pull request. Required unless `issue` is specified.
     * @return Returns the String
     */
    @JsonGetter("title")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTitle() {
        return title;
    }

    /**
     * Setter for Title.
     * The title of the new pull request. Required unless `issue` is specified.
     * @param title Value for String
     */
    @JsonSetter("title")
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Getter for Head.
     * The name of the branch where your changes are implemented. For cross-repository pull requests
     * in the same network, namespace `head` with a user like this: `username:branch`.
     * @return Returns the String
     */
    @JsonGetter("head")
    public String getHead() {
        return head;
    }

    /**
     * Setter for Head.
     * The name of the branch where your changes are implemented. For cross-repository pull requests
     * in the same network, namespace `head` with a user like this: `username:branch`.
     * @param head Value for String
     */
    @JsonSetter("head")
    public void setHead(String head) {
        this.head = head;
    }

    /**
     * Getter for Base.
     * The name of the branch you want the changes pulled into. This should be an existing branch on
     * the current repository. You cannot submit a pull request to one repository that requests a
     * merge to a base of another repository.
     * @return Returns the String
     */
    @JsonGetter("base")
    public String getBase() {
        return base;
    }

    /**
     * Setter for Base.
     * The name of the branch you want the changes pulled into. This should be an existing branch on
     * the current repository. You cannot submit a pull request to one repository that requests a
     * merge to a base of another repository.
     * @param base Value for String
     */
    @JsonSetter("base")
    public void setBase(String base) {
        this.base = base;
    }

    /**
     * Getter for Body.
     * The contents of the pull request.
     * @return Returns the String
     */
    @JsonGetter("body")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBody() {
        return body;
    }

    /**
     * Setter for Body.
     * The contents of the pull request.
     * @param body Value for String
     */
    @JsonSetter("body")
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Getter for MaintainerCanModify.
     * Indicates whether [maintainers can
     * modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/)
     * the pull request.
     * @return Returns the Boolean
     */
    @JsonGetter("maintainer_can_modify")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMaintainerCanModify() {
        return maintainerCanModify;
    }

    /**
     * Setter for MaintainerCanModify.
     * Indicates whether [maintainers can
     * modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/)
     * the pull request.
     * @param maintainerCanModify Value for Boolean
     */
    @JsonSetter("maintainer_can_modify")
    public void setMaintainerCanModify(Boolean maintainerCanModify) {
        this.maintainerCanModify = maintainerCanModify;
    }

    /**
     * Getter for Draft.
     * Indicates whether the pull request is a draft. See "[Draft Pull
     * Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the
     * GitHub Help documentation to learn more.
     * @return Returns the Boolean
     */
    @JsonGetter("draft")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDraft() {
        return draft;
    }

    /**
     * Setter for Draft.
     * Indicates whether the pull request is a draft. See "[Draft Pull
     * Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the
     * GitHub Help documentation to learn more.
     * @param draft Value for Boolean
     */
    @JsonSetter("draft")
    public void setDraft(Boolean draft) {
        this.draft = draft;
    }

    /**
     * Getter for Issue.
     * An issue in the repository to convert to a pull request. The issue title, body, and comments
     * will become the title, body, and comments on the new pull request. Required unless `title` is
     * specified.
     * @return Returns the Integer
     */
    @JsonGetter("issue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getIssue() {
        return issue;
    }

    /**
     * Setter for Issue.
     * An issue in the repository to convert to a pull request. The issue title, body, and comments
     * will become the title, body, and comments on the new pull request. Required unless `title` is
     * specified.
     * @param issue Value for Integer
     */
    @JsonSetter("issue")
    public void setIssue(Integer issue) {
        this.issue = issue;
    }

    /**
     * Converts this ReposPullsRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposPullsRequest [" + "head=" + head + ", base=" + base + ", title=" + title
                + ", body=" + body + ", maintainerCanModify=" + maintainerCanModify + ", draft="
                + draft + ", issue=" + issue + "]";
    }

    /**
     * Builds a new {@link ReposPullsRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposPullsRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(head, base)
                .title(getTitle())
                .body(getBody())
                .maintainerCanModify(getMaintainerCanModify())
                .draft(getDraft())
                .issue(getIssue());
        return builder;
    }

    /**
     * Class to build instances of {@link ReposPullsRequest}.
     */
    public static class Builder {
        private String head;
        private String base;
        private String title;
        private String body;
        private Boolean maintainerCanModify;
        private Boolean draft;
        private Integer issue;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  head  String value for head.
         * @param  base  String value for base.
         */
        public Builder(String head, String base) {
            this.head = head;
            this.base = base;
        }

        /**
         * Setter for head.
         * @param  head  String value for head.
         * @return Builder
         */
        public Builder head(String head) {
            this.head = head;
            return this;
        }

        /**
         * Setter for base.
         * @param  base  String value for base.
         * @return Builder
         */
        public Builder base(String base) {
            this.base = base;
            return this;
        }

        /**
         * Setter for title.
         * @param  title  String value for title.
         * @return Builder
         */
        public Builder title(String title) {
            this.title = title;
            return this;
        }

        /**
         * Setter for body.
         * @param  body  String value for body.
         * @return Builder
         */
        public Builder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Setter for maintainerCanModify.
         * @param  maintainerCanModify  Boolean value for maintainerCanModify.
         * @return Builder
         */
        public Builder maintainerCanModify(Boolean maintainerCanModify) {
            this.maintainerCanModify = maintainerCanModify;
            return this;
        }

        /**
         * Setter for draft.
         * @param  draft  Boolean value for draft.
         * @return Builder
         */
        public Builder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }

        /**
         * Setter for issue.
         * @param  issue  Integer value for issue.
         * @return Builder
         */
        public Builder issue(Integer issue) {
            this.issue = issue;
            return this;
        }

        /**
         * Builds a new {@link ReposPullsRequest} object using the set fields.
         * @return {@link ReposPullsRequest}
         */
        public ReposPullsRequest build() {
            return new ReposPullsRequest(head, base, title, body, maintainerCanModify, draft,
                    issue);
        }
    }
}

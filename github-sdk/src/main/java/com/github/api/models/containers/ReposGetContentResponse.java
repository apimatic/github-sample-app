/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.github.api.ApiHelper;
import com.github.api.models.ContentDirectory;
import com.github.api.models.ContentFile;
import com.github.api.models.SubmoduleContent;
import com.github.api.models.SymlinkContent;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = ReposGetContentResponse.ReposGetContentResponseDeserializer.class)
public abstract class ReposGetContentResponse {
    
    /**
     * One-of type initialization method.
     * @param contentDirectory List of ContentDirectory value for contentDirectory.
     * @return The ContentDirectoryCase object.
     */
    public static ReposGetContentResponse fromContentDirectory(
            List<ContentDirectory> contentDirectory) {
        return contentDirectory == null ? null : new ContentDirectoryCase(contentDirectory);
    }

    /**
     * One-of type initialization method.
     * @param contentFile ContentFile value for contentFile.
     * @return The ContentFileCase object.
     */
    public static ReposGetContentResponse fromContentFile(ContentFile contentFile) {
        return contentFile == null ? null : new ContentFileCase(contentFile);
    }

    /**
     * One-of type initialization method.
     * @param symlinkContent SymlinkContent value for symlinkContent.
     * @return The SymlinkContentCase object.
     */
    public static ReposGetContentResponse fromSymlinkContent(SymlinkContent symlinkContent) {
        return symlinkContent == null ? null : new SymlinkContentCase(symlinkContent);
    }

    /**
     * One-of type initialization method.
     * @param submoduleContent SubmoduleContent value for submoduleContent.
     * @return The SubmoduleContentCase object.
     */
    public static ReposGetContentResponse fromSubmoduleContent(SubmoduleContent submoduleContent) {
        return submoduleContent == null ? null : new SubmoduleContentCase(submoduleContent);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R contentDirectory(List<ContentDirectory> contentDirectory);

        R contentFile(ContentFile contentFile);

        R symlinkContent(SymlinkContent symlinkContent);

        R submoduleContent(SubmoduleContent submoduleContent);
    }

    /**
     * This is a implementation class for ContentDirectoryCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class ContentDirectoryCase extends ReposGetContentResponse {

        @JsonValue
        private List<ContentDirectory> contentDirectory;

        ContentDirectoryCase(List<ContentDirectory> contentDirectory) {
            this.contentDirectory = contentDirectory;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.contentDirectory(this.contentDirectory);
        }

        @JsonCreator
        private ContentDirectoryCase(JsonNode jsonNode) throws IOException {
            this.contentDirectory = ApiHelper.deserializeArray(jsonNode,
                ContentDirectory[].class);
        }

        @Override
        public String toString() {
            return contentDirectory.toString();
        }
    }

    /**
     * This is a implementation class for ContentFileCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class ContentFileCase extends ReposGetContentResponse {

        @JsonValue
        private ContentFile contentFile;

        ContentFileCase(ContentFile contentFile) {
            this.contentFile = contentFile;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.contentFile(this.contentFile);
        }

        @JsonCreator
        private ContentFileCase(JsonNode jsonNode) throws IOException {
            this.contentFile = ApiHelper.deserialize(jsonNode,
                ContentFile.class);
        }

        @Override
        public String toString() {
            return contentFile.toString();
        }
    }

    /**
     * This is a implementation class for SymlinkContentCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class SymlinkContentCase extends ReposGetContentResponse {

        @JsonValue
        private SymlinkContent symlinkContent;

        SymlinkContentCase(SymlinkContent symlinkContent) {
            this.symlinkContent = symlinkContent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.symlinkContent(this.symlinkContent);
        }

        @JsonCreator
        private SymlinkContentCase(JsonNode jsonNode) throws IOException {
            this.symlinkContent = ApiHelper.deserialize(jsonNode,
                SymlinkContent.class);
        }

        @Override
        public String toString() {
            return symlinkContent.toString();
        }
    }

    /**
     * This is a implementation class for SubmoduleContentCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class SubmoduleContentCase extends ReposGetContentResponse {

        @JsonValue
        private SubmoduleContent submoduleContent;

        SubmoduleContentCase(SubmoduleContent submoduleContent) {
            this.submoduleContent = submoduleContent;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.submoduleContent(this.submoduleContent);
        }

        @JsonCreator
        private SubmoduleContentCase(JsonNode jsonNode) throws IOException {
            this.submoduleContent = ApiHelper.deserialize(jsonNode,
                SubmoduleContent.class);
        }

        @Override
        public String toString() {
            return submoduleContent.toString();
        }
    }

    /**
     * This is a custom deserializer class for ReposGetContentResponse.
     */
    protected static class ReposGetContentResponseDeserializer
            extends JsonDeserializer<ReposGetContentResponse> {

        @Override
        public ReposGetContentResponse deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(ContentDirectoryCase.class,
                    ContentFileCase.class, SymlinkContentCase.class,
                    SubmoduleContentCase.class), true);
        }
    }

}

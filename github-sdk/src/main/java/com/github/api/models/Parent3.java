/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Parent3 type.
 */
public class Parent3 {
    private int id;
    private String nodeId;
    private String url;
    private String membersUrl;
    private String name;
    private String description;
    private String permission;
    private String privacy;
    private String htmlUrl;
    private String repositoriesUrl;
    private String slug;
    private String ldapDn;

    /**
     * Default constructor.
     */
    public Parent3() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  url  String value for url.
     * @param  membersUrl  String value for membersUrl.
     * @param  name  String value for name.
     * @param  description  String value for description.
     * @param  permission  String value for permission.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  repositoriesUrl  String value for repositoriesUrl.
     * @param  slug  String value for slug.
     * @param  privacy  String value for privacy.
     * @param  ldapDn  String value for ldapDn.
     */
    public Parent3(
            int id,
            String nodeId,
            String url,
            String membersUrl,
            String name,
            String description,
            String permission,
            String htmlUrl,
            String repositoriesUrl,
            String slug,
            String privacy,
            String ldapDn) {
        this.id = id;
        this.nodeId = nodeId;
        this.url = url;
        this.membersUrl = membersUrl;
        this.name = name;
        this.description = description;
        this.permission = permission;
        this.privacy = privacy;
        this.htmlUrl = htmlUrl;
        this.repositoriesUrl = repositoriesUrl;
        this.slug = slug;
        this.ldapDn = ldapDn;
    }

    /**
     * Getter for Id.
     * Unique identifier of the team
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier of the team
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Url.
     * URL for the team
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * URL for the team
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for MembersUrl.
     * @return Returns the String
     */
    @JsonGetter("members_url")
    public String getMembersUrl() {
        return membersUrl;
    }

    /**
     * Setter for MembersUrl.
     * @param membersUrl Value for String
     */
    @JsonSetter("members_url")
    public void setMembersUrl(String membersUrl) {
        this.membersUrl = membersUrl;
    }

    /**
     * Getter for Name.
     * Name of the team
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Name of the team
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Description.
     * Description of the team
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * Description of the team
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Permission.
     * Permission that the team will have for its repositories
     * @return Returns the String
     */
    @JsonGetter("permission")
    public String getPermission() {
        return permission;
    }

    /**
     * Setter for Permission.
     * Permission that the team will have for its repositories
     * @param permission Value for String
     */
    @JsonSetter("permission")
    public void setPermission(String permission) {
        this.permission = permission;
    }

    /**
     * Getter for Privacy.
     * The level of privacy this team should have
     * @return Returns the String
     */
    @JsonGetter("privacy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPrivacy() {
        return privacy;
    }

    /**
     * Setter for Privacy.
     * The level of privacy this team should have
     * @param privacy Value for String
     */
    @JsonSetter("privacy")
    public void setPrivacy(String privacy) {
        this.privacy = privacy;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for RepositoriesUrl.
     * @return Returns the String
     */
    @JsonGetter("repositories_url")
    public String getRepositoriesUrl() {
        return repositoriesUrl;
    }

    /**
     * Setter for RepositoriesUrl.
     * @param repositoriesUrl Value for String
     */
    @JsonSetter("repositories_url")
    public void setRepositoriesUrl(String repositoriesUrl) {
        this.repositoriesUrl = repositoriesUrl;
    }

    /**
     * Getter for Slug.
     * @return Returns the String
     */
    @JsonGetter("slug")
    public String getSlug() {
        return slug;
    }

    /**
     * Setter for Slug.
     * @param slug Value for String
     */
    @JsonSetter("slug")
    public void setSlug(String slug) {
        this.slug = slug;
    }

    /**
     * Getter for LdapDn.
     * Distinguished Name (DN) that team maps to within LDAP environment
     * @return Returns the String
     */
    @JsonGetter("ldap_dn")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLdapDn() {
        return ldapDn;
    }

    /**
     * Setter for LdapDn.
     * Distinguished Name (DN) that team maps to within LDAP environment
     * @param ldapDn Value for String
     */
    @JsonSetter("ldap_dn")
    public void setLdapDn(String ldapDn) {
        this.ldapDn = ldapDn;
    }

    /**
     * Converts this Parent3 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Parent3 [" + "id=" + id + ", nodeId=" + nodeId + ", url=" + url + ", membersUrl="
                + membersUrl + ", name=" + name + ", description=" + description + ", permission="
                + permission + ", htmlUrl=" + htmlUrl + ", repositoriesUrl=" + repositoriesUrl
                + ", slug=" + slug + ", privacy=" + privacy + ", ldapDn=" + ldapDn + "]";
    }

    /**
     * Builds a new {@link Parent3.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Parent3.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, nodeId, url, membersUrl, name, description, permission,
                htmlUrl, repositoriesUrl, slug)
                .privacy(getPrivacy())
                .ldapDn(getLdapDn());
        return builder;
    }

    /**
     * Class to build instances of {@link Parent3}.
     */
    public static class Builder {
        private int id;
        private String nodeId;
        private String url;
        private String membersUrl;
        private String name;
        private String description;
        private String permission;
        private String htmlUrl;
        private String repositoriesUrl;
        private String slug;
        private String privacy;
        private String ldapDn;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  url  String value for url.
         * @param  membersUrl  String value for membersUrl.
         * @param  name  String value for name.
         * @param  description  String value for description.
         * @param  permission  String value for permission.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  repositoriesUrl  String value for repositoriesUrl.
         * @param  slug  String value for slug.
         */
        public Builder(int id, String nodeId, String url, String membersUrl, String name,
                String description, String permission, String htmlUrl, String repositoriesUrl,
                String slug) {
            this.id = id;
            this.nodeId = nodeId;
            this.url = url;
            this.membersUrl = membersUrl;
            this.name = name;
            this.description = description;
            this.permission = permission;
            this.htmlUrl = htmlUrl;
            this.repositoriesUrl = repositoriesUrl;
            this.slug = slug;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for membersUrl.
         * @param  membersUrl  String value for membersUrl.
         * @return Builder
         */
        public Builder membersUrl(String membersUrl) {
            this.membersUrl = membersUrl;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for permission.
         * @param  permission  String value for permission.
         * @return Builder
         */
        public Builder permission(String permission) {
            this.permission = permission;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for repositoriesUrl.
         * @param  repositoriesUrl  String value for repositoriesUrl.
         * @return Builder
         */
        public Builder repositoriesUrl(String repositoriesUrl) {
            this.repositoriesUrl = repositoriesUrl;
            return this;
        }

        /**
         * Setter for slug.
         * @param  slug  String value for slug.
         * @return Builder
         */
        public Builder slug(String slug) {
            this.slug = slug;
            return this;
        }

        /**
         * Setter for privacy.
         * @param  privacy  String value for privacy.
         * @return Builder
         */
        public Builder privacy(String privacy) {
            this.privacy = privacy;
            return this;
        }

        /**
         * Setter for ldapDn.
         * @param  ldapDn  String value for ldapDn.
         * @return Builder
         */
        public Builder ldapDn(String ldapDn) {
            this.ldapDn = ldapDn;
            return this;
        }

        /**
         * Builds a new {@link Parent3} object using the set fields.
         * @return {@link Parent3}
         */
        public Parent3 build() {
            return new Parent3(id, nodeId, url, membersUrl, name, description, permission, htmlUrl,
                    repositoriesUrl, slug, privacy, ldapDn);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;

/**
 * This is a model class for ReleaseAsset1 type.
 */
public class ReleaseAsset1 {
    private String browserDownloadUrl;
    private String contentType;
    private LocalDateTime createdAt;
    private int downloadCount;
    private int id;
    private String label;
    private String name;
    private String nodeId;
    private int size;
    private String state;
    private LocalDateTime updatedAt;
    private Object uploader;
    private String url;

    /**
     * Default constructor.
     */
    public ReleaseAsset1() {
        state = "uploaded";
    }

    /**
     * Initialization constructor.
     * @param  browserDownloadUrl  String value for browserDownloadUrl.
     * @param  contentType  String value for contentType.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  downloadCount  int value for downloadCount.
     * @param  id  int value for id.
     * @param  label  String value for label.
     * @param  name  String value for name.
     * @param  nodeId  String value for nodeId.
     * @param  size  int value for size.
     * @param  state  String value for state.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  url  String value for url.
     * @param  uploader  Object value for uploader.
     */
    public ReleaseAsset1(
            String browserDownloadUrl,
            String contentType,
            LocalDateTime createdAt,
            int downloadCount,
            int id,
            String label,
            String name,
            String nodeId,
            int size,
            String state,
            LocalDateTime updatedAt,
            String url,
            Object uploader) {
        this.browserDownloadUrl = browserDownloadUrl;
        this.contentType = contentType;
        this.createdAt = createdAt;
        this.downloadCount = downloadCount;
        this.id = id;
        this.label = label;
        this.name = name;
        this.nodeId = nodeId;
        this.size = size;
        this.state = state;
        this.updatedAt = updatedAt;
        this.uploader = uploader;
        this.url = url;
    }

    /**
     * Getter for BrowserDownloadUrl.
     * @return Returns the String
     */
    @JsonGetter("browser_download_url")
    public String getBrowserDownloadUrl() {
        return browserDownloadUrl;
    }

    /**
     * Setter for BrowserDownloadUrl.
     * @param browserDownloadUrl Value for String
     */
    @JsonSetter("browser_download_url")
    public void setBrowserDownloadUrl(String browserDownloadUrl) {
        this.browserDownloadUrl = browserDownloadUrl;
    }

    /**
     * Getter for ContentType.
     * @return Returns the String
     */
    @JsonGetter("content_type")
    public String getContentType() {
        return contentType;
    }

    /**
     * Setter for ContentType.
     * @param contentType Value for String
     */
    @JsonSetter("content_type")
    public void setContentType(String contentType) {
        this.contentType = contentType;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for DownloadCount.
     * @return Returns the int
     */
    @JsonGetter("download_count")
    public int getDownloadCount() {
        return downloadCount;
    }

    /**
     * Setter for DownloadCount.
     * @param downloadCount Value for int
     */
    @JsonSetter("download_count")
    public void setDownloadCount(int downloadCount) {
        this.downloadCount = downloadCount;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for Label.
     * @return Returns the String
     */
    @JsonGetter("label")
    public String getLabel() {
        return label;
    }

    /**
     * Setter for Label.
     * @param label Value for String
     */
    @JsonSetter("label")
    public void setLabel(String label) {
        this.label = label;
    }

    /**
     * Getter for Name.
     * The file name of the asset.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The file name of the asset.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Size.
     * @return Returns the int
     */
    @JsonGetter("size")
    public int getSize() {
        return size;
    }

    /**
     * Setter for Size.
     * @param size Value for int
     */
    @JsonSetter("size")
    public void setSize(int size) {
        this.size = size;
    }

    /**
     * Getter for State.
     * State of the release asset.
     * @return Returns the String
     */
    @JsonGetter("state")
    public String getState() {
        return state;
    }

    /**
     * Setter for State.
     * State of the release asset.
     * @param state Value for String
     */
    @JsonSetter("state")
    private void setState(String state) {
        this.state = state;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Uploader.
     * @return Returns the Object
     */
    @JsonGetter("uploader")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getUploader() {
        return uploader;
    }

    /**
     * Setter for Uploader.
     * @param uploader Value for Object
     */
    @JsonSetter("uploader")
    public void setUploader(Object uploader) {
        this.uploader = uploader;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Converts this ReleaseAsset1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReleaseAsset1 [" + "browserDownloadUrl=" + browserDownloadUrl + ", contentType="
                + contentType + ", createdAt=" + createdAt + ", downloadCount=" + downloadCount
                + ", id=" + id + ", label=" + label + ", name=" + name + ", nodeId=" + nodeId
                + ", size=" + size + ", state=" + state + ", updatedAt=" + updatedAt + ", url="
                + url + ", uploader=" + uploader + "]";
    }

    /**
     * Builds a new {@link ReleaseAsset1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReleaseAsset1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(browserDownloadUrl, contentType, createdAt, downloadCount, id,
                label, name, nodeId, size, state, updatedAt, url)
                .uploader(getUploader());
        return builder;
    }

    /**
     * Class to build instances of {@link ReleaseAsset1}.
     */
    public static class Builder {
        private String browserDownloadUrl;
        private String contentType;
        private LocalDateTime createdAt;
        private int downloadCount;
        private int id;
        private String label;
        private String name;
        private String nodeId;
        private int size;
        private String state = "uploaded";
        private LocalDateTime updatedAt;
        private String url;
        private Object uploader;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  browserDownloadUrl  String value for browserDownloadUrl.
         * @param  contentType  String value for contentType.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  downloadCount  int value for downloadCount.
         * @param  id  int value for id.
         * @param  label  String value for label.
         * @param  name  String value for name.
         * @param  nodeId  String value for nodeId.
         * @param  size  int value for size.
         * @param  state  String value for state.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  url  String value for url.
         */
        public Builder(String browserDownloadUrl, String contentType, LocalDateTime createdAt,
                int downloadCount, int id, String label, String name, String nodeId, int size,
                String state, LocalDateTime updatedAt, String url) {
            this.browserDownloadUrl = browserDownloadUrl;
            this.contentType = contentType;
            this.createdAt = createdAt;
            this.downloadCount = downloadCount;
            this.id = id;
            this.label = label;
            this.name = name;
            this.nodeId = nodeId;
            this.size = size;
            this.state = state;
            this.updatedAt = updatedAt;
            this.url = url;
        }

        /**
         * Setter for browserDownloadUrl.
         * @param  browserDownloadUrl  String value for browserDownloadUrl.
         * @return Builder
         */
        public Builder browserDownloadUrl(String browserDownloadUrl) {
            this.browserDownloadUrl = browserDownloadUrl;
            return this;
        }

        /**
         * Setter for contentType.
         * @param  contentType  String value for contentType.
         * @return Builder
         */
        public Builder contentType(String contentType) {
            this.contentType = contentType;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for downloadCount.
         * @param  downloadCount  int value for downloadCount.
         * @return Builder
         */
        public Builder downloadCount(int downloadCount) {
            this.downloadCount = downloadCount;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for label.
         * @param  label  String value for label.
         * @return Builder
         */
        public Builder label(String label) {
            this.label = label;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for size.
         * @param  size  int value for size.
         * @return Builder
         */
        public Builder size(int size) {
            this.size = size;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  String value for state.
         * @return Builder
         */
        public Builder state(String state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for uploader.
         * @param  uploader  Object value for uploader.
         * @return Builder
         */
        public Builder uploader(Object uploader) {
            this.uploader = uploader;
            return this;
        }

        /**
         * Builds a new {@link ReleaseAsset1} object using the set fields.
         * @return {@link ReleaseAsset1}
         */
        public ReleaseAsset1 build() {
            return new ReleaseAsset1(browserDownloadUrl, contentType, createdAt, downloadCount, id,
                    label, name, nodeId, size, state, updatedAt, url, uploader);
        }
    }
}

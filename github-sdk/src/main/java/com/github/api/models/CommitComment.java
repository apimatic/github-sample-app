/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;

/**
 * This is a model class for CommitComment type.
 */
public class CommitComment {
    private String htmlUrl;
    private String url;
    private int id;
    private String nodeId;
    private String body;
    private String path;
    private Integer position;
    private Integer line;
    private String commitId;
    private Object user;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private AuthorAssociationEnum authorAssociation;
    private ReactionRollup reactions;

    /**
     * Default constructor.
     */
    public CommitComment() {
    }

    /**
     * Initialization constructor.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  url  String value for url.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  body  String value for body.
     * @param  path  String value for path.
     * @param  position  Integer value for position.
     * @param  line  Integer value for line.
     * @param  commitId  String value for commitId.
     * @param  user  Object value for user.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
     * @param  reactions  ReactionRollup value for reactions.
     */
    public CommitComment(
            String htmlUrl,
            String url,
            int id,
            String nodeId,
            String body,
            String path,
            Integer position,
            Integer line,
            String commitId,
            Object user,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            AuthorAssociationEnum authorAssociation,
            ReactionRollup reactions) {
        this.htmlUrl = htmlUrl;
        this.url = url;
        this.id = id;
        this.nodeId = nodeId;
        this.body = body;
        this.path = path;
        this.position = position;
        this.line = line;
        this.commitId = commitId;
        this.user = user;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.authorAssociation = authorAssociation;
        this.reactions = reactions;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Body.
     * @return Returns the String
     */
    @JsonGetter("body")
    public String getBody() {
        return body;
    }

    /**
     * Setter for Body.
     * @param body Value for String
     */
    @JsonSetter("body")
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Getter for Path.
     * @return Returns the String
     */
    @JsonGetter("path")
    public String getPath() {
        return path;
    }

    /**
     * Setter for Path.
     * @param path Value for String
     */
    @JsonSetter("path")
    public void setPath(String path) {
        this.path = path;
    }

    /**
     * Getter for Position.
     * @return Returns the Integer
     */
    @JsonGetter("position")
    public Integer getPosition() {
        return position;
    }

    /**
     * Setter for Position.
     * @param position Value for Integer
     */
    @JsonSetter("position")
    public void setPosition(Integer position) {
        this.position = position;
    }

    /**
     * Getter for Line.
     * @return Returns the Integer
     */
    @JsonGetter("line")
    public Integer getLine() {
        return line;
    }

    /**
     * Setter for Line.
     * @param line Value for Integer
     */
    @JsonSetter("line")
    public void setLine(Integer line) {
        this.line = line;
    }

    /**
     * Getter for CommitId.
     * @return Returns the String
     */
    @JsonGetter("commit_id")
    public String getCommitId() {
        return commitId;
    }

    /**
     * Setter for CommitId.
     * @param commitId Value for String
     */
    @JsonSetter("commit_id")
    public void setCommitId(String commitId) {
        this.commitId = commitId;
    }

    /**
     * Getter for User.
     * @return Returns the Object
     */
    @JsonGetter("user")
    public Object getUser() {
        return user;
    }

    /**
     * Setter for User.
     * @param user Value for Object
     */
    @JsonSetter("user")
    public void setUser(Object user) {
        this.user = user;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for AuthorAssociation.
     * @return Returns the AuthorAssociationEnum
     */
    @JsonGetter("author_association")
    public AuthorAssociationEnum getAuthorAssociation() {
        return authorAssociation;
    }

    /**
     * Setter for AuthorAssociation.
     * @param authorAssociation Value for AuthorAssociationEnum
     */
    @JsonSetter("author_association")
    public void setAuthorAssociation(AuthorAssociationEnum authorAssociation) {
        this.authorAssociation = authorAssociation;
    }

    /**
     * Getter for Reactions.
     * @return Returns the ReactionRollup
     */
    @JsonGetter("reactions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ReactionRollup getReactions() {
        return reactions;
    }

    /**
     * Setter for Reactions.
     * @param reactions Value for ReactionRollup
     */
    @JsonSetter("reactions")
    public void setReactions(ReactionRollup reactions) {
        this.reactions = reactions;
    }

    /**
     * Converts this CommitComment into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CommitComment [" + "htmlUrl=" + htmlUrl + ", url=" + url + ", id=" + id
                + ", nodeId=" + nodeId + ", body=" + body + ", path=" + path + ", position="
                + position + ", line=" + line + ", commitId=" + commitId + ", user=" + user
                + ", createdAt=" + createdAt + ", updatedAt=" + updatedAt + ", authorAssociation="
                + authorAssociation + ", reactions=" + reactions + "]";
    }

    /**
     * Builds a new {@link CommitComment.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CommitComment.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(htmlUrl, url, id, nodeId, body, path, position, line,
                commitId, user, createdAt, updatedAt, authorAssociation)
                .reactions(getReactions());
        return builder;
    }

    /**
     * Class to build instances of {@link CommitComment}.
     */
    public static class Builder {
        private String htmlUrl;
        private String url;
        private int id;
        private String nodeId;
        private String body;
        private String path;
        private Integer position;
        private Integer line;
        private String commitId;
        private Object user;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private AuthorAssociationEnum authorAssociation;
        private ReactionRollup reactions;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  url  String value for url.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  body  String value for body.
         * @param  path  String value for path.
         * @param  position  Integer value for position.
         * @param  line  Integer value for line.
         * @param  commitId  String value for commitId.
         * @param  user  Object value for user.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
         */
        public Builder(String htmlUrl, String url, int id, String nodeId, String body, String path,
                Integer position, Integer line, String commitId, Object user,
                LocalDateTime createdAt, LocalDateTime updatedAt,
                AuthorAssociationEnum authorAssociation) {
            this.htmlUrl = htmlUrl;
            this.url = url;
            this.id = id;
            this.nodeId = nodeId;
            this.body = body;
            this.path = path;
            this.position = position;
            this.line = line;
            this.commitId = commitId;
            this.user = user;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.authorAssociation = authorAssociation;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for body.
         * @param  body  String value for body.
         * @return Builder
         */
        public Builder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Setter for path.
         * @param  path  String value for path.
         * @return Builder
         */
        public Builder path(String path) {
            this.path = path;
            return this;
        }

        /**
         * Setter for position.
         * @param  position  Integer value for position.
         * @return Builder
         */
        public Builder position(Integer position) {
            this.position = position;
            return this;
        }

        /**
         * Setter for line.
         * @param  line  Integer value for line.
         * @return Builder
         */
        public Builder line(Integer line) {
            this.line = line;
            return this;
        }

        /**
         * Setter for commitId.
         * @param  commitId  String value for commitId.
         * @return Builder
         */
        public Builder commitId(String commitId) {
            this.commitId = commitId;
            return this;
        }

        /**
         * Setter for user.
         * @param  user  Object value for user.
         * @return Builder
         */
        public Builder user(Object user) {
            this.user = user;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for authorAssociation.
         * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
         * @return Builder
         */
        public Builder authorAssociation(AuthorAssociationEnum authorAssociation) {
            this.authorAssociation = authorAssociation;
            return this;
        }

        /**
         * Setter for reactions.
         * @param  reactions  ReactionRollup value for reactions.
         * @return Builder
         */
        public Builder reactions(ReactionRollup reactions) {
            this.reactions = reactions;
            return this;
        }

        /**
         * Builds a new {@link CommitComment} object using the set fields.
         * @return {@link CommitComment}
         */
        public CommitComment build() {
            return new CommitComment(htmlUrl, url, id, nodeId, body, path, position, line, commitId,
                    user, createdAt, updatedAt, authorAssociation, reactions);
        }
    }
}

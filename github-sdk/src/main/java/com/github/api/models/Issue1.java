/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import com.github.api.models.containers.Issue1Labels;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for Issue1 type.
 */
public class Issue1 {
    private int id;
    private String nodeId;
    private String url;
    private String repositoryUrl;
    private String labelsUrl;
    private String commentsUrl;
    private String eventsUrl;
    private String htmlUrl;
    private int number;
    private String state;
    private Object stateReason;
    private String title;
    private OptionalNullable<String> body;
    private Object user;
    private List<Issue1Labels> labels;
    private Object assignee;
    private OptionalNullable<List<SimpleUser>> assignees;
    private Object milestone;
    private boolean locked;
    private OptionalNullable<String> activeLockReason;
    private int comments;
    private PullRequest1 pullRequest;
    private LocalDateTime closedAt;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private Boolean draft;
    private Object closedBy;
    private String bodyHtml;
    private String bodyText;
    private String timelineUrl;
    private Repository3 repository;
    private Object performedViaGithubApp;
    private AuthorAssociationEnum authorAssociation;
    private ReactionRollup reactions;

    /**
     * Default constructor.
     */
    public Issue1() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  url  String value for url.
     * @param  repositoryUrl  String value for repositoryUrl.
     * @param  labelsUrl  String value for labelsUrl.
     * @param  commentsUrl  String value for commentsUrl.
     * @param  eventsUrl  String value for eventsUrl.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  number  int value for number.
     * @param  state  String value for state.
     * @param  title  String value for title.
     * @param  user  Object value for user.
     * @param  labels  List of Issue1Labels value for labels.
     * @param  assignee  Object value for assignee.
     * @param  milestone  Object value for milestone.
     * @param  locked  boolean value for locked.
     * @param  comments  int value for comments.
     * @param  closedAt  LocalDateTime value for closedAt.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
     * @param  stateReason  Object value for stateReason.
     * @param  body  String value for body.
     * @param  assignees  List of SimpleUser value for assignees.
     * @param  activeLockReason  String value for activeLockReason.
     * @param  pullRequest  PullRequest1 value for pullRequest.
     * @param  draft  Boolean value for draft.
     * @param  closedBy  Object value for closedBy.
     * @param  bodyHtml  String value for bodyHtml.
     * @param  bodyText  String value for bodyText.
     * @param  timelineUrl  String value for timelineUrl.
     * @param  repository  Repository3 value for repository.
     * @param  performedViaGithubApp  Object value for performedViaGithubApp.
     * @param  reactions  ReactionRollup value for reactions.
     */
    public Issue1(
            int id,
            String nodeId,
            String url,
            String repositoryUrl,
            String labelsUrl,
            String commentsUrl,
            String eventsUrl,
            String htmlUrl,
            int number,
            String state,
            String title,
            Object user,
            List<Issue1Labels> labels,
            Object assignee,
            Object milestone,
            boolean locked,
            int comments,
            LocalDateTime closedAt,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            AuthorAssociationEnum authorAssociation,
            Object stateReason,
            String body,
            List<SimpleUser> assignees,
            String activeLockReason,
            PullRequest1 pullRequest,
            Boolean draft,
            Object closedBy,
            String bodyHtml,
            String bodyText,
            String timelineUrl,
            Repository3 repository,
            Object performedViaGithubApp,
            ReactionRollup reactions) {
        this.id = id;
        this.nodeId = nodeId;
        this.url = url;
        this.repositoryUrl = repositoryUrl;
        this.labelsUrl = labelsUrl;
        this.commentsUrl = commentsUrl;
        this.eventsUrl = eventsUrl;
        this.htmlUrl = htmlUrl;
        this.number = number;
        this.state = state;
        this.stateReason = stateReason;
        this.title = title;
        this.body = OptionalNullable.of(body);
        this.user = user;
        this.labels = labels;
        this.assignee = assignee;
        this.assignees = OptionalNullable.of(assignees);
        this.milestone = milestone;
        this.locked = locked;
        this.activeLockReason = OptionalNullable.of(activeLockReason);
        this.comments = comments;
        this.pullRequest = pullRequest;
        this.closedAt = closedAt;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.draft = draft;
        this.closedBy = closedBy;
        this.bodyHtml = bodyHtml;
        this.bodyText = bodyText;
        this.timelineUrl = timelineUrl;
        this.repository = repository;
        this.performedViaGithubApp = performedViaGithubApp;
        this.authorAssociation = authorAssociation;
        this.reactions = reactions;
    }

    /**
     * Internal initialization constructor.
     */
    protected Issue1(int id, String nodeId, String url, String repositoryUrl, String labelsUrl,
            String commentsUrl, String eventsUrl, String htmlUrl, int number, String state,
            String title, Object user, List<Issue1Labels> labels, Object assignee, Object milestone,
            boolean locked, int comments, LocalDateTime closedAt, LocalDateTime createdAt,
            LocalDateTime updatedAt, AuthorAssociationEnum authorAssociation, Object stateReason,
            OptionalNullable<String> body, OptionalNullable<List<SimpleUser>> assignees,
            OptionalNullable<String> activeLockReason, PullRequest1 pullRequest, Boolean draft,
            Object closedBy, String bodyHtml, String bodyText, String timelineUrl,
            Repository3 repository, Object performedViaGithubApp, ReactionRollup reactions) {
        this.id = id;
        this.nodeId = nodeId;
        this.url = url;
        this.repositoryUrl = repositoryUrl;
        this.labelsUrl = labelsUrl;
        this.commentsUrl = commentsUrl;
        this.eventsUrl = eventsUrl;
        this.htmlUrl = htmlUrl;
        this.number = number;
        this.state = state;
        this.stateReason = stateReason;
        this.title = title;
        this.body = body;
        this.user = user;
        this.labels = labels;
        this.assignee = assignee;
        this.assignees = assignees;
        this.milestone = milestone;
        this.locked = locked;
        this.activeLockReason = activeLockReason;
        this.comments = comments;
        this.pullRequest = pullRequest;
        this.closedAt = closedAt;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.draft = draft;
        this.closedBy = closedBy;
        this.bodyHtml = bodyHtml;
        this.bodyText = bodyText;
        this.timelineUrl = timelineUrl;
        this.repository = repository;
        this.performedViaGithubApp = performedViaGithubApp;
        this.authorAssociation = authorAssociation;
        this.reactions = reactions;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Url.
     * URL for the issue
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * URL for the issue
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for RepositoryUrl.
     * @return Returns the String
     */
    @JsonGetter("repository_url")
    public String getRepositoryUrl() {
        return repositoryUrl;
    }

    /**
     * Setter for RepositoryUrl.
     * @param repositoryUrl Value for String
     */
    @JsonSetter("repository_url")
    public void setRepositoryUrl(String repositoryUrl) {
        this.repositoryUrl = repositoryUrl;
    }

    /**
     * Getter for LabelsUrl.
     * @return Returns the String
     */
    @JsonGetter("labels_url")
    public String getLabelsUrl() {
        return labelsUrl;
    }

    /**
     * Setter for LabelsUrl.
     * @param labelsUrl Value for String
     */
    @JsonSetter("labels_url")
    public void setLabelsUrl(String labelsUrl) {
        this.labelsUrl = labelsUrl;
    }

    /**
     * Getter for CommentsUrl.
     * @return Returns the String
     */
    @JsonGetter("comments_url")
    public String getCommentsUrl() {
        return commentsUrl;
    }

    /**
     * Setter for CommentsUrl.
     * @param commentsUrl Value for String
     */
    @JsonSetter("comments_url")
    public void setCommentsUrl(String commentsUrl) {
        this.commentsUrl = commentsUrl;
    }

    /**
     * Getter for EventsUrl.
     * @return Returns the String
     */
    @JsonGetter("events_url")
    public String getEventsUrl() {
        return eventsUrl;
    }

    /**
     * Setter for EventsUrl.
     * @param eventsUrl Value for String
     */
    @JsonSetter("events_url")
    public void setEventsUrl(String eventsUrl) {
        this.eventsUrl = eventsUrl;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Number.
     * Number uniquely identifying the issue within its repository
     * @return Returns the int
     */
    @JsonGetter("number")
    public int getNumber() {
        return number;
    }

    /**
     * Setter for Number.
     * Number uniquely identifying the issue within its repository
     * @param number Value for int
     */
    @JsonSetter("number")
    public void setNumber(int number) {
        this.number = number;
    }

    /**
     * Getter for State.
     * State of the issue; either 'open' or 'closed'
     * @return Returns the String
     */
    @JsonGetter("state")
    public String getState() {
        return state;
    }

    /**
     * Setter for State.
     * State of the issue; either 'open' or 'closed'
     * @param state Value for String
     */
    @JsonSetter("state")
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Getter for StateReason.
     * @return Returns the Object
     */
    @JsonGetter("state_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getStateReason() {
        return stateReason;
    }

    /**
     * Setter for StateReason.
     * @param stateReason Value for Object
     */
    @JsonSetter("state_reason")
    public void setStateReason(Object stateReason) {
        this.stateReason = stateReason;
    }

    /**
     * Getter for Title.
     * Title of the issue
     * @return Returns the String
     */
    @JsonGetter("title")
    public String getTitle() {
        return title;
    }

    /**
     * Setter for Title.
     * Title of the issue
     * @param title Value for String
     */
    @JsonSetter("title")
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Internal Getter for Body.
     * Contents of the issue
     * @return Returns the Internal String
     */
    @JsonGetter("body")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBody() {
        return this.body;
    }

    /**
     * Getter for Body.
     * Contents of the issue
     * @return Returns the String
     */
    public String getBody() {
        return OptionalNullable.getFrom(body);
    }

    /**
     * Setter for Body.
     * Contents of the issue
     * @param body Value for String
     */
    @JsonSetter("body")
    public void setBody(String body) {
        this.body = OptionalNullable.of(body);
    }

    /**
     * UnSetter for Body.
     * Contents of the issue
     */
    public void unsetBody() {
        body = null;
    }

    /**
     * Getter for User.
     * @return Returns the Object
     */
    @JsonGetter("user")
    public Object getUser() {
        return user;
    }

    /**
     * Setter for User.
     * @param user Value for Object
     */
    @JsonSetter("user")
    public void setUser(Object user) {
        this.user = user;
    }

    /**
     * Getter for Labels.
     * Labels to associate with this issue; pass one or more label names to replace the set of
     * labels on this issue; send an empty array to clear all labels from the issue; note that the
     * labels are silently dropped for users without push access to the repository
     * @return Returns the List of Issue1Labels
     */
    @JsonGetter("labels")
    public List<Issue1Labels> getLabels() {
        return labels;
    }

    /**
     * Setter for Labels.
     * Labels to associate with this issue; pass one or more label names to replace the set of
     * labels on this issue; send an empty array to clear all labels from the issue; note that the
     * labels are silently dropped for users without push access to the repository
     * @param labels Value for List of Issue1Labels
     */
    @JsonSetter("labels")
    public void setLabels(List<Issue1Labels> labels) {
        this.labels = labels;
    }

    /**
     * Getter for Assignee.
     * @return Returns the Object
     */
    @JsonGetter("assignee")
    public Object getAssignee() {
        return assignee;
    }

    /**
     * Setter for Assignee.
     * @param assignee Value for Object
     */
    @JsonSetter("assignee")
    public void setAssignee(Object assignee) {
        this.assignee = assignee;
    }

    /**
     * Internal Getter for Assignees.
     * @return Returns the Internal List of SimpleUser
     */
    @JsonGetter("assignees")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<SimpleUser>> internalGetAssignees() {
        return this.assignees;
    }

    /**
     * Getter for Assignees.
     * @return Returns the List of SimpleUser
     */
    public List<SimpleUser> getAssignees() {
        return OptionalNullable.getFrom(assignees);
    }

    /**
     * Setter for Assignees.
     * @param assignees Value for List of SimpleUser
     */
    @JsonSetter("assignees")
    public void setAssignees(List<SimpleUser> assignees) {
        this.assignees = OptionalNullable.of(assignees);
    }

    /**
     * UnSetter for Assignees.
     */
    public void unsetAssignees() {
        assignees = null;
    }

    /**
     * Getter for Milestone.
     * @return Returns the Object
     */
    @JsonGetter("milestone")
    public Object getMilestone() {
        return milestone;
    }

    /**
     * Setter for Milestone.
     * @param milestone Value for Object
     */
    @JsonSetter("milestone")
    public void setMilestone(Object milestone) {
        this.milestone = milestone;
    }

    /**
     * Getter for Locked.
     * @return Returns the boolean
     */
    @JsonGetter("locked")
    public boolean getLocked() {
        return locked;
    }

    /**
     * Setter for Locked.
     * @param locked Value for boolean
     */
    @JsonSetter("locked")
    public void setLocked(boolean locked) {
        this.locked = locked;
    }

    /**
     * Internal Getter for ActiveLockReason.
     * @return Returns the Internal String
     */
    @JsonGetter("active_lock_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetActiveLockReason() {
        return this.activeLockReason;
    }

    /**
     * Getter for ActiveLockReason.
     * @return Returns the String
     */
    public String getActiveLockReason() {
        return OptionalNullable.getFrom(activeLockReason);
    }

    /**
     * Setter for ActiveLockReason.
     * @param activeLockReason Value for String
     */
    @JsonSetter("active_lock_reason")
    public void setActiveLockReason(String activeLockReason) {
        this.activeLockReason = OptionalNullable.of(activeLockReason);
    }

    /**
     * UnSetter for ActiveLockReason.
     */
    public void unsetActiveLockReason() {
        activeLockReason = null;
    }

    /**
     * Getter for Comments.
     * @return Returns the int
     */
    @JsonGetter("comments")
    public int getComments() {
        return comments;
    }

    /**
     * Setter for Comments.
     * @param comments Value for int
     */
    @JsonSetter("comments")
    public void setComments(int comments) {
        this.comments = comments;
    }

    /**
     * Getter for PullRequest.
     * @return Returns the PullRequest1
     */
    @JsonGetter("pull_request")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PullRequest1 getPullRequest() {
        return pullRequest;
    }

    /**
     * Setter for PullRequest.
     * @param pullRequest Value for PullRequest1
     */
    @JsonSetter("pull_request")
    public void setPullRequest(PullRequest1 pullRequest) {
        this.pullRequest = pullRequest;
    }

    /**
     * Getter for ClosedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("closed_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getClosedAt() {
        return closedAt;
    }

    /**
     * Setter for ClosedAt.
     * @param closedAt Value for LocalDateTime
     */
    @JsonSetter("closed_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setClosedAt(LocalDateTime closedAt) {
        this.closedAt = closedAt;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Draft.
     * @return Returns the Boolean
     */
    @JsonGetter("draft")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDraft() {
        return draft;
    }

    /**
     * Setter for Draft.
     * @param draft Value for Boolean
     */
    @JsonSetter("draft")
    public void setDraft(Boolean draft) {
        this.draft = draft;
    }

    /**
     * Getter for ClosedBy.
     * @return Returns the Object
     */
    @JsonGetter("closed_by")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getClosedBy() {
        return closedBy;
    }

    /**
     * Setter for ClosedBy.
     * @param closedBy Value for Object
     */
    @JsonSetter("closed_by")
    public void setClosedBy(Object closedBy) {
        this.closedBy = closedBy;
    }

    /**
     * Getter for BodyHtml.
     * @return Returns the String
     */
    @JsonGetter("body_html")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBodyHtml() {
        return bodyHtml;
    }

    /**
     * Setter for BodyHtml.
     * @param bodyHtml Value for String
     */
    @JsonSetter("body_html")
    public void setBodyHtml(String bodyHtml) {
        this.bodyHtml = bodyHtml;
    }

    /**
     * Getter for BodyText.
     * @return Returns the String
     */
    @JsonGetter("body_text")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBodyText() {
        return bodyText;
    }

    /**
     * Setter for BodyText.
     * @param bodyText Value for String
     */
    @JsonSetter("body_text")
    public void setBodyText(String bodyText) {
        this.bodyText = bodyText;
    }

    /**
     * Getter for TimelineUrl.
     * @return Returns the String
     */
    @JsonGetter("timeline_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTimelineUrl() {
        return timelineUrl;
    }

    /**
     * Setter for TimelineUrl.
     * @param timelineUrl Value for String
     */
    @JsonSetter("timeline_url")
    public void setTimelineUrl(String timelineUrl) {
        this.timelineUrl = timelineUrl;
    }

    /**
     * Getter for Repository.
     * @return Returns the Repository3
     */
    @JsonGetter("repository")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Repository3 getRepository() {
        return repository;
    }

    /**
     * Setter for Repository.
     * @param repository Value for Repository3
     */
    @JsonSetter("repository")
    public void setRepository(Repository3 repository) {
        this.repository = repository;
    }

    /**
     * Getter for PerformedViaGithubApp.
     * @return Returns the Object
     */
    @JsonGetter("performed_via_github_app")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getPerformedViaGithubApp() {
        return performedViaGithubApp;
    }

    /**
     * Setter for PerformedViaGithubApp.
     * @param performedViaGithubApp Value for Object
     */
    @JsonSetter("performed_via_github_app")
    public void setPerformedViaGithubApp(Object performedViaGithubApp) {
        this.performedViaGithubApp = performedViaGithubApp;
    }

    /**
     * Getter for AuthorAssociation.
     * @return Returns the AuthorAssociationEnum
     */
    @JsonGetter("author_association")
    public AuthorAssociationEnum getAuthorAssociation() {
        return authorAssociation;
    }

    /**
     * Setter for AuthorAssociation.
     * @param authorAssociation Value for AuthorAssociationEnum
     */
    @JsonSetter("author_association")
    public void setAuthorAssociation(AuthorAssociationEnum authorAssociation) {
        this.authorAssociation = authorAssociation;
    }

    /**
     * Getter for Reactions.
     * @return Returns the ReactionRollup
     */
    @JsonGetter("reactions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ReactionRollup getReactions() {
        return reactions;
    }

    /**
     * Setter for Reactions.
     * @param reactions Value for ReactionRollup
     */
    @JsonSetter("reactions")
    public void setReactions(ReactionRollup reactions) {
        this.reactions = reactions;
    }

    /**
     * Converts this Issue1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Issue1 [" + "id=" + id + ", nodeId=" + nodeId + ", url=" + url + ", repositoryUrl="
                + repositoryUrl + ", labelsUrl=" + labelsUrl + ", commentsUrl=" + commentsUrl
                + ", eventsUrl=" + eventsUrl + ", htmlUrl=" + htmlUrl + ", number=" + number
                + ", state=" + state + ", title=" + title + ", user=" + user + ", labels=" + labels
                + ", assignee=" + assignee + ", milestone=" + milestone + ", locked=" + locked
                + ", comments=" + comments + ", closedAt=" + closedAt + ", createdAt=" + createdAt
                + ", updatedAt=" + updatedAt + ", authorAssociation=" + authorAssociation
                + ", stateReason=" + stateReason + ", body=" + body + ", assignees=" + assignees
                + ", activeLockReason=" + activeLockReason + ", pullRequest=" + pullRequest
                + ", draft=" + draft + ", closedBy=" + closedBy + ", bodyHtml=" + bodyHtml
                + ", bodyText=" + bodyText + ", timelineUrl=" + timelineUrl + ", repository="
                + repository + ", performedViaGithubApp=" + performedViaGithubApp + ", reactions="
                + reactions + "]";
    }

    /**
     * Builds a new {@link Issue1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Issue1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, nodeId, url, repositoryUrl, labelsUrl, commentsUrl,
                eventsUrl, htmlUrl, number, state, title, user, labels, assignee, milestone, locked,
                comments, closedAt, createdAt, updatedAt, authorAssociation)
                .stateReason(getStateReason())
                .pullRequest(getPullRequest())
                .draft(getDraft())
                .closedBy(getClosedBy())
                .bodyHtml(getBodyHtml())
                .bodyText(getBodyText())
                .timelineUrl(getTimelineUrl())
                .repository(getRepository())
                .performedViaGithubApp(getPerformedViaGithubApp())
                .reactions(getReactions());
        builder.body = internalGetBody();
        builder.assignees = internalGetAssignees();
        builder.activeLockReason = internalGetActiveLockReason();
        return builder;
    }

    /**
     * Class to build instances of {@link Issue1}.
     */
    public static class Builder {
        private int id;
        private String nodeId;
        private String url;
        private String repositoryUrl;
        private String labelsUrl;
        private String commentsUrl;
        private String eventsUrl;
        private String htmlUrl;
        private int number;
        private String state;
        private String title;
        private Object user;
        private List<Issue1Labels> labels;
        private Object assignee;
        private Object milestone;
        private boolean locked;
        private int comments;
        private LocalDateTime closedAt;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private AuthorAssociationEnum authorAssociation;
        private Object stateReason;
        private OptionalNullable<String> body;
        private OptionalNullable<List<SimpleUser>> assignees;
        private OptionalNullable<String> activeLockReason;
        private PullRequest1 pullRequest;
        private Boolean draft;
        private Object closedBy;
        private String bodyHtml;
        private String bodyText;
        private String timelineUrl;
        private Repository3 repository;
        private Object performedViaGithubApp;
        private ReactionRollup reactions;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  url  String value for url.
         * @param  repositoryUrl  String value for repositoryUrl.
         * @param  labelsUrl  String value for labelsUrl.
         * @param  commentsUrl  String value for commentsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  number  int value for number.
         * @param  state  String value for state.
         * @param  title  String value for title.
         * @param  user  Object value for user.
         * @param  labels  List of Issue1Labels value for labels.
         * @param  assignee  Object value for assignee.
         * @param  milestone  Object value for milestone.
         * @param  locked  boolean value for locked.
         * @param  comments  int value for comments.
         * @param  closedAt  LocalDateTime value for closedAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
         */
        public Builder(int id, String nodeId, String url, String repositoryUrl, String labelsUrl,
                String commentsUrl, String eventsUrl, String htmlUrl, int number, String state,
                String title, Object user, List<Issue1Labels> labels, Object assignee,
                Object milestone, boolean locked, int comments, LocalDateTime closedAt,
                LocalDateTime createdAt, LocalDateTime updatedAt,
                AuthorAssociationEnum authorAssociation) {
            this.id = id;
            this.nodeId = nodeId;
            this.url = url;
            this.repositoryUrl = repositoryUrl;
            this.labelsUrl = labelsUrl;
            this.commentsUrl = commentsUrl;
            this.eventsUrl = eventsUrl;
            this.htmlUrl = htmlUrl;
            this.number = number;
            this.state = state;
            this.title = title;
            this.user = user;
            this.labels = labels;
            this.assignee = assignee;
            this.milestone = milestone;
            this.locked = locked;
            this.comments = comments;
            this.closedAt = closedAt;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.authorAssociation = authorAssociation;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for repositoryUrl.
         * @param  repositoryUrl  String value for repositoryUrl.
         * @return Builder
         */
        public Builder repositoryUrl(String repositoryUrl) {
            this.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * Setter for labelsUrl.
         * @param  labelsUrl  String value for labelsUrl.
         * @return Builder
         */
        public Builder labelsUrl(String labelsUrl) {
            this.labelsUrl = labelsUrl;
            return this;
        }

        /**
         * Setter for commentsUrl.
         * @param  commentsUrl  String value for commentsUrl.
         * @return Builder
         */
        public Builder commentsUrl(String commentsUrl) {
            this.commentsUrl = commentsUrl;
            return this;
        }

        /**
         * Setter for eventsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @return Builder
         */
        public Builder eventsUrl(String eventsUrl) {
            this.eventsUrl = eventsUrl;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for number.
         * @param  number  int value for number.
         * @return Builder
         */
        public Builder number(int number) {
            this.number = number;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  String value for state.
         * @return Builder
         */
        public Builder state(String state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for title.
         * @param  title  String value for title.
         * @return Builder
         */
        public Builder title(String title) {
            this.title = title;
            return this;
        }

        /**
         * Setter for user.
         * @param  user  Object value for user.
         * @return Builder
         */
        public Builder user(Object user) {
            this.user = user;
            return this;
        }

        /**
         * Setter for labels.
         * @param  labels  List of Issue1Labels value for labels.
         * @return Builder
         */
        public Builder labels(List<Issue1Labels> labels) {
            this.labels = labels;
            return this;
        }

        /**
         * Setter for assignee.
         * @param  assignee  Object value for assignee.
         * @return Builder
         */
        public Builder assignee(Object assignee) {
            this.assignee = assignee;
            return this;
        }

        /**
         * Setter for milestone.
         * @param  milestone  Object value for milestone.
         * @return Builder
         */
        public Builder milestone(Object milestone) {
            this.milestone = milestone;
            return this;
        }

        /**
         * Setter for locked.
         * @param  locked  boolean value for locked.
         * @return Builder
         */
        public Builder locked(boolean locked) {
            this.locked = locked;
            return this;
        }

        /**
         * Setter for comments.
         * @param  comments  int value for comments.
         * @return Builder
         */
        public Builder comments(int comments) {
            this.comments = comments;
            return this;
        }

        /**
         * Setter for closedAt.
         * @param  closedAt  LocalDateTime value for closedAt.
         * @return Builder
         */
        public Builder closedAt(LocalDateTime closedAt) {
            this.closedAt = closedAt;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for authorAssociation.
         * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
         * @return Builder
         */
        public Builder authorAssociation(AuthorAssociationEnum authorAssociation) {
            this.authorAssociation = authorAssociation;
            return this;
        }

        /**
         * Setter for stateReason.
         * @param  stateReason  Object value for stateReason.
         * @return Builder
         */
        public Builder stateReason(Object stateReason) {
            this.stateReason = stateReason;
            return this;
        }

        /**
         * Setter for body.
         * @param  body  String value for body.
         * @return Builder
         */
        public Builder body(String body) {
            this.body = OptionalNullable.of(body);
            return this;
        }

        /**
         * UnSetter for body.
         * @return Builder
         */
        public Builder unsetBody() {
            body = null;
            return this;
        }

        /**
         * Setter for assignees.
         * @param  assignees  List of SimpleUser value for assignees.
         * @return Builder
         */
        public Builder assignees(List<SimpleUser> assignees) {
            this.assignees = OptionalNullable.of(assignees);
            return this;
        }

        /**
         * UnSetter for assignees.
         * @return Builder
         */
        public Builder unsetAssignees() {
            assignees = null;
            return this;
        }

        /**
         * Setter for activeLockReason.
         * @param  activeLockReason  String value for activeLockReason.
         * @return Builder
         */
        public Builder activeLockReason(String activeLockReason) {
            this.activeLockReason = OptionalNullable.of(activeLockReason);
            return this;
        }

        /**
         * UnSetter for activeLockReason.
         * @return Builder
         */
        public Builder unsetActiveLockReason() {
            activeLockReason = null;
            return this;
        }

        /**
         * Setter for pullRequest.
         * @param  pullRequest  PullRequest1 value for pullRequest.
         * @return Builder
         */
        public Builder pullRequest(PullRequest1 pullRequest) {
            this.pullRequest = pullRequest;
            return this;
        }

        /**
         * Setter for draft.
         * @param  draft  Boolean value for draft.
         * @return Builder
         */
        public Builder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }

        /**
         * Setter for closedBy.
         * @param  closedBy  Object value for closedBy.
         * @return Builder
         */
        public Builder closedBy(Object closedBy) {
            this.closedBy = closedBy;
            return this;
        }

        /**
         * Setter for bodyHtml.
         * @param  bodyHtml  String value for bodyHtml.
         * @return Builder
         */
        public Builder bodyHtml(String bodyHtml) {
            this.bodyHtml = bodyHtml;
            return this;
        }

        /**
         * Setter for bodyText.
         * @param  bodyText  String value for bodyText.
         * @return Builder
         */
        public Builder bodyText(String bodyText) {
            this.bodyText = bodyText;
            return this;
        }

        /**
         * Setter for timelineUrl.
         * @param  timelineUrl  String value for timelineUrl.
         * @return Builder
         */
        public Builder timelineUrl(String timelineUrl) {
            this.timelineUrl = timelineUrl;
            return this;
        }

        /**
         * Setter for repository.
         * @param  repository  Repository3 value for repository.
         * @return Builder
         */
        public Builder repository(Repository3 repository) {
            this.repository = repository;
            return this;
        }

        /**
         * Setter for performedViaGithubApp.
         * @param  performedViaGithubApp  Object value for performedViaGithubApp.
         * @return Builder
         */
        public Builder performedViaGithubApp(Object performedViaGithubApp) {
            this.performedViaGithubApp = performedViaGithubApp;
            return this;
        }

        /**
         * Setter for reactions.
         * @param  reactions  ReactionRollup value for reactions.
         * @return Builder
         */
        public Builder reactions(ReactionRollup reactions) {
            this.reactions = reactions;
            return this;
        }

        /**
         * Builds a new {@link Issue1} object using the set fields.
         * @return {@link Issue1}
         */
        public Issue1 build() {
            return new Issue1(id, nodeId, url, repositoryUrl, labelsUrl, commentsUrl, eventsUrl,
                    htmlUrl, number, state, title, user, labels, assignee, milestone, locked,
                    comments, closedAt, createdAt, updatedAt, authorAssociation, stateReason, body,
                    assignees, activeLockReason, pullRequest, draft, closedBy, bodyHtml, bodyText,
                    timelineUrl, repository, performedViaGithubApp, reactions);
        }
    }
}

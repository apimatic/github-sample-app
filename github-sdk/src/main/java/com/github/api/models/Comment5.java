/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;

/**
 * This is a model class for Comment5 type.
 */
public class Comment5 {
    private AuthorAssociationEnum authorAssociation;
    private String body;
    private LocalDateTime createdAt;
    private String htmlUrl;
    private int id;
    private String issueUrl;
    private String nodeId;
    private Object performedViaGithubApp;
    private ReactionRollup reactions;
    private LocalDateTime updatedAt;
    private String url;
    private Object user;

    /**
     * Default constructor.
     */
    public Comment5() {
    }

    /**
     * Initialization constructor.
     * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
     * @param  body  String value for body.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  id  int value for id.
     * @param  issueUrl  String value for issueUrl.
     * @param  nodeId  String value for nodeId.
     * @param  performedViaGithubApp  Object value for performedViaGithubApp.
     * @param  reactions  ReactionRollup value for reactions.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  url  String value for url.
     * @param  user  Object value for user.
     */
    public Comment5(
            AuthorAssociationEnum authorAssociation,
            String body,
            LocalDateTime createdAt,
            String htmlUrl,
            int id,
            String issueUrl,
            String nodeId,
            Object performedViaGithubApp,
            ReactionRollup reactions,
            LocalDateTime updatedAt,
            String url,
            Object user) {
        this.authorAssociation = authorAssociation;
        this.body = body;
        this.createdAt = createdAt;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.issueUrl = issueUrl;
        this.nodeId = nodeId;
        this.performedViaGithubApp = performedViaGithubApp;
        this.reactions = reactions;
        this.updatedAt = updatedAt;
        this.url = url;
        this.user = user;
    }

    /**
     * Getter for AuthorAssociation.
     * @return Returns the AuthorAssociationEnum
     */
    @JsonGetter("author_association")
    public AuthorAssociationEnum getAuthorAssociation() {
        return authorAssociation;
    }

    /**
     * Setter for AuthorAssociation.
     * @param authorAssociation Value for AuthorAssociationEnum
     */
    @JsonSetter("author_association")
    public void setAuthorAssociation(AuthorAssociationEnum authorAssociation) {
        this.authorAssociation = authorAssociation;
    }

    /**
     * Getter for Body.
     * Contents of the issue comment
     * @return Returns the String
     */
    @JsonGetter("body")
    public String getBody() {
        return body;
    }

    /**
     * Setter for Body.
     * Contents of the issue comment
     * @param body Value for String
     */
    @JsonSetter("body")
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Id.
     * Unique identifier of the issue comment
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier of the issue comment
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for IssueUrl.
     * @return Returns the String
     */
    @JsonGetter("issue_url")
    public String getIssueUrl() {
        return issueUrl;
    }

    /**
     * Setter for IssueUrl.
     * @param issueUrl Value for String
     */
    @JsonSetter("issue_url")
    public void setIssueUrl(String issueUrl) {
        this.issueUrl = issueUrl;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for PerformedViaGithubApp.
     * @return Returns the Object
     */
    @JsonGetter("performed_via_github_app")
    public Object getPerformedViaGithubApp() {
        return performedViaGithubApp;
    }

    /**
     * Setter for PerformedViaGithubApp.
     * @param performedViaGithubApp Value for Object
     */
    @JsonSetter("performed_via_github_app")
    public void setPerformedViaGithubApp(Object performedViaGithubApp) {
        this.performedViaGithubApp = performedViaGithubApp;
    }

    /**
     * Getter for Reactions.
     * @return Returns the ReactionRollup
     */
    @JsonGetter("reactions")
    public ReactionRollup getReactions() {
        return reactions;
    }

    /**
     * Setter for Reactions.
     * @param reactions Value for ReactionRollup
     */
    @JsonSetter("reactions")
    public void setReactions(ReactionRollup reactions) {
        this.reactions = reactions;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Url.
     * URL for the issue comment
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * URL for the issue comment
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for User.
     * @return Returns the Object
     */
    @JsonGetter("user")
    public Object getUser() {
        return user;
    }

    /**
     * Setter for User.
     * @param user Value for Object
     */
    @JsonSetter("user")
    public void setUser(Object user) {
        this.user = user;
    }

    /**
     * Converts this Comment5 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Comment5 [" + "authorAssociation=" + authorAssociation + ", body=" + body
                + ", createdAt=" + createdAt + ", htmlUrl=" + htmlUrl + ", id=" + id + ", issueUrl="
                + issueUrl + ", nodeId=" + nodeId + ", performedViaGithubApp="
                + performedViaGithubApp + ", reactions=" + reactions + ", updatedAt=" + updatedAt
                + ", url=" + url + ", user=" + user + "]";
    }

    /**
     * Builds a new {@link Comment5.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Comment5.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(authorAssociation, body, createdAt, htmlUrl, id, issueUrl,
                nodeId, performedViaGithubApp, reactions, updatedAt, url, user);
        return builder;
    }

    /**
     * Class to build instances of {@link Comment5}.
     */
    public static class Builder {
        private AuthorAssociationEnum authorAssociation;
        private String body;
        private LocalDateTime createdAt;
        private String htmlUrl;
        private int id;
        private String issueUrl;
        private String nodeId;
        private Object performedViaGithubApp;
        private ReactionRollup reactions;
        private LocalDateTime updatedAt;
        private String url;
        private Object user;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
         * @param  body  String value for body.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  id  int value for id.
         * @param  issueUrl  String value for issueUrl.
         * @param  nodeId  String value for nodeId.
         * @param  performedViaGithubApp  Object value for performedViaGithubApp.
         * @param  reactions  ReactionRollup value for reactions.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  url  String value for url.
         * @param  user  Object value for user.
         */
        public Builder(AuthorAssociationEnum authorAssociation, String body,
                LocalDateTime createdAt, String htmlUrl, int id, String issueUrl, String nodeId,
                Object performedViaGithubApp, ReactionRollup reactions, LocalDateTime updatedAt,
                String url, Object user) {
            this.authorAssociation = authorAssociation;
            this.body = body;
            this.createdAt = createdAt;
            this.htmlUrl = htmlUrl;
            this.id = id;
            this.issueUrl = issueUrl;
            this.nodeId = nodeId;
            this.performedViaGithubApp = performedViaGithubApp;
            this.reactions = reactions;
            this.updatedAt = updatedAt;
            this.url = url;
            this.user = user;
        }

        /**
         * Setter for authorAssociation.
         * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
         * @return Builder
         */
        public Builder authorAssociation(AuthorAssociationEnum authorAssociation) {
            this.authorAssociation = authorAssociation;
            return this;
        }

        /**
         * Setter for body.
         * @param  body  String value for body.
         * @return Builder
         */
        public Builder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for issueUrl.
         * @param  issueUrl  String value for issueUrl.
         * @return Builder
         */
        public Builder issueUrl(String issueUrl) {
            this.issueUrl = issueUrl;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for performedViaGithubApp.
         * @param  performedViaGithubApp  Object value for performedViaGithubApp.
         * @return Builder
         */
        public Builder performedViaGithubApp(Object performedViaGithubApp) {
            this.performedViaGithubApp = performedViaGithubApp;
            return this;
        }

        /**
         * Setter for reactions.
         * @param  reactions  ReactionRollup value for reactions.
         * @return Builder
         */
        public Builder reactions(ReactionRollup reactions) {
            this.reactions = reactions;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for user.
         * @param  user  Object value for user.
         * @return Builder
         */
        public Builder user(Object user) {
            this.user = user;
            return this;
        }

        /**
         * Builds a new {@link Comment5} object using the set fields.
         * @return {@link Comment5}
         */
        public Comment5 build() {
            return new Comment5(authorAssociation, body, createdAt, htmlUrl, id, issueUrl, nodeId,
                    performedViaGithubApp, reactions, updatedAt, url, user);
        }
    }
}

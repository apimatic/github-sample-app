/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;

/**
 * This is a model class for Alert10 type.
 */
public class Alert10 {
    private LocalDateTime createdAt;
    private String htmlUrl;
    private String locationsUrl;
    private Integer number;
    private OptionalNullable<Boolean> pushProtectionBypassed;
    private OptionalNullable<LocalDateTime> pushProtectionBypassedAt;
    private Object pushProtectionBypassedBy;
    private Object resolution;
    private OptionalNullable<LocalDateTime> resolvedAt;
    private Object resolvedBy;
    private OptionalNullable<String> resolutionComment;
    private String secret;
    private String secretType;
    private String secretTypeDisplayName;
    private SecretScanningAlertStateEnum state;
    private LocalDateTime updatedAt;
    private String url;

    /**
     * Default constructor.
     */
    public Alert10() {
    }

    /**
     * Initialization constructor.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  locationsUrl  String value for locationsUrl.
     * @param  number  Integer value for number.
     * @param  pushProtectionBypassed  Boolean value for pushProtectionBypassed.
     * @param  pushProtectionBypassedAt  LocalDateTime value for pushProtectionBypassedAt.
     * @param  pushProtectionBypassedBy  Object value for pushProtectionBypassedBy.
     * @param  resolution  Object value for resolution.
     * @param  resolvedAt  LocalDateTime value for resolvedAt.
     * @param  resolvedBy  Object value for resolvedBy.
     * @param  resolutionComment  String value for resolutionComment.
     * @param  secret  String value for secret.
     * @param  secretType  String value for secretType.
     * @param  secretTypeDisplayName  String value for secretTypeDisplayName.
     * @param  state  SecretScanningAlertStateEnum value for state.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  url  String value for url.
     */
    public Alert10(
            LocalDateTime createdAt,
            String htmlUrl,
            String locationsUrl,
            Integer number,
            Boolean pushProtectionBypassed,
            LocalDateTime pushProtectionBypassedAt,
            Object pushProtectionBypassedBy,
            Object resolution,
            LocalDateTime resolvedAt,
            Object resolvedBy,
            String resolutionComment,
            String secret,
            String secretType,
            String secretTypeDisplayName,
            SecretScanningAlertStateEnum state,
            LocalDateTime updatedAt,
            String url) {
        this.createdAt = createdAt;
        this.htmlUrl = htmlUrl;
        this.locationsUrl = locationsUrl;
        this.number = number;
        this.pushProtectionBypassed = OptionalNullable.of(pushProtectionBypassed);
        this.pushProtectionBypassedAt = OptionalNullable.of(pushProtectionBypassedAt);
        this.pushProtectionBypassedBy = pushProtectionBypassedBy;
        this.resolution = resolution;
        this.resolvedAt = OptionalNullable.of(resolvedAt);
        this.resolvedBy = resolvedBy;
        this.resolutionComment = OptionalNullable.of(resolutionComment);
        this.secret = secret;
        this.secretType = secretType;
        this.secretTypeDisplayName = secretTypeDisplayName;
        this.state = state;
        this.updatedAt = updatedAt;
        this.url = url;
    }

    /**
     * Internal initialization constructor.
     */
    protected Alert10(LocalDateTime createdAt, String htmlUrl, String locationsUrl, Integer number,
            OptionalNullable<Boolean> pushProtectionBypassed,
            OptionalNullable<LocalDateTime> pushProtectionBypassedAt,
            Object pushProtectionBypassedBy, Object resolution,
            OptionalNullable<LocalDateTime> resolvedAt, Object resolvedBy,
            OptionalNullable<String> resolutionComment, String secret, String secretType,
            String secretTypeDisplayName, SecretScanningAlertStateEnum state,
            LocalDateTime updatedAt, String url) {
        this.createdAt = createdAt;
        this.htmlUrl = htmlUrl;
        this.locationsUrl = locationsUrl;
        this.number = number;
        this.pushProtectionBypassed = pushProtectionBypassed;
        this.pushProtectionBypassedAt = pushProtectionBypassedAt;
        this.pushProtectionBypassedBy = pushProtectionBypassedBy;
        this.resolution = resolution;
        this.resolvedAt = resolvedAt;
        this.resolvedBy = resolvedBy;
        this.resolutionComment = resolutionComment;
        this.secret = secret;
        this.secretType = secretType;
        this.secretTypeDisplayName = secretTypeDisplayName;
        this.state = state;
        this.updatedAt = updatedAt;
        this.url = url;
    }

    /**
     * Getter for CreatedAt.
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for HtmlUrl.
     * The GitHub URL of the alert resource.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * The GitHub URL of the alert resource.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for LocationsUrl.
     * The REST API URL of the code locations for this alert.
     * @return Returns the String
     */
    @JsonGetter("locations_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLocationsUrl() {
        return locationsUrl;
    }

    /**
     * Setter for LocationsUrl.
     * The REST API URL of the code locations for this alert.
     * @param locationsUrl Value for String
     */
    @JsonSetter("locations_url")
    public void setLocationsUrl(String locationsUrl) {
        this.locationsUrl = locationsUrl;
    }

    /**
     * Getter for Number.
     * The security alert number.
     * @return Returns the Integer
     */
    @JsonGetter("number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getNumber() {
        return number;
    }

    /**
     * Setter for Number.
     * The security alert number.
     * @param number Value for Integer
     */
    @JsonSetter("number")
    public void setNumber(Integer number) {
        this.number = number;
    }

    /**
     * Internal Getter for PushProtectionBypassed.
     * Whether push protection was bypassed for the detected secret.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("push_protection_bypassed")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetPushProtectionBypassed() {
        return this.pushProtectionBypassed;
    }

    /**
     * Getter for PushProtectionBypassed.
     * Whether push protection was bypassed for the detected secret.
     * @return Returns the Boolean
     */
    public Boolean getPushProtectionBypassed() {
        return OptionalNullable.getFrom(pushProtectionBypassed);
    }

    /**
     * Setter for PushProtectionBypassed.
     * Whether push protection was bypassed for the detected secret.
     * @param pushProtectionBypassed Value for Boolean
     */
    @JsonSetter("push_protection_bypassed")
    public void setPushProtectionBypassed(Boolean pushProtectionBypassed) {
        this.pushProtectionBypassed = OptionalNullable.of(pushProtectionBypassed);
    }

    /**
     * UnSetter for PushProtectionBypassed.
     * Whether push protection was bypassed for the detected secret.
     */
    public void unsetPushProtectionBypassed() {
        pushProtectionBypassed = null;
    }

    /**
     * Internal Getter for PushProtectionBypassedAt.
     * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("push_protection_bypassed_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetPushProtectionBypassedAt() {
        return this.pushProtectionBypassedAt;
    }

    /**
     * Getter for PushProtectionBypassedAt.
     * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getPushProtectionBypassedAt() {
        return OptionalNullable.getFrom(pushProtectionBypassedAt);
    }

    /**
     * Setter for PushProtectionBypassedAt.
     * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param pushProtectionBypassedAt Value for LocalDateTime
     */
    @JsonSetter("push_protection_bypassed_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setPushProtectionBypassedAt(LocalDateTime pushProtectionBypassedAt) {
        this.pushProtectionBypassedAt = OptionalNullable.of(pushProtectionBypassedAt);
    }

    /**
     * UnSetter for PushProtectionBypassedAt.
     * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    public void unsetPushProtectionBypassedAt() {
        pushProtectionBypassedAt = null;
    }

    /**
     * Getter for PushProtectionBypassedBy.
     * @return Returns the Object
     */
    @JsonGetter("push_protection_bypassed_by")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getPushProtectionBypassedBy() {
        return pushProtectionBypassedBy;
    }

    /**
     * Setter for PushProtectionBypassedBy.
     * @param pushProtectionBypassedBy Value for Object
     */
    @JsonSetter("push_protection_bypassed_by")
    public void setPushProtectionBypassedBy(Object pushProtectionBypassedBy) {
        this.pushProtectionBypassedBy = pushProtectionBypassedBy;
    }

    /**
     * Getter for Resolution.
     * @return Returns the Object
     */
    @JsonGetter("resolution")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getResolution() {
        return resolution;
    }

    /**
     * Setter for Resolution.
     * @param resolution Value for Object
     */
    @JsonSetter("resolution")
    public void setResolution(Object resolution) {
        this.resolution = resolution;
    }

    /**
     * Internal Getter for ResolvedAt.
     * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("resolved_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetResolvedAt() {
        return this.resolvedAt;
    }

    /**
     * Getter for ResolvedAt.
     * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getResolvedAt() {
        return OptionalNullable.getFrom(resolvedAt);
    }

    /**
     * Setter for ResolvedAt.
     * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param resolvedAt Value for LocalDateTime
     */
    @JsonSetter("resolved_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setResolvedAt(LocalDateTime resolvedAt) {
        this.resolvedAt = OptionalNullable.of(resolvedAt);
    }

    /**
     * UnSetter for ResolvedAt.
     * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    public void unsetResolvedAt() {
        resolvedAt = null;
    }

    /**
     * Getter for ResolvedBy.
     * @return Returns the Object
     */
    @JsonGetter("resolved_by")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getResolvedBy() {
        return resolvedBy;
    }

    /**
     * Setter for ResolvedBy.
     * @param resolvedBy Value for Object
     */
    @JsonSetter("resolved_by")
    public void setResolvedBy(Object resolvedBy) {
        this.resolvedBy = resolvedBy;
    }

    /**
     * Internal Getter for ResolutionComment.
     * An optional comment to resolve an alert.
     * @return Returns the Internal String
     */
    @JsonGetter("resolution_comment")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetResolutionComment() {
        return this.resolutionComment;
    }

    /**
     * Getter for ResolutionComment.
     * An optional comment to resolve an alert.
     * @return Returns the String
     */
    public String getResolutionComment() {
        return OptionalNullable.getFrom(resolutionComment);
    }

    /**
     * Setter for ResolutionComment.
     * An optional comment to resolve an alert.
     * @param resolutionComment Value for String
     */
    @JsonSetter("resolution_comment")
    public void setResolutionComment(String resolutionComment) {
        this.resolutionComment = OptionalNullable.of(resolutionComment);
    }

    /**
     * UnSetter for ResolutionComment.
     * An optional comment to resolve an alert.
     */
    public void unsetResolutionComment() {
        resolutionComment = null;
    }

    /**
     * Getter for Secret.
     * The secret that was detected.
     * @return Returns the String
     */
    @JsonGetter("secret")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSecret() {
        return secret;
    }

    /**
     * Setter for Secret.
     * The secret that was detected.
     * @param secret Value for String
     */
    @JsonSetter("secret")
    public void setSecret(String secret) {
        this.secret = secret;
    }

    /**
     * Getter for SecretType.
     * The type of secret that secret scanning detected.
     * @return Returns the String
     */
    @JsonGetter("secret_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSecretType() {
        return secretType;
    }

    /**
     * Setter for SecretType.
     * The type of secret that secret scanning detected.
     * @param secretType Value for String
     */
    @JsonSetter("secret_type")
    public void setSecretType(String secretType) {
        this.secretType = secretType;
    }

    /**
     * Getter for SecretTypeDisplayName.
     * User-friendly name for the detected secret, matching the `secret_type`. For a list of
     * built-in patterns, see "[Secret scanning
     * patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
     * @return Returns the String
     */
    @JsonGetter("secret_type_display_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSecretTypeDisplayName() {
        return secretTypeDisplayName;
    }

    /**
     * Setter for SecretTypeDisplayName.
     * User-friendly name for the detected secret, matching the `secret_type`. For a list of
     * built-in patterns, see "[Secret scanning
     * patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
     * @param secretTypeDisplayName Value for String
     */
    @JsonSetter("secret_type_display_name")
    public void setSecretTypeDisplayName(String secretTypeDisplayName) {
        this.secretTypeDisplayName = secretTypeDisplayName;
    }

    /**
     * Getter for State.
     * @return Returns the SecretScanningAlertStateEnum
     */
    @JsonGetter("state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SecretScanningAlertStateEnum getState() {
        return state;
    }

    /**
     * Setter for State.
     * @param state Value for SecretScanningAlertStateEnum
     */
    @JsonSetter("state")
    public void setState(SecretScanningAlertStateEnum state) {
        this.state = state;
    }

    /**
     * Getter for UpdatedAt.
     * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Url.
     * The REST API URL of the alert resource.
     * @return Returns the String
     */
    @JsonGetter("url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * The REST API URL of the alert resource.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Converts this Alert10 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Alert10 [" + "createdAt=" + createdAt + ", htmlUrl=" + htmlUrl + ", locationsUrl="
                + locationsUrl + ", number=" + number + ", pushProtectionBypassed="
                + pushProtectionBypassed + ", pushProtectionBypassedAt=" + pushProtectionBypassedAt
                + ", pushProtectionBypassedBy=" + pushProtectionBypassedBy + ", resolution="
                + resolution + ", resolvedAt=" + resolvedAt + ", resolvedBy=" + resolvedBy
                + ", resolutionComment=" + resolutionComment + ", secret=" + secret
                + ", secretType=" + secretType + ", secretTypeDisplayName=" + secretTypeDisplayName
                + ", state=" + state + ", updatedAt=" + updatedAt + ", url=" + url + "]";
    }

    /**
     * Builds a new {@link Alert10.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Alert10.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .createdAt(getCreatedAt())
                .htmlUrl(getHtmlUrl())
                .locationsUrl(getLocationsUrl())
                .number(getNumber())
                .pushProtectionBypassedBy(getPushProtectionBypassedBy())
                .resolution(getResolution())
                .resolvedBy(getResolvedBy())
                .secret(getSecret())
                .secretType(getSecretType())
                .secretTypeDisplayName(getSecretTypeDisplayName())
                .state(getState())
                .updatedAt(getUpdatedAt())
                .url(getUrl());
        builder.pushProtectionBypassed = internalGetPushProtectionBypassed();
        builder.pushProtectionBypassedAt = internalGetPushProtectionBypassedAt();
        builder.resolvedAt = internalGetResolvedAt();
        builder.resolutionComment = internalGetResolutionComment();
        return builder;
    }

    /**
     * Class to build instances of {@link Alert10}.
     */
    public static class Builder {
        private LocalDateTime createdAt;
        private String htmlUrl;
        private String locationsUrl;
        private Integer number;
        private OptionalNullable<Boolean> pushProtectionBypassed;
        private OptionalNullable<LocalDateTime> pushProtectionBypassedAt;
        private Object pushProtectionBypassedBy;
        private Object resolution;
        private OptionalNullable<LocalDateTime> resolvedAt;
        private Object resolvedBy;
        private OptionalNullable<String> resolutionComment;
        private String secret;
        private String secretType;
        private String secretTypeDisplayName;
        private SecretScanningAlertStateEnum state;
        private LocalDateTime updatedAt;
        private String url;



        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for locationsUrl.
         * @param  locationsUrl  String value for locationsUrl.
         * @return Builder
         */
        public Builder locationsUrl(String locationsUrl) {
            this.locationsUrl = locationsUrl;
            return this;
        }

        /**
         * Setter for number.
         * @param  number  Integer value for number.
         * @return Builder
         */
        public Builder number(Integer number) {
            this.number = number;
            return this;
        }

        /**
         * Setter for pushProtectionBypassed.
         * @param  pushProtectionBypassed  Boolean value for pushProtectionBypassed.
         * @return Builder
         */
        public Builder pushProtectionBypassed(Boolean pushProtectionBypassed) {
            this.pushProtectionBypassed = OptionalNullable.of(pushProtectionBypassed);
            return this;
        }

        /**
         * UnSetter for pushProtectionBypassed.
         * @return Builder
         */
        public Builder unsetPushProtectionBypassed() {
            pushProtectionBypassed = null;
            return this;
        }

        /**
         * Setter for pushProtectionBypassedAt.
         * @param  pushProtectionBypassedAt  LocalDateTime value for pushProtectionBypassedAt.
         * @return Builder
         */
        public Builder pushProtectionBypassedAt(LocalDateTime pushProtectionBypassedAt) {
            this.pushProtectionBypassedAt = OptionalNullable.of(pushProtectionBypassedAt);
            return this;
        }

        /**
         * UnSetter for pushProtectionBypassedAt.
         * @return Builder
         */
        public Builder unsetPushProtectionBypassedAt() {
            pushProtectionBypassedAt = null;
            return this;
        }

        /**
         * Setter for pushProtectionBypassedBy.
         * @param  pushProtectionBypassedBy  Object value for pushProtectionBypassedBy.
         * @return Builder
         */
        public Builder pushProtectionBypassedBy(Object pushProtectionBypassedBy) {
            this.pushProtectionBypassedBy = pushProtectionBypassedBy;
            return this;
        }

        /**
         * Setter for resolution.
         * @param  resolution  Object value for resolution.
         * @return Builder
         */
        public Builder resolution(Object resolution) {
            this.resolution = resolution;
            return this;
        }

        /**
         * Setter for resolvedAt.
         * @param  resolvedAt  LocalDateTime value for resolvedAt.
         * @return Builder
         */
        public Builder resolvedAt(LocalDateTime resolvedAt) {
            this.resolvedAt = OptionalNullable.of(resolvedAt);
            return this;
        }

        /**
         * UnSetter for resolvedAt.
         * @return Builder
         */
        public Builder unsetResolvedAt() {
            resolvedAt = null;
            return this;
        }

        /**
         * Setter for resolvedBy.
         * @param  resolvedBy  Object value for resolvedBy.
         * @return Builder
         */
        public Builder resolvedBy(Object resolvedBy) {
            this.resolvedBy = resolvedBy;
            return this;
        }

        /**
         * Setter for resolutionComment.
         * @param  resolutionComment  String value for resolutionComment.
         * @return Builder
         */
        public Builder resolutionComment(String resolutionComment) {
            this.resolutionComment = OptionalNullable.of(resolutionComment);
            return this;
        }

        /**
         * UnSetter for resolutionComment.
         * @return Builder
         */
        public Builder unsetResolutionComment() {
            resolutionComment = null;
            return this;
        }

        /**
         * Setter for secret.
         * @param  secret  String value for secret.
         * @return Builder
         */
        public Builder secret(String secret) {
            this.secret = secret;
            return this;
        }

        /**
         * Setter for secretType.
         * @param  secretType  String value for secretType.
         * @return Builder
         */
        public Builder secretType(String secretType) {
            this.secretType = secretType;
            return this;
        }

        /**
         * Setter for secretTypeDisplayName.
         * @param  secretTypeDisplayName  String value for secretTypeDisplayName.
         * @return Builder
         */
        public Builder secretTypeDisplayName(String secretTypeDisplayName) {
            this.secretTypeDisplayName = secretTypeDisplayName;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  SecretScanningAlertStateEnum value for state.
         * @return Builder
         */
        public Builder state(SecretScanningAlertStateEnum state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Builds a new {@link Alert10} object using the set fields.
         * @return {@link Alert10}
         */
        public Alert10 build() {
            return new Alert10(createdAt, htmlUrl, locationsUrl, number, pushProtectionBypassed,
                    pushProtectionBypassedAt, pushProtectionBypassedBy, resolution, resolvedAt,
                    resolvedBy, resolutionComment, secret, secretType, secretTypeDisplayName, state,
                    updatedAt, url);
        }
    }
}

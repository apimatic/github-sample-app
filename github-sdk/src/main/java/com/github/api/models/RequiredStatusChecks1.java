/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for RequiredStatusChecks1 type.
 */
public class RequiredStatusChecks1 {
    private boolean strict;
    private List<String> contexts;
    private List<Checks30> checks;

    /**
     * Default constructor.
     */
    public RequiredStatusChecks1() {
    }

    /**
     * Initialization constructor.
     * @param  strict  boolean value for strict.
     * @param  contexts  List of String value for contexts.
     * @param  checks  List of Checks30 value for checks.
     */
    public RequiredStatusChecks1(
            boolean strict,
            List<String> contexts,
            List<Checks30> checks) {
        this.strict = strict;
        this.contexts = contexts;
        this.checks = checks;
    }

    /**
     * Getter for Strict.
     * Require branches to be up to date before merging.
     * @return Returns the boolean
     */
    @JsonGetter("strict")
    public boolean getStrict() {
        return strict;
    }

    /**
     * Setter for Strict.
     * Require branches to be up to date before merging.
     * @param strict Value for boolean
     */
    @JsonSetter("strict")
    public void setStrict(boolean strict) {
        this.strict = strict;
    }

    /**
     * Getter for Contexts.
     * **Deprecated**: The list of status checks to require in order to merge into this branch. If
     * any of these checks have recently been set by a particular GitHub App, they will be required
     * to come from that app in future for the branch to merge. Use `checks` instead of `contexts`
     * for more fine-grained control.
     * @return Returns the List of String
     */
    @JsonGetter("contexts")
    public List<String> getContexts() {
        return contexts;
    }

    /**
     * Setter for Contexts.
     * **Deprecated**: The list of status checks to require in order to merge into this branch. If
     * any of these checks have recently been set by a particular GitHub App, they will be required
     * to come from that app in future for the branch to merge. Use `checks` instead of `contexts`
     * for more fine-grained control.
     * @param contexts Value for List of String
     */
    @JsonSetter("contexts")
    public void setContexts(List<String> contexts) {
        this.contexts = contexts;
    }

    /**
     * Getter for Checks.
     * The list of status checks to require in order to merge into this branch.
     * @return Returns the List of Checks30
     */
    @JsonGetter("checks")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Checks30> getChecks() {
        return checks;
    }

    /**
     * Setter for Checks.
     * The list of status checks to require in order to merge into this branch.
     * @param checks Value for List of Checks30
     */
    @JsonSetter("checks")
    public void setChecks(List<Checks30> checks) {
        this.checks = checks;
    }

    /**
     * Converts this RequiredStatusChecks1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "RequiredStatusChecks1 [" + "strict=" + strict + ", contexts=" + contexts
                + ", checks=" + checks + "]";
    }

    /**
     * Builds a new {@link RequiredStatusChecks1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link RequiredStatusChecks1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(strict, contexts)
                .checks(getChecks());
        return builder;
    }

    /**
     * Class to build instances of {@link RequiredStatusChecks1}.
     */
    public static class Builder {
        private boolean strict;
        private List<String> contexts;
        private List<Checks30> checks;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  strict  boolean value for strict.
         * @param  contexts  List of String value for contexts.
         */
        public Builder(boolean strict, List<String> contexts) {
            this.strict = strict;
            this.contexts = contexts;
        }

        /**
         * Setter for strict.
         * @param  strict  boolean value for strict.
         * @return Builder
         */
        public Builder strict(boolean strict) {
            this.strict = strict;
            return this;
        }

        /**
         * Setter for contexts.
         * @param  contexts  List of String value for contexts.
         * @return Builder
         */
        public Builder contexts(List<String> contexts) {
            this.contexts = contexts;
            return this;
        }

        /**
         * Setter for checks.
         * @param  checks  List of Checks30 value for checks.
         * @return Builder
         */
        public Builder checks(List<Checks30> checks) {
            this.checks = checks;
            return this;
        }

        /**
         * Builds a new {@link RequiredStatusChecks1} object using the set fields.
         * @return {@link RequiredStatusChecks1}
         */
        public RequiredStatusChecks1 build() {
            return new RequiredStatusChecks1(strict, contexts, checks);
        }
    }
}

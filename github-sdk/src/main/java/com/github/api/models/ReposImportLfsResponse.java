/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for ReposImportLfsResponse type.
 */
public class ReposImportLfsResponse {
    private String vcs;
    private Boolean useLfs;
    private String vcsUrl;
    private String svcRoot;
    private String tfvcProject;
    private Status10Enum status;
    private OptionalNullable<String> statusText;
    private OptionalNullable<String> failedStep;
    private OptionalNullable<String> errorMessage;
    private OptionalNullable<Integer> importPercent;
    private OptionalNullable<Integer> commitCount;
    private OptionalNullable<Integer> pushPercent;
    private Boolean hasLargeFiles;
    private Integer largeFilesSize;
    private Integer largeFilesCount;
    private List<ProjectChoice> projectChoices;
    private String message;
    private OptionalNullable<Integer> authorsCount;
    private String url;
    private String htmlUrl;
    private String authorsUrl;
    private String repositoryUrl;
    private String svnRoot;

    /**
     * Default constructor.
     */
    public ReposImportLfsResponse() {
    }

    /**
     * Initialization constructor.
     * @param  vcs  String value for vcs.
     * @param  vcsUrl  String value for vcsUrl.
     * @param  status  Status10Enum value for status.
     * @param  url  String value for url.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  authorsUrl  String value for authorsUrl.
     * @param  repositoryUrl  String value for repositoryUrl.
     * @param  useLfs  Boolean value for useLfs.
     * @param  svcRoot  String value for svcRoot.
     * @param  tfvcProject  String value for tfvcProject.
     * @param  statusText  String value for statusText.
     * @param  failedStep  String value for failedStep.
     * @param  errorMessage  String value for errorMessage.
     * @param  importPercent  Integer value for importPercent.
     * @param  commitCount  Integer value for commitCount.
     * @param  pushPercent  Integer value for pushPercent.
     * @param  hasLargeFiles  Boolean value for hasLargeFiles.
     * @param  largeFilesSize  Integer value for largeFilesSize.
     * @param  largeFilesCount  Integer value for largeFilesCount.
     * @param  projectChoices  List of ProjectChoice value for projectChoices.
     * @param  message  String value for message.
     * @param  authorsCount  Integer value for authorsCount.
     * @param  svnRoot  String value for svnRoot.
     */
    public ReposImportLfsResponse(
            String vcs,
            String vcsUrl,
            Status10Enum status,
            String url,
            String htmlUrl,
            String authorsUrl,
            String repositoryUrl,
            Boolean useLfs,
            String svcRoot,
            String tfvcProject,
            String statusText,
            String failedStep,
            String errorMessage,
            Integer importPercent,
            Integer commitCount,
            Integer pushPercent,
            Boolean hasLargeFiles,
            Integer largeFilesSize,
            Integer largeFilesCount,
            List<ProjectChoice> projectChoices,
            String message,
            Integer authorsCount,
            String svnRoot) {
        this.vcs = vcs;
        this.useLfs = useLfs;
        this.vcsUrl = vcsUrl;
        this.svcRoot = svcRoot;
        this.tfvcProject = tfvcProject;
        this.status = status;
        this.statusText = OptionalNullable.of(statusText);
        this.failedStep = OptionalNullable.of(failedStep);
        this.errorMessage = OptionalNullable.of(errorMessage);
        this.importPercent = OptionalNullable.of(importPercent);
        this.commitCount = OptionalNullable.of(commitCount);
        this.pushPercent = OptionalNullable.of(pushPercent);
        this.hasLargeFiles = hasLargeFiles;
        this.largeFilesSize = largeFilesSize;
        this.largeFilesCount = largeFilesCount;
        this.projectChoices = projectChoices;
        this.message = message;
        this.authorsCount = OptionalNullable.of(authorsCount);
        this.url = url;
        this.htmlUrl = htmlUrl;
        this.authorsUrl = authorsUrl;
        this.repositoryUrl = repositoryUrl;
        this.svnRoot = svnRoot;
    }

    /**
     * Internal initialization constructor.
     */
    protected ReposImportLfsResponse(String vcs, String vcsUrl, Status10Enum status, String url,
            String htmlUrl, String authorsUrl, String repositoryUrl, Boolean useLfs, String svcRoot,
            String tfvcProject, OptionalNullable<String> statusText,
            OptionalNullable<String> failedStep, OptionalNullable<String> errorMessage,
            OptionalNullable<Integer> importPercent, OptionalNullable<Integer> commitCount,
            OptionalNullable<Integer> pushPercent, Boolean hasLargeFiles, Integer largeFilesSize,
            Integer largeFilesCount, List<ProjectChoice> projectChoices, String message,
            OptionalNullable<Integer> authorsCount, String svnRoot) {
        this.vcs = vcs;
        this.useLfs = useLfs;
        this.vcsUrl = vcsUrl;
        this.svcRoot = svcRoot;
        this.tfvcProject = tfvcProject;
        this.status = status;
        this.statusText = statusText;
        this.failedStep = failedStep;
        this.errorMessage = errorMessage;
        this.importPercent = importPercent;
        this.commitCount = commitCount;
        this.pushPercent = pushPercent;
        this.hasLargeFiles = hasLargeFiles;
        this.largeFilesSize = largeFilesSize;
        this.largeFilesCount = largeFilesCount;
        this.projectChoices = projectChoices;
        this.message = message;
        this.authorsCount = authorsCount;
        this.url = url;
        this.htmlUrl = htmlUrl;
        this.authorsUrl = authorsUrl;
        this.repositoryUrl = repositoryUrl;
        this.svnRoot = svnRoot;
    }

    /**
     * Getter for Vcs.
     * @return Returns the String
     */
    @JsonGetter("vcs")
    public String getVcs() {
        return vcs;
    }

    /**
     * Setter for Vcs.
     * @param vcs Value for String
     */
    @JsonSetter("vcs")
    public void setVcs(String vcs) {
        this.vcs = vcs;
    }

    /**
     * Getter for UseLfs.
     * @return Returns the Boolean
     */
    @JsonGetter("use_lfs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getUseLfs() {
        return useLfs;
    }

    /**
     * Setter for UseLfs.
     * @param useLfs Value for Boolean
     */
    @JsonSetter("use_lfs")
    public void setUseLfs(Boolean useLfs) {
        this.useLfs = useLfs;
    }

    /**
     * Getter for VcsUrl.
     * The URL of the originating repository.
     * @return Returns the String
     */
    @JsonGetter("vcs_url")
    public String getVcsUrl() {
        return vcsUrl;
    }

    /**
     * Setter for VcsUrl.
     * The URL of the originating repository.
     * @param vcsUrl Value for String
     */
    @JsonSetter("vcs_url")
    public void setVcsUrl(String vcsUrl) {
        this.vcsUrl = vcsUrl;
    }

    /**
     * Getter for SvcRoot.
     * @return Returns the String
     */
    @JsonGetter("svc_root")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSvcRoot() {
        return svcRoot;
    }

    /**
     * Setter for SvcRoot.
     * @param svcRoot Value for String
     */
    @JsonSetter("svc_root")
    public void setSvcRoot(String svcRoot) {
        this.svcRoot = svcRoot;
    }

    /**
     * Getter for TfvcProject.
     * @return Returns the String
     */
    @JsonGetter("tfvc_project")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTfvcProject() {
        return tfvcProject;
    }

    /**
     * Setter for TfvcProject.
     * @param tfvcProject Value for String
     */
    @JsonSetter("tfvc_project")
    public void setTfvcProject(String tfvcProject) {
        this.tfvcProject = tfvcProject;
    }

    /**
     * Getter for Status.
     * @return Returns the Status10Enum
     */
    @JsonGetter("status")
    public Status10Enum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * @param status Value for Status10Enum
     */
    @JsonSetter("status")
    public void setStatus(Status10Enum status) {
        this.status = status;
    }

    /**
     * Internal Getter for StatusText.
     * @return Returns the Internal String
     */
    @JsonGetter("status_text")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatusText() {
        return this.statusText;
    }

    /**
     * Getter for StatusText.
     * @return Returns the String
     */
    public String getStatusText() {
        return OptionalNullable.getFrom(statusText);
    }

    /**
     * Setter for StatusText.
     * @param statusText Value for String
     */
    @JsonSetter("status_text")
    public void setStatusText(String statusText) {
        this.statusText = OptionalNullable.of(statusText);
    }

    /**
     * UnSetter for StatusText.
     */
    public void unsetStatusText() {
        statusText = null;
    }

    /**
     * Internal Getter for FailedStep.
     * @return Returns the Internal String
     */
    @JsonGetter("failed_step")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFailedStep() {
        return this.failedStep;
    }

    /**
     * Getter for FailedStep.
     * @return Returns the String
     */
    public String getFailedStep() {
        return OptionalNullable.getFrom(failedStep);
    }

    /**
     * Setter for FailedStep.
     * @param failedStep Value for String
     */
    @JsonSetter("failed_step")
    public void setFailedStep(String failedStep) {
        this.failedStep = OptionalNullable.of(failedStep);
    }

    /**
     * UnSetter for FailedStep.
     */
    public void unsetFailedStep() {
        failedStep = null;
    }

    /**
     * Internal Getter for ErrorMessage.
     * @return Returns the Internal String
     */
    @JsonGetter("error_message")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetErrorMessage() {
        return this.errorMessage;
    }

    /**
     * Getter for ErrorMessage.
     * @return Returns the String
     */
    public String getErrorMessage() {
        return OptionalNullable.getFrom(errorMessage);
    }

    /**
     * Setter for ErrorMessage.
     * @param errorMessage Value for String
     */
    @JsonSetter("error_message")
    public void setErrorMessage(String errorMessage) {
        this.errorMessage = OptionalNullable.of(errorMessage);
    }

    /**
     * UnSetter for ErrorMessage.
     */
    public void unsetErrorMessage() {
        errorMessage = null;
    }

    /**
     * Internal Getter for ImportPercent.
     * @return Returns the Internal Integer
     */
    @JsonGetter("import_percent")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetImportPercent() {
        return this.importPercent;
    }

    /**
     * Getter for ImportPercent.
     * @return Returns the Integer
     */
    public Integer getImportPercent() {
        return OptionalNullable.getFrom(importPercent);
    }

    /**
     * Setter for ImportPercent.
     * @param importPercent Value for Integer
     */
    @JsonSetter("import_percent")
    public void setImportPercent(Integer importPercent) {
        this.importPercent = OptionalNullable.of(importPercent);
    }

    /**
     * UnSetter for ImportPercent.
     */
    public void unsetImportPercent() {
        importPercent = null;
    }

    /**
     * Internal Getter for CommitCount.
     * @return Returns the Internal Integer
     */
    @JsonGetter("commit_count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCommitCount() {
        return this.commitCount;
    }

    /**
     * Getter for CommitCount.
     * @return Returns the Integer
     */
    public Integer getCommitCount() {
        return OptionalNullable.getFrom(commitCount);
    }

    /**
     * Setter for CommitCount.
     * @param commitCount Value for Integer
     */
    @JsonSetter("commit_count")
    public void setCommitCount(Integer commitCount) {
        this.commitCount = OptionalNullable.of(commitCount);
    }

    /**
     * UnSetter for CommitCount.
     */
    public void unsetCommitCount() {
        commitCount = null;
    }

    /**
     * Internal Getter for PushPercent.
     * @return Returns the Internal Integer
     */
    @JsonGetter("push_percent")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPushPercent() {
        return this.pushPercent;
    }

    /**
     * Getter for PushPercent.
     * @return Returns the Integer
     */
    public Integer getPushPercent() {
        return OptionalNullable.getFrom(pushPercent);
    }

    /**
     * Setter for PushPercent.
     * @param pushPercent Value for Integer
     */
    @JsonSetter("push_percent")
    public void setPushPercent(Integer pushPercent) {
        this.pushPercent = OptionalNullable.of(pushPercent);
    }

    /**
     * UnSetter for PushPercent.
     */
    public void unsetPushPercent() {
        pushPercent = null;
    }

    /**
     * Getter for HasLargeFiles.
     * @return Returns the Boolean
     */
    @JsonGetter("has_large_files")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasLargeFiles() {
        return hasLargeFiles;
    }

    /**
     * Setter for HasLargeFiles.
     * @param hasLargeFiles Value for Boolean
     */
    @JsonSetter("has_large_files")
    public void setHasLargeFiles(Boolean hasLargeFiles) {
        this.hasLargeFiles = hasLargeFiles;
    }

    /**
     * Getter for LargeFilesSize.
     * @return Returns the Integer
     */
    @JsonGetter("large_files_size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getLargeFilesSize() {
        return largeFilesSize;
    }

    /**
     * Setter for LargeFilesSize.
     * @param largeFilesSize Value for Integer
     */
    @JsonSetter("large_files_size")
    public void setLargeFilesSize(Integer largeFilesSize) {
        this.largeFilesSize = largeFilesSize;
    }

    /**
     * Getter for LargeFilesCount.
     * @return Returns the Integer
     */
    @JsonGetter("large_files_count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getLargeFilesCount() {
        return largeFilesCount;
    }

    /**
     * Setter for LargeFilesCount.
     * @param largeFilesCount Value for Integer
     */
    @JsonSetter("large_files_count")
    public void setLargeFilesCount(Integer largeFilesCount) {
        this.largeFilesCount = largeFilesCount;
    }

    /**
     * Getter for ProjectChoices.
     * @return Returns the List of ProjectChoice
     */
    @JsonGetter("project_choices")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<ProjectChoice> getProjectChoices() {
        return projectChoices;
    }

    /**
     * Setter for ProjectChoices.
     * @param projectChoices Value for List of ProjectChoice
     */
    @JsonSetter("project_choices")
    public void setProjectChoices(List<ProjectChoice> projectChoices) {
        this.projectChoices = projectChoices;
    }

    /**
     * Getter for Message.
     * @return Returns the String
     */
    @JsonGetter("message")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMessage() {
        return message;
    }

    /**
     * Setter for Message.
     * @param message Value for String
     */
    @JsonSetter("message")
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * Internal Getter for AuthorsCount.
     * @return Returns the Internal Integer
     */
    @JsonGetter("authors_count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAuthorsCount() {
        return this.authorsCount;
    }

    /**
     * Getter for AuthorsCount.
     * @return Returns the Integer
     */
    public Integer getAuthorsCount() {
        return OptionalNullable.getFrom(authorsCount);
    }

    /**
     * Setter for AuthorsCount.
     * @param authorsCount Value for Integer
     */
    @JsonSetter("authors_count")
    public void setAuthorsCount(Integer authorsCount) {
        this.authorsCount = OptionalNullable.of(authorsCount);
    }

    /**
     * UnSetter for AuthorsCount.
     */
    public void unsetAuthorsCount() {
        authorsCount = null;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for AuthorsUrl.
     * @return Returns the String
     */
    @JsonGetter("authors_url")
    public String getAuthorsUrl() {
        return authorsUrl;
    }

    /**
     * Setter for AuthorsUrl.
     * @param authorsUrl Value for String
     */
    @JsonSetter("authors_url")
    public void setAuthorsUrl(String authorsUrl) {
        this.authorsUrl = authorsUrl;
    }

    /**
     * Getter for RepositoryUrl.
     * @return Returns the String
     */
    @JsonGetter("repository_url")
    public String getRepositoryUrl() {
        return repositoryUrl;
    }

    /**
     * Setter for RepositoryUrl.
     * @param repositoryUrl Value for String
     */
    @JsonSetter("repository_url")
    public void setRepositoryUrl(String repositoryUrl) {
        this.repositoryUrl = repositoryUrl;
    }

    /**
     * Getter for SvnRoot.
     * @return Returns the String
     */
    @JsonGetter("svn_root")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSvnRoot() {
        return svnRoot;
    }

    /**
     * Setter for SvnRoot.
     * @param svnRoot Value for String
     */
    @JsonSetter("svn_root")
    public void setSvnRoot(String svnRoot) {
        this.svnRoot = svnRoot;
    }

    /**
     * Converts this ReposImportLfsResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposImportLfsResponse [" + "vcs=" + vcs + ", vcsUrl=" + vcsUrl + ", status="
                + status + ", url=" + url + ", htmlUrl=" + htmlUrl + ", authorsUrl=" + authorsUrl
                + ", repositoryUrl=" + repositoryUrl + ", useLfs=" + useLfs + ", svcRoot=" + svcRoot
                + ", tfvcProject=" + tfvcProject + ", statusText=" + statusText + ", failedStep="
                + failedStep + ", errorMessage=" + errorMessage + ", importPercent=" + importPercent
                + ", commitCount=" + commitCount + ", pushPercent=" + pushPercent
                + ", hasLargeFiles=" + hasLargeFiles + ", largeFilesSize=" + largeFilesSize
                + ", largeFilesCount=" + largeFilesCount + ", projectChoices=" + projectChoices
                + ", message=" + message + ", authorsCount=" + authorsCount + ", svnRoot=" + svnRoot
                + "]";
    }

    /**
     * Builds a new {@link ReposImportLfsResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposImportLfsResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(vcs, vcsUrl, status, url, htmlUrl, authorsUrl, repositoryUrl)
                .useLfs(getUseLfs())
                .svcRoot(getSvcRoot())
                .tfvcProject(getTfvcProject())
                .hasLargeFiles(getHasLargeFiles())
                .largeFilesSize(getLargeFilesSize())
                .largeFilesCount(getLargeFilesCount())
                .projectChoices(getProjectChoices())
                .message(getMessage())
                .svnRoot(getSvnRoot());
        builder.statusText = internalGetStatusText();
        builder.failedStep = internalGetFailedStep();
        builder.errorMessage = internalGetErrorMessage();
        builder.importPercent = internalGetImportPercent();
        builder.commitCount = internalGetCommitCount();
        builder.pushPercent = internalGetPushPercent();
        builder.authorsCount = internalGetAuthorsCount();
        return builder;
    }

    /**
     * Class to build instances of {@link ReposImportLfsResponse}.
     */
    public static class Builder {
        private String vcs;
        private String vcsUrl;
        private Status10Enum status;
        private String url;
        private String htmlUrl;
        private String authorsUrl;
        private String repositoryUrl;
        private Boolean useLfs;
        private String svcRoot;
        private String tfvcProject;
        private OptionalNullable<String> statusText;
        private OptionalNullable<String> failedStep;
        private OptionalNullable<String> errorMessage;
        private OptionalNullable<Integer> importPercent;
        private OptionalNullable<Integer> commitCount;
        private OptionalNullable<Integer> pushPercent;
        private Boolean hasLargeFiles;
        private Integer largeFilesSize;
        private Integer largeFilesCount;
        private List<ProjectChoice> projectChoices;
        private String message;
        private OptionalNullable<Integer> authorsCount;
        private String svnRoot;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  vcs  String value for vcs.
         * @param  vcsUrl  String value for vcsUrl.
         * @param  status  Status10Enum value for status.
         * @param  url  String value for url.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  authorsUrl  String value for authorsUrl.
         * @param  repositoryUrl  String value for repositoryUrl.
         */
        public Builder(String vcs, String vcsUrl, Status10Enum status, String url, String htmlUrl,
                String authorsUrl, String repositoryUrl) {
            this.vcs = vcs;
            this.vcsUrl = vcsUrl;
            this.status = status;
            this.url = url;
            this.htmlUrl = htmlUrl;
            this.authorsUrl = authorsUrl;
            this.repositoryUrl = repositoryUrl;
        }

        /**
         * Setter for vcs.
         * @param  vcs  String value for vcs.
         * @return Builder
         */
        public Builder vcs(String vcs) {
            this.vcs = vcs;
            return this;
        }

        /**
         * Setter for vcsUrl.
         * @param  vcsUrl  String value for vcsUrl.
         * @return Builder
         */
        public Builder vcsUrl(String vcsUrl) {
            this.vcsUrl = vcsUrl;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  Status10Enum value for status.
         * @return Builder
         */
        public Builder status(Status10Enum status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for authorsUrl.
         * @param  authorsUrl  String value for authorsUrl.
         * @return Builder
         */
        public Builder authorsUrl(String authorsUrl) {
            this.authorsUrl = authorsUrl;
            return this;
        }

        /**
         * Setter for repositoryUrl.
         * @param  repositoryUrl  String value for repositoryUrl.
         * @return Builder
         */
        public Builder repositoryUrl(String repositoryUrl) {
            this.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * Setter for useLfs.
         * @param  useLfs  Boolean value for useLfs.
         * @return Builder
         */
        public Builder useLfs(Boolean useLfs) {
            this.useLfs = useLfs;
            return this;
        }

        /**
         * Setter for svcRoot.
         * @param  svcRoot  String value for svcRoot.
         * @return Builder
         */
        public Builder svcRoot(String svcRoot) {
            this.svcRoot = svcRoot;
            return this;
        }

        /**
         * Setter for tfvcProject.
         * @param  tfvcProject  String value for tfvcProject.
         * @return Builder
         */
        public Builder tfvcProject(String tfvcProject) {
            this.tfvcProject = tfvcProject;
            return this;
        }

        /**
         * Setter for statusText.
         * @param  statusText  String value for statusText.
         * @return Builder
         */
        public Builder statusText(String statusText) {
            this.statusText = OptionalNullable.of(statusText);
            return this;
        }

        /**
         * UnSetter for statusText.
         * @return Builder
         */
        public Builder unsetStatusText() {
            statusText = null;
            return this;
        }

        /**
         * Setter for failedStep.
         * @param  failedStep  String value for failedStep.
         * @return Builder
         */
        public Builder failedStep(String failedStep) {
            this.failedStep = OptionalNullable.of(failedStep);
            return this;
        }

        /**
         * UnSetter for failedStep.
         * @return Builder
         */
        public Builder unsetFailedStep() {
            failedStep = null;
            return this;
        }

        /**
         * Setter for errorMessage.
         * @param  errorMessage  String value for errorMessage.
         * @return Builder
         */
        public Builder errorMessage(String errorMessage) {
            this.errorMessage = OptionalNullable.of(errorMessage);
            return this;
        }

        /**
         * UnSetter for errorMessage.
         * @return Builder
         */
        public Builder unsetErrorMessage() {
            errorMessage = null;
            return this;
        }

        /**
         * Setter for importPercent.
         * @param  importPercent  Integer value for importPercent.
         * @return Builder
         */
        public Builder importPercent(Integer importPercent) {
            this.importPercent = OptionalNullable.of(importPercent);
            return this;
        }

        /**
         * UnSetter for importPercent.
         * @return Builder
         */
        public Builder unsetImportPercent() {
            importPercent = null;
            return this;
        }

        /**
         * Setter for commitCount.
         * @param  commitCount  Integer value for commitCount.
         * @return Builder
         */
        public Builder commitCount(Integer commitCount) {
            this.commitCount = OptionalNullable.of(commitCount);
            return this;
        }

        /**
         * UnSetter for commitCount.
         * @return Builder
         */
        public Builder unsetCommitCount() {
            commitCount = null;
            return this;
        }

        /**
         * Setter for pushPercent.
         * @param  pushPercent  Integer value for pushPercent.
         * @return Builder
         */
        public Builder pushPercent(Integer pushPercent) {
            this.pushPercent = OptionalNullable.of(pushPercent);
            return this;
        }

        /**
         * UnSetter for pushPercent.
         * @return Builder
         */
        public Builder unsetPushPercent() {
            pushPercent = null;
            return this;
        }

        /**
         * Setter for hasLargeFiles.
         * @param  hasLargeFiles  Boolean value for hasLargeFiles.
         * @return Builder
         */
        public Builder hasLargeFiles(Boolean hasLargeFiles) {
            this.hasLargeFiles = hasLargeFiles;
            return this;
        }

        /**
         * Setter for largeFilesSize.
         * @param  largeFilesSize  Integer value for largeFilesSize.
         * @return Builder
         */
        public Builder largeFilesSize(Integer largeFilesSize) {
            this.largeFilesSize = largeFilesSize;
            return this;
        }

        /**
         * Setter for largeFilesCount.
         * @param  largeFilesCount  Integer value for largeFilesCount.
         * @return Builder
         */
        public Builder largeFilesCount(Integer largeFilesCount) {
            this.largeFilesCount = largeFilesCount;
            return this;
        }

        /**
         * Setter for projectChoices.
         * @param  projectChoices  List of ProjectChoice value for projectChoices.
         * @return Builder
         */
        public Builder projectChoices(List<ProjectChoice> projectChoices) {
            this.projectChoices = projectChoices;
            return this;
        }

        /**
         * Setter for message.
         * @param  message  String value for message.
         * @return Builder
         */
        public Builder message(String message) {
            this.message = message;
            return this;
        }

        /**
         * Setter for authorsCount.
         * @param  authorsCount  Integer value for authorsCount.
         * @return Builder
         */
        public Builder authorsCount(Integer authorsCount) {
            this.authorsCount = OptionalNullable.of(authorsCount);
            return this;
        }

        /**
         * UnSetter for authorsCount.
         * @return Builder
         */
        public Builder unsetAuthorsCount() {
            authorsCount = null;
            return this;
        }

        /**
         * Setter for svnRoot.
         * @param  svnRoot  String value for svnRoot.
         * @return Builder
         */
        public Builder svnRoot(String svnRoot) {
            this.svnRoot = svnRoot;
            return this;
        }

        /**
         * Builds a new {@link ReposImportLfsResponse} object using the set fields.
         * @return {@link ReposImportLfsResponse}
         */
        public ReposImportLfsResponse build() {
            return new ReposImportLfsResponse(vcs, vcsUrl, status, url, htmlUrl, authorsUrl,
                    repositoryUrl, useLfs, svcRoot, tfvcProject, statusText, failedStep,
                    errorMessage, importPercent, commitCount, pushPercent, hasLargeFiles,
                    largeFilesSize, largeFilesCount, projectChoices, message, authorsCount,
                    svnRoot);
        }
    }
}

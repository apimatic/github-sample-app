/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for OrgsMigrationsResponse type.
 */
public class OrgsMigrationsResponse {
    private int id;
    private Object owner;
    private String guid;
    private String state;
    private boolean lockRepositories;
    private boolean excludeMetadata;
    private boolean excludeGitData;
    private boolean excludeAttachments;
    private boolean excludeReleases;
    private boolean excludeOwnerProjects;
    private boolean orgMetadataOnly;
    private List<Repository> repositories;
    private String url;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private String nodeId;
    private String archiveUrl;
    private List<Object> exclude;

    /**
     * Default constructor.
     */
    public OrgsMigrationsResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  owner  Object value for owner.
     * @param  guid  String value for guid.
     * @param  state  String value for state.
     * @param  lockRepositories  boolean value for lockRepositories.
     * @param  excludeMetadata  boolean value for excludeMetadata.
     * @param  excludeGitData  boolean value for excludeGitData.
     * @param  excludeAttachments  boolean value for excludeAttachments.
     * @param  excludeReleases  boolean value for excludeReleases.
     * @param  excludeOwnerProjects  boolean value for excludeOwnerProjects.
     * @param  orgMetadataOnly  boolean value for orgMetadataOnly.
     * @param  repositories  List of Repository value for repositories.
     * @param  url  String value for url.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  nodeId  String value for nodeId.
     * @param  archiveUrl  String value for archiveUrl.
     * @param  exclude  List of Object value for exclude.
     */
    public OrgsMigrationsResponse(
            int id,
            Object owner,
            String guid,
            String state,
            boolean lockRepositories,
            boolean excludeMetadata,
            boolean excludeGitData,
            boolean excludeAttachments,
            boolean excludeReleases,
            boolean excludeOwnerProjects,
            boolean orgMetadataOnly,
            List<Repository> repositories,
            String url,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            String nodeId,
            String archiveUrl,
            List<Object> exclude) {
        this.id = id;
        this.owner = owner;
        this.guid = guid;
        this.state = state;
        this.lockRepositories = lockRepositories;
        this.excludeMetadata = excludeMetadata;
        this.excludeGitData = excludeGitData;
        this.excludeAttachments = excludeAttachments;
        this.excludeReleases = excludeReleases;
        this.excludeOwnerProjects = excludeOwnerProjects;
        this.orgMetadataOnly = orgMetadataOnly;
        this.repositories = repositories;
        this.url = url;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.nodeId = nodeId;
        this.archiveUrl = archiveUrl;
        this.exclude = exclude;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for Owner.
     * @return Returns the Object
     */
    @JsonGetter("owner")
    public Object getOwner() {
        return owner;
    }

    /**
     * Setter for Owner.
     * @param owner Value for Object
     */
    @JsonSetter("owner")
    public void setOwner(Object owner) {
        this.owner = owner;
    }

    /**
     * Getter for Guid.
     * @return Returns the String
     */
    @JsonGetter("guid")
    public String getGuid() {
        return guid;
    }

    /**
     * Setter for Guid.
     * @param guid Value for String
     */
    @JsonSetter("guid")
    public void setGuid(String guid) {
        this.guid = guid;
    }

    /**
     * Getter for State.
     * @return Returns the String
     */
    @JsonGetter("state")
    public String getState() {
        return state;
    }

    /**
     * Setter for State.
     * @param state Value for String
     */
    @JsonSetter("state")
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Getter for LockRepositories.
     * @return Returns the boolean
     */
    @JsonGetter("lock_repositories")
    public boolean getLockRepositories() {
        return lockRepositories;
    }

    /**
     * Setter for LockRepositories.
     * @param lockRepositories Value for boolean
     */
    @JsonSetter("lock_repositories")
    public void setLockRepositories(boolean lockRepositories) {
        this.lockRepositories = lockRepositories;
    }

    /**
     * Getter for ExcludeMetadata.
     * @return Returns the boolean
     */
    @JsonGetter("exclude_metadata")
    public boolean getExcludeMetadata() {
        return excludeMetadata;
    }

    /**
     * Setter for ExcludeMetadata.
     * @param excludeMetadata Value for boolean
     */
    @JsonSetter("exclude_metadata")
    public void setExcludeMetadata(boolean excludeMetadata) {
        this.excludeMetadata = excludeMetadata;
    }

    /**
     * Getter for ExcludeGitData.
     * @return Returns the boolean
     */
    @JsonGetter("exclude_git_data")
    public boolean getExcludeGitData() {
        return excludeGitData;
    }

    /**
     * Setter for ExcludeGitData.
     * @param excludeGitData Value for boolean
     */
    @JsonSetter("exclude_git_data")
    public void setExcludeGitData(boolean excludeGitData) {
        this.excludeGitData = excludeGitData;
    }

    /**
     * Getter for ExcludeAttachments.
     * @return Returns the boolean
     */
    @JsonGetter("exclude_attachments")
    public boolean getExcludeAttachments() {
        return excludeAttachments;
    }

    /**
     * Setter for ExcludeAttachments.
     * @param excludeAttachments Value for boolean
     */
    @JsonSetter("exclude_attachments")
    public void setExcludeAttachments(boolean excludeAttachments) {
        this.excludeAttachments = excludeAttachments;
    }

    /**
     * Getter for ExcludeReleases.
     * @return Returns the boolean
     */
    @JsonGetter("exclude_releases")
    public boolean getExcludeReleases() {
        return excludeReleases;
    }

    /**
     * Setter for ExcludeReleases.
     * @param excludeReleases Value for boolean
     */
    @JsonSetter("exclude_releases")
    public void setExcludeReleases(boolean excludeReleases) {
        this.excludeReleases = excludeReleases;
    }

    /**
     * Getter for ExcludeOwnerProjects.
     * @return Returns the boolean
     */
    @JsonGetter("exclude_owner_projects")
    public boolean getExcludeOwnerProjects() {
        return excludeOwnerProjects;
    }

    /**
     * Setter for ExcludeOwnerProjects.
     * @param excludeOwnerProjects Value for boolean
     */
    @JsonSetter("exclude_owner_projects")
    public void setExcludeOwnerProjects(boolean excludeOwnerProjects) {
        this.excludeOwnerProjects = excludeOwnerProjects;
    }

    /**
     * Getter for OrgMetadataOnly.
     * @return Returns the boolean
     */
    @JsonGetter("org_metadata_only")
    public boolean getOrgMetadataOnly() {
        return orgMetadataOnly;
    }

    /**
     * Setter for OrgMetadataOnly.
     * @param orgMetadataOnly Value for boolean
     */
    @JsonSetter("org_metadata_only")
    public void setOrgMetadataOnly(boolean orgMetadataOnly) {
        this.orgMetadataOnly = orgMetadataOnly;
    }

    /**
     * Getter for Repositories.
     * @return Returns the List of Repository
     */
    @JsonGetter("repositories")
    public List<Repository> getRepositories() {
        return repositories;
    }

    /**
     * Setter for Repositories.
     * @param repositories Value for List of Repository
     */
    @JsonSetter("repositories")
    public void setRepositories(List<Repository> repositories) {
        this.repositories = repositories;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for ArchiveUrl.
     * @return Returns the String
     */
    @JsonGetter("archive_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getArchiveUrl() {
        return archiveUrl;
    }

    /**
     * Setter for ArchiveUrl.
     * @param archiveUrl Value for String
     */
    @JsonSetter("archive_url")
    public void setArchiveUrl(String archiveUrl) {
        this.archiveUrl = archiveUrl;
    }

    /**
     * Getter for Exclude.
     * @return Returns the List of Object
     */
    @JsonGetter("exclude")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Object> getExclude() {
        return exclude;
    }

    /**
     * Setter for Exclude.
     * @param exclude Value for List of Object
     */
    @JsonSetter("exclude")
    public void setExclude(List<Object> exclude) {
        this.exclude = exclude;
    }

    /**
     * Converts this OrgsMigrationsResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "OrgsMigrationsResponse [" + "id=" + id + ", owner=" + owner + ", guid=" + guid
                + ", state=" + state + ", lockRepositories=" + lockRepositories
                + ", excludeMetadata=" + excludeMetadata + ", excludeGitData=" + excludeGitData
                + ", excludeAttachments=" + excludeAttachments + ", excludeReleases="
                + excludeReleases + ", excludeOwnerProjects=" + excludeOwnerProjects
                + ", orgMetadataOnly=" + orgMetadataOnly + ", repositories=" + repositories
                + ", url=" + url + ", createdAt=" + createdAt + ", updatedAt=" + updatedAt
                + ", nodeId=" + nodeId + ", archiveUrl=" + archiveUrl + ", exclude=" + exclude
                + "]";
    }

    /**
     * Builds a new {@link OrgsMigrationsResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link OrgsMigrationsResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, owner, guid, state, lockRepositories, excludeMetadata,
                excludeGitData, excludeAttachments, excludeReleases, excludeOwnerProjects,
                orgMetadataOnly, repositories, url, createdAt, updatedAt, nodeId)
                .archiveUrl(getArchiveUrl())
                .exclude(getExclude());
        return builder;
    }

    /**
     * Class to build instances of {@link OrgsMigrationsResponse}.
     */
    public static class Builder {
        private int id;
        private Object owner;
        private String guid;
        private String state;
        private boolean lockRepositories;
        private boolean excludeMetadata;
        private boolean excludeGitData;
        private boolean excludeAttachments;
        private boolean excludeReleases;
        private boolean excludeOwnerProjects;
        private boolean orgMetadataOnly;
        private List<Repository> repositories;
        private String url;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private String nodeId;
        private String archiveUrl;
        private List<Object> exclude;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  owner  Object value for owner.
         * @param  guid  String value for guid.
         * @param  state  String value for state.
         * @param  lockRepositories  boolean value for lockRepositories.
         * @param  excludeMetadata  boolean value for excludeMetadata.
         * @param  excludeGitData  boolean value for excludeGitData.
         * @param  excludeAttachments  boolean value for excludeAttachments.
         * @param  excludeReleases  boolean value for excludeReleases.
         * @param  excludeOwnerProjects  boolean value for excludeOwnerProjects.
         * @param  orgMetadataOnly  boolean value for orgMetadataOnly.
         * @param  repositories  List of Repository value for repositories.
         * @param  url  String value for url.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  nodeId  String value for nodeId.
         */
        public Builder(int id, Object owner, String guid, String state, boolean lockRepositories,
                boolean excludeMetadata, boolean excludeGitData, boolean excludeAttachments,
                boolean excludeReleases, boolean excludeOwnerProjects, boolean orgMetadataOnly,
                List<Repository> repositories, String url, LocalDateTime createdAt,
                LocalDateTime updatedAt, String nodeId) {
            this.id = id;
            this.owner = owner;
            this.guid = guid;
            this.state = state;
            this.lockRepositories = lockRepositories;
            this.excludeMetadata = excludeMetadata;
            this.excludeGitData = excludeGitData;
            this.excludeAttachments = excludeAttachments;
            this.excludeReleases = excludeReleases;
            this.excludeOwnerProjects = excludeOwnerProjects;
            this.orgMetadataOnly = orgMetadataOnly;
            this.repositories = repositories;
            this.url = url;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.nodeId = nodeId;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for owner.
         * @param  owner  Object value for owner.
         * @return Builder
         */
        public Builder owner(Object owner) {
            this.owner = owner;
            return this;
        }

        /**
         * Setter for guid.
         * @param  guid  String value for guid.
         * @return Builder
         */
        public Builder guid(String guid) {
            this.guid = guid;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  String value for state.
         * @return Builder
         */
        public Builder state(String state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for lockRepositories.
         * @param  lockRepositories  boolean value for lockRepositories.
         * @return Builder
         */
        public Builder lockRepositories(boolean lockRepositories) {
            this.lockRepositories = lockRepositories;
            return this;
        }

        /**
         * Setter for excludeMetadata.
         * @param  excludeMetadata  boolean value for excludeMetadata.
         * @return Builder
         */
        public Builder excludeMetadata(boolean excludeMetadata) {
            this.excludeMetadata = excludeMetadata;
            return this;
        }

        /**
         * Setter for excludeGitData.
         * @param  excludeGitData  boolean value for excludeGitData.
         * @return Builder
         */
        public Builder excludeGitData(boolean excludeGitData) {
            this.excludeGitData = excludeGitData;
            return this;
        }

        /**
         * Setter for excludeAttachments.
         * @param  excludeAttachments  boolean value for excludeAttachments.
         * @return Builder
         */
        public Builder excludeAttachments(boolean excludeAttachments) {
            this.excludeAttachments = excludeAttachments;
            return this;
        }

        /**
         * Setter for excludeReleases.
         * @param  excludeReleases  boolean value for excludeReleases.
         * @return Builder
         */
        public Builder excludeReleases(boolean excludeReleases) {
            this.excludeReleases = excludeReleases;
            return this;
        }

        /**
         * Setter for excludeOwnerProjects.
         * @param  excludeOwnerProjects  boolean value for excludeOwnerProjects.
         * @return Builder
         */
        public Builder excludeOwnerProjects(boolean excludeOwnerProjects) {
            this.excludeOwnerProjects = excludeOwnerProjects;
            return this;
        }

        /**
         * Setter for orgMetadataOnly.
         * @param  orgMetadataOnly  boolean value for orgMetadataOnly.
         * @return Builder
         */
        public Builder orgMetadataOnly(boolean orgMetadataOnly) {
            this.orgMetadataOnly = orgMetadataOnly;
            return this;
        }

        /**
         * Setter for repositories.
         * @param  repositories  List of Repository value for repositories.
         * @return Builder
         */
        public Builder repositories(List<Repository> repositories) {
            this.repositories = repositories;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for archiveUrl.
         * @param  archiveUrl  String value for archiveUrl.
         * @return Builder
         */
        public Builder archiveUrl(String archiveUrl) {
            this.archiveUrl = archiveUrl;
            return this;
        }

        /**
         * Setter for exclude.
         * @param  exclude  List of Object value for exclude.
         * @return Builder
         */
        public Builder exclude(List<Object> exclude) {
            this.exclude = exclude;
            return this;
        }

        /**
         * Builds a new {@link OrgsMigrationsResponse} object using the set fields.
         * @return {@link OrgsMigrationsResponse}
         */
        public OrgsMigrationsResponse build() {
            return new OrgsMigrationsResponse(id, owner, guid, state, lockRepositories,
                    excludeMetadata, excludeGitData, excludeAttachments, excludeReleases,
                    excludeOwnerProjects, orgMetadataOnly, repositories, url, createdAt, updatedAt,
                    nodeId, archiveUrl, exclude);
        }
    }
}

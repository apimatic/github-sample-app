/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for OrgsInvitationsResponse type.
 */
public class OrgsInvitationsResponse {
    private int id;
    private String login;
    private String email;
    private String role;
    private String createdAt;
    private OptionalNullable<String> failedAt;
    private OptionalNullable<String> failedReason;
    private Inviter inviter;
    private int teamCount;
    private String nodeId;
    private String invitationTeamsUrl;
    private String invitationSource;

    /**
     * Default constructor.
     */
    public OrgsInvitationsResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  login  String value for login.
     * @param  email  String value for email.
     * @param  role  String value for role.
     * @param  createdAt  String value for createdAt.
     * @param  inviter  Inviter value for inviter.
     * @param  teamCount  int value for teamCount.
     * @param  nodeId  String value for nodeId.
     * @param  invitationTeamsUrl  String value for invitationTeamsUrl.
     * @param  failedAt  String value for failedAt.
     * @param  failedReason  String value for failedReason.
     * @param  invitationSource  String value for invitationSource.
     */
    public OrgsInvitationsResponse(
            int id,
            String login,
            String email,
            String role,
            String createdAt,
            Inviter inviter,
            int teamCount,
            String nodeId,
            String invitationTeamsUrl,
            String failedAt,
            String failedReason,
            String invitationSource) {
        this.id = id;
        this.login = login;
        this.email = email;
        this.role = role;
        this.createdAt = createdAt;
        this.failedAt = OptionalNullable.of(failedAt);
        this.failedReason = OptionalNullable.of(failedReason);
        this.inviter = inviter;
        this.teamCount = teamCount;
        this.nodeId = nodeId;
        this.invitationTeamsUrl = invitationTeamsUrl;
        this.invitationSource = invitationSource;
    }

    /**
     * Internal initialization constructor.
     */
    protected OrgsInvitationsResponse(int id, String login, String email, String role,
            String createdAt, Inviter inviter, int teamCount, String nodeId,
            String invitationTeamsUrl, OptionalNullable<String> failedAt,
            OptionalNullable<String> failedReason, String invitationSource) {
        this.id = id;
        this.login = login;
        this.email = email;
        this.role = role;
        this.createdAt = createdAt;
        this.failedAt = failedAt;
        this.failedReason = failedReason;
        this.inviter = inviter;
        this.teamCount = teamCount;
        this.nodeId = nodeId;
        this.invitationTeamsUrl = invitationTeamsUrl;
        this.invitationSource = invitationSource;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for Login.
     * @return Returns the String
     */
    @JsonGetter("login")
    public String getLogin() {
        return login;
    }

    /**
     * Setter for Login.
     * @param login Value for String
     */
    @JsonSetter("login")
    public void setLogin(String login) {
        this.login = login;
    }

    /**
     * Getter for Email.
     * @return Returns the String
     */
    @JsonGetter("email")
    public String getEmail() {
        return email;
    }

    /**
     * Setter for Email.
     * @param email Value for String
     */
    @JsonSetter("email")
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Getter for Role.
     * @return Returns the String
     */
    @JsonGetter("role")
    public String getRole() {
        return role;
    }

    /**
     * Setter for Role.
     * @param role Value for String
     */
    @JsonSetter("role")
    public void setRole(String role) {
        this.role = role;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the String
     */
    @JsonGetter("created_at")
    public String getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for String
     */
    @JsonSetter("created_at")
    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Internal Getter for FailedAt.
     * @return Returns the Internal String
     */
    @JsonGetter("failed_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFailedAt() {
        return this.failedAt;
    }

    /**
     * Getter for FailedAt.
     * @return Returns the String
     */
    public String getFailedAt() {
        return OptionalNullable.getFrom(failedAt);
    }

    /**
     * Setter for FailedAt.
     * @param failedAt Value for String
     */
    @JsonSetter("failed_at")
    public void setFailedAt(String failedAt) {
        this.failedAt = OptionalNullable.of(failedAt);
    }

    /**
     * UnSetter for FailedAt.
     */
    public void unsetFailedAt() {
        failedAt = null;
    }

    /**
     * Internal Getter for FailedReason.
     * @return Returns the Internal String
     */
    @JsonGetter("failed_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFailedReason() {
        return this.failedReason;
    }

    /**
     * Getter for FailedReason.
     * @return Returns the String
     */
    public String getFailedReason() {
        return OptionalNullable.getFrom(failedReason);
    }

    /**
     * Setter for FailedReason.
     * @param failedReason Value for String
     */
    @JsonSetter("failed_reason")
    public void setFailedReason(String failedReason) {
        this.failedReason = OptionalNullable.of(failedReason);
    }

    /**
     * UnSetter for FailedReason.
     */
    public void unsetFailedReason() {
        failedReason = null;
    }

    /**
     * Getter for Inviter.
     * @return Returns the Inviter
     */
    @JsonGetter("inviter")
    public Inviter getInviter() {
        return inviter;
    }

    /**
     * Setter for Inviter.
     * @param inviter Value for Inviter
     */
    @JsonSetter("inviter")
    public void setInviter(Inviter inviter) {
        this.inviter = inviter;
    }

    /**
     * Getter for TeamCount.
     * @return Returns the int
     */
    @JsonGetter("team_count")
    public int getTeamCount() {
        return teamCount;
    }

    /**
     * Setter for TeamCount.
     * @param teamCount Value for int
     */
    @JsonSetter("team_count")
    public void setTeamCount(int teamCount) {
        this.teamCount = teamCount;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for InvitationTeamsUrl.
     * @return Returns the String
     */
    @JsonGetter("invitation_teams_url")
    public String getInvitationTeamsUrl() {
        return invitationTeamsUrl;
    }

    /**
     * Setter for InvitationTeamsUrl.
     * @param invitationTeamsUrl Value for String
     */
    @JsonSetter("invitation_teams_url")
    public void setInvitationTeamsUrl(String invitationTeamsUrl) {
        this.invitationTeamsUrl = invitationTeamsUrl;
    }

    /**
     * Getter for InvitationSource.
     * @return Returns the String
     */
    @JsonGetter("invitation_source")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInvitationSource() {
        return invitationSource;
    }

    /**
     * Setter for InvitationSource.
     * @param invitationSource Value for String
     */
    @JsonSetter("invitation_source")
    public void setInvitationSource(String invitationSource) {
        this.invitationSource = invitationSource;
    }

    /**
     * Converts this OrgsInvitationsResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "OrgsInvitationsResponse [" + "id=" + id + ", login=" + login + ", email=" + email
                + ", role=" + role + ", createdAt=" + createdAt + ", inviter=" + inviter
                + ", teamCount=" + teamCount + ", nodeId=" + nodeId + ", invitationTeamsUrl="
                + invitationTeamsUrl + ", failedAt=" + failedAt + ", failedReason=" + failedReason
                + ", invitationSource=" + invitationSource + "]";
    }

    /**
     * Builds a new {@link OrgsInvitationsResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link OrgsInvitationsResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, login, email, role, createdAt, inviter, teamCount, nodeId,
                invitationTeamsUrl)
                .invitationSource(getInvitationSource());
        builder.failedAt = internalGetFailedAt();
        builder.failedReason = internalGetFailedReason();
        return builder;
    }

    /**
     * Class to build instances of {@link OrgsInvitationsResponse}.
     */
    public static class Builder {
        private int id;
        private String login;
        private String email;
        private String role;
        private String createdAt;
        private Inviter inviter;
        private int teamCount;
        private String nodeId;
        private String invitationTeamsUrl;
        private OptionalNullable<String> failedAt;
        private OptionalNullable<String> failedReason;
        private String invitationSource;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  login  String value for login.
         * @param  email  String value for email.
         * @param  role  String value for role.
         * @param  createdAt  String value for createdAt.
         * @param  inviter  Inviter value for inviter.
         * @param  teamCount  int value for teamCount.
         * @param  nodeId  String value for nodeId.
         * @param  invitationTeamsUrl  String value for invitationTeamsUrl.
         */
        public Builder(int id, String login, String email, String role, String createdAt,
                Inviter inviter, int teamCount, String nodeId, String invitationTeamsUrl) {
            this.id = id;
            this.login = login;
            this.email = email;
            this.role = role;
            this.createdAt = createdAt;
            this.inviter = inviter;
            this.teamCount = teamCount;
            this.nodeId = nodeId;
            this.invitationTeamsUrl = invitationTeamsUrl;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for login.
         * @param  login  String value for login.
         * @return Builder
         */
        public Builder login(String login) {
            this.login = login;
            return this;
        }

        /**
         * Setter for email.
         * @param  email  String value for email.
         * @return Builder
         */
        public Builder email(String email) {
            this.email = email;
            return this;
        }

        /**
         * Setter for role.
         * @param  role  String value for role.
         * @return Builder
         */
        public Builder role(String role) {
            this.role = role;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  String value for createdAt.
         * @return Builder
         */
        public Builder createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for inviter.
         * @param  inviter  Inviter value for inviter.
         * @return Builder
         */
        public Builder inviter(Inviter inviter) {
            this.inviter = inviter;
            return this;
        }

        /**
         * Setter for teamCount.
         * @param  teamCount  int value for teamCount.
         * @return Builder
         */
        public Builder teamCount(int teamCount) {
            this.teamCount = teamCount;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for invitationTeamsUrl.
         * @param  invitationTeamsUrl  String value for invitationTeamsUrl.
         * @return Builder
         */
        public Builder invitationTeamsUrl(String invitationTeamsUrl) {
            this.invitationTeamsUrl = invitationTeamsUrl;
            return this;
        }

        /**
         * Setter for failedAt.
         * @param  failedAt  String value for failedAt.
         * @return Builder
         */
        public Builder failedAt(String failedAt) {
            this.failedAt = OptionalNullable.of(failedAt);
            return this;
        }

        /**
         * UnSetter for failedAt.
         * @return Builder
         */
        public Builder unsetFailedAt() {
            failedAt = null;
            return this;
        }

        /**
         * Setter for failedReason.
         * @param  failedReason  String value for failedReason.
         * @return Builder
         */
        public Builder failedReason(String failedReason) {
            this.failedReason = OptionalNullable.of(failedReason);
            return this;
        }

        /**
         * UnSetter for failedReason.
         * @return Builder
         */
        public Builder unsetFailedReason() {
            failedReason = null;
            return this;
        }

        /**
         * Setter for invitationSource.
         * @param  invitationSource  String value for invitationSource.
         * @return Builder
         */
        public Builder invitationSource(String invitationSource) {
            this.invitationSource = invitationSource;
            return this;
        }

        /**
         * Builds a new {@link OrgsInvitationsResponse} object using the set fields.
         * @return {@link OrgsInvitationsResponse}
         */
        public OrgsInvitationsResponse build() {
            return new OrgsInvitationsResponse(id, login, email, role, createdAt, inviter,
                    teamCount, nodeId, invitationTeamsUrl, failedAt, failedReason,
                    invitationSource);
        }
    }
}

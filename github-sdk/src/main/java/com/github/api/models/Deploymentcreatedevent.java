/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Deploymentcreatedevent type.
 */
public class Deploymentcreatedevent {
    private String action;
    private Deployment4 deployment;
    private Enterprise1 enterprise;
    private Installation1 installation;
    private Organization2 organization;
    private Repository3 repository;
    private Sender sender;
    private Object workflow;
    private Object workflowRun;

    /**
     * Default constructor.
     */
    public Deploymentcreatedevent() {
        action = "created";
    }

    /**
     * Initialization constructor.
     * @param  action  String value for action.
     * @param  deployment  Deployment4 value for deployment.
     * @param  repository  Repository3 value for repository.
     * @param  sender  Sender value for sender.
     * @param  workflow  Object value for workflow.
     * @param  workflowRun  Object value for workflowRun.
     * @param  enterprise  Enterprise1 value for enterprise.
     * @param  installation  Installation1 value for installation.
     * @param  organization  Organization2 value for organization.
     */
    public Deploymentcreatedevent(
            String action,
            Deployment4 deployment,
            Repository3 repository,
            Sender sender,
            Object workflow,
            Object workflowRun,
            Enterprise1 enterprise,
            Installation1 installation,
            Organization2 organization) {
        this.action = action;
        this.deployment = deployment;
        this.enterprise = enterprise;
        this.installation = installation;
        this.organization = organization;
        this.repository = repository;
        this.sender = sender;
        this.workflow = workflow;
        this.workflowRun = workflowRun;
    }

    /**
     * Getter for Action.
     * @return Returns the String
     */
    @JsonGetter("action")
    public String getAction() {
        return action;
    }

    /**
     * Setter for Action.
     * @param action Value for String
     */
    @JsonSetter("action")
    private void setAction(String action) {
        this.action = action;
    }

    /**
     * Getter for Deployment.
     * @return Returns the Deployment4
     */
    @JsonGetter("deployment")
    public Deployment4 getDeployment() {
        return deployment;
    }

    /**
     * Setter for Deployment.
     * @param deployment Value for Deployment4
     */
    @JsonSetter("deployment")
    public void setDeployment(Deployment4 deployment) {
        this.deployment = deployment;
    }

    /**
     * Getter for Enterprise.
     * @return Returns the Enterprise1
     */
    @JsonGetter("enterprise")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Enterprise1 getEnterprise() {
        return enterprise;
    }

    /**
     * Setter for Enterprise.
     * @param enterprise Value for Enterprise1
     */
    @JsonSetter("enterprise")
    public void setEnterprise(Enterprise1 enterprise) {
        this.enterprise = enterprise;
    }

    /**
     * Getter for Installation.
     * @return Returns the Installation1
     */
    @JsonGetter("installation")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Installation1 getInstallation() {
        return installation;
    }

    /**
     * Setter for Installation.
     * @param installation Value for Installation1
     */
    @JsonSetter("installation")
    public void setInstallation(Installation1 installation) {
        this.installation = installation;
    }

    /**
     * Getter for Organization.
     * @return Returns the Organization2
     */
    @JsonGetter("organization")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Organization2 getOrganization() {
        return organization;
    }

    /**
     * Setter for Organization.
     * @param organization Value for Organization2
     */
    @JsonSetter("organization")
    public void setOrganization(Organization2 organization) {
        this.organization = organization;
    }

    /**
     * Getter for Repository.
     * @return Returns the Repository3
     */
    @JsonGetter("repository")
    public Repository3 getRepository() {
        return repository;
    }

    /**
     * Setter for Repository.
     * @param repository Value for Repository3
     */
    @JsonSetter("repository")
    public void setRepository(Repository3 repository) {
        this.repository = repository;
    }

    /**
     * Getter for Sender.
     * @return Returns the Sender
     */
    @JsonGetter("sender")
    public Sender getSender() {
        return sender;
    }

    /**
     * Setter for Sender.
     * @param sender Value for Sender
     */
    @JsonSetter("sender")
    public void setSender(Sender sender) {
        this.sender = sender;
    }

    /**
     * Getter for Workflow.
     * @return Returns the Object
     */
    @JsonGetter("workflow")
    public Object getWorkflow() {
        return workflow;
    }

    /**
     * Setter for Workflow.
     * @param workflow Value for Object
     */
    @JsonSetter("workflow")
    public void setWorkflow(Object workflow) {
        this.workflow = workflow;
    }

    /**
     * Getter for WorkflowRun.
     * @return Returns the Object
     */
    @JsonGetter("workflow_run")
    public Object getWorkflowRun() {
        return workflowRun;
    }

    /**
     * Setter for WorkflowRun.
     * @param workflowRun Value for Object
     */
    @JsonSetter("workflow_run")
    public void setWorkflowRun(Object workflowRun) {
        this.workflowRun = workflowRun;
    }

    /**
     * Converts this Deploymentcreatedevent into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Deploymentcreatedevent [" + "action=" + action + ", deployment=" + deployment
                + ", repository=" + repository + ", sender=" + sender + ", workflow=" + workflow
                + ", workflowRun=" + workflowRun + ", enterprise=" + enterprise + ", installation="
                + installation + ", organization=" + organization + "]";
    }

    /**
     * Builds a new {@link Deploymentcreatedevent.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Deploymentcreatedevent.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(action, deployment, repository, sender, workflow, workflowRun)
                .enterprise(getEnterprise())
                .installation(getInstallation())
                .organization(getOrganization());
        return builder;
    }

    /**
     * Class to build instances of {@link Deploymentcreatedevent}.
     */
    public static class Builder {
        private String action = "created";
        private Deployment4 deployment;
        private Repository3 repository;
        private Sender sender;
        private Object workflow;
        private Object workflowRun;
        private Enterprise1 enterprise;
        private Installation1 installation;
        private Organization2 organization;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  action  String value for action.
         * @param  deployment  Deployment4 value for deployment.
         * @param  repository  Repository3 value for repository.
         * @param  sender  Sender value for sender.
         * @param  workflow  Object value for workflow.
         * @param  workflowRun  Object value for workflowRun.
         */
        public Builder(String action, Deployment4 deployment, Repository3 repository, Sender sender,
                Object workflow, Object workflowRun) {
            this.action = action;
            this.deployment = deployment;
            this.repository = repository;
            this.sender = sender;
            this.workflow = workflow;
            this.workflowRun = workflowRun;
        }

        /**
         * Setter for action.
         * @param  action  String value for action.
         * @return Builder
         */
        public Builder action(String action) {
            this.action = action;
            return this;
        }

        /**
         * Setter for deployment.
         * @param  deployment  Deployment4 value for deployment.
         * @return Builder
         */
        public Builder deployment(Deployment4 deployment) {
            this.deployment = deployment;
            return this;
        }

        /**
         * Setter for repository.
         * @param  repository  Repository3 value for repository.
         * @return Builder
         */
        public Builder repository(Repository3 repository) {
            this.repository = repository;
            return this;
        }

        /**
         * Setter for sender.
         * @param  sender  Sender value for sender.
         * @return Builder
         */
        public Builder sender(Sender sender) {
            this.sender = sender;
            return this;
        }

        /**
         * Setter for workflow.
         * @param  workflow  Object value for workflow.
         * @return Builder
         */
        public Builder workflow(Object workflow) {
            this.workflow = workflow;
            return this;
        }

        /**
         * Setter for workflowRun.
         * @param  workflowRun  Object value for workflowRun.
         * @return Builder
         */
        public Builder workflowRun(Object workflowRun) {
            this.workflowRun = workflowRun;
            return this;
        }

        /**
         * Setter for enterprise.
         * @param  enterprise  Enterprise1 value for enterprise.
         * @return Builder
         */
        public Builder enterprise(Enterprise1 enterprise) {
            this.enterprise = enterprise;
            return this;
        }

        /**
         * Setter for installation.
         * @param  installation  Installation1 value for installation.
         * @return Builder
         */
        public Builder installation(Installation1 installation) {
            this.installation = installation;
            return this;
        }

        /**
         * Setter for organization.
         * @param  organization  Organization2 value for organization.
         * @return Builder
         */
        public Builder organization(Organization2 organization) {
            this.organization = organization;
            return this;
        }

        /**
         * Builds a new {@link Deploymentcreatedevent} object using the set fields.
         * @return {@link Deploymentcreatedevent}
         */
        public Deploymentcreatedevent build() {
            return new Deploymentcreatedevent(action, deployment, repository, sender, workflow,
                    workflowRun, enterprise, installation, organization);
        }
    }
}

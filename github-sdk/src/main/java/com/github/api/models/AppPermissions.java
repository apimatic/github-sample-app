/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for AppPermissions type.
 */
public class AppPermissions {
    private ActionsEnum actions;
    private AdministrationEnum administration;
    private ChecksEnum checks;
    private ContentsEnum contents;
    private DeploymentsEnum deployments;
    private EnvironmentsEnum environments;
    private IssuesEnum issues;
    private MetadataEnum metadata;
    private PackagesEnum packages;
    private PagesEnum pages;
    private PullRequestsEnum pullRequests;
    private RepositoryAnnouncementBannersEnum repositoryAnnouncementBanners;
    private RepositoryHooksEnum repositoryHooks;
    private RepositoryProjectsEnum repositoryProjects;
    private SecretScanningAlertsEnum secretScanningAlerts;
    private SecretsEnum secrets;
    private SecurityEventsEnum securityEvents;
    private SingleFileEnum singleFile;
    private StatusesEnum statuses;
    private VulnerabilityAlertsEnum vulnerabilityAlerts;
    private WorkflowsEnum workflows;
    private MembersEnum members;
    private OrganizationAdministrationEnum organizationAdministration;
    private OrganizationCustomRolesEnum organizationCustomRoles;
    private OrganizationAnnouncementBannersEnum organizationAnnouncementBanners;
    private OrganizationHooksEnum organizationHooks;
    private OrganizationPlanEnum organizationPlan;
    private OrganizationProjectsEnum organizationProjects;
    private OrganizationPackagesEnum organizationPackages;
    private OrganizationSecretsEnum organizationSecrets;
    private OrganizationSelfHostedRunnersEnum organizationSelfHostedRunners;
    private OrganizationUserBlockingEnum organizationUserBlocking;
    private TeamDiscussionsEnum teamDiscussions;

    /**
     * Default constructor.
     */
    public AppPermissions() {
    }

    /**
     * Initialization constructor.
     * @param  actions  ActionsEnum value for actions.
     * @param  administration  AdministrationEnum value for administration.
     * @param  checks  ChecksEnum value for checks.
     * @param  contents  ContentsEnum value for contents.
     * @param  deployments  DeploymentsEnum value for deployments.
     * @param  environments  EnvironmentsEnum value for environments.
     * @param  issues  IssuesEnum value for issues.
     * @param  metadata  MetadataEnum value for metadata.
     * @param  packages  PackagesEnum value for packages.
     * @param  pages  PagesEnum value for pages.
     * @param  pullRequests  PullRequestsEnum value for pullRequests.
     * @param  repositoryAnnouncementBanners  RepositoryAnnouncementBannersEnum value for
     *         repositoryAnnouncementBanners.
     * @param  repositoryHooks  RepositoryHooksEnum value for repositoryHooks.
     * @param  repositoryProjects  RepositoryProjectsEnum value for repositoryProjects.
     * @param  secretScanningAlerts  SecretScanningAlertsEnum value for secretScanningAlerts.
     * @param  secrets  SecretsEnum value for secrets.
     * @param  securityEvents  SecurityEventsEnum value for securityEvents.
     * @param  singleFile  SingleFileEnum value for singleFile.
     * @param  statuses  StatusesEnum value for statuses.
     * @param  vulnerabilityAlerts  VulnerabilityAlertsEnum value for vulnerabilityAlerts.
     * @param  workflows  WorkflowsEnum value for workflows.
     * @param  members  MembersEnum value for members.
     * @param  organizationAdministration  OrganizationAdministrationEnum value for
     *         organizationAdministration.
     * @param  organizationCustomRoles  OrganizationCustomRolesEnum value for
     *         organizationCustomRoles.
     * @param  organizationAnnouncementBanners  OrganizationAnnouncementBannersEnum value for
     *         organizationAnnouncementBanners.
     * @param  organizationHooks  OrganizationHooksEnum value for organizationHooks.
     * @param  organizationPlan  OrganizationPlanEnum value for organizationPlan.
     * @param  organizationProjects  OrganizationProjectsEnum value for organizationProjects.
     * @param  organizationPackages  OrganizationPackagesEnum value for organizationPackages.
     * @param  organizationSecrets  OrganizationSecretsEnum value for organizationSecrets.
     * @param  organizationSelfHostedRunners  OrganizationSelfHostedRunnersEnum value for
     *         organizationSelfHostedRunners.
     * @param  organizationUserBlocking  OrganizationUserBlockingEnum value for
     *         organizationUserBlocking.
     * @param  teamDiscussions  TeamDiscussionsEnum value for teamDiscussions.
     */
    public AppPermissions(
            ActionsEnum actions,
            AdministrationEnum administration,
            ChecksEnum checks,
            ContentsEnum contents,
            DeploymentsEnum deployments,
            EnvironmentsEnum environments,
            IssuesEnum issues,
            MetadataEnum metadata,
            PackagesEnum packages,
            PagesEnum pages,
            PullRequestsEnum pullRequests,
            RepositoryAnnouncementBannersEnum repositoryAnnouncementBanners,
            RepositoryHooksEnum repositoryHooks,
            RepositoryProjectsEnum repositoryProjects,
            SecretScanningAlertsEnum secretScanningAlerts,
            SecretsEnum secrets,
            SecurityEventsEnum securityEvents,
            SingleFileEnum singleFile,
            StatusesEnum statuses,
            VulnerabilityAlertsEnum vulnerabilityAlerts,
            WorkflowsEnum workflows,
            MembersEnum members,
            OrganizationAdministrationEnum organizationAdministration,
            OrganizationCustomRolesEnum organizationCustomRoles,
            OrganizationAnnouncementBannersEnum organizationAnnouncementBanners,
            OrganizationHooksEnum organizationHooks,
            OrganizationPlanEnum organizationPlan,
            OrganizationProjectsEnum organizationProjects,
            OrganizationPackagesEnum organizationPackages,
            OrganizationSecretsEnum organizationSecrets,
            OrganizationSelfHostedRunnersEnum organizationSelfHostedRunners,
            OrganizationUserBlockingEnum organizationUserBlocking,
            TeamDiscussionsEnum teamDiscussions) {
        this.actions = actions;
        this.administration = administration;
        this.checks = checks;
        this.contents = contents;
        this.deployments = deployments;
        this.environments = environments;
        this.issues = issues;
        this.metadata = metadata;
        this.packages = packages;
        this.pages = pages;
        this.pullRequests = pullRequests;
        this.repositoryAnnouncementBanners = repositoryAnnouncementBanners;
        this.repositoryHooks = repositoryHooks;
        this.repositoryProjects = repositoryProjects;
        this.secretScanningAlerts = secretScanningAlerts;
        this.secrets = secrets;
        this.securityEvents = securityEvents;
        this.singleFile = singleFile;
        this.statuses = statuses;
        this.vulnerabilityAlerts = vulnerabilityAlerts;
        this.workflows = workflows;
        this.members = members;
        this.organizationAdministration = organizationAdministration;
        this.organizationCustomRoles = organizationCustomRoles;
        this.organizationAnnouncementBanners = organizationAnnouncementBanners;
        this.organizationHooks = organizationHooks;
        this.organizationPlan = organizationPlan;
        this.organizationProjects = organizationProjects;
        this.organizationPackages = organizationPackages;
        this.organizationSecrets = organizationSecrets;
        this.organizationSelfHostedRunners = organizationSelfHostedRunners;
        this.organizationUserBlocking = organizationUserBlocking;
        this.teamDiscussions = teamDiscussions;
    }

    /**
     * Getter for Actions.
     * @return Returns the ActionsEnum
     */
    @JsonGetter("actions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ActionsEnum getActions() {
        return actions;
    }

    /**
     * Setter for Actions.
     * @param actions Value for ActionsEnum
     */
    @JsonSetter("actions")
    public void setActions(ActionsEnum actions) {
        this.actions = actions;
    }

    /**
     * Getter for Administration.
     * @return Returns the AdministrationEnum
     */
    @JsonGetter("administration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AdministrationEnum getAdministration() {
        return administration;
    }

    /**
     * Setter for Administration.
     * @param administration Value for AdministrationEnum
     */
    @JsonSetter("administration")
    public void setAdministration(AdministrationEnum administration) {
        this.administration = administration;
    }

    /**
     * Getter for Checks.
     * @return Returns the ChecksEnum
     */
    @JsonGetter("checks")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ChecksEnum getChecks() {
        return checks;
    }

    /**
     * Setter for Checks.
     * @param checks Value for ChecksEnum
     */
    @JsonSetter("checks")
    public void setChecks(ChecksEnum checks) {
        this.checks = checks;
    }

    /**
     * Getter for Contents.
     * @return Returns the ContentsEnum
     */
    @JsonGetter("contents")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ContentsEnum getContents() {
        return contents;
    }

    /**
     * Setter for Contents.
     * @param contents Value for ContentsEnum
     */
    @JsonSetter("contents")
    public void setContents(ContentsEnum contents) {
        this.contents = contents;
    }

    /**
     * Getter for Deployments.
     * @return Returns the DeploymentsEnum
     */
    @JsonGetter("deployments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DeploymentsEnum getDeployments() {
        return deployments;
    }

    /**
     * Setter for Deployments.
     * @param deployments Value for DeploymentsEnum
     */
    @JsonSetter("deployments")
    public void setDeployments(DeploymentsEnum deployments) {
        this.deployments = deployments;
    }

    /**
     * Getter for Environments.
     * @return Returns the EnvironmentsEnum
     */
    @JsonGetter("environments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public EnvironmentsEnum getEnvironments() {
        return environments;
    }

    /**
     * Setter for Environments.
     * @param environments Value for EnvironmentsEnum
     */
    @JsonSetter("environments")
    public void setEnvironments(EnvironmentsEnum environments) {
        this.environments = environments;
    }

    /**
     * Getter for Issues.
     * @return Returns the IssuesEnum
     */
    @JsonGetter("issues")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public IssuesEnum getIssues() {
        return issues;
    }

    /**
     * Setter for Issues.
     * @param issues Value for IssuesEnum
     */
    @JsonSetter("issues")
    public void setIssues(IssuesEnum issues) {
        this.issues = issues;
    }

    /**
     * Getter for Metadata.
     * @return Returns the MetadataEnum
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MetadataEnum getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * @param metadata Value for MetadataEnum
     */
    @JsonSetter("metadata")
    public void setMetadata(MetadataEnum metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for Packages.
     * @return Returns the PackagesEnum
     */
    @JsonGetter("packages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PackagesEnum getPackages() {
        return packages;
    }

    /**
     * Setter for Packages.
     * @param packages Value for PackagesEnum
     */
    @JsonSetter("packages")
    public void setPackages(PackagesEnum packages) {
        this.packages = packages;
    }

    /**
     * Getter for Pages.
     * @return Returns the PagesEnum
     */
    @JsonGetter("pages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PagesEnum getPages() {
        return pages;
    }

    /**
     * Setter for Pages.
     * @param pages Value for PagesEnum
     */
    @JsonSetter("pages")
    public void setPages(PagesEnum pages) {
        this.pages = pages;
    }

    /**
     * Getter for PullRequests.
     * @return Returns the PullRequestsEnum
     */
    @JsonGetter("pull_requests")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PullRequestsEnum getPullRequests() {
        return pullRequests;
    }

    /**
     * Setter for PullRequests.
     * @param pullRequests Value for PullRequestsEnum
     */
    @JsonSetter("pull_requests")
    public void setPullRequests(PullRequestsEnum pullRequests) {
        this.pullRequests = pullRequests;
    }

    /**
     * Getter for RepositoryAnnouncementBanners.
     * @return Returns the RepositoryAnnouncementBannersEnum
     */
    @JsonGetter("repository_announcement_banners")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RepositoryAnnouncementBannersEnum getRepositoryAnnouncementBanners() {
        return repositoryAnnouncementBanners;
    }

    /**
     * Setter for RepositoryAnnouncementBanners.
     * @param repositoryAnnouncementBanners Value for RepositoryAnnouncementBannersEnum
     */
    @JsonSetter("repository_announcement_banners")
    public void setRepositoryAnnouncementBanners(RepositoryAnnouncementBannersEnum repositoryAnnouncementBanners) {
        this.repositoryAnnouncementBanners = repositoryAnnouncementBanners;
    }

    /**
     * Getter for RepositoryHooks.
     * @return Returns the RepositoryHooksEnum
     */
    @JsonGetter("repository_hooks")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RepositoryHooksEnum getRepositoryHooks() {
        return repositoryHooks;
    }

    /**
     * Setter for RepositoryHooks.
     * @param repositoryHooks Value for RepositoryHooksEnum
     */
    @JsonSetter("repository_hooks")
    public void setRepositoryHooks(RepositoryHooksEnum repositoryHooks) {
        this.repositoryHooks = repositoryHooks;
    }

    /**
     * Getter for RepositoryProjects.
     * @return Returns the RepositoryProjectsEnum
     */
    @JsonGetter("repository_projects")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RepositoryProjectsEnum getRepositoryProjects() {
        return repositoryProjects;
    }

    /**
     * Setter for RepositoryProjects.
     * @param repositoryProjects Value for RepositoryProjectsEnum
     */
    @JsonSetter("repository_projects")
    public void setRepositoryProjects(RepositoryProjectsEnum repositoryProjects) {
        this.repositoryProjects = repositoryProjects;
    }

    /**
     * Getter for SecretScanningAlerts.
     * @return Returns the SecretScanningAlertsEnum
     */
    @JsonGetter("secret_scanning_alerts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SecretScanningAlertsEnum getSecretScanningAlerts() {
        return secretScanningAlerts;
    }

    /**
     * Setter for SecretScanningAlerts.
     * @param secretScanningAlerts Value for SecretScanningAlertsEnum
     */
    @JsonSetter("secret_scanning_alerts")
    public void setSecretScanningAlerts(SecretScanningAlertsEnum secretScanningAlerts) {
        this.secretScanningAlerts = secretScanningAlerts;
    }

    /**
     * Getter for Secrets.
     * @return Returns the SecretsEnum
     */
    @JsonGetter("secrets")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SecretsEnum getSecrets() {
        return secrets;
    }

    /**
     * Setter for Secrets.
     * @param secrets Value for SecretsEnum
     */
    @JsonSetter("secrets")
    public void setSecrets(SecretsEnum secrets) {
        this.secrets = secrets;
    }

    /**
     * Getter for SecurityEvents.
     * @return Returns the SecurityEventsEnum
     */
    @JsonGetter("security_events")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SecurityEventsEnum getSecurityEvents() {
        return securityEvents;
    }

    /**
     * Setter for SecurityEvents.
     * @param securityEvents Value for SecurityEventsEnum
     */
    @JsonSetter("security_events")
    public void setSecurityEvents(SecurityEventsEnum securityEvents) {
        this.securityEvents = securityEvents;
    }

    /**
     * Getter for SingleFile.
     * @return Returns the SingleFileEnum
     */
    @JsonGetter("single_file")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SingleFileEnum getSingleFile() {
        return singleFile;
    }

    /**
     * Setter for SingleFile.
     * @param singleFile Value for SingleFileEnum
     */
    @JsonSetter("single_file")
    public void setSingleFile(SingleFileEnum singleFile) {
        this.singleFile = singleFile;
    }

    /**
     * Getter for Statuses.
     * @return Returns the StatusesEnum
     */
    @JsonGetter("statuses")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public StatusesEnum getStatuses() {
        return statuses;
    }

    /**
     * Setter for Statuses.
     * @param statuses Value for StatusesEnum
     */
    @JsonSetter("statuses")
    public void setStatuses(StatusesEnum statuses) {
        this.statuses = statuses;
    }

    /**
     * Getter for VulnerabilityAlerts.
     * @return Returns the VulnerabilityAlertsEnum
     */
    @JsonGetter("vulnerability_alerts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public VulnerabilityAlertsEnum getVulnerabilityAlerts() {
        return vulnerabilityAlerts;
    }

    /**
     * Setter for VulnerabilityAlerts.
     * @param vulnerabilityAlerts Value for VulnerabilityAlertsEnum
     */
    @JsonSetter("vulnerability_alerts")
    public void setVulnerabilityAlerts(VulnerabilityAlertsEnum vulnerabilityAlerts) {
        this.vulnerabilityAlerts = vulnerabilityAlerts;
    }

    /**
     * Getter for Workflows.
     * @return Returns the WorkflowsEnum
     */
    @JsonGetter("workflows")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public WorkflowsEnum getWorkflows() {
        return workflows;
    }

    /**
     * Setter for Workflows.
     * @param workflows Value for WorkflowsEnum
     */
    @JsonSetter("workflows")
    public void setWorkflows(WorkflowsEnum workflows) {
        this.workflows = workflows;
    }

    /**
     * Getter for Members.
     * @return Returns the MembersEnum
     */
    @JsonGetter("members")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MembersEnum getMembers() {
        return members;
    }

    /**
     * Setter for Members.
     * @param members Value for MembersEnum
     */
    @JsonSetter("members")
    public void setMembers(MembersEnum members) {
        this.members = members;
    }

    /**
     * Getter for OrganizationAdministration.
     * @return Returns the OrganizationAdministrationEnum
     */
    @JsonGetter("organization_administration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OrganizationAdministrationEnum getOrganizationAdministration() {
        return organizationAdministration;
    }

    /**
     * Setter for OrganizationAdministration.
     * @param organizationAdministration Value for OrganizationAdministrationEnum
     */
    @JsonSetter("organization_administration")
    public void setOrganizationAdministration(OrganizationAdministrationEnum organizationAdministration) {
        this.organizationAdministration = organizationAdministration;
    }

    /**
     * Getter for OrganizationCustomRoles.
     * @return Returns the OrganizationCustomRolesEnum
     */
    @JsonGetter("organization_custom_roles")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OrganizationCustomRolesEnum getOrganizationCustomRoles() {
        return organizationCustomRoles;
    }

    /**
     * Setter for OrganizationCustomRoles.
     * @param organizationCustomRoles Value for OrganizationCustomRolesEnum
     */
    @JsonSetter("organization_custom_roles")
    public void setOrganizationCustomRoles(OrganizationCustomRolesEnum organizationCustomRoles) {
        this.organizationCustomRoles = organizationCustomRoles;
    }

    /**
     * Getter for OrganizationAnnouncementBanners.
     * @return Returns the OrganizationAnnouncementBannersEnum
     */
    @JsonGetter("organization_announcement_banners")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OrganizationAnnouncementBannersEnum getOrganizationAnnouncementBanners() {
        return organizationAnnouncementBanners;
    }

    /**
     * Setter for OrganizationAnnouncementBanners.
     * @param organizationAnnouncementBanners Value for OrganizationAnnouncementBannersEnum
     */
    @JsonSetter("organization_announcement_banners")
    public void setOrganizationAnnouncementBanners(OrganizationAnnouncementBannersEnum organizationAnnouncementBanners) {
        this.organizationAnnouncementBanners = organizationAnnouncementBanners;
    }

    /**
     * Getter for OrganizationHooks.
     * @return Returns the OrganizationHooksEnum
     */
    @JsonGetter("organization_hooks")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OrganizationHooksEnum getOrganizationHooks() {
        return organizationHooks;
    }

    /**
     * Setter for OrganizationHooks.
     * @param organizationHooks Value for OrganizationHooksEnum
     */
    @JsonSetter("organization_hooks")
    public void setOrganizationHooks(OrganizationHooksEnum organizationHooks) {
        this.organizationHooks = organizationHooks;
    }

    /**
     * Getter for OrganizationPlan.
     * @return Returns the OrganizationPlanEnum
     */
    @JsonGetter("organization_plan")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OrganizationPlanEnum getOrganizationPlan() {
        return organizationPlan;
    }

    /**
     * Setter for OrganizationPlan.
     * @param organizationPlan Value for OrganizationPlanEnum
     */
    @JsonSetter("organization_plan")
    public void setOrganizationPlan(OrganizationPlanEnum organizationPlan) {
        this.organizationPlan = organizationPlan;
    }

    /**
     * Getter for OrganizationProjects.
     * @return Returns the OrganizationProjectsEnum
     */
    @JsonGetter("organization_projects")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OrganizationProjectsEnum getOrganizationProjects() {
        return organizationProjects;
    }

    /**
     * Setter for OrganizationProjects.
     * @param organizationProjects Value for OrganizationProjectsEnum
     */
    @JsonSetter("organization_projects")
    public void setOrganizationProjects(OrganizationProjectsEnum organizationProjects) {
        this.organizationProjects = organizationProjects;
    }

    /**
     * Getter for OrganizationPackages.
     * @return Returns the OrganizationPackagesEnum
     */
    @JsonGetter("organization_packages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OrganizationPackagesEnum getOrganizationPackages() {
        return organizationPackages;
    }

    /**
     * Setter for OrganizationPackages.
     * @param organizationPackages Value for OrganizationPackagesEnum
     */
    @JsonSetter("organization_packages")
    public void setOrganizationPackages(OrganizationPackagesEnum organizationPackages) {
        this.organizationPackages = organizationPackages;
    }

    /**
     * Getter for OrganizationSecrets.
     * @return Returns the OrganizationSecretsEnum
     */
    @JsonGetter("organization_secrets")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OrganizationSecretsEnum getOrganizationSecrets() {
        return organizationSecrets;
    }

    /**
     * Setter for OrganizationSecrets.
     * @param organizationSecrets Value for OrganizationSecretsEnum
     */
    @JsonSetter("organization_secrets")
    public void setOrganizationSecrets(OrganizationSecretsEnum organizationSecrets) {
        this.organizationSecrets = organizationSecrets;
    }

    /**
     * Getter for OrganizationSelfHostedRunners.
     * @return Returns the OrganizationSelfHostedRunnersEnum
     */
    @JsonGetter("organization_self_hosted_runners")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OrganizationSelfHostedRunnersEnum getOrganizationSelfHostedRunners() {
        return organizationSelfHostedRunners;
    }

    /**
     * Setter for OrganizationSelfHostedRunners.
     * @param organizationSelfHostedRunners Value for OrganizationSelfHostedRunnersEnum
     */
    @JsonSetter("organization_self_hosted_runners")
    public void setOrganizationSelfHostedRunners(OrganizationSelfHostedRunnersEnum organizationSelfHostedRunners) {
        this.organizationSelfHostedRunners = organizationSelfHostedRunners;
    }

    /**
     * Getter for OrganizationUserBlocking.
     * @return Returns the OrganizationUserBlockingEnum
     */
    @JsonGetter("organization_user_blocking")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OrganizationUserBlockingEnum getOrganizationUserBlocking() {
        return organizationUserBlocking;
    }

    /**
     * Setter for OrganizationUserBlocking.
     * @param organizationUserBlocking Value for OrganizationUserBlockingEnum
     */
    @JsonSetter("organization_user_blocking")
    public void setOrganizationUserBlocking(OrganizationUserBlockingEnum organizationUserBlocking) {
        this.organizationUserBlocking = organizationUserBlocking;
    }

    /**
     * Getter for TeamDiscussions.
     * @return Returns the TeamDiscussionsEnum
     */
    @JsonGetter("team_discussions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TeamDiscussionsEnum getTeamDiscussions() {
        return teamDiscussions;
    }

    /**
     * Setter for TeamDiscussions.
     * @param teamDiscussions Value for TeamDiscussionsEnum
     */
    @JsonSetter("team_discussions")
    public void setTeamDiscussions(TeamDiscussionsEnum teamDiscussions) {
        this.teamDiscussions = teamDiscussions;
    }

    /**
     * Converts this AppPermissions into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AppPermissions [" + "actions=" + actions + ", administration=" + administration
                + ", checks=" + checks + ", contents=" + contents + ", deployments=" + deployments
                + ", environments=" + environments + ", issues=" + issues + ", metadata=" + metadata
                + ", packages=" + packages + ", pages=" + pages + ", pullRequests=" + pullRequests
                + ", repositoryAnnouncementBanners=" + repositoryAnnouncementBanners
                + ", repositoryHooks=" + repositoryHooks + ", repositoryProjects="
                + repositoryProjects + ", secretScanningAlerts=" + secretScanningAlerts
                + ", secrets=" + secrets + ", securityEvents=" + securityEvents + ", singleFile="
                + singleFile + ", statuses=" + statuses + ", vulnerabilityAlerts="
                + vulnerabilityAlerts + ", workflows=" + workflows + ", members=" + members
                + ", organizationAdministration=" + organizationAdministration
                + ", organizationCustomRoles=" + organizationCustomRoles
                + ", organizationAnnouncementBanners=" + organizationAnnouncementBanners
                + ", organizationHooks=" + organizationHooks + ", organizationPlan="
                + organizationPlan + ", organizationProjects=" + organizationProjects
                + ", organizationPackages=" + organizationPackages + ", organizationSecrets="
                + organizationSecrets + ", organizationSelfHostedRunners="
                + organizationSelfHostedRunners + ", organizationUserBlocking="
                + organizationUserBlocking + ", teamDiscussions=" + teamDiscussions + "]";
    }

    /**
     * Builds a new {@link AppPermissions.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link AppPermissions.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .actions(getActions())
                .administration(getAdministration())
                .checks(getChecks())
                .contents(getContents())
                .deployments(getDeployments())
                .environments(getEnvironments())
                .issues(getIssues())
                .metadata(getMetadata())
                .packages(getPackages())
                .pages(getPages())
                .pullRequests(getPullRequests())
                .repositoryAnnouncementBanners(getRepositoryAnnouncementBanners())
                .repositoryHooks(getRepositoryHooks())
                .repositoryProjects(getRepositoryProjects())
                .secretScanningAlerts(getSecretScanningAlerts())
                .secrets(getSecrets())
                .securityEvents(getSecurityEvents())
                .singleFile(getSingleFile())
                .statuses(getStatuses())
                .vulnerabilityAlerts(getVulnerabilityAlerts())
                .workflows(getWorkflows())
                .members(getMembers())
                .organizationAdministration(getOrganizationAdministration())
                .organizationCustomRoles(getOrganizationCustomRoles())
                .organizationAnnouncementBanners(getOrganizationAnnouncementBanners())
                .organizationHooks(getOrganizationHooks())
                .organizationPlan(getOrganizationPlan())
                .organizationProjects(getOrganizationProjects())
                .organizationPackages(getOrganizationPackages())
                .organizationSecrets(getOrganizationSecrets())
                .organizationSelfHostedRunners(getOrganizationSelfHostedRunners())
                .organizationUserBlocking(getOrganizationUserBlocking())
                .teamDiscussions(getTeamDiscussions());
        return builder;
    }

    /**
     * Class to build instances of {@link AppPermissions}.
     */
    public static class Builder {
        private ActionsEnum actions;
        private AdministrationEnum administration;
        private ChecksEnum checks;
        private ContentsEnum contents;
        private DeploymentsEnum deployments;
        private EnvironmentsEnum environments;
        private IssuesEnum issues;
        private MetadataEnum metadata;
        private PackagesEnum packages;
        private PagesEnum pages;
        private PullRequestsEnum pullRequests;
        private RepositoryAnnouncementBannersEnum repositoryAnnouncementBanners;
        private RepositoryHooksEnum repositoryHooks;
        private RepositoryProjectsEnum repositoryProjects;
        private SecretScanningAlertsEnum secretScanningAlerts;
        private SecretsEnum secrets;
        private SecurityEventsEnum securityEvents;
        private SingleFileEnum singleFile;
        private StatusesEnum statuses;
        private VulnerabilityAlertsEnum vulnerabilityAlerts;
        private WorkflowsEnum workflows;
        private MembersEnum members;
        private OrganizationAdministrationEnum organizationAdministration;
        private OrganizationCustomRolesEnum organizationCustomRoles;
        private OrganizationAnnouncementBannersEnum organizationAnnouncementBanners;
        private OrganizationHooksEnum organizationHooks;
        private OrganizationPlanEnum organizationPlan;
        private OrganizationProjectsEnum organizationProjects;
        private OrganizationPackagesEnum organizationPackages;
        private OrganizationSecretsEnum organizationSecrets;
        private OrganizationSelfHostedRunnersEnum organizationSelfHostedRunners;
        private OrganizationUserBlockingEnum organizationUserBlocking;
        private TeamDiscussionsEnum teamDiscussions;



        /**
         * Setter for actions.
         * @param  actions  ActionsEnum value for actions.
         * @return Builder
         */
        public Builder actions(ActionsEnum actions) {
            this.actions = actions;
            return this;
        }

        /**
         * Setter for administration.
         * @param  administration  AdministrationEnum value for administration.
         * @return Builder
         */
        public Builder administration(AdministrationEnum administration) {
            this.administration = administration;
            return this;
        }

        /**
         * Setter for checks.
         * @param  checks  ChecksEnum value for checks.
         * @return Builder
         */
        public Builder checks(ChecksEnum checks) {
            this.checks = checks;
            return this;
        }

        /**
         * Setter for contents.
         * @param  contents  ContentsEnum value for contents.
         * @return Builder
         */
        public Builder contents(ContentsEnum contents) {
            this.contents = contents;
            return this;
        }

        /**
         * Setter for deployments.
         * @param  deployments  DeploymentsEnum value for deployments.
         * @return Builder
         */
        public Builder deployments(DeploymentsEnum deployments) {
            this.deployments = deployments;
            return this;
        }

        /**
         * Setter for environments.
         * @param  environments  EnvironmentsEnum value for environments.
         * @return Builder
         */
        public Builder environments(EnvironmentsEnum environments) {
            this.environments = environments;
            return this;
        }

        /**
         * Setter for issues.
         * @param  issues  IssuesEnum value for issues.
         * @return Builder
         */
        public Builder issues(IssuesEnum issues) {
            this.issues = issues;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  MetadataEnum value for metadata.
         * @return Builder
         */
        public Builder metadata(MetadataEnum metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for packages.
         * @param  packages  PackagesEnum value for packages.
         * @return Builder
         */
        public Builder packages(PackagesEnum packages) {
            this.packages = packages;
            return this;
        }

        /**
         * Setter for pages.
         * @param  pages  PagesEnum value for pages.
         * @return Builder
         */
        public Builder pages(PagesEnum pages) {
            this.pages = pages;
            return this;
        }

        /**
         * Setter for pullRequests.
         * @param  pullRequests  PullRequestsEnum value for pullRequests.
         * @return Builder
         */
        public Builder pullRequests(PullRequestsEnum pullRequests) {
            this.pullRequests = pullRequests;
            return this;
        }

        /**
         * Setter for repositoryAnnouncementBanners.
         * @param  repositoryAnnouncementBanners  RepositoryAnnouncementBannersEnum value for
         *         repositoryAnnouncementBanners.
         * @return Builder
         */
        public Builder repositoryAnnouncementBanners(
                RepositoryAnnouncementBannersEnum repositoryAnnouncementBanners) {
            this.repositoryAnnouncementBanners = repositoryAnnouncementBanners;
            return this;
        }

        /**
         * Setter for repositoryHooks.
         * @param  repositoryHooks  RepositoryHooksEnum value for repositoryHooks.
         * @return Builder
         */
        public Builder repositoryHooks(RepositoryHooksEnum repositoryHooks) {
            this.repositoryHooks = repositoryHooks;
            return this;
        }

        /**
         * Setter for repositoryProjects.
         * @param  repositoryProjects  RepositoryProjectsEnum value for repositoryProjects.
         * @return Builder
         */
        public Builder repositoryProjects(RepositoryProjectsEnum repositoryProjects) {
            this.repositoryProjects = repositoryProjects;
            return this;
        }

        /**
         * Setter for secretScanningAlerts.
         * @param  secretScanningAlerts  SecretScanningAlertsEnum value for secretScanningAlerts.
         * @return Builder
         */
        public Builder secretScanningAlerts(SecretScanningAlertsEnum secretScanningAlerts) {
            this.secretScanningAlerts = secretScanningAlerts;
            return this;
        }

        /**
         * Setter for secrets.
         * @param  secrets  SecretsEnum value for secrets.
         * @return Builder
         */
        public Builder secrets(SecretsEnum secrets) {
            this.secrets = secrets;
            return this;
        }

        /**
         * Setter for securityEvents.
         * @param  securityEvents  SecurityEventsEnum value for securityEvents.
         * @return Builder
         */
        public Builder securityEvents(SecurityEventsEnum securityEvents) {
            this.securityEvents = securityEvents;
            return this;
        }

        /**
         * Setter for singleFile.
         * @param  singleFile  SingleFileEnum value for singleFile.
         * @return Builder
         */
        public Builder singleFile(SingleFileEnum singleFile) {
            this.singleFile = singleFile;
            return this;
        }

        /**
         * Setter for statuses.
         * @param  statuses  StatusesEnum value for statuses.
         * @return Builder
         */
        public Builder statuses(StatusesEnum statuses) {
            this.statuses = statuses;
            return this;
        }

        /**
         * Setter for vulnerabilityAlerts.
         * @param  vulnerabilityAlerts  VulnerabilityAlertsEnum value for vulnerabilityAlerts.
         * @return Builder
         */
        public Builder vulnerabilityAlerts(VulnerabilityAlertsEnum vulnerabilityAlerts) {
            this.vulnerabilityAlerts = vulnerabilityAlerts;
            return this;
        }

        /**
         * Setter for workflows.
         * @param  workflows  WorkflowsEnum value for workflows.
         * @return Builder
         */
        public Builder workflows(WorkflowsEnum workflows) {
            this.workflows = workflows;
            return this;
        }

        /**
         * Setter for members.
         * @param  members  MembersEnum value for members.
         * @return Builder
         */
        public Builder members(MembersEnum members) {
            this.members = members;
            return this;
        }

        /**
         * Setter for organizationAdministration.
         * @param  organizationAdministration  OrganizationAdministrationEnum value for
         *         organizationAdministration.
         * @return Builder
         */
        public Builder organizationAdministration(
                OrganizationAdministrationEnum organizationAdministration) {
            this.organizationAdministration = organizationAdministration;
            return this;
        }

        /**
         * Setter for organizationCustomRoles.
         * @param  organizationCustomRoles  OrganizationCustomRolesEnum value for
         *         organizationCustomRoles.
         * @return Builder
         */
        public Builder organizationCustomRoles(
                OrganizationCustomRolesEnum organizationCustomRoles) {
            this.organizationCustomRoles = organizationCustomRoles;
            return this;
        }

        /**
         * Setter for organizationAnnouncementBanners.
         * @param  organizationAnnouncementBanners  OrganizationAnnouncementBannersEnum value for
         *         organizationAnnouncementBanners.
         * @return Builder
         */
        public Builder organizationAnnouncementBanners(
                OrganizationAnnouncementBannersEnum organizationAnnouncementBanners) {
            this.organizationAnnouncementBanners = organizationAnnouncementBanners;
            return this;
        }

        /**
         * Setter for organizationHooks.
         * @param  organizationHooks  OrganizationHooksEnum value for organizationHooks.
         * @return Builder
         */
        public Builder organizationHooks(OrganizationHooksEnum organizationHooks) {
            this.organizationHooks = organizationHooks;
            return this;
        }

        /**
         * Setter for organizationPlan.
         * @param  organizationPlan  OrganizationPlanEnum value for organizationPlan.
         * @return Builder
         */
        public Builder organizationPlan(OrganizationPlanEnum organizationPlan) {
            this.organizationPlan = organizationPlan;
            return this;
        }

        /**
         * Setter for organizationProjects.
         * @param  organizationProjects  OrganizationProjectsEnum value for organizationProjects.
         * @return Builder
         */
        public Builder organizationProjects(OrganizationProjectsEnum organizationProjects) {
            this.organizationProjects = organizationProjects;
            return this;
        }

        /**
         * Setter for organizationPackages.
         * @param  organizationPackages  OrganizationPackagesEnum value for organizationPackages.
         * @return Builder
         */
        public Builder organizationPackages(OrganizationPackagesEnum organizationPackages) {
            this.organizationPackages = organizationPackages;
            return this;
        }

        /**
         * Setter for organizationSecrets.
         * @param  organizationSecrets  OrganizationSecretsEnum value for organizationSecrets.
         * @return Builder
         */
        public Builder organizationSecrets(OrganizationSecretsEnum organizationSecrets) {
            this.organizationSecrets = organizationSecrets;
            return this;
        }

        /**
         * Setter for organizationSelfHostedRunners.
         * @param  organizationSelfHostedRunners  OrganizationSelfHostedRunnersEnum value for
         *         organizationSelfHostedRunners.
         * @return Builder
         */
        public Builder organizationSelfHostedRunners(
                OrganizationSelfHostedRunnersEnum organizationSelfHostedRunners) {
            this.organizationSelfHostedRunners = organizationSelfHostedRunners;
            return this;
        }

        /**
         * Setter for organizationUserBlocking.
         * @param  organizationUserBlocking  OrganizationUserBlockingEnum value for
         *         organizationUserBlocking.
         * @return Builder
         */
        public Builder organizationUserBlocking(
                OrganizationUserBlockingEnum organizationUserBlocking) {
            this.organizationUserBlocking = organizationUserBlocking;
            return this;
        }

        /**
         * Setter for teamDiscussions.
         * @param  teamDiscussions  TeamDiscussionsEnum value for teamDiscussions.
         * @return Builder
         */
        public Builder teamDiscussions(TeamDiscussionsEnum teamDiscussions) {
            this.teamDiscussions = teamDiscussions;
            return this;
        }

        /**
         * Builds a new {@link AppPermissions} object using the set fields.
         * @return {@link AppPermissions}
         */
        public AppPermissions build() {
            return new AppPermissions(actions, administration, checks, contents, deployments,
                    environments, issues, metadata, packages, pages, pullRequests,
                    repositoryAnnouncementBanners, repositoryHooks, repositoryProjects,
                    secretScanningAlerts, secrets, securityEvents, singleFile, statuses,
                    vulnerabilityAlerts, workflows, members, organizationAdministration,
                    organizationCustomRoles, organizationAnnouncementBanners, organizationHooks,
                    organizationPlan, organizationProjects, organizationPackages,
                    organizationSecrets, organizationSelfHostedRunners, organizationUserBlocking,
                    teamDiscussions);
        }
    }
}

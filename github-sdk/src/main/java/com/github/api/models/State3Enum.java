/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * State3Enum to be used.
 */
public enum State3Enum {
    UNKNOWN,

    CREATED,

    QUEUED,

    PROVISIONING,

    AVAILABLE,

    AWAITING,

    UNAVAILABLE,

    DELETED,

    MOVED,

    SHUTDOWN,

    ARCHIVED,

    STARTING,

    SHUTTINGDOWN,

    FAILED,

    EXPORTING,

    UPDATING,

    REBUILDING;


    private static TreeMap<String, State3Enum> valueMap = new TreeMap<>();
    private String value;

    static {
        UNKNOWN.value = "Unknown";
        CREATED.value = "Created";
        QUEUED.value = "Queued";
        PROVISIONING.value = "Provisioning";
        AVAILABLE.value = "Available";
        AWAITING.value = "Awaiting";
        UNAVAILABLE.value = "Unavailable";
        DELETED.value = "Deleted";
        MOVED.value = "Moved";
        SHUTDOWN.value = "Shutdown";
        ARCHIVED.value = "Archived";
        STARTING.value = "Starting";
        SHUTTINGDOWN.value = "ShuttingDown";
        FAILED.value = "Failed";
        EXPORTING.value = "Exporting";
        UPDATING.value = "Updating";
        REBUILDING.value = "Rebuilding";

        valueMap.put("Unknown", UNKNOWN);
        valueMap.put("Created", CREATED);
        valueMap.put("Queued", QUEUED);
        valueMap.put("Provisioning", PROVISIONING);
        valueMap.put("Available", AVAILABLE);
        valueMap.put("Awaiting", AWAITING);
        valueMap.put("Unavailable", UNAVAILABLE);
        valueMap.put("Deleted", DELETED);
        valueMap.put("Moved", MOVED);
        valueMap.put("Shutdown", SHUTDOWN);
        valueMap.put("Archived", ARCHIVED);
        valueMap.put("Starting", STARTING);
        valueMap.put("ShuttingDown", SHUTTINGDOWN);
        valueMap.put("Failed", FAILED);
        valueMap.put("Exporting", EXPORTING);
        valueMap.put("Updating", UPDATING);
        valueMap.put("Rebuilding", REBUILDING);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    @com.fasterxml.jackson.annotation.JsonCreator
    public static State3Enum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @com.fasterxml.jackson.annotation.JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of State3Enum values to list of string values.
     * @param toConvert The list of State3Enum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<State3Enum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (State3Enum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 
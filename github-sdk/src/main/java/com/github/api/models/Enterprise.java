/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;

/**
 * This is a model class for Enterprise type.
 */
public class Enterprise {
    private OptionalNullable<String> description;
    private String htmlUrl;
    private OptionalNullable<String> websiteUrl;
    private int id;
    private String nodeId;
    private String name;
    private String slug;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private String avatarUrl;

    /**
     * Default constructor.
     */
    public Enterprise() {
    }

    /**
     * Initialization constructor.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  name  String value for name.
     * @param  slug  String value for slug.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  avatarUrl  String value for avatarUrl.
     * @param  description  String value for description.
     * @param  websiteUrl  String value for websiteUrl.
     */
    public Enterprise(
            String htmlUrl,
            int id,
            String nodeId,
            String name,
            String slug,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            String avatarUrl,
            String description,
            String websiteUrl) {
        this.description = OptionalNullable.of(description);
        this.htmlUrl = htmlUrl;
        this.websiteUrl = OptionalNullable.of(websiteUrl);
        this.id = id;
        this.nodeId = nodeId;
        this.name = name;
        this.slug = slug;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.avatarUrl = avatarUrl;
    }

    /**
     * Internal initialization constructor.
     */
    protected Enterprise(String htmlUrl, int id, String nodeId, String name, String slug,
            LocalDateTime createdAt, LocalDateTime updatedAt, String avatarUrl,
            OptionalNullable<String> description, OptionalNullable<String> websiteUrl) {
        this.description = description;
        this.htmlUrl = htmlUrl;
        this.websiteUrl = websiteUrl;
        this.id = id;
        this.nodeId = nodeId;
        this.name = name;
        this.slug = slug;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.avatarUrl = avatarUrl;
    }

    /**
     * Initialization constructor.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  name  String value for name.
     * @param  slug  String value for slug.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  avatarUrl  String value for avatarUrl.
     */
    @JsonCreator
    private Enterprise(
            @JsonProperty("html_url") String htmlUrl,
            @JsonProperty("id") int id,
            @JsonProperty("node_id") String nodeId,
            @JsonProperty("name") String name,
            @JsonProperty("slug") String slug,
            @JsonProperty("created_at") LocalDateTime createdAt,
            @JsonProperty("updated_at") LocalDateTime updatedAt,
            @JsonProperty("avatar_url") String avatarUrl) {
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.nodeId = nodeId;
        this.name = name;
        this.slug = slug;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.avatarUrl = avatarUrl;
    }

    /**
     * Internal Getter for Description.
     * A short description of the enterprise.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * A short description of the enterprise.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * A short description of the enterprise.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * A short description of the enterprise.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Internal Getter for WebsiteUrl.
     * The enterprise's website URL.
     * @return Returns the Internal String
     */
    @JsonGetter("website_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetWebsiteUrl() {
        return this.websiteUrl;
    }

    /**
     * Getter for WebsiteUrl.
     * The enterprise's website URL.
     * @return Returns the String
     */
    public String getWebsiteUrl() {
        return OptionalNullable.getFrom(websiteUrl);
    }

    /**
     * Setter for WebsiteUrl.
     * The enterprise's website URL.
     * @param websiteUrl Value for String
     */
    @JsonSetter("website_url")
    public void setWebsiteUrl(String websiteUrl) {
        this.websiteUrl = OptionalNullable.of(websiteUrl);
    }

    /**
     * UnSetter for WebsiteUrl.
     * The enterprise's website URL.
     */
    public void unsetWebsiteUrl() {
        websiteUrl = null;
    }

    /**
     * Getter for Id.
     * Unique identifier of the enterprise
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier of the enterprise
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Name.
     * The name of the enterprise.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the enterprise.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Slug.
     * The slug url identifier for the enterprise.
     * @return Returns the String
     */
    @JsonGetter("slug")
    public String getSlug() {
        return slug;
    }

    /**
     * Setter for Slug.
     * The slug url identifier for the enterprise.
     * @param slug Value for String
     */
    @JsonSetter("slug")
    public void setSlug(String slug) {
        this.slug = slug;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for AvatarUrl.
     * @return Returns the String
     */
    @JsonGetter("avatar_url")
    public String getAvatarUrl() {
        return avatarUrl;
    }

    /**
     * Setter for AvatarUrl.
     * @param avatarUrl Value for String
     */
    @JsonSetter("avatar_url")
    public void setAvatarUrl(String avatarUrl) {
        this.avatarUrl = avatarUrl;
    }

    /**
     * Converts this Enterprise into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Enterprise [" + "htmlUrl=" + htmlUrl + ", id=" + id + ", nodeId=" + nodeId
                + ", name=" + name + ", slug=" + slug + ", createdAt=" + createdAt + ", updatedAt="
                + updatedAt + ", avatarUrl=" + avatarUrl + ", description=" + description
                + ", websiteUrl=" + websiteUrl + "]";
    }

    /**
     * Builds a new {@link Enterprise.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Enterprise.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(htmlUrl, id, nodeId, name, slug, createdAt, updatedAt,
                avatarUrl);
        builder.description = internalGetDescription();
        builder.websiteUrl = internalGetWebsiteUrl();
        return builder;
    }

    /**
     * Class to build instances of {@link Enterprise}.
     */
    public static class Builder {
        private String htmlUrl;
        private int id;
        private String nodeId;
        private String name;
        private String slug;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private String avatarUrl;
        private OptionalNullable<String> description;
        private OptionalNullable<String> websiteUrl;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  name  String value for name.
         * @param  slug  String value for slug.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  avatarUrl  String value for avatarUrl.
         */
        public Builder(String htmlUrl, int id, String nodeId, String name, String slug,
                LocalDateTime createdAt, LocalDateTime updatedAt, String avatarUrl) {
            this.htmlUrl = htmlUrl;
            this.id = id;
            this.nodeId = nodeId;
            this.name = name;
            this.slug = slug;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.avatarUrl = avatarUrl;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for slug.
         * @param  slug  String value for slug.
         * @return Builder
         */
        public Builder slug(String slug) {
            this.slug = slug;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for avatarUrl.
         * @param  avatarUrl  String value for avatarUrl.
         * @return Builder
         */
        public Builder avatarUrl(String avatarUrl) {
            this.avatarUrl = avatarUrl;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for websiteUrl.
         * @param  websiteUrl  String value for websiteUrl.
         * @return Builder
         */
        public Builder websiteUrl(String websiteUrl) {
            this.websiteUrl = OptionalNullable.of(websiteUrl);
            return this;
        }

        /**
         * UnSetter for websiteUrl.
         * @return Builder
         */
        public Builder unsetWebsiteUrl() {
            websiteUrl = null;
            return this;
        }

        /**
         * Builds a new {@link Enterprise} object using the set fields.
         * @return {@link Enterprise}
         */
        public Enterprise build() {
            return new Enterprise(htmlUrl, id, nodeId, name, slug, createdAt, updatedAt, avatarUrl,
                    description, websiteUrl);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.github.api.ApiHelper;
import com.github.api.models.Repository;
import com.github.api.models.StarredRepository;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = ActivityListReposStarredByUserResponse.ActivityListReposStarredByUserResponseDeserializer.class)
public abstract class ActivityListReposStarredByUserResponse {
    
    /**
     * Any-of type initialization method.
     * @param starredRepository List of StarredRepository value for starredRepository.
     * @return The StarredRepositoryCase object.
     */
    public static ActivityListReposStarredByUserResponse fromStarredRepository(
            List<StarredRepository> starredRepository) {
        return starredRepository == null ? null : new StarredRepositoryCase(starredRepository);
    }

    /**
     * Any-of type initialization method.
     * @param repository List of Repository value for repository.
     * @return The RepositoryCase object.
     */
    public static ActivityListReposStarredByUserResponse fromRepository(
            List<Repository> repository) {
        return repository == null ? null : new RepositoryCase(repository);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R starredRepository(List<StarredRepository> starredRepository);

        R repository(List<Repository> repository);
    }

    /**
     * This is a implementation class for StarredRepositoryCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class StarredRepositoryCase extends ActivityListReposStarredByUserResponse {

        @JsonValue
        private List<StarredRepository> starredRepository;

        StarredRepositoryCase(List<StarredRepository> starredRepository) {
            this.starredRepository = starredRepository;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.starredRepository(this.starredRepository);
        }

        @JsonCreator
        private StarredRepositoryCase(JsonNode jsonNode) throws IOException {
            this.starredRepository = ApiHelper.deserializeArray(jsonNode,
                StarredRepository[].class);
        }

        @Override
        public String toString() {
            return starredRepository.toString();
        }
    }

    /**
     * This is a implementation class for RepositoryCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class RepositoryCase extends ActivityListReposStarredByUserResponse {

        @JsonValue
        private List<Repository> repository;

        RepositoryCase(List<Repository> repository) {
            this.repository = repository;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.repository(this.repository);
        }

        @JsonCreator
        private RepositoryCase(JsonNode jsonNode) throws IOException {
            this.repository = ApiHelper.deserializeArray(jsonNode,
                Repository[].class);
        }

        @Override
        public String toString() {
            return repository.toString();
        }
    }

    /**
     * This is a custom deserializer class for ActivityListReposStarredByUserResponse.
     */
    protected static class ActivityListReposStarredByUserResponseDeserializer
            extends JsonDeserializer<ActivityListReposStarredByUserResponse> {

        @Override
        public ActivityListReposStarredByUserResponse deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(StarredRepositoryCase.class,
                    RepositoryCase.class), false);
        }
    }

}

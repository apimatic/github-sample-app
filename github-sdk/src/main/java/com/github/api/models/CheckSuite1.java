/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for CheckSuite1 type.
 */
public class CheckSuite1 {
    private OptionalNullable<String> after;
    private App22 app;
    private OptionalNullable<String> before;
    private Object conclusion;
    private LocalDateTime createdAt;
    private OptionalNullable<String> headBranch;
    private String headSha;
    private Integer id;
    private String nodeId;
    private List<PullRequestMinimal> pullRequests;
    private Repository7 repository;
    private Status12Enum status;
    private LocalDateTime updatedAt;
    private String url;

    /**
     * Default constructor.
     */
    public CheckSuite1() {
    }

    /**
     * Initialization constructor.
     * @param  after  String value for after.
     * @param  app  App22 value for app.
     * @param  before  String value for before.
     * @param  conclusion  Object value for conclusion.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  headBranch  String value for headBranch.
     * @param  headSha  String value for headSha.
     * @param  id  Integer value for id.
     * @param  nodeId  String value for nodeId.
     * @param  pullRequests  List of PullRequestMinimal value for pullRequests.
     * @param  repository  Repository7 value for repository.
     * @param  status  Status12Enum value for status.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  url  String value for url.
     */
    public CheckSuite1(
            String after,
            App22 app,
            String before,
            Object conclusion,
            LocalDateTime createdAt,
            String headBranch,
            String headSha,
            Integer id,
            String nodeId,
            List<PullRequestMinimal> pullRequests,
            Repository7 repository,
            Status12Enum status,
            LocalDateTime updatedAt,
            String url) {
        this.after = OptionalNullable.of(after);
        this.app = app;
        this.before = OptionalNullable.of(before);
        this.conclusion = conclusion;
        this.createdAt = createdAt;
        this.headBranch = OptionalNullable.of(headBranch);
        this.headSha = headSha;
        this.id = id;
        this.nodeId = nodeId;
        this.pullRequests = pullRequests;
        this.repository = repository;
        this.status = status;
        this.updatedAt = updatedAt;
        this.url = url;
    }

    /**
     * Internal initialization constructor.
     */
    protected CheckSuite1(OptionalNullable<String> after, App22 app,
            OptionalNullable<String> before, Object conclusion, LocalDateTime createdAt,
            OptionalNullable<String> headBranch, String headSha, Integer id, String nodeId,
            List<PullRequestMinimal> pullRequests, Repository7 repository, Status12Enum status,
            LocalDateTime updatedAt, String url) {
        this.after = after;
        this.app = app;
        this.before = before;
        this.conclusion = conclusion;
        this.createdAt = createdAt;
        this.headBranch = headBranch;
        this.headSha = headSha;
        this.id = id;
        this.nodeId = nodeId;
        this.pullRequests = pullRequests;
        this.repository = repository;
        this.status = status;
        this.updatedAt = updatedAt;
        this.url = url;
    }

    /**
     * Internal Getter for After.
     * @return Returns the Internal String
     */
    @JsonGetter("after")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAfter() {
        return this.after;
    }

    /**
     * Getter for After.
     * @return Returns the String
     */
    public String getAfter() {
        return OptionalNullable.getFrom(after);
    }

    /**
     * Setter for After.
     * @param after Value for String
     */
    @JsonSetter("after")
    public void setAfter(String after) {
        this.after = OptionalNullable.of(after);
    }

    /**
     * UnSetter for After.
     */
    public void unsetAfter() {
        after = null;
    }

    /**
     * Getter for App.
     * @return Returns the App22
     */
    @JsonGetter("app")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public App22 getApp() {
        return app;
    }

    /**
     * Setter for App.
     * @param app Value for App22
     */
    @JsonSetter("app")
    public void setApp(App22 app) {
        this.app = app;
    }

    /**
     * Internal Getter for Before.
     * @return Returns the Internal String
     */
    @JsonGetter("before")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBefore() {
        return this.before;
    }

    /**
     * Getter for Before.
     * @return Returns the String
     */
    public String getBefore() {
        return OptionalNullable.getFrom(before);
    }

    /**
     * Setter for Before.
     * @param before Value for String
     */
    @JsonSetter("before")
    public void setBefore(String before) {
        this.before = OptionalNullable.of(before);
    }

    /**
     * UnSetter for Before.
     */
    public void unsetBefore() {
        before = null;
    }

    /**
     * Getter for Conclusion.
     * @return Returns the Object
     */
    @JsonGetter("conclusion")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getConclusion() {
        return conclusion;
    }

    /**
     * Setter for Conclusion.
     * @param conclusion Value for Object
     */
    @JsonSetter("conclusion")
    public void setConclusion(Object conclusion) {
        this.conclusion = conclusion;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Internal Getter for HeadBranch.
     * @return Returns the Internal String
     */
    @JsonGetter("head_branch")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetHeadBranch() {
        return this.headBranch;
    }

    /**
     * Getter for HeadBranch.
     * @return Returns the String
     */
    public String getHeadBranch() {
        return OptionalNullable.getFrom(headBranch);
    }

    /**
     * Setter for HeadBranch.
     * @param headBranch Value for String
     */
    @JsonSetter("head_branch")
    public void setHeadBranch(String headBranch) {
        this.headBranch = OptionalNullable.of(headBranch);
    }

    /**
     * UnSetter for HeadBranch.
     */
    public void unsetHeadBranch() {
        headBranch = null;
    }

    /**
     * Getter for HeadSha.
     * The SHA of the head commit that is being checked.
     * @return Returns the String
     */
    @JsonGetter("head_sha")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHeadSha() {
        return headSha;
    }

    /**
     * Setter for HeadSha.
     * The SHA of the head commit that is being checked.
     * @param headSha Value for String
     */
    @JsonSetter("head_sha")
    public void setHeadSha(String headSha) {
        this.headSha = headSha;
    }

    /**
     * Getter for Id.
     * @return Returns the Integer
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for Integer
     */
    @JsonSetter("id")
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for PullRequests.
     * @return Returns the List of PullRequestMinimal
     */
    @JsonGetter("pull_requests")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<PullRequestMinimal> getPullRequests() {
        return pullRequests;
    }

    /**
     * Setter for PullRequests.
     * @param pullRequests Value for List of PullRequestMinimal
     */
    @JsonSetter("pull_requests")
    public void setPullRequests(List<PullRequestMinimal> pullRequests) {
        this.pullRequests = pullRequests;
    }

    /**
     * Getter for Repository.
     * @return Returns the Repository7
     */
    @JsonGetter("repository")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Repository7 getRepository() {
        return repository;
    }

    /**
     * Setter for Repository.
     * @param repository Value for Repository7
     */
    @JsonSetter("repository")
    public void setRepository(Repository7 repository) {
        this.repository = repository;
    }

    /**
     * Getter for Status.
     * @return Returns the Status12Enum
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Status12Enum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * @param status Value for Status12Enum
     */
    @JsonSetter("status")
    public void setStatus(Status12Enum status) {
        this.status = status;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Converts this CheckSuite1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CheckSuite1 [" + "after=" + after + ", app=" + app + ", before=" + before
                + ", conclusion=" + conclusion + ", createdAt=" + createdAt + ", headBranch="
                + headBranch + ", headSha=" + headSha + ", id=" + id + ", nodeId=" + nodeId
                + ", pullRequests=" + pullRequests + ", repository=" + repository + ", status="
                + status + ", updatedAt=" + updatedAt + ", url=" + url + "]";
    }

    /**
     * Builds a new {@link CheckSuite1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CheckSuite1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .app(getApp())
                .conclusion(getConclusion())
                .createdAt(getCreatedAt())
                .headSha(getHeadSha())
                .id(getId())
                .nodeId(getNodeId())
                .pullRequests(getPullRequests())
                .repository(getRepository())
                .status(getStatus())
                .updatedAt(getUpdatedAt())
                .url(getUrl());
        builder.after = internalGetAfter();
        builder.before = internalGetBefore();
        builder.headBranch = internalGetHeadBranch();
        return builder;
    }

    /**
     * Class to build instances of {@link CheckSuite1}.
     */
    public static class Builder {
        private OptionalNullable<String> after;
        private App22 app;
        private OptionalNullable<String> before;
        private Object conclusion;
        private LocalDateTime createdAt;
        private OptionalNullable<String> headBranch;
        private String headSha;
        private Integer id;
        private String nodeId;
        private List<PullRequestMinimal> pullRequests;
        private Repository7 repository;
        private Status12Enum status;
        private LocalDateTime updatedAt;
        private String url;



        /**
         * Setter for after.
         * @param  after  String value for after.
         * @return Builder
         */
        public Builder after(String after) {
            this.after = OptionalNullable.of(after);
            return this;
        }

        /**
         * UnSetter for after.
         * @return Builder
         */
        public Builder unsetAfter() {
            after = null;
            return this;
        }

        /**
         * Setter for app.
         * @param  app  App22 value for app.
         * @return Builder
         */
        public Builder app(App22 app) {
            this.app = app;
            return this;
        }

        /**
         * Setter for before.
         * @param  before  String value for before.
         * @return Builder
         */
        public Builder before(String before) {
            this.before = OptionalNullable.of(before);
            return this;
        }

        /**
         * UnSetter for before.
         * @return Builder
         */
        public Builder unsetBefore() {
            before = null;
            return this;
        }

        /**
         * Setter for conclusion.
         * @param  conclusion  Object value for conclusion.
         * @return Builder
         */
        public Builder conclusion(Object conclusion) {
            this.conclusion = conclusion;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for headBranch.
         * @param  headBranch  String value for headBranch.
         * @return Builder
         */
        public Builder headBranch(String headBranch) {
            this.headBranch = OptionalNullable.of(headBranch);
            return this;
        }

        /**
         * UnSetter for headBranch.
         * @return Builder
         */
        public Builder unsetHeadBranch() {
            headBranch = null;
            return this;
        }

        /**
         * Setter for headSha.
         * @param  headSha  String value for headSha.
         * @return Builder
         */
        public Builder headSha(String headSha) {
            this.headSha = headSha;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  Integer value for id.
         * @return Builder
         */
        public Builder id(Integer id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for pullRequests.
         * @param  pullRequests  List of PullRequestMinimal value for pullRequests.
         * @return Builder
         */
        public Builder pullRequests(List<PullRequestMinimal> pullRequests) {
            this.pullRequests = pullRequests;
            return this;
        }

        /**
         * Setter for repository.
         * @param  repository  Repository7 value for repository.
         * @return Builder
         */
        public Builder repository(Repository7 repository) {
            this.repository = repository;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  Status12Enum value for status.
         * @return Builder
         */
        public Builder status(Status12Enum status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Builds a new {@link CheckSuite1} object using the set fields.
         * @return {@link CheckSuite1}
         */
        public CheckSuite1 build() {
            return new CheckSuite1(after, app, before, conclusion, createdAt, headBranch, headSha,
                    id, nodeId, pullRequests, repository, status, updatedAt, url);
        }
    }
}

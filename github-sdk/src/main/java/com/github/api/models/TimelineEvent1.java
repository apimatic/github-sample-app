/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for TimelineEvent1 type.
 */
public class TimelineEvent1 {
    private Integer id;
    private String nodeId;
    private String url;
    private Actor2 actor;
    private String event;
    private OptionalNullable<String> commitId;
    private OptionalNullable<String> commitUrl;
    private LocalDateTime createdAt;
    private PerformedViaGithubApp2 performedViaGithubApp;
    private Label3 label;
    private Milestone1 milestone;
    private Rename rename;
    private ReviewRequester reviewRequester;
    private RequestedTeam7 requestedTeam;
    private RequestedReviewer requestedReviewer;
    private DismissedReview dismissedReview;
    private OptionalNullable<String> lockReason;
    private ProjectCard1 projectCard;
    private String body;
    private String bodyText;
    private String bodyHtml;
    private String htmlUrl;
    private User2 user;
    private LocalDateTime updatedAt;
    private String issueUrl;
    private Object authorAssociation;
    private ReactionRollup reactions;
    private Source source;
    private String sha;
    private Author1 author;
    private Committer1 committer;
    private String message;
    private Tree2 tree;
    private List<Parent2> parents;
    private Verification verification;
    private String state;
    private String pullRequestUrl;
    private Links10 links;
    private LocalDateTime submittedAt;
    private List<PullRequestReviewComment4> comments;
    private Assignee assignee;
    private OptionalNullable<String> stateReason;

    /**
     * Default constructor.
     */
    public TimelineEvent1() {
    }

    /**
     * Initialization constructor.
     * @param  id  Integer value for id.
     * @param  nodeId  String value for nodeId.
     * @param  url  String value for url.
     * @param  actor  Actor2 value for actor.
     * @param  event  String value for event.
     * @param  commitId  String value for commitId.
     * @param  commitUrl  String value for commitUrl.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  performedViaGithubApp  PerformedViaGithubApp2 value for performedViaGithubApp.
     * @param  label  Label3 value for label.
     * @param  milestone  Milestone1 value for milestone.
     * @param  rename  Rename value for rename.
     * @param  reviewRequester  ReviewRequester value for reviewRequester.
     * @param  requestedTeam  RequestedTeam7 value for requestedTeam.
     * @param  requestedReviewer  RequestedReviewer value for requestedReviewer.
     * @param  dismissedReview  DismissedReview value for dismissedReview.
     * @param  lockReason  String value for lockReason.
     * @param  projectCard  ProjectCard1 value for projectCard.
     * @param  body  String value for body.
     * @param  bodyText  String value for bodyText.
     * @param  bodyHtml  String value for bodyHtml.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  user  User2 value for user.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  issueUrl  String value for issueUrl.
     * @param  authorAssociation  Object value for authorAssociation.
     * @param  reactions  ReactionRollup value for reactions.
     * @param  source  Source value for source.
     * @param  sha  String value for sha.
     * @param  author  Author1 value for author.
     * @param  committer  Committer1 value for committer.
     * @param  message  String value for message.
     * @param  tree  Tree2 value for tree.
     * @param  parents  List of Parent2 value for parents.
     * @param  verification  Verification value for verification.
     * @param  state  String value for state.
     * @param  pullRequestUrl  String value for pullRequestUrl.
     * @param  links  Links10 value for links.
     * @param  submittedAt  LocalDateTime value for submittedAt.
     * @param  comments  List of PullRequestReviewComment4 value for comments.
     * @param  assignee  Assignee value for assignee.
     * @param  stateReason  String value for stateReason.
     */
    public TimelineEvent1(
            Integer id,
            String nodeId,
            String url,
            Actor2 actor,
            String event,
            String commitId,
            String commitUrl,
            LocalDateTime createdAt,
            PerformedViaGithubApp2 performedViaGithubApp,
            Label3 label,
            Milestone1 milestone,
            Rename rename,
            ReviewRequester reviewRequester,
            RequestedTeam7 requestedTeam,
            RequestedReviewer requestedReviewer,
            DismissedReview dismissedReview,
            String lockReason,
            ProjectCard1 projectCard,
            String body,
            String bodyText,
            String bodyHtml,
            String htmlUrl,
            User2 user,
            LocalDateTime updatedAt,
            String issueUrl,
            Object authorAssociation,
            ReactionRollup reactions,
            Source source,
            String sha,
            Author1 author,
            Committer1 committer,
            String message,
            Tree2 tree,
            List<Parent2> parents,
            Verification verification,
            String state,
            String pullRequestUrl,
            Links10 links,
            LocalDateTime submittedAt,
            List<PullRequestReviewComment4> comments,
            Assignee assignee,
            String stateReason) {
        this.id = id;
        this.nodeId = nodeId;
        this.url = url;
        this.actor = actor;
        this.event = event;
        this.commitId = OptionalNullable.of(commitId);
        this.commitUrl = OptionalNullable.of(commitUrl);
        this.createdAt = createdAt;
        this.performedViaGithubApp = performedViaGithubApp;
        this.label = label;
        this.milestone = milestone;
        this.rename = rename;
        this.reviewRequester = reviewRequester;
        this.requestedTeam = requestedTeam;
        this.requestedReviewer = requestedReviewer;
        this.dismissedReview = dismissedReview;
        this.lockReason = OptionalNullable.of(lockReason);
        this.projectCard = projectCard;
        this.body = body;
        this.bodyText = bodyText;
        this.bodyHtml = bodyHtml;
        this.htmlUrl = htmlUrl;
        this.user = user;
        this.updatedAt = updatedAt;
        this.issueUrl = issueUrl;
        this.authorAssociation = authorAssociation;
        this.reactions = reactions;
        this.source = source;
        this.sha = sha;
        this.author = author;
        this.committer = committer;
        this.message = message;
        this.tree = tree;
        this.parents = parents;
        this.verification = verification;
        this.state = state;
        this.pullRequestUrl = pullRequestUrl;
        this.links = links;
        this.submittedAt = submittedAt;
        this.comments = comments;
        this.assignee = assignee;
        this.stateReason = OptionalNullable.of(stateReason);
    }

    /**
     * Internal initialization constructor.
     */
    protected TimelineEvent1(Integer id, String nodeId, String url, Actor2 actor, String event,
            OptionalNullable<String> commitId, OptionalNullable<String> commitUrl,
            LocalDateTime createdAt, PerformedViaGithubApp2 performedViaGithubApp, Label3 label,
            Milestone1 milestone, Rename rename, ReviewRequester reviewRequester,
            RequestedTeam7 requestedTeam, RequestedReviewer requestedReviewer,
            DismissedReview dismissedReview, OptionalNullable<String> lockReason,
            ProjectCard1 projectCard, String body, String bodyText, String bodyHtml, String htmlUrl,
            User2 user, LocalDateTime updatedAt, String issueUrl, Object authorAssociation,
            ReactionRollup reactions, Source source, String sha, Author1 author,
            Committer1 committer, String message, Tree2 tree, List<Parent2> parents,
            Verification verification, String state, String pullRequestUrl, Links10 links,
            LocalDateTime submittedAt, List<PullRequestReviewComment4> comments, Assignee assignee,
            OptionalNullable<String> stateReason) {
        this.id = id;
        this.nodeId = nodeId;
        this.url = url;
        this.actor = actor;
        this.event = event;
        this.commitId = commitId;
        this.commitUrl = commitUrl;
        this.createdAt = createdAt;
        this.performedViaGithubApp = performedViaGithubApp;
        this.label = label;
        this.milestone = milestone;
        this.rename = rename;
        this.reviewRequester = reviewRequester;
        this.requestedTeam = requestedTeam;
        this.requestedReviewer = requestedReviewer;
        this.dismissedReview = dismissedReview;
        this.lockReason = lockReason;
        this.projectCard = projectCard;
        this.body = body;
        this.bodyText = bodyText;
        this.bodyHtml = bodyHtml;
        this.htmlUrl = htmlUrl;
        this.user = user;
        this.updatedAt = updatedAt;
        this.issueUrl = issueUrl;
        this.authorAssociation = authorAssociation;
        this.reactions = reactions;
        this.source = source;
        this.sha = sha;
        this.author = author;
        this.committer = committer;
        this.message = message;
        this.tree = tree;
        this.parents = parents;
        this.verification = verification;
        this.state = state;
        this.pullRequestUrl = pullRequestUrl;
        this.links = links;
        this.submittedAt = submittedAt;
        this.comments = comments;
        this.assignee = assignee;
        this.stateReason = stateReason;
    }

    /**
     * Getter for Id.
     * Unique identifier of the issue comment
     * @return Returns the Integer
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier of the issue comment
     * @param id Value for Integer
     */
    @JsonSetter("id")
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Url.
     * URL for the issue comment
     * @return Returns the String
     */
    @JsonGetter("url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * URL for the issue comment
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for Actor.
     * @return Returns the Actor2
     */
    @JsonGetter("actor")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actor2 getActor() {
        return actor;
    }

    /**
     * Setter for Actor.
     * @param actor Value for Actor2
     */
    @JsonSetter("actor")
    public void setActor(Actor2 actor) {
        this.actor = actor;
    }

    /**
     * Getter for Event.
     * @return Returns the String
     */
    @JsonGetter("event")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEvent() {
        return event;
    }

    /**
     * Setter for Event.
     * @param event Value for String
     */
    @JsonSetter("event")
    public void setEvent(String event) {
        this.event = event;
    }

    /**
     * Internal Getter for CommitId.
     * A commit SHA for the review.
     * @return Returns the Internal String
     */
    @JsonGetter("commit_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCommitId() {
        return this.commitId;
    }

    /**
     * Getter for CommitId.
     * A commit SHA for the review.
     * @return Returns the String
     */
    public String getCommitId() {
        return OptionalNullable.getFrom(commitId);
    }

    /**
     * Setter for CommitId.
     * A commit SHA for the review.
     * @param commitId Value for String
     */
    @JsonSetter("commit_id")
    public void setCommitId(String commitId) {
        this.commitId = OptionalNullable.of(commitId);
    }

    /**
     * UnSetter for CommitId.
     * A commit SHA for the review.
     */
    public void unsetCommitId() {
        commitId = null;
    }

    /**
     * Internal Getter for CommitUrl.
     * @return Returns the Internal String
     */
    @JsonGetter("commit_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCommitUrl() {
        return this.commitUrl;
    }

    /**
     * Getter for CommitUrl.
     * @return Returns the String
     */
    public String getCommitUrl() {
        return OptionalNullable.getFrom(commitUrl);
    }

    /**
     * Setter for CommitUrl.
     * @param commitUrl Value for String
     */
    @JsonSetter("commit_url")
    public void setCommitUrl(String commitUrl) {
        this.commitUrl = OptionalNullable.of(commitUrl);
    }

    /**
     * UnSetter for CommitUrl.
     */
    public void unsetCommitUrl() {
        commitUrl = null;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for PerformedViaGithubApp.
     * @return Returns the PerformedViaGithubApp2
     */
    @JsonGetter("performed_via_github_app")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PerformedViaGithubApp2 getPerformedViaGithubApp() {
        return performedViaGithubApp;
    }

    /**
     * Setter for PerformedViaGithubApp.
     * @param performedViaGithubApp Value for PerformedViaGithubApp2
     */
    @JsonSetter("performed_via_github_app")
    public void setPerformedViaGithubApp(PerformedViaGithubApp2 performedViaGithubApp) {
        this.performedViaGithubApp = performedViaGithubApp;
    }

    /**
     * Getter for Label.
     * @return Returns the Label3
     */
    @JsonGetter("label")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Label3 getLabel() {
        return label;
    }

    /**
     * Setter for Label.
     * @param label Value for Label3
     */
    @JsonSetter("label")
    public void setLabel(Label3 label) {
        this.label = label;
    }

    /**
     * Getter for Milestone.
     * @return Returns the Milestone1
     */
    @JsonGetter("milestone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Milestone1 getMilestone() {
        return milestone;
    }

    /**
     * Setter for Milestone.
     * @param milestone Value for Milestone1
     */
    @JsonSetter("milestone")
    public void setMilestone(Milestone1 milestone) {
        this.milestone = milestone;
    }

    /**
     * Getter for Rename.
     * @return Returns the Rename
     */
    @JsonGetter("rename")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Rename getRename() {
        return rename;
    }

    /**
     * Setter for Rename.
     * @param rename Value for Rename
     */
    @JsonSetter("rename")
    public void setRename(Rename rename) {
        this.rename = rename;
    }

    /**
     * Getter for ReviewRequester.
     * @return Returns the ReviewRequester
     */
    @JsonGetter("review_requester")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ReviewRequester getReviewRequester() {
        return reviewRequester;
    }

    /**
     * Setter for ReviewRequester.
     * @param reviewRequester Value for ReviewRequester
     */
    @JsonSetter("review_requester")
    public void setReviewRequester(ReviewRequester reviewRequester) {
        this.reviewRequester = reviewRequester;
    }

    /**
     * Getter for RequestedTeam.
     * @return Returns the RequestedTeam7
     */
    @JsonGetter("requested_team")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RequestedTeam7 getRequestedTeam() {
        return requestedTeam;
    }

    /**
     * Setter for RequestedTeam.
     * @param requestedTeam Value for RequestedTeam7
     */
    @JsonSetter("requested_team")
    public void setRequestedTeam(RequestedTeam7 requestedTeam) {
        this.requestedTeam = requestedTeam;
    }

    /**
     * Getter for RequestedReviewer.
     * @return Returns the RequestedReviewer
     */
    @JsonGetter("requested_reviewer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RequestedReviewer getRequestedReviewer() {
        return requestedReviewer;
    }

    /**
     * Setter for RequestedReviewer.
     * @param requestedReviewer Value for RequestedReviewer
     */
    @JsonSetter("requested_reviewer")
    public void setRequestedReviewer(RequestedReviewer requestedReviewer) {
        this.requestedReviewer = requestedReviewer;
    }

    /**
     * Getter for DismissedReview.
     * @return Returns the DismissedReview
     */
    @JsonGetter("dismissed_review")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DismissedReview getDismissedReview() {
        return dismissedReview;
    }

    /**
     * Setter for DismissedReview.
     * @param dismissedReview Value for DismissedReview
     */
    @JsonSetter("dismissed_review")
    public void setDismissedReview(DismissedReview dismissedReview) {
        this.dismissedReview = dismissedReview;
    }

    /**
     * Internal Getter for LockReason.
     * @return Returns the Internal String
     */
    @JsonGetter("lock_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLockReason() {
        return this.lockReason;
    }

    /**
     * Getter for LockReason.
     * @return Returns the String
     */
    public String getLockReason() {
        return OptionalNullable.getFrom(lockReason);
    }

    /**
     * Setter for LockReason.
     * @param lockReason Value for String
     */
    @JsonSetter("lock_reason")
    public void setLockReason(String lockReason) {
        this.lockReason = OptionalNullable.of(lockReason);
    }

    /**
     * UnSetter for LockReason.
     */
    public void unsetLockReason() {
        lockReason = null;
    }

    /**
     * Getter for ProjectCard.
     * @return Returns the ProjectCard1
     */
    @JsonGetter("project_card")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ProjectCard1 getProjectCard() {
        return projectCard;
    }

    /**
     * Setter for ProjectCard.
     * @param projectCard Value for ProjectCard1
     */
    @JsonSetter("project_card")
    public void setProjectCard(ProjectCard1 projectCard) {
        this.projectCard = projectCard;
    }

    /**
     * Getter for Body.
     * Contents of the issue comment
     * @return Returns the String
     */
    @JsonGetter("body")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBody() {
        return body;
    }

    /**
     * Setter for Body.
     * Contents of the issue comment
     * @param body Value for String
     */
    @JsonSetter("body")
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Getter for BodyText.
     * @return Returns the String
     */
    @JsonGetter("body_text")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBodyText() {
        return bodyText;
    }

    /**
     * Setter for BodyText.
     * @param bodyText Value for String
     */
    @JsonSetter("body_text")
    public void setBodyText(String bodyText) {
        this.bodyText = bodyText;
    }

    /**
     * Getter for BodyHtml.
     * @return Returns the String
     */
    @JsonGetter("body_html")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBodyHtml() {
        return bodyHtml;
    }

    /**
     * Setter for BodyHtml.
     * @param bodyHtml Value for String
     */
    @JsonSetter("body_html")
    public void setBodyHtml(String bodyHtml) {
        this.bodyHtml = bodyHtml;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for User.
     * @return Returns the User2
     */
    @JsonGetter("user")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public User2 getUser() {
        return user;
    }

    /**
     * Setter for User.
     * @param user Value for User2
     */
    @JsonSetter("user")
    public void setUser(User2 user) {
        this.user = user;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for IssueUrl.
     * @return Returns the String
     */
    @JsonGetter("issue_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getIssueUrl() {
        return issueUrl;
    }

    /**
     * Setter for IssueUrl.
     * @param issueUrl Value for String
     */
    @JsonSetter("issue_url")
    public void setIssueUrl(String issueUrl) {
        this.issueUrl = issueUrl;
    }

    /**
     * Getter for AuthorAssociation.
     * @return Returns the Object
     */
    @JsonGetter("author_association")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getAuthorAssociation() {
        return authorAssociation;
    }

    /**
     * Setter for AuthorAssociation.
     * @param authorAssociation Value for Object
     */
    @JsonSetter("author_association")
    public void setAuthorAssociation(Object authorAssociation) {
        this.authorAssociation = authorAssociation;
    }

    /**
     * Getter for Reactions.
     * @return Returns the ReactionRollup
     */
    @JsonGetter("reactions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ReactionRollup getReactions() {
        return reactions;
    }

    /**
     * Setter for Reactions.
     * @param reactions Value for ReactionRollup
     */
    @JsonSetter("reactions")
    public void setReactions(ReactionRollup reactions) {
        this.reactions = reactions;
    }

    /**
     * Getter for Source.
     * @return Returns the Source
     */
    @JsonGetter("source")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Source getSource() {
        return source;
    }

    /**
     * Setter for Source.
     * @param source Value for Source
     */
    @JsonSetter("source")
    public void setSource(Source source) {
        this.source = source;
    }

    /**
     * Getter for Sha.
     * SHA for the commit
     * @return Returns the String
     */
    @JsonGetter("sha")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSha() {
        return sha;
    }

    /**
     * Setter for Sha.
     * SHA for the commit
     * @param sha Value for String
     */
    @JsonSetter("sha")
    public void setSha(String sha) {
        this.sha = sha;
    }

    /**
     * Getter for Author.
     * @return Returns the Author1
     */
    @JsonGetter("author")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Author1 getAuthor() {
        return author;
    }

    /**
     * Setter for Author.
     * @param author Value for Author1
     */
    @JsonSetter("author")
    public void setAuthor(Author1 author) {
        this.author = author;
    }

    /**
     * Getter for Committer.
     * @return Returns the Committer1
     */
    @JsonGetter("committer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Committer1 getCommitter() {
        return committer;
    }

    /**
     * Setter for Committer.
     * @param committer Value for Committer1
     */
    @JsonSetter("committer")
    public void setCommitter(Committer1 committer) {
        this.committer = committer;
    }

    /**
     * Getter for Message.
     * Message describing the purpose of the commit
     * @return Returns the String
     */
    @JsonGetter("message")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMessage() {
        return message;
    }

    /**
     * Setter for Message.
     * Message describing the purpose of the commit
     * @param message Value for String
     */
    @JsonSetter("message")
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * Getter for Tree.
     * @return Returns the Tree2
     */
    @JsonGetter("tree")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Tree2 getTree() {
        return tree;
    }

    /**
     * Setter for Tree.
     * @param tree Value for Tree2
     */
    @JsonSetter("tree")
    public void setTree(Tree2 tree) {
        this.tree = tree;
    }

    /**
     * Getter for Parents.
     * @return Returns the List of Parent2
     */
    @JsonGetter("parents")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Parent2> getParents() {
        return parents;
    }

    /**
     * Setter for Parents.
     * @param parents Value for List of Parent2
     */
    @JsonSetter("parents")
    public void setParents(List<Parent2> parents) {
        this.parents = parents;
    }

    /**
     * Getter for Verification.
     * @return Returns the Verification
     */
    @JsonGetter("verification")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Verification getVerification() {
        return verification;
    }

    /**
     * Setter for Verification.
     * @param verification Value for Verification
     */
    @JsonSetter("verification")
    public void setVerification(Verification verification) {
        this.verification = verification;
    }

    /**
     * Getter for State.
     * @return Returns the String
     */
    @JsonGetter("state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getState() {
        return state;
    }

    /**
     * Setter for State.
     * @param state Value for String
     */
    @JsonSetter("state")
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Getter for PullRequestUrl.
     * @return Returns the String
     */
    @JsonGetter("pull_request_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPullRequestUrl() {
        return pullRequestUrl;
    }

    /**
     * Setter for PullRequestUrl.
     * @param pullRequestUrl Value for String
     */
    @JsonSetter("pull_request_url")
    public void setPullRequestUrl(String pullRequestUrl) {
        this.pullRequestUrl = pullRequestUrl;
    }

    /**
     * Getter for Links.
     * @return Returns the Links10
     */
    @JsonGetter("_links")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Links10 getLinks() {
        return links;
    }

    /**
     * Setter for Links.
     * @param links Value for Links10
     */
    @JsonSetter("_links")
    public void setLinks(Links10 links) {
        this.links = links;
    }

    /**
     * Getter for SubmittedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("submitted_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getSubmittedAt() {
        return submittedAt;
    }

    /**
     * Setter for SubmittedAt.
     * @param submittedAt Value for LocalDateTime
     */
    @JsonSetter("submitted_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setSubmittedAt(LocalDateTime submittedAt) {
        this.submittedAt = submittedAt;
    }

    /**
     * Getter for Comments.
     * @return Returns the List of PullRequestReviewComment4
     */
    @JsonGetter("comments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<PullRequestReviewComment4> getComments() {
        return comments;
    }

    /**
     * Setter for Comments.
     * @param comments Value for List of PullRequestReviewComment4
     */
    @JsonSetter("comments")
    public void setComments(List<PullRequestReviewComment4> comments) {
        this.comments = comments;
    }

    /**
     * Getter for Assignee.
     * @return Returns the Assignee
     */
    @JsonGetter("assignee")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Assignee getAssignee() {
        return assignee;
    }

    /**
     * Setter for Assignee.
     * @param assignee Value for Assignee
     */
    @JsonSetter("assignee")
    public void setAssignee(Assignee assignee) {
        this.assignee = assignee;
    }

    /**
     * Internal Getter for StateReason.
     * @return Returns the Internal String
     */
    @JsonGetter("state_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStateReason() {
        return this.stateReason;
    }

    /**
     * Getter for StateReason.
     * @return Returns the String
     */
    public String getStateReason() {
        return OptionalNullable.getFrom(stateReason);
    }

    /**
     * Setter for StateReason.
     * @param stateReason Value for String
     */
    @JsonSetter("state_reason")
    public void setStateReason(String stateReason) {
        this.stateReason = OptionalNullable.of(stateReason);
    }

    /**
     * UnSetter for StateReason.
     */
    public void unsetStateReason() {
        stateReason = null;
    }

    /**
     * Converts this TimelineEvent1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TimelineEvent1 [" + "id=" + id + ", nodeId=" + nodeId + ", url=" + url + ", actor="
                + actor + ", event=" + event + ", commitId=" + commitId + ", commitUrl=" + commitUrl
                + ", createdAt=" + createdAt + ", performedViaGithubApp=" + performedViaGithubApp
                + ", label=" + label + ", milestone=" + milestone + ", rename=" + rename
                + ", reviewRequester=" + reviewRequester + ", requestedTeam=" + requestedTeam
                + ", requestedReviewer=" + requestedReviewer + ", dismissedReview="
                + dismissedReview + ", lockReason=" + lockReason + ", projectCard=" + projectCard
                + ", body=" + body + ", bodyText=" + bodyText + ", bodyHtml=" + bodyHtml
                + ", htmlUrl=" + htmlUrl + ", user=" + user + ", updatedAt=" + updatedAt
                + ", issueUrl=" + issueUrl + ", authorAssociation=" + authorAssociation
                + ", reactions=" + reactions + ", source=" + source + ", sha=" + sha + ", author="
                + author + ", committer=" + committer + ", message=" + message + ", tree=" + tree
                + ", parents=" + parents + ", verification=" + verification + ", state=" + state
                + ", pullRequestUrl=" + pullRequestUrl + ", links=" + links + ", submittedAt="
                + submittedAt + ", comments=" + comments + ", assignee=" + assignee
                + ", stateReason=" + stateReason + "]";
    }

    /**
     * Builds a new {@link TimelineEvent1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TimelineEvent1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .id(getId())
                .nodeId(getNodeId())
                .url(getUrl())
                .actor(getActor())
                .event(getEvent())
                .createdAt(getCreatedAt())
                .performedViaGithubApp(getPerformedViaGithubApp())
                .label(getLabel())
                .milestone(getMilestone())
                .rename(getRename())
                .reviewRequester(getReviewRequester())
                .requestedTeam(getRequestedTeam())
                .requestedReviewer(getRequestedReviewer())
                .dismissedReview(getDismissedReview())
                .projectCard(getProjectCard())
                .body(getBody())
                .bodyText(getBodyText())
                .bodyHtml(getBodyHtml())
                .htmlUrl(getHtmlUrl())
                .user(getUser())
                .updatedAt(getUpdatedAt())
                .issueUrl(getIssueUrl())
                .authorAssociation(getAuthorAssociation())
                .reactions(getReactions())
                .source(getSource())
                .sha(getSha())
                .author(getAuthor())
                .committer(getCommitter())
                .message(getMessage())
                .tree(getTree())
                .parents(getParents())
                .verification(getVerification())
                .state(getState())
                .pullRequestUrl(getPullRequestUrl())
                .links(getLinks())
                .submittedAt(getSubmittedAt())
                .comments(getComments())
                .assignee(getAssignee());
        builder.commitId = internalGetCommitId();
        builder.commitUrl = internalGetCommitUrl();
        builder.lockReason = internalGetLockReason();
        builder.stateReason = internalGetStateReason();
        return builder;
    }

    /**
     * Class to build instances of {@link TimelineEvent1}.
     */
    public static class Builder {
        private Integer id;
        private String nodeId;
        private String url;
        private Actor2 actor;
        private String event;
        private OptionalNullable<String> commitId;
        private OptionalNullable<String> commitUrl;
        private LocalDateTime createdAt;
        private PerformedViaGithubApp2 performedViaGithubApp;
        private Label3 label;
        private Milestone1 milestone;
        private Rename rename;
        private ReviewRequester reviewRequester;
        private RequestedTeam7 requestedTeam;
        private RequestedReviewer requestedReviewer;
        private DismissedReview dismissedReview;
        private OptionalNullable<String> lockReason;
        private ProjectCard1 projectCard;
        private String body;
        private String bodyText;
        private String bodyHtml;
        private String htmlUrl;
        private User2 user;
        private LocalDateTime updatedAt;
        private String issueUrl;
        private Object authorAssociation;
        private ReactionRollup reactions;
        private Source source;
        private String sha;
        private Author1 author;
        private Committer1 committer;
        private String message;
        private Tree2 tree;
        private List<Parent2> parents;
        private Verification verification;
        private String state;
        private String pullRequestUrl;
        private Links10 links;
        private LocalDateTime submittedAt;
        private List<PullRequestReviewComment4> comments;
        private Assignee assignee;
        private OptionalNullable<String> stateReason;



        /**
         * Setter for id.
         * @param  id  Integer value for id.
         * @return Builder
         */
        public Builder id(Integer id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for actor.
         * @param  actor  Actor2 value for actor.
         * @return Builder
         */
        public Builder actor(Actor2 actor) {
            this.actor = actor;
            return this;
        }

        /**
         * Setter for event.
         * @param  event  String value for event.
         * @return Builder
         */
        public Builder event(String event) {
            this.event = event;
            return this;
        }

        /**
         * Setter for commitId.
         * @param  commitId  String value for commitId.
         * @return Builder
         */
        public Builder commitId(String commitId) {
            this.commitId = OptionalNullable.of(commitId);
            return this;
        }

        /**
         * UnSetter for commitId.
         * @return Builder
         */
        public Builder unsetCommitId() {
            commitId = null;
            return this;
        }

        /**
         * Setter for commitUrl.
         * @param  commitUrl  String value for commitUrl.
         * @return Builder
         */
        public Builder commitUrl(String commitUrl) {
            this.commitUrl = OptionalNullable.of(commitUrl);
            return this;
        }

        /**
         * UnSetter for commitUrl.
         * @return Builder
         */
        public Builder unsetCommitUrl() {
            commitUrl = null;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for performedViaGithubApp.
         * @param  performedViaGithubApp  PerformedViaGithubApp2 value for performedViaGithubApp.
         * @return Builder
         */
        public Builder performedViaGithubApp(PerformedViaGithubApp2 performedViaGithubApp) {
            this.performedViaGithubApp = performedViaGithubApp;
            return this;
        }

        /**
         * Setter for label.
         * @param  label  Label3 value for label.
         * @return Builder
         */
        public Builder label(Label3 label) {
            this.label = label;
            return this;
        }

        /**
         * Setter for milestone.
         * @param  milestone  Milestone1 value for milestone.
         * @return Builder
         */
        public Builder milestone(Milestone1 milestone) {
            this.milestone = milestone;
            return this;
        }

        /**
         * Setter for rename.
         * @param  rename  Rename value for rename.
         * @return Builder
         */
        public Builder rename(Rename rename) {
            this.rename = rename;
            return this;
        }

        /**
         * Setter for reviewRequester.
         * @param  reviewRequester  ReviewRequester value for reviewRequester.
         * @return Builder
         */
        public Builder reviewRequester(ReviewRequester reviewRequester) {
            this.reviewRequester = reviewRequester;
            return this;
        }

        /**
         * Setter for requestedTeam.
         * @param  requestedTeam  RequestedTeam7 value for requestedTeam.
         * @return Builder
         */
        public Builder requestedTeam(RequestedTeam7 requestedTeam) {
            this.requestedTeam = requestedTeam;
            return this;
        }

        /**
         * Setter for requestedReviewer.
         * @param  requestedReviewer  RequestedReviewer value for requestedReviewer.
         * @return Builder
         */
        public Builder requestedReviewer(RequestedReviewer requestedReviewer) {
            this.requestedReviewer = requestedReviewer;
            return this;
        }

        /**
         * Setter for dismissedReview.
         * @param  dismissedReview  DismissedReview value for dismissedReview.
         * @return Builder
         */
        public Builder dismissedReview(DismissedReview dismissedReview) {
            this.dismissedReview = dismissedReview;
            return this;
        }

        /**
         * Setter for lockReason.
         * @param  lockReason  String value for lockReason.
         * @return Builder
         */
        public Builder lockReason(String lockReason) {
            this.lockReason = OptionalNullable.of(lockReason);
            return this;
        }

        /**
         * UnSetter for lockReason.
         * @return Builder
         */
        public Builder unsetLockReason() {
            lockReason = null;
            return this;
        }

        /**
         * Setter for projectCard.
         * @param  projectCard  ProjectCard1 value for projectCard.
         * @return Builder
         */
        public Builder projectCard(ProjectCard1 projectCard) {
            this.projectCard = projectCard;
            return this;
        }

        /**
         * Setter for body.
         * @param  body  String value for body.
         * @return Builder
         */
        public Builder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Setter for bodyText.
         * @param  bodyText  String value for bodyText.
         * @return Builder
         */
        public Builder bodyText(String bodyText) {
            this.bodyText = bodyText;
            return this;
        }

        /**
         * Setter for bodyHtml.
         * @param  bodyHtml  String value for bodyHtml.
         * @return Builder
         */
        public Builder bodyHtml(String bodyHtml) {
            this.bodyHtml = bodyHtml;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for user.
         * @param  user  User2 value for user.
         * @return Builder
         */
        public Builder user(User2 user) {
            this.user = user;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for issueUrl.
         * @param  issueUrl  String value for issueUrl.
         * @return Builder
         */
        public Builder issueUrl(String issueUrl) {
            this.issueUrl = issueUrl;
            return this;
        }

        /**
         * Setter for authorAssociation.
         * @param  authorAssociation  Object value for authorAssociation.
         * @return Builder
         */
        public Builder authorAssociation(Object authorAssociation) {
            this.authorAssociation = authorAssociation;
            return this;
        }

        /**
         * Setter for reactions.
         * @param  reactions  ReactionRollup value for reactions.
         * @return Builder
         */
        public Builder reactions(ReactionRollup reactions) {
            this.reactions = reactions;
            return this;
        }

        /**
         * Setter for source.
         * @param  source  Source value for source.
         * @return Builder
         */
        public Builder source(Source source) {
            this.source = source;
            return this;
        }

        /**
         * Setter for sha.
         * @param  sha  String value for sha.
         * @return Builder
         */
        public Builder sha(String sha) {
            this.sha = sha;
            return this;
        }

        /**
         * Setter for author.
         * @param  author  Author1 value for author.
         * @return Builder
         */
        public Builder author(Author1 author) {
            this.author = author;
            return this;
        }

        /**
         * Setter for committer.
         * @param  committer  Committer1 value for committer.
         * @return Builder
         */
        public Builder committer(Committer1 committer) {
            this.committer = committer;
            return this;
        }

        /**
         * Setter for message.
         * @param  message  String value for message.
         * @return Builder
         */
        public Builder message(String message) {
            this.message = message;
            return this;
        }

        /**
         * Setter for tree.
         * @param  tree  Tree2 value for tree.
         * @return Builder
         */
        public Builder tree(Tree2 tree) {
            this.tree = tree;
            return this;
        }

        /**
         * Setter for parents.
         * @param  parents  List of Parent2 value for parents.
         * @return Builder
         */
        public Builder parents(List<Parent2> parents) {
            this.parents = parents;
            return this;
        }

        /**
         * Setter for verification.
         * @param  verification  Verification value for verification.
         * @return Builder
         */
        public Builder verification(Verification verification) {
            this.verification = verification;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  String value for state.
         * @return Builder
         */
        public Builder state(String state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for pullRequestUrl.
         * @param  pullRequestUrl  String value for pullRequestUrl.
         * @return Builder
         */
        public Builder pullRequestUrl(String pullRequestUrl) {
            this.pullRequestUrl = pullRequestUrl;
            return this;
        }

        /**
         * Setter for links.
         * @param  links  Links10 value for links.
         * @return Builder
         */
        public Builder links(Links10 links) {
            this.links = links;
            return this;
        }

        /**
         * Setter for submittedAt.
         * @param  submittedAt  LocalDateTime value for submittedAt.
         * @return Builder
         */
        public Builder submittedAt(LocalDateTime submittedAt) {
            this.submittedAt = submittedAt;
            return this;
        }

        /**
         * Setter for comments.
         * @param  comments  List of PullRequestReviewComment4 value for comments.
         * @return Builder
         */
        public Builder comments(List<PullRequestReviewComment4> comments) {
            this.comments = comments;
            return this;
        }

        /**
         * Setter for assignee.
         * @param  assignee  Assignee value for assignee.
         * @return Builder
         */
        public Builder assignee(Assignee assignee) {
            this.assignee = assignee;
            return this;
        }

        /**
         * Setter for stateReason.
         * @param  stateReason  String value for stateReason.
         * @return Builder
         */
        public Builder stateReason(String stateReason) {
            this.stateReason = OptionalNullable.of(stateReason);
            return this;
        }

        /**
         * UnSetter for stateReason.
         * @return Builder
         */
        public Builder unsetStateReason() {
            stateReason = null;
            return this;
        }

        /**
         * Builds a new {@link TimelineEvent1} object using the set fields.
         * @return {@link TimelineEvent1}
         */
        public TimelineEvent1 build() {
            return new TimelineEvent1(id, nodeId, url, actor, event, commitId, commitUrl, createdAt,
                    performedViaGithubApp, label, milestone, rename, reviewRequester, requestedTeam,
                    requestedReviewer, dismissedReview, lockReason, projectCard, body, bodyText,
                    bodyHtml, htmlUrl, user, updatedAt, issueUrl, authorAssociation, reactions,
                    source, sha, author, committer, message, tree, parents, verification, state,
                    pullRequestUrl, links, submittedAt, comments, assignee, stateReason);
        }
    }
}

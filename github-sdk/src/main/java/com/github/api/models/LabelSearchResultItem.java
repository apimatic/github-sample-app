/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for LabelSearchResultItem type.
 */
public class LabelSearchResultItem {
    private int id;
    private String nodeId;
    private String url;
    private String name;
    private String color;
    private boolean mDefault;
    private String description;
    private double score;
    private List<SearchResultTextMatch> textMatches;

    /**
     * Default constructor.
     */
    public LabelSearchResultItem() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  url  String value for url.
     * @param  name  String value for name.
     * @param  color  String value for color.
     * @param  mDefault  boolean value for mDefault.
     * @param  description  String value for description.
     * @param  score  double value for score.
     * @param  textMatches  List of SearchResultTextMatch value for textMatches.
     */
    public LabelSearchResultItem(
            int id,
            String nodeId,
            String url,
            String name,
            String color,
            boolean mDefault,
            String description,
            double score,
            List<SearchResultTextMatch> textMatches) {
        this.id = id;
        this.nodeId = nodeId;
        this.url = url;
        this.name = name;
        this.color = color;
        this.mDefault = mDefault;
        this.description = description;
        this.score = score;
        this.textMatches = textMatches;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Color.
     * @return Returns the String
     */
    @JsonGetter("color")
    public String getColor() {
        return color;
    }

    /**
     * Setter for Color.
     * @param color Value for String
     */
    @JsonSetter("color")
    public void setColor(String color) {
        this.color = color;
    }

    /**
     * Getter for Default.
     * @return Returns the boolean
     */
    @JsonGetter("default")
    public boolean getDefault() {
        return mDefault;
    }

    /**
     * Setter for Default.
     * @param mDefault Value for boolean
     */
    @JsonSetter("default")
    public void setDefault(boolean mDefault) {
        this.mDefault = mDefault;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Score.
     * @return Returns the double
     */
    @JsonGetter("score")
    public double getScore() {
        return score;
    }

    /**
     * Setter for Score.
     * @param score Value for double
     */
    @JsonSetter("score")
    public void setScore(double score) {
        this.score = score;
    }

    /**
     * Getter for TextMatches.
     * @return Returns the List of SearchResultTextMatch
     */
    @JsonGetter("text_matches")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<SearchResultTextMatch> getTextMatches() {
        return textMatches;
    }

    /**
     * Setter for TextMatches.
     * @param textMatches Value for List of SearchResultTextMatch
     */
    @JsonSetter("text_matches")
    public void setTextMatches(List<SearchResultTextMatch> textMatches) {
        this.textMatches = textMatches;
    }

    /**
     * Converts this LabelSearchResultItem into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "LabelSearchResultItem [" + "id=" + id + ", nodeId=" + nodeId + ", url=" + url
                + ", name=" + name + ", color=" + color + ", mDefault=" + mDefault
                + ", description=" + description + ", score=" + score + ", textMatches="
                + textMatches + "]";
    }

    /**
     * Builds a new {@link LabelSearchResultItem.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link LabelSearchResultItem.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, nodeId, url, name, color, mDefault, description, score)
                .textMatches(getTextMatches());
        return builder;
    }

    /**
     * Class to build instances of {@link LabelSearchResultItem}.
     */
    public static class Builder {
        private int id;
        private String nodeId;
        private String url;
        private String name;
        private String color;
        private boolean mDefault;
        private String description;
        private double score;
        private List<SearchResultTextMatch> textMatches;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  url  String value for url.
         * @param  name  String value for name.
         * @param  color  String value for color.
         * @param  mDefault  boolean value for mDefault.
         * @param  description  String value for description.
         * @param  score  double value for score.
         */
        public Builder(int id, String nodeId, String url, String name, String color,
                boolean mDefault, String description, double score) {
            this.id = id;
            this.nodeId = nodeId;
            this.url = url;
            this.name = name;
            this.color = color;
            this.mDefault = mDefault;
            this.description = description;
            this.score = score;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for color.
         * @param  color  String value for color.
         * @return Builder
         */
        public Builder color(String color) {
            this.color = color;
            return this;
        }

        /**
         * Setter for mDefault.
         * @param  mDefault  boolean value for mDefault.
         * @return Builder
         */
        public Builder mDefault(boolean mDefault) {
            this.mDefault = mDefault;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for score.
         * @param  score  double value for score.
         * @return Builder
         */
        public Builder score(double score) {
            this.score = score;
            return this;
        }

        /**
         * Setter for textMatches.
         * @param  textMatches  List of SearchResultTextMatch value for textMatches.
         * @return Builder
         */
        public Builder textMatches(List<SearchResultTextMatch> textMatches) {
            this.textMatches = textMatches;
            return this;
        }

        /**
         * Builds a new {@link LabelSearchResultItem} object using the set fields.
         * @return {@link LabelSearchResultItem}
         */
        public LabelSearchResultItem build() {
            return new LabelSearchResultItem(id, nodeId, url, name, color, mDefault, description,
                    score, textMatches);
        }
    }
}

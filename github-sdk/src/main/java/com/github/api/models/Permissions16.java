/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Permissions16 type.
 */
public class Permissions16 {
    private Actions1Enum actions;
    private Actions1Enum administration;
    private Actions1Enum checks;
    private Actions1Enum contentReferences;
    private Actions1Enum contents;
    private Actions1Enum deployments;
    private Actions1Enum discussions;
    private Actions1Enum emails;
    private Actions1Enum environments;
    private Actions1Enum issues;
    private Actions1Enum keys;
    private Actions1Enum members;
    private Actions1Enum metadata;
    private Actions1Enum organizationAdministration;
    private Actions1Enum organizationHooks;
    private Actions1Enum organizationPackages;
    private Actions1Enum organizationPlan;
    private OrganizationProjects1Enum organizationProjects;
    private Actions1Enum organizationSecrets;
    private Actions1Enum organizationSelfHostedRunners;
    private Actions1Enum organizationUserBlocking;
    private Actions1Enum packages;
    private Actions1Enum pages;
    private Actions1Enum pullRequests;
    private Actions1Enum repositoryHooks;
    private OrganizationProjects1Enum repositoryProjects;
    private Actions1Enum secretScanningAlerts;
    private Actions1Enum secrets;
    private Actions1Enum securityEvents;
    private Actions1Enum securityScanningAlert;
    private Actions1Enum singleFile;
    private Actions1Enum statuses;
    private Actions1Enum teamDiscussions;
    private Actions1Enum vulnerabilityAlerts;
    private Actions1Enum workflows;

    /**
     * Default constructor.
     */
    public Permissions16() {
    }

    /**
     * Initialization constructor.
     * @param  actions  Actions1Enum value for actions.
     * @param  administration  Actions1Enum value for administration.
     * @param  checks  Actions1Enum value for checks.
     * @param  contentReferences  Actions1Enum value for contentReferences.
     * @param  contents  Actions1Enum value for contents.
     * @param  deployments  Actions1Enum value for deployments.
     * @param  discussions  Actions1Enum value for discussions.
     * @param  emails  Actions1Enum value for emails.
     * @param  environments  Actions1Enum value for environments.
     * @param  issues  Actions1Enum value for issues.
     * @param  keys  Actions1Enum value for keys.
     * @param  members  Actions1Enum value for members.
     * @param  metadata  Actions1Enum value for metadata.
     * @param  organizationAdministration  Actions1Enum value for organizationAdministration.
     * @param  organizationHooks  Actions1Enum value for organizationHooks.
     * @param  organizationPackages  Actions1Enum value for organizationPackages.
     * @param  organizationPlan  Actions1Enum value for organizationPlan.
     * @param  organizationProjects  OrganizationProjects1Enum value for organizationProjects.
     * @param  organizationSecrets  Actions1Enum value for organizationSecrets.
     * @param  organizationSelfHostedRunners  Actions1Enum value for organizationSelfHostedRunners.
     * @param  organizationUserBlocking  Actions1Enum value for organizationUserBlocking.
     * @param  packages  Actions1Enum value for packages.
     * @param  pages  Actions1Enum value for pages.
     * @param  pullRequests  Actions1Enum value for pullRequests.
     * @param  repositoryHooks  Actions1Enum value for repositoryHooks.
     * @param  repositoryProjects  OrganizationProjects1Enum value for repositoryProjects.
     * @param  secretScanningAlerts  Actions1Enum value for secretScanningAlerts.
     * @param  secrets  Actions1Enum value for secrets.
     * @param  securityEvents  Actions1Enum value for securityEvents.
     * @param  securityScanningAlert  Actions1Enum value for securityScanningAlert.
     * @param  singleFile  Actions1Enum value for singleFile.
     * @param  statuses  Actions1Enum value for statuses.
     * @param  teamDiscussions  Actions1Enum value for teamDiscussions.
     * @param  vulnerabilityAlerts  Actions1Enum value for vulnerabilityAlerts.
     * @param  workflows  Actions1Enum value for workflows.
     */
    public Permissions16(
            Actions1Enum actions,
            Actions1Enum administration,
            Actions1Enum checks,
            Actions1Enum contentReferences,
            Actions1Enum contents,
            Actions1Enum deployments,
            Actions1Enum discussions,
            Actions1Enum emails,
            Actions1Enum environments,
            Actions1Enum issues,
            Actions1Enum keys,
            Actions1Enum members,
            Actions1Enum metadata,
            Actions1Enum organizationAdministration,
            Actions1Enum organizationHooks,
            Actions1Enum organizationPackages,
            Actions1Enum organizationPlan,
            OrganizationProjects1Enum organizationProjects,
            Actions1Enum organizationSecrets,
            Actions1Enum organizationSelfHostedRunners,
            Actions1Enum organizationUserBlocking,
            Actions1Enum packages,
            Actions1Enum pages,
            Actions1Enum pullRequests,
            Actions1Enum repositoryHooks,
            OrganizationProjects1Enum repositoryProjects,
            Actions1Enum secretScanningAlerts,
            Actions1Enum secrets,
            Actions1Enum securityEvents,
            Actions1Enum securityScanningAlert,
            Actions1Enum singleFile,
            Actions1Enum statuses,
            Actions1Enum teamDiscussions,
            Actions1Enum vulnerabilityAlerts,
            Actions1Enum workflows) {
        this.actions = actions;
        this.administration = administration;
        this.checks = checks;
        this.contentReferences = contentReferences;
        this.contents = contents;
        this.deployments = deployments;
        this.discussions = discussions;
        this.emails = emails;
        this.environments = environments;
        this.issues = issues;
        this.keys = keys;
        this.members = members;
        this.metadata = metadata;
        this.organizationAdministration = organizationAdministration;
        this.organizationHooks = organizationHooks;
        this.organizationPackages = organizationPackages;
        this.organizationPlan = organizationPlan;
        this.organizationProjects = organizationProjects;
        this.organizationSecrets = organizationSecrets;
        this.organizationSelfHostedRunners = organizationSelfHostedRunners;
        this.organizationUserBlocking = organizationUserBlocking;
        this.packages = packages;
        this.pages = pages;
        this.pullRequests = pullRequests;
        this.repositoryHooks = repositoryHooks;
        this.repositoryProjects = repositoryProjects;
        this.secretScanningAlerts = secretScanningAlerts;
        this.secrets = secrets;
        this.securityEvents = securityEvents;
        this.securityScanningAlert = securityScanningAlert;
        this.singleFile = singleFile;
        this.statuses = statuses;
        this.teamDiscussions = teamDiscussions;
        this.vulnerabilityAlerts = vulnerabilityAlerts;
        this.workflows = workflows;
    }

    /**
     * Getter for Actions.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("actions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getActions() {
        return actions;
    }

    /**
     * Setter for Actions.
     * @param actions Value for Actions1Enum
     */
    @JsonSetter("actions")
    public void setActions(Actions1Enum actions) {
        this.actions = actions;
    }

    /**
     * Getter for Administration.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("administration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getAdministration() {
        return administration;
    }

    /**
     * Setter for Administration.
     * @param administration Value for Actions1Enum
     */
    @JsonSetter("administration")
    public void setAdministration(Actions1Enum administration) {
        this.administration = administration;
    }

    /**
     * Getter for Checks.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("checks")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getChecks() {
        return checks;
    }

    /**
     * Setter for Checks.
     * @param checks Value for Actions1Enum
     */
    @JsonSetter("checks")
    public void setChecks(Actions1Enum checks) {
        this.checks = checks;
    }

    /**
     * Getter for ContentReferences.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("content_references")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getContentReferences() {
        return contentReferences;
    }

    /**
     * Setter for ContentReferences.
     * @param contentReferences Value for Actions1Enum
     */
    @JsonSetter("content_references")
    public void setContentReferences(Actions1Enum contentReferences) {
        this.contentReferences = contentReferences;
    }

    /**
     * Getter for Contents.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("contents")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getContents() {
        return contents;
    }

    /**
     * Setter for Contents.
     * @param contents Value for Actions1Enum
     */
    @JsonSetter("contents")
    public void setContents(Actions1Enum contents) {
        this.contents = contents;
    }

    /**
     * Getter for Deployments.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("deployments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getDeployments() {
        return deployments;
    }

    /**
     * Setter for Deployments.
     * @param deployments Value for Actions1Enum
     */
    @JsonSetter("deployments")
    public void setDeployments(Actions1Enum deployments) {
        this.deployments = deployments;
    }

    /**
     * Getter for Discussions.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("discussions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getDiscussions() {
        return discussions;
    }

    /**
     * Setter for Discussions.
     * @param discussions Value for Actions1Enum
     */
    @JsonSetter("discussions")
    public void setDiscussions(Actions1Enum discussions) {
        this.discussions = discussions;
    }

    /**
     * Getter for Emails.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("emails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getEmails() {
        return emails;
    }

    /**
     * Setter for Emails.
     * @param emails Value for Actions1Enum
     */
    @JsonSetter("emails")
    public void setEmails(Actions1Enum emails) {
        this.emails = emails;
    }

    /**
     * Getter for Environments.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("environments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getEnvironments() {
        return environments;
    }

    /**
     * Setter for Environments.
     * @param environments Value for Actions1Enum
     */
    @JsonSetter("environments")
    public void setEnvironments(Actions1Enum environments) {
        this.environments = environments;
    }

    /**
     * Getter for Issues.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("issues")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getIssues() {
        return issues;
    }

    /**
     * Setter for Issues.
     * @param issues Value for Actions1Enum
     */
    @JsonSetter("issues")
    public void setIssues(Actions1Enum issues) {
        this.issues = issues;
    }

    /**
     * Getter for Keys.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("keys")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getKeys() {
        return keys;
    }

    /**
     * Setter for Keys.
     * @param keys Value for Actions1Enum
     */
    @JsonSetter("keys")
    public void setKeys(Actions1Enum keys) {
        this.keys = keys;
    }

    /**
     * Getter for Members.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("members")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getMembers() {
        return members;
    }

    /**
     * Setter for Members.
     * @param members Value for Actions1Enum
     */
    @JsonSetter("members")
    public void setMembers(Actions1Enum members) {
        this.members = members;
    }

    /**
     * Getter for Metadata.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * @param metadata Value for Actions1Enum
     */
    @JsonSetter("metadata")
    public void setMetadata(Actions1Enum metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for OrganizationAdministration.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("organization_administration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getOrganizationAdministration() {
        return organizationAdministration;
    }

    /**
     * Setter for OrganizationAdministration.
     * @param organizationAdministration Value for Actions1Enum
     */
    @JsonSetter("organization_administration")
    public void setOrganizationAdministration(Actions1Enum organizationAdministration) {
        this.organizationAdministration = organizationAdministration;
    }

    /**
     * Getter for OrganizationHooks.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("organization_hooks")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getOrganizationHooks() {
        return organizationHooks;
    }

    /**
     * Setter for OrganizationHooks.
     * @param organizationHooks Value for Actions1Enum
     */
    @JsonSetter("organization_hooks")
    public void setOrganizationHooks(Actions1Enum organizationHooks) {
        this.organizationHooks = organizationHooks;
    }

    /**
     * Getter for OrganizationPackages.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("organization_packages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getOrganizationPackages() {
        return organizationPackages;
    }

    /**
     * Setter for OrganizationPackages.
     * @param organizationPackages Value for Actions1Enum
     */
    @JsonSetter("organization_packages")
    public void setOrganizationPackages(Actions1Enum organizationPackages) {
        this.organizationPackages = organizationPackages;
    }

    /**
     * Getter for OrganizationPlan.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("organization_plan")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getOrganizationPlan() {
        return organizationPlan;
    }

    /**
     * Setter for OrganizationPlan.
     * @param organizationPlan Value for Actions1Enum
     */
    @JsonSetter("organization_plan")
    public void setOrganizationPlan(Actions1Enum organizationPlan) {
        this.organizationPlan = organizationPlan;
    }

    /**
     * Getter for OrganizationProjects.
     * @return Returns the OrganizationProjects1Enum
     */
    @JsonGetter("organization_projects")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OrganizationProjects1Enum getOrganizationProjects() {
        return organizationProjects;
    }

    /**
     * Setter for OrganizationProjects.
     * @param organizationProjects Value for OrganizationProjects1Enum
     */
    @JsonSetter("organization_projects")
    public void setOrganizationProjects(OrganizationProjects1Enum organizationProjects) {
        this.organizationProjects = organizationProjects;
    }

    /**
     * Getter for OrganizationSecrets.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("organization_secrets")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getOrganizationSecrets() {
        return organizationSecrets;
    }

    /**
     * Setter for OrganizationSecrets.
     * @param organizationSecrets Value for Actions1Enum
     */
    @JsonSetter("organization_secrets")
    public void setOrganizationSecrets(Actions1Enum organizationSecrets) {
        this.organizationSecrets = organizationSecrets;
    }

    /**
     * Getter for OrganizationSelfHostedRunners.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("organization_self_hosted_runners")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getOrganizationSelfHostedRunners() {
        return organizationSelfHostedRunners;
    }

    /**
     * Setter for OrganizationSelfHostedRunners.
     * @param organizationSelfHostedRunners Value for Actions1Enum
     */
    @JsonSetter("organization_self_hosted_runners")
    public void setOrganizationSelfHostedRunners(Actions1Enum organizationSelfHostedRunners) {
        this.organizationSelfHostedRunners = organizationSelfHostedRunners;
    }

    /**
     * Getter for OrganizationUserBlocking.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("organization_user_blocking")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getOrganizationUserBlocking() {
        return organizationUserBlocking;
    }

    /**
     * Setter for OrganizationUserBlocking.
     * @param organizationUserBlocking Value for Actions1Enum
     */
    @JsonSetter("organization_user_blocking")
    public void setOrganizationUserBlocking(Actions1Enum organizationUserBlocking) {
        this.organizationUserBlocking = organizationUserBlocking;
    }

    /**
     * Getter for Packages.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("packages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getPackages() {
        return packages;
    }

    /**
     * Setter for Packages.
     * @param packages Value for Actions1Enum
     */
    @JsonSetter("packages")
    public void setPackages(Actions1Enum packages) {
        this.packages = packages;
    }

    /**
     * Getter for Pages.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("pages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getPages() {
        return pages;
    }

    /**
     * Setter for Pages.
     * @param pages Value for Actions1Enum
     */
    @JsonSetter("pages")
    public void setPages(Actions1Enum pages) {
        this.pages = pages;
    }

    /**
     * Getter for PullRequests.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("pull_requests")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getPullRequests() {
        return pullRequests;
    }

    /**
     * Setter for PullRequests.
     * @param pullRequests Value for Actions1Enum
     */
    @JsonSetter("pull_requests")
    public void setPullRequests(Actions1Enum pullRequests) {
        this.pullRequests = pullRequests;
    }

    /**
     * Getter for RepositoryHooks.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("repository_hooks")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getRepositoryHooks() {
        return repositoryHooks;
    }

    /**
     * Setter for RepositoryHooks.
     * @param repositoryHooks Value for Actions1Enum
     */
    @JsonSetter("repository_hooks")
    public void setRepositoryHooks(Actions1Enum repositoryHooks) {
        this.repositoryHooks = repositoryHooks;
    }

    /**
     * Getter for RepositoryProjects.
     * @return Returns the OrganizationProjects1Enum
     */
    @JsonGetter("repository_projects")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OrganizationProjects1Enum getRepositoryProjects() {
        return repositoryProjects;
    }

    /**
     * Setter for RepositoryProjects.
     * @param repositoryProjects Value for OrganizationProjects1Enum
     */
    @JsonSetter("repository_projects")
    public void setRepositoryProjects(OrganizationProjects1Enum repositoryProjects) {
        this.repositoryProjects = repositoryProjects;
    }

    /**
     * Getter for SecretScanningAlerts.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("secret_scanning_alerts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getSecretScanningAlerts() {
        return secretScanningAlerts;
    }

    /**
     * Setter for SecretScanningAlerts.
     * @param secretScanningAlerts Value for Actions1Enum
     */
    @JsonSetter("secret_scanning_alerts")
    public void setSecretScanningAlerts(Actions1Enum secretScanningAlerts) {
        this.secretScanningAlerts = secretScanningAlerts;
    }

    /**
     * Getter for Secrets.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("secrets")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getSecrets() {
        return secrets;
    }

    /**
     * Setter for Secrets.
     * @param secrets Value for Actions1Enum
     */
    @JsonSetter("secrets")
    public void setSecrets(Actions1Enum secrets) {
        this.secrets = secrets;
    }

    /**
     * Getter for SecurityEvents.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("security_events")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getSecurityEvents() {
        return securityEvents;
    }

    /**
     * Setter for SecurityEvents.
     * @param securityEvents Value for Actions1Enum
     */
    @JsonSetter("security_events")
    public void setSecurityEvents(Actions1Enum securityEvents) {
        this.securityEvents = securityEvents;
    }

    /**
     * Getter for SecurityScanningAlert.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("security_scanning_alert")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getSecurityScanningAlert() {
        return securityScanningAlert;
    }

    /**
     * Setter for SecurityScanningAlert.
     * @param securityScanningAlert Value for Actions1Enum
     */
    @JsonSetter("security_scanning_alert")
    public void setSecurityScanningAlert(Actions1Enum securityScanningAlert) {
        this.securityScanningAlert = securityScanningAlert;
    }

    /**
     * Getter for SingleFile.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("single_file")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getSingleFile() {
        return singleFile;
    }

    /**
     * Setter for SingleFile.
     * @param singleFile Value for Actions1Enum
     */
    @JsonSetter("single_file")
    public void setSingleFile(Actions1Enum singleFile) {
        this.singleFile = singleFile;
    }

    /**
     * Getter for Statuses.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("statuses")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getStatuses() {
        return statuses;
    }

    /**
     * Setter for Statuses.
     * @param statuses Value for Actions1Enum
     */
    @JsonSetter("statuses")
    public void setStatuses(Actions1Enum statuses) {
        this.statuses = statuses;
    }

    /**
     * Getter for TeamDiscussions.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("team_discussions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getTeamDiscussions() {
        return teamDiscussions;
    }

    /**
     * Setter for TeamDiscussions.
     * @param teamDiscussions Value for Actions1Enum
     */
    @JsonSetter("team_discussions")
    public void setTeamDiscussions(Actions1Enum teamDiscussions) {
        this.teamDiscussions = teamDiscussions;
    }

    /**
     * Getter for VulnerabilityAlerts.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("vulnerability_alerts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getVulnerabilityAlerts() {
        return vulnerabilityAlerts;
    }

    /**
     * Setter for VulnerabilityAlerts.
     * @param vulnerabilityAlerts Value for Actions1Enum
     */
    @JsonSetter("vulnerability_alerts")
    public void setVulnerabilityAlerts(Actions1Enum vulnerabilityAlerts) {
        this.vulnerabilityAlerts = vulnerabilityAlerts;
    }

    /**
     * Getter for Workflows.
     * @return Returns the Actions1Enum
     */
    @JsonGetter("workflows")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actions1Enum getWorkflows() {
        return workflows;
    }

    /**
     * Setter for Workflows.
     * @param workflows Value for Actions1Enum
     */
    @JsonSetter("workflows")
    public void setWorkflows(Actions1Enum workflows) {
        this.workflows = workflows;
    }

    /**
     * Converts this Permissions16 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Permissions16 [" + "actions=" + actions + ", administration=" + administration
                + ", checks=" + checks + ", contentReferences=" + contentReferences + ", contents="
                + contents + ", deployments=" + deployments + ", discussions=" + discussions
                + ", emails=" + emails + ", environments=" + environments + ", issues=" + issues
                + ", keys=" + keys + ", members=" + members + ", metadata=" + metadata
                + ", organizationAdministration=" + organizationAdministration
                + ", organizationHooks=" + organizationHooks + ", organizationPackages="
                + organizationPackages + ", organizationPlan=" + organizationPlan
                + ", organizationProjects=" + organizationProjects + ", organizationSecrets="
                + organizationSecrets + ", organizationSelfHostedRunners="
                + organizationSelfHostedRunners + ", organizationUserBlocking="
                + organizationUserBlocking + ", packages=" + packages + ", pages=" + pages
                + ", pullRequests=" + pullRequests + ", repositoryHooks=" + repositoryHooks
                + ", repositoryProjects=" + repositoryProjects + ", secretScanningAlerts="
                + secretScanningAlerts + ", secrets=" + secrets + ", securityEvents="
                + securityEvents + ", securityScanningAlert=" + securityScanningAlert
                + ", singleFile=" + singleFile + ", statuses=" + statuses + ", teamDiscussions="
                + teamDiscussions + ", vulnerabilityAlerts=" + vulnerabilityAlerts + ", workflows="
                + workflows + "]";
    }

    /**
     * Builds a new {@link Permissions16.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Permissions16.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .actions(getActions())
                .administration(getAdministration())
                .checks(getChecks())
                .contentReferences(getContentReferences())
                .contents(getContents())
                .deployments(getDeployments())
                .discussions(getDiscussions())
                .emails(getEmails())
                .environments(getEnvironments())
                .issues(getIssues())
                .keys(getKeys())
                .members(getMembers())
                .metadata(getMetadata())
                .organizationAdministration(getOrganizationAdministration())
                .organizationHooks(getOrganizationHooks())
                .organizationPackages(getOrganizationPackages())
                .organizationPlan(getOrganizationPlan())
                .organizationProjects(getOrganizationProjects())
                .organizationSecrets(getOrganizationSecrets())
                .organizationSelfHostedRunners(getOrganizationSelfHostedRunners())
                .organizationUserBlocking(getOrganizationUserBlocking())
                .packages(getPackages())
                .pages(getPages())
                .pullRequests(getPullRequests())
                .repositoryHooks(getRepositoryHooks())
                .repositoryProjects(getRepositoryProjects())
                .secretScanningAlerts(getSecretScanningAlerts())
                .secrets(getSecrets())
                .securityEvents(getSecurityEvents())
                .securityScanningAlert(getSecurityScanningAlert())
                .singleFile(getSingleFile())
                .statuses(getStatuses())
                .teamDiscussions(getTeamDiscussions())
                .vulnerabilityAlerts(getVulnerabilityAlerts())
                .workflows(getWorkflows());
        return builder;
    }

    /**
     * Class to build instances of {@link Permissions16}.
     */
    public static class Builder {
        private Actions1Enum actions;
        private Actions1Enum administration;
        private Actions1Enum checks;
        private Actions1Enum contentReferences;
        private Actions1Enum contents;
        private Actions1Enum deployments;
        private Actions1Enum discussions;
        private Actions1Enum emails;
        private Actions1Enum environments;
        private Actions1Enum issues;
        private Actions1Enum keys;
        private Actions1Enum members;
        private Actions1Enum metadata;
        private Actions1Enum organizationAdministration;
        private Actions1Enum organizationHooks;
        private Actions1Enum organizationPackages;
        private Actions1Enum organizationPlan;
        private OrganizationProjects1Enum organizationProjects;
        private Actions1Enum organizationSecrets;
        private Actions1Enum organizationSelfHostedRunners;
        private Actions1Enum organizationUserBlocking;
        private Actions1Enum packages;
        private Actions1Enum pages;
        private Actions1Enum pullRequests;
        private Actions1Enum repositoryHooks;
        private OrganizationProjects1Enum repositoryProjects;
        private Actions1Enum secretScanningAlerts;
        private Actions1Enum secrets;
        private Actions1Enum securityEvents;
        private Actions1Enum securityScanningAlert;
        private Actions1Enum singleFile;
        private Actions1Enum statuses;
        private Actions1Enum teamDiscussions;
        private Actions1Enum vulnerabilityAlerts;
        private Actions1Enum workflows;



        /**
         * Setter for actions.
         * @param  actions  Actions1Enum value for actions.
         * @return Builder
         */
        public Builder actions(Actions1Enum actions) {
            this.actions = actions;
            return this;
        }

        /**
         * Setter for administration.
         * @param  administration  Actions1Enum value for administration.
         * @return Builder
         */
        public Builder administration(Actions1Enum administration) {
            this.administration = administration;
            return this;
        }

        /**
         * Setter for checks.
         * @param  checks  Actions1Enum value for checks.
         * @return Builder
         */
        public Builder checks(Actions1Enum checks) {
            this.checks = checks;
            return this;
        }

        /**
         * Setter for contentReferences.
         * @param  contentReferences  Actions1Enum value for contentReferences.
         * @return Builder
         */
        public Builder contentReferences(Actions1Enum contentReferences) {
            this.contentReferences = contentReferences;
            return this;
        }

        /**
         * Setter for contents.
         * @param  contents  Actions1Enum value for contents.
         * @return Builder
         */
        public Builder contents(Actions1Enum contents) {
            this.contents = contents;
            return this;
        }

        /**
         * Setter for deployments.
         * @param  deployments  Actions1Enum value for deployments.
         * @return Builder
         */
        public Builder deployments(Actions1Enum deployments) {
            this.deployments = deployments;
            return this;
        }

        /**
         * Setter for discussions.
         * @param  discussions  Actions1Enum value for discussions.
         * @return Builder
         */
        public Builder discussions(Actions1Enum discussions) {
            this.discussions = discussions;
            return this;
        }

        /**
         * Setter for emails.
         * @param  emails  Actions1Enum value for emails.
         * @return Builder
         */
        public Builder emails(Actions1Enum emails) {
            this.emails = emails;
            return this;
        }

        /**
         * Setter for environments.
         * @param  environments  Actions1Enum value for environments.
         * @return Builder
         */
        public Builder environments(Actions1Enum environments) {
            this.environments = environments;
            return this;
        }

        /**
         * Setter for issues.
         * @param  issues  Actions1Enum value for issues.
         * @return Builder
         */
        public Builder issues(Actions1Enum issues) {
            this.issues = issues;
            return this;
        }

        /**
         * Setter for keys.
         * @param  keys  Actions1Enum value for keys.
         * @return Builder
         */
        public Builder keys(Actions1Enum keys) {
            this.keys = keys;
            return this;
        }

        /**
         * Setter for members.
         * @param  members  Actions1Enum value for members.
         * @return Builder
         */
        public Builder members(Actions1Enum members) {
            this.members = members;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Actions1Enum value for metadata.
         * @return Builder
         */
        public Builder metadata(Actions1Enum metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for organizationAdministration.
         * @param  organizationAdministration  Actions1Enum value for organizationAdministration.
         * @return Builder
         */
        public Builder organizationAdministration(Actions1Enum organizationAdministration) {
            this.organizationAdministration = organizationAdministration;
            return this;
        }

        /**
         * Setter for organizationHooks.
         * @param  organizationHooks  Actions1Enum value for organizationHooks.
         * @return Builder
         */
        public Builder organizationHooks(Actions1Enum organizationHooks) {
            this.organizationHooks = organizationHooks;
            return this;
        }

        /**
         * Setter for organizationPackages.
         * @param  organizationPackages  Actions1Enum value for organizationPackages.
         * @return Builder
         */
        public Builder organizationPackages(Actions1Enum organizationPackages) {
            this.organizationPackages = organizationPackages;
            return this;
        }

        /**
         * Setter for organizationPlan.
         * @param  organizationPlan  Actions1Enum value for organizationPlan.
         * @return Builder
         */
        public Builder organizationPlan(Actions1Enum organizationPlan) {
            this.organizationPlan = organizationPlan;
            return this;
        }

        /**
         * Setter for organizationProjects.
         * @param  organizationProjects  OrganizationProjects1Enum value for organizationProjects.
         * @return Builder
         */
        public Builder organizationProjects(OrganizationProjects1Enum organizationProjects) {
            this.organizationProjects = organizationProjects;
            return this;
        }

        /**
         * Setter for organizationSecrets.
         * @param  organizationSecrets  Actions1Enum value for organizationSecrets.
         * @return Builder
         */
        public Builder organizationSecrets(Actions1Enum organizationSecrets) {
            this.organizationSecrets = organizationSecrets;
            return this;
        }

        /**
         * Setter for organizationSelfHostedRunners.
         * @param  organizationSelfHostedRunners  Actions1Enum value for
         *         organizationSelfHostedRunners.
         * @return Builder
         */
        public Builder organizationSelfHostedRunners(Actions1Enum organizationSelfHostedRunners) {
            this.organizationSelfHostedRunners = organizationSelfHostedRunners;
            return this;
        }

        /**
         * Setter for organizationUserBlocking.
         * @param  organizationUserBlocking  Actions1Enum value for organizationUserBlocking.
         * @return Builder
         */
        public Builder organizationUserBlocking(Actions1Enum organizationUserBlocking) {
            this.organizationUserBlocking = organizationUserBlocking;
            return this;
        }

        /**
         * Setter for packages.
         * @param  packages  Actions1Enum value for packages.
         * @return Builder
         */
        public Builder packages(Actions1Enum packages) {
            this.packages = packages;
            return this;
        }

        /**
         * Setter for pages.
         * @param  pages  Actions1Enum value for pages.
         * @return Builder
         */
        public Builder pages(Actions1Enum pages) {
            this.pages = pages;
            return this;
        }

        /**
         * Setter for pullRequests.
         * @param  pullRequests  Actions1Enum value for pullRequests.
         * @return Builder
         */
        public Builder pullRequests(Actions1Enum pullRequests) {
            this.pullRequests = pullRequests;
            return this;
        }

        /**
         * Setter for repositoryHooks.
         * @param  repositoryHooks  Actions1Enum value for repositoryHooks.
         * @return Builder
         */
        public Builder repositoryHooks(Actions1Enum repositoryHooks) {
            this.repositoryHooks = repositoryHooks;
            return this;
        }

        /**
         * Setter for repositoryProjects.
         * @param  repositoryProjects  OrganizationProjects1Enum value for repositoryProjects.
         * @return Builder
         */
        public Builder repositoryProjects(OrganizationProjects1Enum repositoryProjects) {
            this.repositoryProjects = repositoryProjects;
            return this;
        }

        /**
         * Setter for secretScanningAlerts.
         * @param  secretScanningAlerts  Actions1Enum value for secretScanningAlerts.
         * @return Builder
         */
        public Builder secretScanningAlerts(Actions1Enum secretScanningAlerts) {
            this.secretScanningAlerts = secretScanningAlerts;
            return this;
        }

        /**
         * Setter for secrets.
         * @param  secrets  Actions1Enum value for secrets.
         * @return Builder
         */
        public Builder secrets(Actions1Enum secrets) {
            this.secrets = secrets;
            return this;
        }

        /**
         * Setter for securityEvents.
         * @param  securityEvents  Actions1Enum value for securityEvents.
         * @return Builder
         */
        public Builder securityEvents(Actions1Enum securityEvents) {
            this.securityEvents = securityEvents;
            return this;
        }

        /**
         * Setter for securityScanningAlert.
         * @param  securityScanningAlert  Actions1Enum value for securityScanningAlert.
         * @return Builder
         */
        public Builder securityScanningAlert(Actions1Enum securityScanningAlert) {
            this.securityScanningAlert = securityScanningAlert;
            return this;
        }

        /**
         * Setter for singleFile.
         * @param  singleFile  Actions1Enum value for singleFile.
         * @return Builder
         */
        public Builder singleFile(Actions1Enum singleFile) {
            this.singleFile = singleFile;
            return this;
        }

        /**
         * Setter for statuses.
         * @param  statuses  Actions1Enum value for statuses.
         * @return Builder
         */
        public Builder statuses(Actions1Enum statuses) {
            this.statuses = statuses;
            return this;
        }

        /**
         * Setter for teamDiscussions.
         * @param  teamDiscussions  Actions1Enum value for teamDiscussions.
         * @return Builder
         */
        public Builder teamDiscussions(Actions1Enum teamDiscussions) {
            this.teamDiscussions = teamDiscussions;
            return this;
        }

        /**
         * Setter for vulnerabilityAlerts.
         * @param  vulnerabilityAlerts  Actions1Enum value for vulnerabilityAlerts.
         * @return Builder
         */
        public Builder vulnerabilityAlerts(Actions1Enum vulnerabilityAlerts) {
            this.vulnerabilityAlerts = vulnerabilityAlerts;
            return this;
        }

        /**
         * Setter for workflows.
         * @param  workflows  Actions1Enum value for workflows.
         * @return Builder
         */
        public Builder workflows(Actions1Enum workflows) {
            this.workflows = workflows;
            return this;
        }

        /**
         * Builds a new {@link Permissions16} object using the set fields.
         * @return {@link Permissions16}
         */
        public Permissions16 build() {
            return new Permissions16(actions, administration, checks, contentReferences, contents,
                    deployments, discussions, emails, environments, issues, keys, members, metadata,
                    organizationAdministration, organizationHooks, organizationPackages,
                    organizationPlan, organizationProjects, organizationSecrets,
                    organizationSelfHostedRunners, organizationUserBlocking, packages, pages,
                    pullRequests, repositoryHooks, repositoryProjects, secretScanningAlerts,
                    secrets, securityEvents, securityScanningAlert, singleFile, statuses,
                    teamDiscussions, vulnerabilityAlerts, workflows);
        }
    }
}

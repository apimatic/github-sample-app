/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Devcontainer type.
 */
public class Devcontainer {
    private String path;
    private String name;

    /**
     * Default constructor.
     */
    public Devcontainer() {
    }

    /**
     * Initialization constructor.
     * @param  path  String value for path.
     * @param  name  String value for name.
     */
    public Devcontainer(
            String path,
            String name) {
        this.path = path;
        this.name = name;
    }

    /**
     * Getter for Path.
     * @return Returns the String
     */
    @JsonGetter("path")
    public String getPath() {
        return path;
    }

    /**
     * Setter for Path.
     * @param path Value for String
     */
    @JsonSetter("path")
    public void setPath(String path) {
        this.path = path;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Converts this Devcontainer into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Devcontainer [" + "path=" + path + ", name=" + name + "]";
    }

    /**
     * Builds a new {@link Devcontainer.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Devcontainer.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(path)
                .name(getName());
        return builder;
    }

    /**
     * Class to build instances of {@link Devcontainer}.
     */
    public static class Builder {
        private String path;
        private String name;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  path  String value for path.
         */
        public Builder(String path) {
            this.path = path;
        }

        /**
         * Setter for path.
         * @param  path  String value for path.
         * @return Builder
         */
        public Builder path(String path) {
            this.path = path;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Builds a new {@link Devcontainer} object using the set fields.
         * @return {@link Devcontainer}
         */
        public Devcontainer build() {
            return new Devcontainer(path, name);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for Domain type.
 */
public class Domain {
    private String host;
    private String uri;
    private String nameservers;
    private Boolean dnsResolves;
    private OptionalNullable<Boolean> isProxied;
    private OptionalNullable<Boolean> isCloudflareIp;
    private OptionalNullable<Boolean> isFastlyIp;
    private OptionalNullable<Boolean> isOldIpAddress;
    private OptionalNullable<Boolean> isARecord;
    private OptionalNullable<Boolean> hasCnameRecord;
    private OptionalNullable<Boolean> hasMxRecordsPresent;
    private Boolean isValidDomain;
    private Boolean isApexDomain;
    private OptionalNullable<Boolean> shouldBeARecord;
    private OptionalNullable<Boolean> isCnameToGithubUserDomain;
    private OptionalNullable<Boolean> isCnameToPagesDotGithubDotCom;
    private OptionalNullable<Boolean> isCnameToFastly;
    private OptionalNullable<Boolean> isPointedToGithubPagesIp;
    private OptionalNullable<Boolean> isNonGithubPagesIpPresent;
    private Boolean isPagesDomain;
    private OptionalNullable<Boolean> isServedByPages;
    private Boolean isValid;
    private OptionalNullable<String> reason;
    private Boolean respondsToHttps;
    private Boolean enforcesHttps;
    private OptionalNullable<String> httpsError;
    private OptionalNullable<Boolean> isHttpsEligible;
    private OptionalNullable<String> caaError;

    /**
     * Default constructor.
     */
    public Domain() {
    }

    /**
     * Initialization constructor.
     * @param  host  String value for host.
     * @param  uri  String value for uri.
     * @param  nameservers  String value for nameservers.
     * @param  dnsResolves  Boolean value for dnsResolves.
     * @param  isProxied  Boolean value for isProxied.
     * @param  isCloudflareIp  Boolean value for isCloudflareIp.
     * @param  isFastlyIp  Boolean value for isFastlyIp.
     * @param  isOldIpAddress  Boolean value for isOldIpAddress.
     * @param  isARecord  Boolean value for isARecord.
     * @param  hasCnameRecord  Boolean value for hasCnameRecord.
     * @param  hasMxRecordsPresent  Boolean value for hasMxRecordsPresent.
     * @param  isValidDomain  Boolean value for isValidDomain.
     * @param  isApexDomain  Boolean value for isApexDomain.
     * @param  shouldBeARecord  Boolean value for shouldBeARecord.
     * @param  isCnameToGithubUserDomain  Boolean value for isCnameToGithubUserDomain.
     * @param  isCnameToPagesDotGithubDotCom  Boolean value for isCnameToPagesDotGithubDotCom.
     * @param  isCnameToFastly  Boolean value for isCnameToFastly.
     * @param  isPointedToGithubPagesIp  Boolean value for isPointedToGithubPagesIp.
     * @param  isNonGithubPagesIpPresent  Boolean value for isNonGithubPagesIpPresent.
     * @param  isPagesDomain  Boolean value for isPagesDomain.
     * @param  isServedByPages  Boolean value for isServedByPages.
     * @param  isValid  Boolean value for isValid.
     * @param  reason  String value for reason.
     * @param  respondsToHttps  Boolean value for respondsToHttps.
     * @param  enforcesHttps  Boolean value for enforcesHttps.
     * @param  httpsError  String value for httpsError.
     * @param  isHttpsEligible  Boolean value for isHttpsEligible.
     * @param  caaError  String value for caaError.
     */
    public Domain(
            String host,
            String uri,
            String nameservers,
            Boolean dnsResolves,
            Boolean isProxied,
            Boolean isCloudflareIp,
            Boolean isFastlyIp,
            Boolean isOldIpAddress,
            Boolean isARecord,
            Boolean hasCnameRecord,
            Boolean hasMxRecordsPresent,
            Boolean isValidDomain,
            Boolean isApexDomain,
            Boolean shouldBeARecord,
            Boolean isCnameToGithubUserDomain,
            Boolean isCnameToPagesDotGithubDotCom,
            Boolean isCnameToFastly,
            Boolean isPointedToGithubPagesIp,
            Boolean isNonGithubPagesIpPresent,
            Boolean isPagesDomain,
            Boolean isServedByPages,
            Boolean isValid,
            String reason,
            Boolean respondsToHttps,
            Boolean enforcesHttps,
            String httpsError,
            Boolean isHttpsEligible,
            String caaError) {
        this.host = host;
        this.uri = uri;
        this.nameservers = nameservers;
        this.dnsResolves = dnsResolves;
        this.isProxied = OptionalNullable.of(isProxied);
        this.isCloudflareIp = OptionalNullable.of(isCloudflareIp);
        this.isFastlyIp = OptionalNullable.of(isFastlyIp);
        this.isOldIpAddress = OptionalNullable.of(isOldIpAddress);
        this.isARecord = OptionalNullable.of(isARecord);
        this.hasCnameRecord = OptionalNullable.of(hasCnameRecord);
        this.hasMxRecordsPresent = OptionalNullable.of(hasMxRecordsPresent);
        this.isValidDomain = isValidDomain;
        this.isApexDomain = isApexDomain;
        this.shouldBeARecord = OptionalNullable.of(shouldBeARecord);
        this.isCnameToGithubUserDomain = OptionalNullable.of(isCnameToGithubUserDomain);
        this.isCnameToPagesDotGithubDotCom = OptionalNullable.of(isCnameToPagesDotGithubDotCom);
        this.isCnameToFastly = OptionalNullable.of(isCnameToFastly);
        this.isPointedToGithubPagesIp = OptionalNullable.of(isPointedToGithubPagesIp);
        this.isNonGithubPagesIpPresent = OptionalNullable.of(isNonGithubPagesIpPresent);
        this.isPagesDomain = isPagesDomain;
        this.isServedByPages = OptionalNullable.of(isServedByPages);
        this.isValid = isValid;
        this.reason = OptionalNullable.of(reason);
        this.respondsToHttps = respondsToHttps;
        this.enforcesHttps = enforcesHttps;
        this.httpsError = OptionalNullable.of(httpsError);
        this.isHttpsEligible = OptionalNullable.of(isHttpsEligible);
        this.caaError = OptionalNullable.of(caaError);
    }

    /**
     * Internal initialization constructor.
     */
    protected Domain(String host, String uri, String nameservers, Boolean dnsResolves,
            OptionalNullable<Boolean> isProxied, OptionalNullable<Boolean> isCloudflareIp,
            OptionalNullable<Boolean> isFastlyIp, OptionalNullable<Boolean> isOldIpAddress,
            OptionalNullable<Boolean> isARecord, OptionalNullable<Boolean> hasCnameRecord,
            OptionalNullable<Boolean> hasMxRecordsPresent, Boolean isValidDomain,
            Boolean isApexDomain, OptionalNullable<Boolean> shouldBeARecord,
            OptionalNullable<Boolean> isCnameToGithubUserDomain,
            OptionalNullable<Boolean> isCnameToPagesDotGithubDotCom,
            OptionalNullable<Boolean> isCnameToFastly,
            OptionalNullable<Boolean> isPointedToGithubPagesIp,
            OptionalNullable<Boolean> isNonGithubPagesIpPresent, Boolean isPagesDomain,
            OptionalNullable<Boolean> isServedByPages, Boolean isValid,
            OptionalNullable<String> reason, Boolean respondsToHttps, Boolean enforcesHttps,
            OptionalNullable<String> httpsError, OptionalNullable<Boolean> isHttpsEligible,
            OptionalNullable<String> caaError) {
        this.host = host;
        this.uri = uri;
        this.nameservers = nameservers;
        this.dnsResolves = dnsResolves;
        this.isProxied = isProxied;
        this.isCloudflareIp = isCloudflareIp;
        this.isFastlyIp = isFastlyIp;
        this.isOldIpAddress = isOldIpAddress;
        this.isARecord = isARecord;
        this.hasCnameRecord = hasCnameRecord;
        this.hasMxRecordsPresent = hasMxRecordsPresent;
        this.isValidDomain = isValidDomain;
        this.isApexDomain = isApexDomain;
        this.shouldBeARecord = shouldBeARecord;
        this.isCnameToGithubUserDomain = isCnameToGithubUserDomain;
        this.isCnameToPagesDotGithubDotCom = isCnameToPagesDotGithubDotCom;
        this.isCnameToFastly = isCnameToFastly;
        this.isPointedToGithubPagesIp = isPointedToGithubPagesIp;
        this.isNonGithubPagesIpPresent = isNonGithubPagesIpPresent;
        this.isPagesDomain = isPagesDomain;
        this.isServedByPages = isServedByPages;
        this.isValid = isValid;
        this.reason = reason;
        this.respondsToHttps = respondsToHttps;
        this.enforcesHttps = enforcesHttps;
        this.httpsError = httpsError;
        this.isHttpsEligible = isHttpsEligible;
        this.caaError = caaError;
    }

    /**
     * Getter for Host.
     * @return Returns the String
     */
    @JsonGetter("host")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHost() {
        return host;
    }

    /**
     * Setter for Host.
     * @param host Value for String
     */
    @JsonSetter("host")
    public void setHost(String host) {
        this.host = host;
    }

    /**
     * Getter for Uri.
     * @return Returns the String
     */
    @JsonGetter("uri")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Getter for Nameservers.
     * @return Returns the String
     */
    @JsonGetter("nameservers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNameservers() {
        return nameservers;
    }

    /**
     * Setter for Nameservers.
     * @param nameservers Value for String
     */
    @JsonSetter("nameservers")
    public void setNameservers(String nameservers) {
        this.nameservers = nameservers;
    }

    /**
     * Getter for DnsResolves.
     * @return Returns the Boolean
     */
    @JsonGetter("dns_resolves")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDnsResolves() {
        return dnsResolves;
    }

    /**
     * Setter for DnsResolves.
     * @param dnsResolves Value for Boolean
     */
    @JsonSetter("dns_resolves")
    public void setDnsResolves(Boolean dnsResolves) {
        this.dnsResolves = dnsResolves;
    }

    /**
     * Internal Getter for IsProxied.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("is_proxied")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsProxied() {
        return this.isProxied;
    }

    /**
     * Getter for IsProxied.
     * @return Returns the Boolean
     */
    public Boolean getIsProxied() {
        return OptionalNullable.getFrom(isProxied);
    }

    /**
     * Setter for IsProxied.
     * @param isProxied Value for Boolean
     */
    @JsonSetter("is_proxied")
    public void setIsProxied(Boolean isProxied) {
        this.isProxied = OptionalNullable.of(isProxied);
    }

    /**
     * UnSetter for IsProxied.
     */
    public void unsetIsProxied() {
        isProxied = null;
    }

    /**
     * Internal Getter for IsCloudflareIp.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("is_cloudflare_ip")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsCloudflareIp() {
        return this.isCloudflareIp;
    }

    /**
     * Getter for IsCloudflareIp.
     * @return Returns the Boolean
     */
    public Boolean getIsCloudflareIp() {
        return OptionalNullable.getFrom(isCloudflareIp);
    }

    /**
     * Setter for IsCloudflareIp.
     * @param isCloudflareIp Value for Boolean
     */
    @JsonSetter("is_cloudflare_ip")
    public void setIsCloudflareIp(Boolean isCloudflareIp) {
        this.isCloudflareIp = OptionalNullable.of(isCloudflareIp);
    }

    /**
     * UnSetter for IsCloudflareIp.
     */
    public void unsetIsCloudflareIp() {
        isCloudflareIp = null;
    }

    /**
     * Internal Getter for IsFastlyIp.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("is_fastly_ip")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsFastlyIp() {
        return this.isFastlyIp;
    }

    /**
     * Getter for IsFastlyIp.
     * @return Returns the Boolean
     */
    public Boolean getIsFastlyIp() {
        return OptionalNullable.getFrom(isFastlyIp);
    }

    /**
     * Setter for IsFastlyIp.
     * @param isFastlyIp Value for Boolean
     */
    @JsonSetter("is_fastly_ip")
    public void setIsFastlyIp(Boolean isFastlyIp) {
        this.isFastlyIp = OptionalNullable.of(isFastlyIp);
    }

    /**
     * UnSetter for IsFastlyIp.
     */
    public void unsetIsFastlyIp() {
        isFastlyIp = null;
    }

    /**
     * Internal Getter for IsOldIpAddress.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("is_old_ip_address")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsOldIpAddress() {
        return this.isOldIpAddress;
    }

    /**
     * Getter for IsOldIpAddress.
     * @return Returns the Boolean
     */
    public Boolean getIsOldIpAddress() {
        return OptionalNullable.getFrom(isOldIpAddress);
    }

    /**
     * Setter for IsOldIpAddress.
     * @param isOldIpAddress Value for Boolean
     */
    @JsonSetter("is_old_ip_address")
    public void setIsOldIpAddress(Boolean isOldIpAddress) {
        this.isOldIpAddress = OptionalNullable.of(isOldIpAddress);
    }

    /**
     * UnSetter for IsOldIpAddress.
     */
    public void unsetIsOldIpAddress() {
        isOldIpAddress = null;
    }

    /**
     * Internal Getter for IsARecord.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("is_a_record")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsARecord() {
        return this.isARecord;
    }

    /**
     * Getter for IsARecord.
     * @return Returns the Boolean
     */
    public Boolean getIsARecord() {
        return OptionalNullable.getFrom(isARecord);
    }

    /**
     * Setter for IsARecord.
     * @param isARecord Value for Boolean
     */
    @JsonSetter("is_a_record")
    public void setIsARecord(Boolean isARecord) {
        this.isARecord = OptionalNullable.of(isARecord);
    }

    /**
     * UnSetter for IsARecord.
     */
    public void unsetIsARecord() {
        isARecord = null;
    }

    /**
     * Internal Getter for HasCnameRecord.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("has_cname_record")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetHasCnameRecord() {
        return this.hasCnameRecord;
    }

    /**
     * Getter for HasCnameRecord.
     * @return Returns the Boolean
     */
    public Boolean getHasCnameRecord() {
        return OptionalNullable.getFrom(hasCnameRecord);
    }

    /**
     * Setter for HasCnameRecord.
     * @param hasCnameRecord Value for Boolean
     */
    @JsonSetter("has_cname_record")
    public void setHasCnameRecord(Boolean hasCnameRecord) {
        this.hasCnameRecord = OptionalNullable.of(hasCnameRecord);
    }

    /**
     * UnSetter for HasCnameRecord.
     */
    public void unsetHasCnameRecord() {
        hasCnameRecord = null;
    }

    /**
     * Internal Getter for HasMxRecordsPresent.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("has_mx_records_present")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetHasMxRecordsPresent() {
        return this.hasMxRecordsPresent;
    }

    /**
     * Getter for HasMxRecordsPresent.
     * @return Returns the Boolean
     */
    public Boolean getHasMxRecordsPresent() {
        return OptionalNullable.getFrom(hasMxRecordsPresent);
    }

    /**
     * Setter for HasMxRecordsPresent.
     * @param hasMxRecordsPresent Value for Boolean
     */
    @JsonSetter("has_mx_records_present")
    public void setHasMxRecordsPresent(Boolean hasMxRecordsPresent) {
        this.hasMxRecordsPresent = OptionalNullable.of(hasMxRecordsPresent);
    }

    /**
     * UnSetter for HasMxRecordsPresent.
     */
    public void unsetHasMxRecordsPresent() {
        hasMxRecordsPresent = null;
    }

    /**
     * Getter for IsValidDomain.
     * @return Returns the Boolean
     */
    @JsonGetter("is_valid_domain")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsValidDomain() {
        return isValidDomain;
    }

    /**
     * Setter for IsValidDomain.
     * @param isValidDomain Value for Boolean
     */
    @JsonSetter("is_valid_domain")
    public void setIsValidDomain(Boolean isValidDomain) {
        this.isValidDomain = isValidDomain;
    }

    /**
     * Getter for IsApexDomain.
     * @return Returns the Boolean
     */
    @JsonGetter("is_apex_domain")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsApexDomain() {
        return isApexDomain;
    }

    /**
     * Setter for IsApexDomain.
     * @param isApexDomain Value for Boolean
     */
    @JsonSetter("is_apex_domain")
    public void setIsApexDomain(Boolean isApexDomain) {
        this.isApexDomain = isApexDomain;
    }

    /**
     * Internal Getter for ShouldBeARecord.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("should_be_a_record")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetShouldBeARecord() {
        return this.shouldBeARecord;
    }

    /**
     * Getter for ShouldBeARecord.
     * @return Returns the Boolean
     */
    public Boolean getShouldBeARecord() {
        return OptionalNullable.getFrom(shouldBeARecord);
    }

    /**
     * Setter for ShouldBeARecord.
     * @param shouldBeARecord Value for Boolean
     */
    @JsonSetter("should_be_a_record")
    public void setShouldBeARecord(Boolean shouldBeARecord) {
        this.shouldBeARecord = OptionalNullable.of(shouldBeARecord);
    }

    /**
     * UnSetter for ShouldBeARecord.
     */
    public void unsetShouldBeARecord() {
        shouldBeARecord = null;
    }

    /**
     * Internal Getter for IsCnameToGithubUserDomain.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("is_cname_to_github_user_domain")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsCnameToGithubUserDomain() {
        return this.isCnameToGithubUserDomain;
    }

    /**
     * Getter for IsCnameToGithubUserDomain.
     * @return Returns the Boolean
     */
    public Boolean getIsCnameToGithubUserDomain() {
        return OptionalNullable.getFrom(isCnameToGithubUserDomain);
    }

    /**
     * Setter for IsCnameToGithubUserDomain.
     * @param isCnameToGithubUserDomain Value for Boolean
     */
    @JsonSetter("is_cname_to_github_user_domain")
    public void setIsCnameToGithubUserDomain(Boolean isCnameToGithubUserDomain) {
        this.isCnameToGithubUserDomain = OptionalNullable.of(isCnameToGithubUserDomain);
    }

    /**
     * UnSetter for IsCnameToGithubUserDomain.
     */
    public void unsetIsCnameToGithubUserDomain() {
        isCnameToGithubUserDomain = null;
    }

    /**
     * Internal Getter for IsCnameToPagesDotGithubDotCom.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("is_cname_to_pages_dot_github_dot_com")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsCnameToPagesDotGithubDotCom() {
        return this.isCnameToPagesDotGithubDotCom;
    }

    /**
     * Getter for IsCnameToPagesDotGithubDotCom.
     * @return Returns the Boolean
     */
    public Boolean getIsCnameToPagesDotGithubDotCom() {
        return OptionalNullable.getFrom(isCnameToPagesDotGithubDotCom);
    }

    /**
     * Setter for IsCnameToPagesDotGithubDotCom.
     * @param isCnameToPagesDotGithubDotCom Value for Boolean
     */
    @JsonSetter("is_cname_to_pages_dot_github_dot_com")
    public void setIsCnameToPagesDotGithubDotCom(Boolean isCnameToPagesDotGithubDotCom) {
        this.isCnameToPagesDotGithubDotCom = OptionalNullable.of(isCnameToPagesDotGithubDotCom);
    }

    /**
     * UnSetter for IsCnameToPagesDotGithubDotCom.
     */
    public void unsetIsCnameToPagesDotGithubDotCom() {
        isCnameToPagesDotGithubDotCom = null;
    }

    /**
     * Internal Getter for IsCnameToFastly.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("is_cname_to_fastly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsCnameToFastly() {
        return this.isCnameToFastly;
    }

    /**
     * Getter for IsCnameToFastly.
     * @return Returns the Boolean
     */
    public Boolean getIsCnameToFastly() {
        return OptionalNullable.getFrom(isCnameToFastly);
    }

    /**
     * Setter for IsCnameToFastly.
     * @param isCnameToFastly Value for Boolean
     */
    @JsonSetter("is_cname_to_fastly")
    public void setIsCnameToFastly(Boolean isCnameToFastly) {
        this.isCnameToFastly = OptionalNullable.of(isCnameToFastly);
    }

    /**
     * UnSetter for IsCnameToFastly.
     */
    public void unsetIsCnameToFastly() {
        isCnameToFastly = null;
    }

    /**
     * Internal Getter for IsPointedToGithubPagesIp.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("is_pointed_to_github_pages_ip")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsPointedToGithubPagesIp() {
        return this.isPointedToGithubPagesIp;
    }

    /**
     * Getter for IsPointedToGithubPagesIp.
     * @return Returns the Boolean
     */
    public Boolean getIsPointedToGithubPagesIp() {
        return OptionalNullable.getFrom(isPointedToGithubPagesIp);
    }

    /**
     * Setter for IsPointedToGithubPagesIp.
     * @param isPointedToGithubPagesIp Value for Boolean
     */
    @JsonSetter("is_pointed_to_github_pages_ip")
    public void setIsPointedToGithubPagesIp(Boolean isPointedToGithubPagesIp) {
        this.isPointedToGithubPagesIp = OptionalNullable.of(isPointedToGithubPagesIp);
    }

    /**
     * UnSetter for IsPointedToGithubPagesIp.
     */
    public void unsetIsPointedToGithubPagesIp() {
        isPointedToGithubPagesIp = null;
    }

    /**
     * Internal Getter for IsNonGithubPagesIpPresent.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("is_non_github_pages_ip_present")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsNonGithubPagesIpPresent() {
        return this.isNonGithubPagesIpPresent;
    }

    /**
     * Getter for IsNonGithubPagesIpPresent.
     * @return Returns the Boolean
     */
    public Boolean getIsNonGithubPagesIpPresent() {
        return OptionalNullable.getFrom(isNonGithubPagesIpPresent);
    }

    /**
     * Setter for IsNonGithubPagesIpPresent.
     * @param isNonGithubPagesIpPresent Value for Boolean
     */
    @JsonSetter("is_non_github_pages_ip_present")
    public void setIsNonGithubPagesIpPresent(Boolean isNonGithubPagesIpPresent) {
        this.isNonGithubPagesIpPresent = OptionalNullable.of(isNonGithubPagesIpPresent);
    }

    /**
     * UnSetter for IsNonGithubPagesIpPresent.
     */
    public void unsetIsNonGithubPagesIpPresent() {
        isNonGithubPagesIpPresent = null;
    }

    /**
     * Getter for IsPagesDomain.
     * @return Returns the Boolean
     */
    @JsonGetter("is_pages_domain")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsPagesDomain() {
        return isPagesDomain;
    }

    /**
     * Setter for IsPagesDomain.
     * @param isPagesDomain Value for Boolean
     */
    @JsonSetter("is_pages_domain")
    public void setIsPagesDomain(Boolean isPagesDomain) {
        this.isPagesDomain = isPagesDomain;
    }

    /**
     * Internal Getter for IsServedByPages.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("is_served_by_pages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsServedByPages() {
        return this.isServedByPages;
    }

    /**
     * Getter for IsServedByPages.
     * @return Returns the Boolean
     */
    public Boolean getIsServedByPages() {
        return OptionalNullable.getFrom(isServedByPages);
    }

    /**
     * Setter for IsServedByPages.
     * @param isServedByPages Value for Boolean
     */
    @JsonSetter("is_served_by_pages")
    public void setIsServedByPages(Boolean isServedByPages) {
        this.isServedByPages = OptionalNullable.of(isServedByPages);
    }

    /**
     * UnSetter for IsServedByPages.
     */
    public void unsetIsServedByPages() {
        isServedByPages = null;
    }

    /**
     * Getter for IsValid.
     * @return Returns the Boolean
     */
    @JsonGetter("is_valid")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsValid() {
        return isValid;
    }

    /**
     * Setter for IsValid.
     * @param isValid Value for Boolean
     */
    @JsonSetter("is_valid")
    public void setIsValid(Boolean isValid) {
        this.isValid = isValid;
    }

    /**
     * Internal Getter for Reason.
     * @return Returns the Internal String
     */
    @JsonGetter("reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetReason() {
        return this.reason;
    }

    /**
     * Getter for Reason.
     * @return Returns the String
     */
    public String getReason() {
        return OptionalNullable.getFrom(reason);
    }

    /**
     * Setter for Reason.
     * @param reason Value for String
     */
    @JsonSetter("reason")
    public void setReason(String reason) {
        this.reason = OptionalNullable.of(reason);
    }

    /**
     * UnSetter for Reason.
     */
    public void unsetReason() {
        reason = null;
    }

    /**
     * Getter for RespondsToHttps.
     * @return Returns the Boolean
     */
    @JsonGetter("responds_to_https")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getRespondsToHttps() {
        return respondsToHttps;
    }

    /**
     * Setter for RespondsToHttps.
     * @param respondsToHttps Value for Boolean
     */
    @JsonSetter("responds_to_https")
    public void setRespondsToHttps(Boolean respondsToHttps) {
        this.respondsToHttps = respondsToHttps;
    }

    /**
     * Getter for EnforcesHttps.
     * @return Returns the Boolean
     */
    @JsonGetter("enforces_https")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getEnforcesHttps() {
        return enforcesHttps;
    }

    /**
     * Setter for EnforcesHttps.
     * @param enforcesHttps Value for Boolean
     */
    @JsonSetter("enforces_https")
    public void setEnforcesHttps(Boolean enforcesHttps) {
        this.enforcesHttps = enforcesHttps;
    }

    /**
     * Internal Getter for HttpsError.
     * @return Returns the Internal String
     */
    @JsonGetter("https_error")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetHttpsError() {
        return this.httpsError;
    }

    /**
     * Getter for HttpsError.
     * @return Returns the String
     */
    public String getHttpsError() {
        return OptionalNullable.getFrom(httpsError);
    }

    /**
     * Setter for HttpsError.
     * @param httpsError Value for String
     */
    @JsonSetter("https_error")
    public void setHttpsError(String httpsError) {
        this.httpsError = OptionalNullable.of(httpsError);
    }

    /**
     * UnSetter for HttpsError.
     */
    public void unsetHttpsError() {
        httpsError = null;
    }

    /**
     * Internal Getter for IsHttpsEligible.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("is_https_eligible")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsHttpsEligible() {
        return this.isHttpsEligible;
    }

    /**
     * Getter for IsHttpsEligible.
     * @return Returns the Boolean
     */
    public Boolean getIsHttpsEligible() {
        return OptionalNullable.getFrom(isHttpsEligible);
    }

    /**
     * Setter for IsHttpsEligible.
     * @param isHttpsEligible Value for Boolean
     */
    @JsonSetter("is_https_eligible")
    public void setIsHttpsEligible(Boolean isHttpsEligible) {
        this.isHttpsEligible = OptionalNullable.of(isHttpsEligible);
    }

    /**
     * UnSetter for IsHttpsEligible.
     */
    public void unsetIsHttpsEligible() {
        isHttpsEligible = null;
    }

    /**
     * Internal Getter for CaaError.
     * @return Returns the Internal String
     */
    @JsonGetter("caa_error")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCaaError() {
        return this.caaError;
    }

    /**
     * Getter for CaaError.
     * @return Returns the String
     */
    public String getCaaError() {
        return OptionalNullable.getFrom(caaError);
    }

    /**
     * Setter for CaaError.
     * @param caaError Value for String
     */
    @JsonSetter("caa_error")
    public void setCaaError(String caaError) {
        this.caaError = OptionalNullable.of(caaError);
    }

    /**
     * UnSetter for CaaError.
     */
    public void unsetCaaError() {
        caaError = null;
    }

    /**
     * Converts this Domain into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Domain [" + "host=" + host + ", uri=" + uri + ", nameservers=" + nameservers
                + ", dnsResolves=" + dnsResolves + ", isProxied=" + isProxied + ", isCloudflareIp="
                + isCloudflareIp + ", isFastlyIp=" + isFastlyIp + ", isOldIpAddress="
                + isOldIpAddress + ", isARecord=" + isARecord + ", hasCnameRecord=" + hasCnameRecord
                + ", hasMxRecordsPresent=" + hasMxRecordsPresent + ", isValidDomain="
                + isValidDomain + ", isApexDomain=" + isApexDomain + ", shouldBeARecord="
                + shouldBeARecord + ", isCnameToGithubUserDomain=" + isCnameToGithubUserDomain
                + ", isCnameToPagesDotGithubDotCom=" + isCnameToPagesDotGithubDotCom
                + ", isCnameToFastly=" + isCnameToFastly + ", isPointedToGithubPagesIp="
                + isPointedToGithubPagesIp + ", isNonGithubPagesIpPresent="
                + isNonGithubPagesIpPresent + ", isPagesDomain=" + isPagesDomain
                + ", isServedByPages=" + isServedByPages + ", isValid=" + isValid + ", reason="
                + reason + ", respondsToHttps=" + respondsToHttps + ", enforcesHttps="
                + enforcesHttps + ", httpsError=" + httpsError + ", isHttpsEligible="
                + isHttpsEligible + ", caaError=" + caaError + "]";
    }

    /**
     * Builds a new {@link Domain.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Domain.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .host(getHost())
                .uri(getUri())
                .nameservers(getNameservers())
                .dnsResolves(getDnsResolves())
                .isValidDomain(getIsValidDomain())
                .isApexDomain(getIsApexDomain())
                .isPagesDomain(getIsPagesDomain())
                .isValid(getIsValid())
                .respondsToHttps(getRespondsToHttps())
                .enforcesHttps(getEnforcesHttps());
        builder.isProxied = internalGetIsProxied();
        builder.isCloudflareIp = internalGetIsCloudflareIp();
        builder.isFastlyIp = internalGetIsFastlyIp();
        builder.isOldIpAddress = internalGetIsOldIpAddress();
        builder.isARecord = internalGetIsARecord();
        builder.hasCnameRecord = internalGetHasCnameRecord();
        builder.hasMxRecordsPresent = internalGetHasMxRecordsPresent();
        builder.shouldBeARecord = internalGetShouldBeARecord();
        builder.isCnameToGithubUserDomain = internalGetIsCnameToGithubUserDomain();
        builder.isCnameToPagesDotGithubDotCom = internalGetIsCnameToPagesDotGithubDotCom();
        builder.isCnameToFastly = internalGetIsCnameToFastly();
        builder.isPointedToGithubPagesIp = internalGetIsPointedToGithubPagesIp();
        builder.isNonGithubPagesIpPresent = internalGetIsNonGithubPagesIpPresent();
        builder.isServedByPages = internalGetIsServedByPages();
        builder.reason = internalGetReason();
        builder.httpsError = internalGetHttpsError();
        builder.isHttpsEligible = internalGetIsHttpsEligible();
        builder.caaError = internalGetCaaError();
        return builder;
    }

    /**
     * Class to build instances of {@link Domain}.
     */
    public static class Builder {
        private String host;
        private String uri;
        private String nameservers;
        private Boolean dnsResolves;
        private OptionalNullable<Boolean> isProxied;
        private OptionalNullable<Boolean> isCloudflareIp;
        private OptionalNullable<Boolean> isFastlyIp;
        private OptionalNullable<Boolean> isOldIpAddress;
        private OptionalNullable<Boolean> isARecord;
        private OptionalNullable<Boolean> hasCnameRecord;
        private OptionalNullable<Boolean> hasMxRecordsPresent;
        private Boolean isValidDomain;
        private Boolean isApexDomain;
        private OptionalNullable<Boolean> shouldBeARecord;
        private OptionalNullable<Boolean> isCnameToGithubUserDomain;
        private OptionalNullable<Boolean> isCnameToPagesDotGithubDotCom;
        private OptionalNullable<Boolean> isCnameToFastly;
        private OptionalNullable<Boolean> isPointedToGithubPagesIp;
        private OptionalNullable<Boolean> isNonGithubPagesIpPresent;
        private Boolean isPagesDomain;
        private OptionalNullable<Boolean> isServedByPages;
        private Boolean isValid;
        private OptionalNullable<String> reason;
        private Boolean respondsToHttps;
        private Boolean enforcesHttps;
        private OptionalNullable<String> httpsError;
        private OptionalNullable<Boolean> isHttpsEligible;
        private OptionalNullable<String> caaError;



        /**
         * Setter for host.
         * @param  host  String value for host.
         * @return Builder
         */
        public Builder host(String host) {
            this.host = host;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Setter for nameservers.
         * @param  nameservers  String value for nameservers.
         * @return Builder
         */
        public Builder nameservers(String nameservers) {
            this.nameservers = nameservers;
            return this;
        }

        /**
         * Setter for dnsResolves.
         * @param  dnsResolves  Boolean value for dnsResolves.
         * @return Builder
         */
        public Builder dnsResolves(Boolean dnsResolves) {
            this.dnsResolves = dnsResolves;
            return this;
        }

        /**
         * Setter for isProxied.
         * @param  isProxied  Boolean value for isProxied.
         * @return Builder
         */
        public Builder isProxied(Boolean isProxied) {
            this.isProxied = OptionalNullable.of(isProxied);
            return this;
        }

        /**
         * UnSetter for isProxied.
         * @return Builder
         */
        public Builder unsetIsProxied() {
            isProxied = null;
            return this;
        }

        /**
         * Setter for isCloudflareIp.
         * @param  isCloudflareIp  Boolean value for isCloudflareIp.
         * @return Builder
         */
        public Builder isCloudflareIp(Boolean isCloudflareIp) {
            this.isCloudflareIp = OptionalNullable.of(isCloudflareIp);
            return this;
        }

        /**
         * UnSetter for isCloudflareIp.
         * @return Builder
         */
        public Builder unsetIsCloudflareIp() {
            isCloudflareIp = null;
            return this;
        }

        /**
         * Setter for isFastlyIp.
         * @param  isFastlyIp  Boolean value for isFastlyIp.
         * @return Builder
         */
        public Builder isFastlyIp(Boolean isFastlyIp) {
            this.isFastlyIp = OptionalNullable.of(isFastlyIp);
            return this;
        }

        /**
         * UnSetter for isFastlyIp.
         * @return Builder
         */
        public Builder unsetIsFastlyIp() {
            isFastlyIp = null;
            return this;
        }

        /**
         * Setter for isOldIpAddress.
         * @param  isOldIpAddress  Boolean value for isOldIpAddress.
         * @return Builder
         */
        public Builder isOldIpAddress(Boolean isOldIpAddress) {
            this.isOldIpAddress = OptionalNullable.of(isOldIpAddress);
            return this;
        }

        /**
         * UnSetter for isOldIpAddress.
         * @return Builder
         */
        public Builder unsetIsOldIpAddress() {
            isOldIpAddress = null;
            return this;
        }

        /**
         * Setter for isARecord.
         * @param  isARecord  Boolean value for isARecord.
         * @return Builder
         */
        public Builder isARecord(Boolean isARecord) {
            this.isARecord = OptionalNullable.of(isARecord);
            return this;
        }

        /**
         * UnSetter for isARecord.
         * @return Builder
         */
        public Builder unsetIsARecord() {
            isARecord = null;
            return this;
        }

        /**
         * Setter for hasCnameRecord.
         * @param  hasCnameRecord  Boolean value for hasCnameRecord.
         * @return Builder
         */
        public Builder hasCnameRecord(Boolean hasCnameRecord) {
            this.hasCnameRecord = OptionalNullable.of(hasCnameRecord);
            return this;
        }

        /**
         * UnSetter for hasCnameRecord.
         * @return Builder
         */
        public Builder unsetHasCnameRecord() {
            hasCnameRecord = null;
            return this;
        }

        /**
         * Setter for hasMxRecordsPresent.
         * @param  hasMxRecordsPresent  Boolean value for hasMxRecordsPresent.
         * @return Builder
         */
        public Builder hasMxRecordsPresent(Boolean hasMxRecordsPresent) {
            this.hasMxRecordsPresent = OptionalNullable.of(hasMxRecordsPresent);
            return this;
        }

        /**
         * UnSetter for hasMxRecordsPresent.
         * @return Builder
         */
        public Builder unsetHasMxRecordsPresent() {
            hasMxRecordsPresent = null;
            return this;
        }

        /**
         * Setter for isValidDomain.
         * @param  isValidDomain  Boolean value for isValidDomain.
         * @return Builder
         */
        public Builder isValidDomain(Boolean isValidDomain) {
            this.isValidDomain = isValidDomain;
            return this;
        }

        /**
         * Setter for isApexDomain.
         * @param  isApexDomain  Boolean value for isApexDomain.
         * @return Builder
         */
        public Builder isApexDomain(Boolean isApexDomain) {
            this.isApexDomain = isApexDomain;
            return this;
        }

        /**
         * Setter for shouldBeARecord.
         * @param  shouldBeARecord  Boolean value for shouldBeARecord.
         * @return Builder
         */
        public Builder shouldBeARecord(Boolean shouldBeARecord) {
            this.shouldBeARecord = OptionalNullable.of(shouldBeARecord);
            return this;
        }

        /**
         * UnSetter for shouldBeARecord.
         * @return Builder
         */
        public Builder unsetShouldBeARecord() {
            shouldBeARecord = null;
            return this;
        }

        /**
         * Setter for isCnameToGithubUserDomain.
         * @param  isCnameToGithubUserDomain  Boolean value for isCnameToGithubUserDomain.
         * @return Builder
         */
        public Builder isCnameToGithubUserDomain(Boolean isCnameToGithubUserDomain) {
            this.isCnameToGithubUserDomain = OptionalNullable.of(isCnameToGithubUserDomain);
            return this;
        }

        /**
         * UnSetter for isCnameToGithubUserDomain.
         * @return Builder
         */
        public Builder unsetIsCnameToGithubUserDomain() {
            isCnameToGithubUserDomain = null;
            return this;
        }

        /**
         * Setter for isCnameToPagesDotGithubDotCom.
         * @param  isCnameToPagesDotGithubDotCom  Boolean value for isCnameToPagesDotGithubDotCom.
         * @return Builder
         */
        public Builder isCnameToPagesDotGithubDotCom(Boolean isCnameToPagesDotGithubDotCom) {
            this.isCnameToPagesDotGithubDotCom = OptionalNullable.of(isCnameToPagesDotGithubDotCom);
            return this;
        }

        /**
         * UnSetter for isCnameToPagesDotGithubDotCom.
         * @return Builder
         */
        public Builder unsetIsCnameToPagesDotGithubDotCom() {
            isCnameToPagesDotGithubDotCom = null;
            return this;
        }

        /**
         * Setter for isCnameToFastly.
         * @param  isCnameToFastly  Boolean value for isCnameToFastly.
         * @return Builder
         */
        public Builder isCnameToFastly(Boolean isCnameToFastly) {
            this.isCnameToFastly = OptionalNullable.of(isCnameToFastly);
            return this;
        }

        /**
         * UnSetter for isCnameToFastly.
         * @return Builder
         */
        public Builder unsetIsCnameToFastly() {
            isCnameToFastly = null;
            return this;
        }

        /**
         * Setter for isPointedToGithubPagesIp.
         * @param  isPointedToGithubPagesIp  Boolean value for isPointedToGithubPagesIp.
         * @return Builder
         */
        public Builder isPointedToGithubPagesIp(Boolean isPointedToGithubPagesIp) {
            this.isPointedToGithubPagesIp = OptionalNullable.of(isPointedToGithubPagesIp);
            return this;
        }

        /**
         * UnSetter for isPointedToGithubPagesIp.
         * @return Builder
         */
        public Builder unsetIsPointedToGithubPagesIp() {
            isPointedToGithubPagesIp = null;
            return this;
        }

        /**
         * Setter for isNonGithubPagesIpPresent.
         * @param  isNonGithubPagesIpPresent  Boolean value for isNonGithubPagesIpPresent.
         * @return Builder
         */
        public Builder isNonGithubPagesIpPresent(Boolean isNonGithubPagesIpPresent) {
            this.isNonGithubPagesIpPresent = OptionalNullable.of(isNonGithubPagesIpPresent);
            return this;
        }

        /**
         * UnSetter for isNonGithubPagesIpPresent.
         * @return Builder
         */
        public Builder unsetIsNonGithubPagesIpPresent() {
            isNonGithubPagesIpPresent = null;
            return this;
        }

        /**
         * Setter for isPagesDomain.
         * @param  isPagesDomain  Boolean value for isPagesDomain.
         * @return Builder
         */
        public Builder isPagesDomain(Boolean isPagesDomain) {
            this.isPagesDomain = isPagesDomain;
            return this;
        }

        /**
         * Setter for isServedByPages.
         * @param  isServedByPages  Boolean value for isServedByPages.
         * @return Builder
         */
        public Builder isServedByPages(Boolean isServedByPages) {
            this.isServedByPages = OptionalNullable.of(isServedByPages);
            return this;
        }

        /**
         * UnSetter for isServedByPages.
         * @return Builder
         */
        public Builder unsetIsServedByPages() {
            isServedByPages = null;
            return this;
        }

        /**
         * Setter for isValid.
         * @param  isValid  Boolean value for isValid.
         * @return Builder
         */
        public Builder isValid(Boolean isValid) {
            this.isValid = isValid;
            return this;
        }

        /**
         * Setter for reason.
         * @param  reason  String value for reason.
         * @return Builder
         */
        public Builder reason(String reason) {
            this.reason = OptionalNullable.of(reason);
            return this;
        }

        /**
         * UnSetter for reason.
         * @return Builder
         */
        public Builder unsetReason() {
            reason = null;
            return this;
        }

        /**
         * Setter for respondsToHttps.
         * @param  respondsToHttps  Boolean value for respondsToHttps.
         * @return Builder
         */
        public Builder respondsToHttps(Boolean respondsToHttps) {
            this.respondsToHttps = respondsToHttps;
            return this;
        }

        /**
         * Setter for enforcesHttps.
         * @param  enforcesHttps  Boolean value for enforcesHttps.
         * @return Builder
         */
        public Builder enforcesHttps(Boolean enforcesHttps) {
            this.enforcesHttps = enforcesHttps;
            return this;
        }

        /**
         * Setter for httpsError.
         * @param  httpsError  String value for httpsError.
         * @return Builder
         */
        public Builder httpsError(String httpsError) {
            this.httpsError = OptionalNullable.of(httpsError);
            return this;
        }

        /**
         * UnSetter for httpsError.
         * @return Builder
         */
        public Builder unsetHttpsError() {
            httpsError = null;
            return this;
        }

        /**
         * Setter for isHttpsEligible.
         * @param  isHttpsEligible  Boolean value for isHttpsEligible.
         * @return Builder
         */
        public Builder isHttpsEligible(Boolean isHttpsEligible) {
            this.isHttpsEligible = OptionalNullable.of(isHttpsEligible);
            return this;
        }

        /**
         * UnSetter for isHttpsEligible.
         * @return Builder
         */
        public Builder unsetIsHttpsEligible() {
            isHttpsEligible = null;
            return this;
        }

        /**
         * Setter for caaError.
         * @param  caaError  String value for caaError.
         * @return Builder
         */
        public Builder caaError(String caaError) {
            this.caaError = OptionalNullable.of(caaError);
            return this;
        }

        /**
         * UnSetter for caaError.
         * @return Builder
         */
        public Builder unsetCaaError() {
            caaError = null;
            return this;
        }

        /**
         * Builds a new {@link Domain} object using the set fields.
         * @return {@link Domain}
         */
        public Domain build() {
            return new Domain(host, uri, nameservers, dnsResolves, isProxied, isCloudflareIp,
                    isFastlyIp, isOldIpAddress, isARecord, hasCnameRecord, hasMxRecordsPresent,
                    isValidDomain, isApexDomain, shouldBeARecord, isCnameToGithubUserDomain,
                    isCnameToPagesDotGithubDotCom, isCnameToFastly, isPointedToGithubPagesIp,
                    isNonGithubPagesIpPresent, isPagesDomain, isServedByPages, isValid, reason,
                    respondsToHttps, enforcesHttps, httpsError, isHttpsEligible, caaError);
        }
    }
}

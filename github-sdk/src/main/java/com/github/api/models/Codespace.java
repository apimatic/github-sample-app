/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for Codespace type.
 */
public class Codespace {
    private int id;
    private String name;
    private OptionalNullable<String> displayName;
    private String environmentId;
    private Owner1 owner;
    private BillableOwner billableOwner;
    private Repository7 repository;
    private Object machine;
    private OptionalNullable<String> devcontainerPath;
    private Boolean prebuild;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private LocalDateTime lastUsedAt;
    private State3Enum state;
    private String url;
    private GitStatus1 gitStatus;
    private LocationEnum location;
    private Integer idleTimeoutMinutes;
    private String webUrl;
    private String machinesUrl;
    private String startUrl;
    private String stopUrl;
    private OptionalNullable<String> publishUrl;
    private String pullsUrl;
    private List<String> recentFolders;
    private RuntimeConstraints runtimeConstraints;
    private OptionalNullable<Boolean> pendingOperation;
    private OptionalNullable<String> pendingOperationDisabledReason;
    private OptionalNullable<String> idleTimeoutNotice;
    private OptionalNullable<Integer> retentionPeriodMinutes;
    private OptionalNullable<LocalDateTime> retentionExpiresAt;
    private OptionalNullable<String> lastKnownStopNotice;

    /**
     * Default constructor.
     */
    public Codespace() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  name  String value for name.
     * @param  environmentId  String value for environmentId.
     * @param  owner  Owner1 value for owner.
     * @param  billableOwner  BillableOwner value for billableOwner.
     * @param  repository  Repository7 value for repository.
     * @param  machine  Object value for machine.
     * @param  prebuild  Boolean value for prebuild.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  lastUsedAt  LocalDateTime value for lastUsedAt.
     * @param  state  State3Enum value for state.
     * @param  url  String value for url.
     * @param  gitStatus  GitStatus1 value for gitStatus.
     * @param  location  LocationEnum value for location.
     * @param  idleTimeoutMinutes  Integer value for idleTimeoutMinutes.
     * @param  webUrl  String value for webUrl.
     * @param  machinesUrl  String value for machinesUrl.
     * @param  startUrl  String value for startUrl.
     * @param  stopUrl  String value for stopUrl.
     * @param  pullsUrl  String value for pullsUrl.
     * @param  recentFolders  List of String value for recentFolders.
     * @param  displayName  String value for displayName.
     * @param  devcontainerPath  String value for devcontainerPath.
     * @param  publishUrl  String value for publishUrl.
     * @param  runtimeConstraints  RuntimeConstraints value for runtimeConstraints.
     * @param  pendingOperation  Boolean value for pendingOperation.
     * @param  pendingOperationDisabledReason  String value for pendingOperationDisabledReason.
     * @param  idleTimeoutNotice  String value for idleTimeoutNotice.
     * @param  retentionPeriodMinutes  Integer value for retentionPeriodMinutes.
     * @param  retentionExpiresAt  LocalDateTime value for retentionExpiresAt.
     * @param  lastKnownStopNotice  String value for lastKnownStopNotice.
     */
    public Codespace(
            int id,
            String name,
            String environmentId,
            Owner1 owner,
            BillableOwner billableOwner,
            Repository7 repository,
            Object machine,
            Boolean prebuild,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            LocalDateTime lastUsedAt,
            State3Enum state,
            String url,
            GitStatus1 gitStatus,
            LocationEnum location,
            Integer idleTimeoutMinutes,
            String webUrl,
            String machinesUrl,
            String startUrl,
            String stopUrl,
            String pullsUrl,
            List<String> recentFolders,
            String displayName,
            String devcontainerPath,
            String publishUrl,
            RuntimeConstraints runtimeConstraints,
            Boolean pendingOperation,
            String pendingOperationDisabledReason,
            String idleTimeoutNotice,
            Integer retentionPeriodMinutes,
            LocalDateTime retentionExpiresAt,
            String lastKnownStopNotice) {
        this.id = id;
        this.name = name;
        this.displayName = OptionalNullable.of(displayName);
        this.environmentId = environmentId;
        this.owner = owner;
        this.billableOwner = billableOwner;
        this.repository = repository;
        this.machine = machine;
        this.devcontainerPath = OptionalNullable.of(devcontainerPath);
        this.prebuild = prebuild;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.lastUsedAt = lastUsedAt;
        this.state = state;
        this.url = url;
        this.gitStatus = gitStatus;
        this.location = location;
        this.idleTimeoutMinutes = idleTimeoutMinutes;
        this.webUrl = webUrl;
        this.machinesUrl = machinesUrl;
        this.startUrl = startUrl;
        this.stopUrl = stopUrl;
        this.publishUrl = OptionalNullable.of(publishUrl);
        this.pullsUrl = pullsUrl;
        this.recentFolders = recentFolders;
        this.runtimeConstraints = runtimeConstraints;
        this.pendingOperation = OptionalNullable.of(pendingOperation);
        this.pendingOperationDisabledReason = OptionalNullable.of(pendingOperationDisabledReason);
        this.idleTimeoutNotice = OptionalNullable.of(idleTimeoutNotice);
        this.retentionPeriodMinutes = OptionalNullable.of(retentionPeriodMinutes);
        this.retentionExpiresAt = OptionalNullable.of(retentionExpiresAt);
        this.lastKnownStopNotice = OptionalNullable.of(lastKnownStopNotice);
    }

    /**
     * Internal initialization constructor.
     */
    protected Codespace(int id, String name, String environmentId, Owner1 owner,
            BillableOwner billableOwner, Repository7 repository, Object machine, Boolean prebuild,
            LocalDateTime createdAt, LocalDateTime updatedAt, LocalDateTime lastUsedAt,
            State3Enum state, String url, GitStatus1 gitStatus, LocationEnum location,
            Integer idleTimeoutMinutes, String webUrl, String machinesUrl, String startUrl,
            String stopUrl, String pullsUrl, List<String> recentFolders,
            OptionalNullable<String> displayName, OptionalNullable<String> devcontainerPath,
            OptionalNullable<String> publishUrl, RuntimeConstraints runtimeConstraints,
            OptionalNullable<Boolean> pendingOperation,
            OptionalNullable<String> pendingOperationDisabledReason,
            OptionalNullable<String> idleTimeoutNotice,
            OptionalNullable<Integer> retentionPeriodMinutes,
            OptionalNullable<LocalDateTime> retentionExpiresAt,
            OptionalNullable<String> lastKnownStopNotice) {
        this.id = id;
        this.name = name;
        this.displayName = displayName;
        this.environmentId = environmentId;
        this.owner = owner;
        this.billableOwner = billableOwner;
        this.repository = repository;
        this.machine = machine;
        this.devcontainerPath = devcontainerPath;
        this.prebuild = prebuild;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.lastUsedAt = lastUsedAt;
        this.state = state;
        this.url = url;
        this.gitStatus = gitStatus;
        this.location = location;
        this.idleTimeoutMinutes = idleTimeoutMinutes;
        this.webUrl = webUrl;
        this.machinesUrl = machinesUrl;
        this.startUrl = startUrl;
        this.stopUrl = stopUrl;
        this.publishUrl = publishUrl;
        this.pullsUrl = pullsUrl;
        this.recentFolders = recentFolders;
        this.runtimeConstraints = runtimeConstraints;
        this.pendingOperation = pendingOperation;
        this.pendingOperationDisabledReason = pendingOperationDisabledReason;
        this.idleTimeoutNotice = idleTimeoutNotice;
        this.retentionPeriodMinutes = retentionPeriodMinutes;
        this.retentionExpiresAt = retentionExpiresAt;
        this.lastKnownStopNotice = lastKnownStopNotice;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for Name.
     * Automatically generated name of this codespace.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Automatically generated name of this codespace.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Internal Getter for DisplayName.
     * Display name for this codespace.
     * @return Returns the Internal String
     */
    @JsonGetter("display_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDisplayName() {
        return this.displayName;
    }

    /**
     * Getter for DisplayName.
     * Display name for this codespace.
     * @return Returns the String
     */
    public String getDisplayName() {
        return OptionalNullable.getFrom(displayName);
    }

    /**
     * Setter for DisplayName.
     * Display name for this codespace.
     * @param displayName Value for String
     */
    @JsonSetter("display_name")
    public void setDisplayName(String displayName) {
        this.displayName = OptionalNullable.of(displayName);
    }

    /**
     * UnSetter for DisplayName.
     * Display name for this codespace.
     */
    public void unsetDisplayName() {
        displayName = null;
    }

    /**
     * Getter for EnvironmentId.
     * UUID identifying this codespace's environment.
     * @return Returns the String
     */
    @JsonGetter("environment_id")
    public String getEnvironmentId() {
        return environmentId;
    }

    /**
     * Setter for EnvironmentId.
     * UUID identifying this codespace's environment.
     * @param environmentId Value for String
     */
    @JsonSetter("environment_id")
    public void setEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
    }

    /**
     * Getter for Owner.
     * @return Returns the Owner1
     */
    @JsonGetter("owner")
    public Owner1 getOwner() {
        return owner;
    }

    /**
     * Setter for Owner.
     * @param owner Value for Owner1
     */
    @JsonSetter("owner")
    public void setOwner(Owner1 owner) {
        this.owner = owner;
    }

    /**
     * Getter for BillableOwner.
     * @return Returns the BillableOwner
     */
    @JsonGetter("billable_owner")
    public BillableOwner getBillableOwner() {
        return billableOwner;
    }

    /**
     * Setter for BillableOwner.
     * @param billableOwner Value for BillableOwner
     */
    @JsonSetter("billable_owner")
    public void setBillableOwner(BillableOwner billableOwner) {
        this.billableOwner = billableOwner;
    }

    /**
     * Getter for Repository.
     * @return Returns the Repository7
     */
    @JsonGetter("repository")
    public Repository7 getRepository() {
        return repository;
    }

    /**
     * Setter for Repository.
     * @param repository Value for Repository7
     */
    @JsonSetter("repository")
    public void setRepository(Repository7 repository) {
        this.repository = repository;
    }

    /**
     * Getter for Machine.
     * @return Returns the Object
     */
    @JsonGetter("machine")
    public Object getMachine() {
        return machine;
    }

    /**
     * Setter for Machine.
     * @param machine Value for Object
     */
    @JsonSetter("machine")
    public void setMachine(Object machine) {
        this.machine = machine;
    }

    /**
     * Internal Getter for DevcontainerPath.
     * Path to devcontainer.json from repo root used to create Codespace.
     * @return Returns the Internal String
     */
    @JsonGetter("devcontainer_path")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDevcontainerPath() {
        return this.devcontainerPath;
    }

    /**
     * Getter for DevcontainerPath.
     * Path to devcontainer.json from repo root used to create Codespace.
     * @return Returns the String
     */
    public String getDevcontainerPath() {
        return OptionalNullable.getFrom(devcontainerPath);
    }

    /**
     * Setter for DevcontainerPath.
     * Path to devcontainer.json from repo root used to create Codespace.
     * @param devcontainerPath Value for String
     */
    @JsonSetter("devcontainer_path")
    public void setDevcontainerPath(String devcontainerPath) {
        this.devcontainerPath = OptionalNullable.of(devcontainerPath);
    }

    /**
     * UnSetter for DevcontainerPath.
     * Path to devcontainer.json from repo root used to create Codespace.
     */
    public void unsetDevcontainerPath() {
        devcontainerPath = null;
    }

    /**
     * Getter for Prebuild.
     * Whether the codespace was created from a prebuild.
     * @return Returns the Boolean
     */
    @JsonGetter("prebuild")
    public Boolean getPrebuild() {
        return prebuild;
    }

    /**
     * Setter for Prebuild.
     * Whether the codespace was created from a prebuild.
     * @param prebuild Value for Boolean
     */
    @JsonSetter("prebuild")
    public void setPrebuild(Boolean prebuild) {
        this.prebuild = prebuild;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for LastUsedAt.
     * Last known time this codespace was started.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("last_used_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getLastUsedAt() {
        return lastUsedAt;
    }

    /**
     * Setter for LastUsedAt.
     * Last known time this codespace was started.
     * @param lastUsedAt Value for LocalDateTime
     */
    @JsonSetter("last_used_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setLastUsedAt(LocalDateTime lastUsedAt) {
        this.lastUsedAt = lastUsedAt;
    }

    /**
     * Getter for State.
     * @return Returns the State3Enum
     */
    @JsonGetter("state")
    public State3Enum getState() {
        return state;
    }

    /**
     * Setter for State.
     * @param state Value for State3Enum
     */
    @JsonSetter("state")
    public void setState(State3Enum state) {
        this.state = state;
    }

    /**
     * Getter for Url.
     * API URL for this codespace.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * API URL for this codespace.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for GitStatus.
     * @return Returns the GitStatus1
     */
    @JsonGetter("git_status")
    public GitStatus1 getGitStatus() {
        return gitStatus;
    }

    /**
     * Setter for GitStatus.
     * @param gitStatus Value for GitStatus1
     */
    @JsonSetter("git_status")
    public void setGitStatus(GitStatus1 gitStatus) {
        this.gitStatus = gitStatus;
    }

    /**
     * Getter for Location.
     * @return Returns the LocationEnum
     */
    @JsonGetter("location")
    public LocationEnum getLocation() {
        return location;
    }

    /**
     * Setter for Location.
     * @param location Value for LocationEnum
     */
    @JsonSetter("location")
    public void setLocation(LocationEnum location) {
        this.location = location;
    }

    /**
     * Getter for IdleTimeoutMinutes.
     * The number of minutes of inactivity after which this codespace will be automatically stopped.
     * @return Returns the Integer
     */
    @JsonGetter("idle_timeout_minutes")
    public Integer getIdleTimeoutMinutes() {
        return idleTimeoutMinutes;
    }

    /**
     * Setter for IdleTimeoutMinutes.
     * The number of minutes of inactivity after which this codespace will be automatically stopped.
     * @param idleTimeoutMinutes Value for Integer
     */
    @JsonSetter("idle_timeout_minutes")
    public void setIdleTimeoutMinutes(Integer idleTimeoutMinutes) {
        this.idleTimeoutMinutes = idleTimeoutMinutes;
    }

    /**
     * Getter for WebUrl.
     * URL to access this codespace on the web.
     * @return Returns the String
     */
    @JsonGetter("web_url")
    public String getWebUrl() {
        return webUrl;
    }

    /**
     * Setter for WebUrl.
     * URL to access this codespace on the web.
     * @param webUrl Value for String
     */
    @JsonSetter("web_url")
    public void setWebUrl(String webUrl) {
        this.webUrl = webUrl;
    }

    /**
     * Getter for MachinesUrl.
     * API URL to access available alternate machine types for this codespace.
     * @return Returns the String
     */
    @JsonGetter("machines_url")
    public String getMachinesUrl() {
        return machinesUrl;
    }

    /**
     * Setter for MachinesUrl.
     * API URL to access available alternate machine types for this codespace.
     * @param machinesUrl Value for String
     */
    @JsonSetter("machines_url")
    public void setMachinesUrl(String machinesUrl) {
        this.machinesUrl = machinesUrl;
    }

    /**
     * Getter for StartUrl.
     * API URL to start this codespace.
     * @return Returns the String
     */
    @JsonGetter("start_url")
    public String getStartUrl() {
        return startUrl;
    }

    /**
     * Setter for StartUrl.
     * API URL to start this codespace.
     * @param startUrl Value for String
     */
    @JsonSetter("start_url")
    public void setStartUrl(String startUrl) {
        this.startUrl = startUrl;
    }

    /**
     * Getter for StopUrl.
     * API URL to stop this codespace.
     * @return Returns the String
     */
    @JsonGetter("stop_url")
    public String getStopUrl() {
        return stopUrl;
    }

    /**
     * Setter for StopUrl.
     * API URL to stop this codespace.
     * @param stopUrl Value for String
     */
    @JsonSetter("stop_url")
    public void setStopUrl(String stopUrl) {
        this.stopUrl = stopUrl;
    }

    /**
     * Internal Getter for PublishUrl.
     * API URL to publish this codespace to a new repository.
     * @return Returns the Internal String
     */
    @JsonGetter("publish_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPublishUrl() {
        return this.publishUrl;
    }

    /**
     * Getter for PublishUrl.
     * API URL to publish this codespace to a new repository.
     * @return Returns the String
     */
    public String getPublishUrl() {
        return OptionalNullable.getFrom(publishUrl);
    }

    /**
     * Setter for PublishUrl.
     * API URL to publish this codespace to a new repository.
     * @param publishUrl Value for String
     */
    @JsonSetter("publish_url")
    public void setPublishUrl(String publishUrl) {
        this.publishUrl = OptionalNullable.of(publishUrl);
    }

    /**
     * UnSetter for PublishUrl.
     * API URL to publish this codespace to a new repository.
     */
    public void unsetPublishUrl() {
        publishUrl = null;
    }

    /**
     * Getter for PullsUrl.
     * API URL for the Pull Request associated with this codespace, if any.
     * @return Returns the String
     */
    @JsonGetter("pulls_url")
    public String getPullsUrl() {
        return pullsUrl;
    }

    /**
     * Setter for PullsUrl.
     * API URL for the Pull Request associated with this codespace, if any.
     * @param pullsUrl Value for String
     */
    @JsonSetter("pulls_url")
    public void setPullsUrl(String pullsUrl) {
        this.pullsUrl = pullsUrl;
    }

    /**
     * Getter for RecentFolders.
     * @return Returns the List of String
     */
    @JsonGetter("recent_folders")
    public List<String> getRecentFolders() {
        return recentFolders;
    }

    /**
     * Setter for RecentFolders.
     * @param recentFolders Value for List of String
     */
    @JsonSetter("recent_folders")
    public void setRecentFolders(List<String> recentFolders) {
        this.recentFolders = recentFolders;
    }

    /**
     * Getter for RuntimeConstraints.
     * @return Returns the RuntimeConstraints
     */
    @JsonGetter("runtime_constraints")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RuntimeConstraints getRuntimeConstraints() {
        return runtimeConstraints;
    }

    /**
     * Setter for RuntimeConstraints.
     * @param runtimeConstraints Value for RuntimeConstraints
     */
    @JsonSetter("runtime_constraints")
    public void setRuntimeConstraints(RuntimeConstraints runtimeConstraints) {
        this.runtimeConstraints = runtimeConstraints;
    }

    /**
     * Internal Getter for PendingOperation.
     * Whether or not a codespace has a pending async operation. This would mean that the codespace
     * is temporarily unavailable. The only thing that you can do with a codespace in this state is
     * delete it.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("pending_operation")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetPendingOperation() {
        return this.pendingOperation;
    }

    /**
     * Getter for PendingOperation.
     * Whether or not a codespace has a pending async operation. This would mean that the codespace
     * is temporarily unavailable. The only thing that you can do with a codespace in this state is
     * delete it.
     * @return Returns the Boolean
     */
    public Boolean getPendingOperation() {
        return OptionalNullable.getFrom(pendingOperation);
    }

    /**
     * Setter for PendingOperation.
     * Whether or not a codespace has a pending async operation. This would mean that the codespace
     * is temporarily unavailable. The only thing that you can do with a codespace in this state is
     * delete it.
     * @param pendingOperation Value for Boolean
     */
    @JsonSetter("pending_operation")
    public void setPendingOperation(Boolean pendingOperation) {
        this.pendingOperation = OptionalNullable.of(pendingOperation);
    }

    /**
     * UnSetter for PendingOperation.
     * Whether or not a codespace has a pending async operation. This would mean that the codespace
     * is temporarily unavailable. The only thing that you can do with a codespace in this state is
     * delete it.
     */
    public void unsetPendingOperation() {
        pendingOperation = null;
    }

    /**
     * Internal Getter for PendingOperationDisabledReason.
     * Text to show user when codespace is disabled by a pending operation
     * @return Returns the Internal String
     */
    @JsonGetter("pending_operation_disabled_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPendingOperationDisabledReason() {
        return this.pendingOperationDisabledReason;
    }

    /**
     * Getter for PendingOperationDisabledReason.
     * Text to show user when codespace is disabled by a pending operation
     * @return Returns the String
     */
    public String getPendingOperationDisabledReason() {
        return OptionalNullable.getFrom(pendingOperationDisabledReason);
    }

    /**
     * Setter for PendingOperationDisabledReason.
     * Text to show user when codespace is disabled by a pending operation
     * @param pendingOperationDisabledReason Value for String
     */
    @JsonSetter("pending_operation_disabled_reason")
    public void setPendingOperationDisabledReason(String pendingOperationDisabledReason) {
        this.pendingOperationDisabledReason = OptionalNullable.of(pendingOperationDisabledReason);
    }

    /**
     * UnSetter for PendingOperationDisabledReason.
     * Text to show user when codespace is disabled by a pending operation
     */
    public void unsetPendingOperationDisabledReason() {
        pendingOperationDisabledReason = null;
    }

    /**
     * Internal Getter for IdleTimeoutNotice.
     * Text to show user when codespace idle timeout minutes has been overriden by an organization
     * policy
     * @return Returns the Internal String
     */
    @JsonGetter("idle_timeout_notice")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIdleTimeoutNotice() {
        return this.idleTimeoutNotice;
    }

    /**
     * Getter for IdleTimeoutNotice.
     * Text to show user when codespace idle timeout minutes has been overriden by an organization
     * policy
     * @return Returns the String
     */
    public String getIdleTimeoutNotice() {
        return OptionalNullable.getFrom(idleTimeoutNotice);
    }

    /**
     * Setter for IdleTimeoutNotice.
     * Text to show user when codespace idle timeout minutes has been overriden by an organization
     * policy
     * @param idleTimeoutNotice Value for String
     */
    @JsonSetter("idle_timeout_notice")
    public void setIdleTimeoutNotice(String idleTimeoutNotice) {
        this.idleTimeoutNotice = OptionalNullable.of(idleTimeoutNotice);
    }

    /**
     * UnSetter for IdleTimeoutNotice.
     * Text to show user when codespace idle timeout minutes has been overriden by an organization
     * policy
     */
    public void unsetIdleTimeoutNotice() {
        idleTimeoutNotice = null;
    }

    /**
     * Internal Getter for RetentionPeriodMinutes.
     * Duration in minutes after codespace has gone idle in which it will be deleted. Must be
     * integer minutes between 0 and 43200 (30 days).
     * @return Returns the Internal Integer
     */
    @JsonGetter("retention_period_minutes")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetRetentionPeriodMinutes() {
        return this.retentionPeriodMinutes;
    }

    /**
     * Getter for RetentionPeriodMinutes.
     * Duration in minutes after codespace has gone idle in which it will be deleted. Must be
     * integer minutes between 0 and 43200 (30 days).
     * @return Returns the Integer
     */
    public Integer getRetentionPeriodMinutes() {
        return OptionalNullable.getFrom(retentionPeriodMinutes);
    }

    /**
     * Setter for RetentionPeriodMinutes.
     * Duration in minutes after codespace has gone idle in which it will be deleted. Must be
     * integer minutes between 0 and 43200 (30 days).
     * @param retentionPeriodMinutes Value for Integer
     */
    @JsonSetter("retention_period_minutes")
    public void setRetentionPeriodMinutes(Integer retentionPeriodMinutes) {
        this.retentionPeriodMinutes = OptionalNullable.of(retentionPeriodMinutes);
    }

    /**
     * UnSetter for RetentionPeriodMinutes.
     * Duration in minutes after codespace has gone idle in which it will be deleted. Must be
     * integer minutes between 0 and 43200 (30 days).
     */
    public void unsetRetentionPeriodMinutes() {
        retentionPeriodMinutes = null;
    }

    /**
     * Internal Getter for RetentionExpiresAt.
     * When a codespace will be auto-deleted based on the "retention_period_minutes" and
     * "last_used_at"
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("retention_expires_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetRetentionExpiresAt() {
        return this.retentionExpiresAt;
    }

    /**
     * Getter for RetentionExpiresAt.
     * When a codespace will be auto-deleted based on the "retention_period_minutes" and
     * "last_used_at"
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getRetentionExpiresAt() {
        return OptionalNullable.getFrom(retentionExpiresAt);
    }

    /**
     * Setter for RetentionExpiresAt.
     * When a codespace will be auto-deleted based on the "retention_period_minutes" and
     * "last_used_at"
     * @param retentionExpiresAt Value for LocalDateTime
     */
    @JsonSetter("retention_expires_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setRetentionExpiresAt(LocalDateTime retentionExpiresAt) {
        this.retentionExpiresAt = OptionalNullable.of(retentionExpiresAt);
    }

    /**
     * UnSetter for RetentionExpiresAt.
     * When a codespace will be auto-deleted based on the "retention_period_minutes" and
     * "last_used_at"
     */
    public void unsetRetentionExpiresAt() {
        retentionExpiresAt = null;
    }

    /**
     * Internal Getter for LastKnownStopNotice.
     * The text to display to a user when a codespace has been stopped for a potentially actionable
     * reason.
     * @return Returns the Internal String
     */
    @JsonGetter("last_known_stop_notice")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLastKnownStopNotice() {
        return this.lastKnownStopNotice;
    }

    /**
     * Getter for LastKnownStopNotice.
     * The text to display to a user when a codespace has been stopped for a potentially actionable
     * reason.
     * @return Returns the String
     */
    public String getLastKnownStopNotice() {
        return OptionalNullable.getFrom(lastKnownStopNotice);
    }

    /**
     * Setter for LastKnownStopNotice.
     * The text to display to a user when a codespace has been stopped for a potentially actionable
     * reason.
     * @param lastKnownStopNotice Value for String
     */
    @JsonSetter("last_known_stop_notice")
    public void setLastKnownStopNotice(String lastKnownStopNotice) {
        this.lastKnownStopNotice = OptionalNullable.of(lastKnownStopNotice);
    }

    /**
     * UnSetter for LastKnownStopNotice.
     * The text to display to a user when a codespace has been stopped for a potentially actionable
     * reason.
     */
    public void unsetLastKnownStopNotice() {
        lastKnownStopNotice = null;
    }

    /**
     * Converts this Codespace into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Codespace [" + "id=" + id + ", name=" + name + ", environmentId=" + environmentId
                + ", owner=" + owner + ", billableOwner=" + billableOwner + ", repository="
                + repository + ", machine=" + machine + ", prebuild=" + prebuild + ", createdAt="
                + createdAt + ", updatedAt=" + updatedAt + ", lastUsedAt=" + lastUsedAt + ", state="
                + state + ", url=" + url + ", gitStatus=" + gitStatus + ", location=" + location
                + ", idleTimeoutMinutes=" + idleTimeoutMinutes + ", webUrl=" + webUrl
                + ", machinesUrl=" + machinesUrl + ", startUrl=" + startUrl + ", stopUrl=" + stopUrl
                + ", pullsUrl=" + pullsUrl + ", recentFolders=" + recentFolders + ", displayName="
                + displayName + ", devcontainerPath=" + devcontainerPath + ", publishUrl="
                + publishUrl + ", runtimeConstraints=" + runtimeConstraints + ", pendingOperation="
                + pendingOperation + ", pendingOperationDisabledReason="
                + pendingOperationDisabledReason + ", idleTimeoutNotice=" + idleTimeoutNotice
                + ", retentionPeriodMinutes=" + retentionPeriodMinutes + ", retentionExpiresAt="
                + retentionExpiresAt + ", lastKnownStopNotice=" + lastKnownStopNotice + "]";
    }

    /**
     * Builds a new {@link Codespace.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Codespace.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, name, environmentId, owner, billableOwner, repository,
                machine, prebuild, createdAt, updatedAt, lastUsedAt, state, url, gitStatus,
                location, idleTimeoutMinutes, webUrl, machinesUrl, startUrl, stopUrl, pullsUrl,
                recentFolders)
                .runtimeConstraints(getRuntimeConstraints());
        builder.displayName = internalGetDisplayName();
        builder.devcontainerPath = internalGetDevcontainerPath();
        builder.publishUrl = internalGetPublishUrl();
        builder.pendingOperation = internalGetPendingOperation();
        builder.pendingOperationDisabledReason = internalGetPendingOperationDisabledReason();
        builder.idleTimeoutNotice = internalGetIdleTimeoutNotice();
        builder.retentionPeriodMinutes = internalGetRetentionPeriodMinutes();
        builder.retentionExpiresAt = internalGetRetentionExpiresAt();
        builder.lastKnownStopNotice = internalGetLastKnownStopNotice();
        return builder;
    }

    /**
     * Class to build instances of {@link Codespace}.
     */
    public static class Builder {
        private int id;
        private String name;
        private String environmentId;
        private Owner1 owner;
        private BillableOwner billableOwner;
        private Repository7 repository;
        private Object machine;
        private Boolean prebuild;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private LocalDateTime lastUsedAt;
        private State3Enum state;
        private String url;
        private GitStatus1 gitStatus;
        private LocationEnum location;
        private Integer idleTimeoutMinutes;
        private String webUrl;
        private String machinesUrl;
        private String startUrl;
        private String stopUrl;
        private String pullsUrl;
        private List<String> recentFolders;
        private OptionalNullable<String> displayName;
        private OptionalNullable<String> devcontainerPath;
        private OptionalNullable<String> publishUrl;
        private RuntimeConstraints runtimeConstraints;
        private OptionalNullable<Boolean> pendingOperation;
        private OptionalNullable<String> pendingOperationDisabledReason;
        private OptionalNullable<String> idleTimeoutNotice;
        private OptionalNullable<Integer> retentionPeriodMinutes;
        private OptionalNullable<LocalDateTime> retentionExpiresAt;
        private OptionalNullable<String> lastKnownStopNotice;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  name  String value for name.
         * @param  environmentId  String value for environmentId.
         * @param  owner  Owner1 value for owner.
         * @param  billableOwner  BillableOwner value for billableOwner.
         * @param  repository  Repository7 value for repository.
         * @param  machine  Object value for machine.
         * @param  prebuild  Boolean value for prebuild.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  lastUsedAt  LocalDateTime value for lastUsedAt.
         * @param  state  State3Enum value for state.
         * @param  url  String value for url.
         * @param  gitStatus  GitStatus1 value for gitStatus.
         * @param  location  LocationEnum value for location.
         * @param  idleTimeoutMinutes  Integer value for idleTimeoutMinutes.
         * @param  webUrl  String value for webUrl.
         * @param  machinesUrl  String value for machinesUrl.
         * @param  startUrl  String value for startUrl.
         * @param  stopUrl  String value for stopUrl.
         * @param  pullsUrl  String value for pullsUrl.
         * @param  recentFolders  List of String value for recentFolders.
         */
        public Builder(int id, String name, String environmentId, Owner1 owner,
                BillableOwner billableOwner, Repository7 repository, Object machine,
                Boolean prebuild, LocalDateTime createdAt, LocalDateTime updatedAt,
                LocalDateTime lastUsedAt, State3Enum state, String url, GitStatus1 gitStatus,
                LocationEnum location, Integer idleTimeoutMinutes, String webUrl,
                String machinesUrl, String startUrl, String stopUrl, String pullsUrl,
                List<String> recentFolders) {
            this.id = id;
            this.name = name;
            this.environmentId = environmentId;
            this.owner = owner;
            this.billableOwner = billableOwner;
            this.repository = repository;
            this.machine = machine;
            this.prebuild = prebuild;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.lastUsedAt = lastUsedAt;
            this.state = state;
            this.url = url;
            this.gitStatus = gitStatus;
            this.location = location;
            this.idleTimeoutMinutes = idleTimeoutMinutes;
            this.webUrl = webUrl;
            this.machinesUrl = machinesUrl;
            this.startUrl = startUrl;
            this.stopUrl = stopUrl;
            this.pullsUrl = pullsUrl;
            this.recentFolders = recentFolders;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for environmentId.
         * @param  environmentId  String value for environmentId.
         * @return Builder
         */
        public Builder environmentId(String environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        /**
         * Setter for owner.
         * @param  owner  Owner1 value for owner.
         * @return Builder
         */
        public Builder owner(Owner1 owner) {
            this.owner = owner;
            return this;
        }

        /**
         * Setter for billableOwner.
         * @param  billableOwner  BillableOwner value for billableOwner.
         * @return Builder
         */
        public Builder billableOwner(BillableOwner billableOwner) {
            this.billableOwner = billableOwner;
            return this;
        }

        /**
         * Setter for repository.
         * @param  repository  Repository7 value for repository.
         * @return Builder
         */
        public Builder repository(Repository7 repository) {
            this.repository = repository;
            return this;
        }

        /**
         * Setter for machine.
         * @param  machine  Object value for machine.
         * @return Builder
         */
        public Builder machine(Object machine) {
            this.machine = machine;
            return this;
        }

        /**
         * Setter for prebuild.
         * @param  prebuild  Boolean value for prebuild.
         * @return Builder
         */
        public Builder prebuild(Boolean prebuild) {
            this.prebuild = prebuild;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for lastUsedAt.
         * @param  lastUsedAt  LocalDateTime value for lastUsedAt.
         * @return Builder
         */
        public Builder lastUsedAt(LocalDateTime lastUsedAt) {
            this.lastUsedAt = lastUsedAt;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  State3Enum value for state.
         * @return Builder
         */
        public Builder state(State3Enum state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for gitStatus.
         * @param  gitStatus  GitStatus1 value for gitStatus.
         * @return Builder
         */
        public Builder gitStatus(GitStatus1 gitStatus) {
            this.gitStatus = gitStatus;
            return this;
        }

        /**
         * Setter for location.
         * @param  location  LocationEnum value for location.
         * @return Builder
         */
        public Builder location(LocationEnum location) {
            this.location = location;
            return this;
        }

        /**
         * Setter for idleTimeoutMinutes.
         * @param  idleTimeoutMinutes  Integer value for idleTimeoutMinutes.
         * @return Builder
         */
        public Builder idleTimeoutMinutes(Integer idleTimeoutMinutes) {
            this.idleTimeoutMinutes = idleTimeoutMinutes;
            return this;
        }

        /**
         * Setter for webUrl.
         * @param  webUrl  String value for webUrl.
         * @return Builder
         */
        public Builder webUrl(String webUrl) {
            this.webUrl = webUrl;
            return this;
        }

        /**
         * Setter for machinesUrl.
         * @param  machinesUrl  String value for machinesUrl.
         * @return Builder
         */
        public Builder machinesUrl(String machinesUrl) {
            this.machinesUrl = machinesUrl;
            return this;
        }

        /**
         * Setter for startUrl.
         * @param  startUrl  String value for startUrl.
         * @return Builder
         */
        public Builder startUrl(String startUrl) {
            this.startUrl = startUrl;
            return this;
        }

        /**
         * Setter for stopUrl.
         * @param  stopUrl  String value for stopUrl.
         * @return Builder
         */
        public Builder stopUrl(String stopUrl) {
            this.stopUrl = stopUrl;
            return this;
        }

        /**
         * Setter for pullsUrl.
         * @param  pullsUrl  String value for pullsUrl.
         * @return Builder
         */
        public Builder pullsUrl(String pullsUrl) {
            this.pullsUrl = pullsUrl;
            return this;
        }

        /**
         * Setter for recentFolders.
         * @param  recentFolders  List of String value for recentFolders.
         * @return Builder
         */
        public Builder recentFolders(List<String> recentFolders) {
            this.recentFolders = recentFolders;
            return this;
        }

        /**
         * Setter for displayName.
         * @param  displayName  String value for displayName.
         * @return Builder
         */
        public Builder displayName(String displayName) {
            this.displayName = OptionalNullable.of(displayName);
            return this;
        }

        /**
         * UnSetter for displayName.
         * @return Builder
         */
        public Builder unsetDisplayName() {
            displayName = null;
            return this;
        }

        /**
         * Setter for devcontainerPath.
         * @param  devcontainerPath  String value for devcontainerPath.
         * @return Builder
         */
        public Builder devcontainerPath(String devcontainerPath) {
            this.devcontainerPath = OptionalNullable.of(devcontainerPath);
            return this;
        }

        /**
         * UnSetter for devcontainerPath.
         * @return Builder
         */
        public Builder unsetDevcontainerPath() {
            devcontainerPath = null;
            return this;
        }

        /**
         * Setter for publishUrl.
         * @param  publishUrl  String value for publishUrl.
         * @return Builder
         */
        public Builder publishUrl(String publishUrl) {
            this.publishUrl = OptionalNullable.of(publishUrl);
            return this;
        }

        /**
         * UnSetter for publishUrl.
         * @return Builder
         */
        public Builder unsetPublishUrl() {
            publishUrl = null;
            return this;
        }

        /**
         * Setter for runtimeConstraints.
         * @param  runtimeConstraints  RuntimeConstraints value for runtimeConstraints.
         * @return Builder
         */
        public Builder runtimeConstraints(RuntimeConstraints runtimeConstraints) {
            this.runtimeConstraints = runtimeConstraints;
            return this;
        }

        /**
         * Setter for pendingOperation.
         * @param  pendingOperation  Boolean value for pendingOperation.
         * @return Builder
         */
        public Builder pendingOperation(Boolean pendingOperation) {
            this.pendingOperation = OptionalNullable.of(pendingOperation);
            return this;
        }

        /**
         * UnSetter for pendingOperation.
         * @return Builder
         */
        public Builder unsetPendingOperation() {
            pendingOperation = null;
            return this;
        }

        /**
         * Setter for pendingOperationDisabledReason.
         * @param  pendingOperationDisabledReason  String value for pendingOperationDisabledReason.
         * @return Builder
         */
        public Builder pendingOperationDisabledReason(String pendingOperationDisabledReason) {
            this.pendingOperationDisabledReason =
                    OptionalNullable.of(pendingOperationDisabledReason);
            return this;
        }

        /**
         * UnSetter for pendingOperationDisabledReason.
         * @return Builder
         */
        public Builder unsetPendingOperationDisabledReason() {
            pendingOperationDisabledReason = null;
            return this;
        }

        /**
         * Setter for idleTimeoutNotice.
         * @param  idleTimeoutNotice  String value for idleTimeoutNotice.
         * @return Builder
         */
        public Builder idleTimeoutNotice(String idleTimeoutNotice) {
            this.idleTimeoutNotice = OptionalNullable.of(idleTimeoutNotice);
            return this;
        }

        /**
         * UnSetter for idleTimeoutNotice.
         * @return Builder
         */
        public Builder unsetIdleTimeoutNotice() {
            idleTimeoutNotice = null;
            return this;
        }

        /**
         * Setter for retentionPeriodMinutes.
         * @param  retentionPeriodMinutes  Integer value for retentionPeriodMinutes.
         * @return Builder
         */
        public Builder retentionPeriodMinutes(Integer retentionPeriodMinutes) {
            this.retentionPeriodMinutes = OptionalNullable.of(retentionPeriodMinutes);
            return this;
        }

        /**
         * UnSetter for retentionPeriodMinutes.
         * @return Builder
         */
        public Builder unsetRetentionPeriodMinutes() {
            retentionPeriodMinutes = null;
            return this;
        }

        /**
         * Setter for retentionExpiresAt.
         * @param  retentionExpiresAt  LocalDateTime value for retentionExpiresAt.
         * @return Builder
         */
        public Builder retentionExpiresAt(LocalDateTime retentionExpiresAt) {
            this.retentionExpiresAt = OptionalNullable.of(retentionExpiresAt);
            return this;
        }

        /**
         * UnSetter for retentionExpiresAt.
         * @return Builder
         */
        public Builder unsetRetentionExpiresAt() {
            retentionExpiresAt = null;
            return this;
        }

        /**
         * Setter for lastKnownStopNotice.
         * @param  lastKnownStopNotice  String value for lastKnownStopNotice.
         * @return Builder
         */
        public Builder lastKnownStopNotice(String lastKnownStopNotice) {
            this.lastKnownStopNotice = OptionalNullable.of(lastKnownStopNotice);
            return this;
        }

        /**
         * UnSetter for lastKnownStopNotice.
         * @return Builder
         */
        public Builder unsetLastKnownStopNotice() {
            lastKnownStopNotice = null;
            return this;
        }

        /**
         * Builds a new {@link Codespace} object using the set fields.
         * @return {@link Codespace}
         */
        public Codespace build() {
            return new Codespace(id, name, environmentId, owner, billableOwner, repository, machine,
                    prebuild, createdAt, updatedAt, lastUsedAt, state, url, gitStatus, location,
                    idleTimeoutMinutes, webUrl, machinesUrl, startUrl, stopUrl, pullsUrl,
                    recentFolders, displayName, devcontainerPath, publishUrl, runtimeConstraints,
                    pendingOperation, pendingOperationDisabledReason, idleTimeoutNotice,
                    retentionPeriodMinutes, retentionExpiresAt, lastKnownStopNotice);
        }
    }
}

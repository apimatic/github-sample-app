/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for OrgsHooksRequest1 type.
 */
public class OrgsHooksRequest1 {
    private Config9 config;
    private List<String> events;
    private Boolean active;
    private String name;

    /**
     * Default constructor.
     */
    public OrgsHooksRequest1() {
        active = true;
    }

    /**
     * Initialization constructor.
     * @param  config  Config9 value for config.
     * @param  events  List of String value for events.
     * @param  active  Boolean value for active.
     * @param  name  String value for name.
     */
    public OrgsHooksRequest1(
            Config9 config,
            List<String> events,
            Boolean active,
            String name) {
        this.config = config;
        this.events = events;
        this.active = active;
        this.name = name;
    }

    /**
     * Getter for Config.
     * @return Returns the Config9
     */
    @JsonGetter("config")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Config9 getConfig() {
        return config;
    }

    /**
     * Setter for Config.
     * @param config Value for Config9
     */
    @JsonSetter("config")
    public void setConfig(Config9 config) {
        this.config = config;
    }

    /**
     * Getter for Events.
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is
     * triggered for.
     * @return Returns the List of String
     */
    @JsonGetter("events")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getEvents() {
        return events;
    }

    /**
     * Setter for Events.
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is
     * triggered for.
     * @param events Value for List of String
     */
    @JsonSetter("events")
    public void setEvents(List<String> events) {
        this.events = events;
    }

    /**
     * Getter for Active.
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send
     * notifications.
     * @return Returns the Boolean
     */
    @JsonGetter("active")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getActive() {
        return active;
    }

    /**
     * Setter for Active.
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send
     * notifications.
     * @param active Value for Boolean
     */
    @JsonSetter("active")
    public void setActive(Boolean active) {
        this.active = active;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Converts this OrgsHooksRequest1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "OrgsHooksRequest1 [" + "config=" + config + ", events=" + events + ", active="
                + active + ", name=" + name + "]";
    }

    /**
     * Builds a new {@link OrgsHooksRequest1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link OrgsHooksRequest1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .config(getConfig())
                .events(getEvents())
                .active(getActive())
                .name(getName());
        return builder;
    }

    /**
     * Class to build instances of {@link OrgsHooksRequest1}.
     */
    public static class Builder {
        private Config9 config;
        private List<String> events;
        private Boolean active = true;
        private String name;



        /**
         * Setter for config.
         * @param  config  Config9 value for config.
         * @return Builder
         */
        public Builder config(Config9 config) {
            this.config = config;
            return this;
        }

        /**
         * Setter for events.
         * @param  events  List of String value for events.
         * @return Builder
         */
        public Builder events(List<String> events) {
            this.events = events;
            return this;
        }

        /**
         * Setter for active.
         * @param  active  Boolean value for active.
         * @return Builder
         */
        public Builder active(Boolean active) {
            this.active = active;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Builds a new {@link OrgsHooksRequest1} object using the set fields.
         * @return {@link OrgsHooksRequest1}
         */
        public OrgsHooksRequest1 build() {
            return new OrgsHooksRequest1(config, events, active, name);
        }
    }
}

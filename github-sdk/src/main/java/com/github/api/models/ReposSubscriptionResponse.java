/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;

/**
 * This is a model class for ReposSubscriptionResponse type.
 */
public class ReposSubscriptionResponse {
    private boolean subscribed;
    private boolean ignored;
    private String reason;
    private LocalDateTime createdAt;
    private String url;
    private String repositoryUrl;

    /**
     * Default constructor.
     */
    public ReposSubscriptionResponse() {
    }

    /**
     * Initialization constructor.
     * @param  subscribed  boolean value for subscribed.
     * @param  ignored  boolean value for ignored.
     * @param  reason  String value for reason.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  url  String value for url.
     * @param  repositoryUrl  String value for repositoryUrl.
     */
    public ReposSubscriptionResponse(
            boolean subscribed,
            boolean ignored,
            String reason,
            LocalDateTime createdAt,
            String url,
            String repositoryUrl) {
        this.subscribed = subscribed;
        this.ignored = ignored;
        this.reason = reason;
        this.createdAt = createdAt;
        this.url = url;
        this.repositoryUrl = repositoryUrl;
    }

    /**
     * Getter for Subscribed.
     * Determines if notifications should be received from this repository.
     * @return Returns the boolean
     */
    @JsonGetter("subscribed")
    public boolean getSubscribed() {
        return subscribed;
    }

    /**
     * Setter for Subscribed.
     * Determines if notifications should be received from this repository.
     * @param subscribed Value for boolean
     */
    @JsonSetter("subscribed")
    public void setSubscribed(boolean subscribed) {
        this.subscribed = subscribed;
    }

    /**
     * Getter for Ignored.
     * Determines if all notifications should be blocked from this repository.
     * @return Returns the boolean
     */
    @JsonGetter("ignored")
    public boolean getIgnored() {
        return ignored;
    }

    /**
     * Setter for Ignored.
     * Determines if all notifications should be blocked from this repository.
     * @param ignored Value for boolean
     */
    @JsonSetter("ignored")
    public void setIgnored(boolean ignored) {
        this.ignored = ignored;
    }

    /**
     * Getter for Reason.
     * @return Returns the String
     */
    @JsonGetter("reason")
    public String getReason() {
        return reason;
    }

    /**
     * Setter for Reason.
     * @param reason Value for String
     */
    @JsonSetter("reason")
    public void setReason(String reason) {
        this.reason = reason;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for RepositoryUrl.
     * @return Returns the String
     */
    @JsonGetter("repository_url")
    public String getRepositoryUrl() {
        return repositoryUrl;
    }

    /**
     * Setter for RepositoryUrl.
     * @param repositoryUrl Value for String
     */
    @JsonSetter("repository_url")
    public void setRepositoryUrl(String repositoryUrl) {
        this.repositoryUrl = repositoryUrl;
    }

    /**
     * Converts this ReposSubscriptionResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposSubscriptionResponse [" + "subscribed=" + subscribed + ", ignored=" + ignored
                + ", reason=" + reason + ", createdAt=" + createdAt + ", url=" + url
                + ", repositoryUrl=" + repositoryUrl + "]";
    }

    /**
     * Builds a new {@link ReposSubscriptionResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposSubscriptionResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(subscribed, ignored, reason, createdAt, url, repositoryUrl);
        return builder;
    }

    /**
     * Class to build instances of {@link ReposSubscriptionResponse}.
     */
    public static class Builder {
        private boolean subscribed;
        private boolean ignored;
        private String reason;
        private LocalDateTime createdAt;
        private String url;
        private String repositoryUrl;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  subscribed  boolean value for subscribed.
         * @param  ignored  boolean value for ignored.
         * @param  reason  String value for reason.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  url  String value for url.
         * @param  repositoryUrl  String value for repositoryUrl.
         */
        public Builder(boolean subscribed, boolean ignored, String reason, LocalDateTime createdAt,
                String url, String repositoryUrl) {
            this.subscribed = subscribed;
            this.ignored = ignored;
            this.reason = reason;
            this.createdAt = createdAt;
            this.url = url;
            this.repositoryUrl = repositoryUrl;
        }

        /**
         * Setter for subscribed.
         * @param  subscribed  boolean value for subscribed.
         * @return Builder
         */
        public Builder subscribed(boolean subscribed) {
            this.subscribed = subscribed;
            return this;
        }

        /**
         * Setter for ignored.
         * @param  ignored  boolean value for ignored.
         * @return Builder
         */
        public Builder ignored(boolean ignored) {
            this.ignored = ignored;
            return this;
        }

        /**
         * Setter for reason.
         * @param  reason  String value for reason.
         * @return Builder
         */
        public Builder reason(String reason) {
            this.reason = reason;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for repositoryUrl.
         * @param  repositoryUrl  String value for repositoryUrl.
         * @return Builder
         */
        public Builder repositoryUrl(String repositoryUrl) {
            this.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * Builds a new {@link ReposSubscriptionResponse} object using the set fields.
         * @return {@link ReposSubscriptionResponse}
         */
        public ReposSubscriptionResponse build() {
            return new ReposSubscriptionResponse(subscribed, ignored, reason, createdAt, url,
                    repositoryUrl);
        }
    }
}

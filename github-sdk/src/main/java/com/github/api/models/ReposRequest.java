/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for ReposRequest type.
 */
public class ReposRequest {
    private String name;
    private String description;
    private String homepage;
    private Boolean mPrivate;
    private Visibility88Enum visibility;
    private Object securityAndAnalysis;
    private Boolean hasIssues;
    private Boolean hasProjects;
    private Boolean hasWiki;
    private Boolean isTemplate;
    private String defaultBranch;
    private Boolean allowSquashMerge;
    private Boolean allowMergeCommit;
    private Boolean allowRebaseMerge;
    private Boolean allowAutoMerge;
    private Boolean deleteBranchOnMerge;
    private Boolean allowUpdateBranch;
    private Boolean useSquashPrTitleAsDefault;
    private SquashMergeCommitTitleEnum squashMergeCommitTitle;
    private SquashMergeCommitMessageEnum squashMergeCommitMessage;
    private MergeCommitTitleEnum mergeCommitTitle;
    private MergeCommitMessageEnum mergeCommitMessage;
    private Boolean archived;
    private Boolean allowForking;
    private Boolean webCommitSignoffRequired;

    /**
     * Default constructor.
     */
    public ReposRequest() {
        mPrivate = false;
        hasIssues = true;
        hasProjects = true;
        hasWiki = true;
        isTemplate = false;
        allowSquashMerge = true;
        allowMergeCommit = true;
        allowRebaseMerge = true;
        allowAutoMerge = false;
        deleteBranchOnMerge = false;
        allowUpdateBranch = false;
        useSquashPrTitleAsDefault = false;
        archived = false;
        allowForking = false;
        webCommitSignoffRequired = false;
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  description  String value for description.
     * @param  homepage  String value for homepage.
     * @param  mPrivate  Boolean value for mPrivate.
     * @param  visibility  Visibility88Enum value for visibility.
     * @param  securityAndAnalysis  Object value for securityAndAnalysis.
     * @param  hasIssues  Boolean value for hasIssues.
     * @param  hasProjects  Boolean value for hasProjects.
     * @param  hasWiki  Boolean value for hasWiki.
     * @param  isTemplate  Boolean value for isTemplate.
     * @param  defaultBranch  String value for defaultBranch.
     * @param  allowSquashMerge  Boolean value for allowSquashMerge.
     * @param  allowMergeCommit  Boolean value for allowMergeCommit.
     * @param  allowRebaseMerge  Boolean value for allowRebaseMerge.
     * @param  allowAutoMerge  Boolean value for allowAutoMerge.
     * @param  deleteBranchOnMerge  Boolean value for deleteBranchOnMerge.
     * @param  allowUpdateBranch  Boolean value for allowUpdateBranch.
     * @param  useSquashPrTitleAsDefault  Boolean value for useSquashPrTitleAsDefault.
     * @param  squashMergeCommitTitle  SquashMergeCommitTitleEnum value for squashMergeCommitTitle.
     * @param  squashMergeCommitMessage  SquashMergeCommitMessageEnum value for
     *         squashMergeCommitMessage.
     * @param  mergeCommitTitle  MergeCommitTitleEnum value for mergeCommitTitle.
     * @param  mergeCommitMessage  MergeCommitMessageEnum value for mergeCommitMessage.
     * @param  archived  Boolean value for archived.
     * @param  allowForking  Boolean value for allowForking.
     * @param  webCommitSignoffRequired  Boolean value for webCommitSignoffRequired.
     */
    public ReposRequest(
            String name,
            String description,
            String homepage,
            Boolean mPrivate,
            Visibility88Enum visibility,
            Object securityAndAnalysis,
            Boolean hasIssues,
            Boolean hasProjects,
            Boolean hasWiki,
            Boolean isTemplate,
            String defaultBranch,
            Boolean allowSquashMerge,
            Boolean allowMergeCommit,
            Boolean allowRebaseMerge,
            Boolean allowAutoMerge,
            Boolean deleteBranchOnMerge,
            Boolean allowUpdateBranch,
            Boolean useSquashPrTitleAsDefault,
            SquashMergeCommitTitleEnum squashMergeCommitTitle,
            SquashMergeCommitMessageEnum squashMergeCommitMessage,
            MergeCommitTitleEnum mergeCommitTitle,
            MergeCommitMessageEnum mergeCommitMessage,
            Boolean archived,
            Boolean allowForking,
            Boolean webCommitSignoffRequired) {
        this.name = name;
        this.description = description;
        this.homepage = homepage;
        this.mPrivate = mPrivate;
        this.visibility = visibility;
        this.securityAndAnalysis = securityAndAnalysis;
        this.hasIssues = hasIssues;
        this.hasProjects = hasProjects;
        this.hasWiki = hasWiki;
        this.isTemplate = isTemplate;
        this.defaultBranch = defaultBranch;
        this.allowSquashMerge = allowSquashMerge;
        this.allowMergeCommit = allowMergeCommit;
        this.allowRebaseMerge = allowRebaseMerge;
        this.allowAutoMerge = allowAutoMerge;
        this.deleteBranchOnMerge = deleteBranchOnMerge;
        this.allowUpdateBranch = allowUpdateBranch;
        this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
        this.squashMergeCommitTitle = squashMergeCommitTitle;
        this.squashMergeCommitMessage = squashMergeCommitMessage;
        this.mergeCommitTitle = mergeCommitTitle;
        this.mergeCommitMessage = mergeCommitMessage;
        this.archived = archived;
        this.allowForking = allowForking;
        this.webCommitSignoffRequired = webCommitSignoffRequired;
    }

    /**
     * Getter for Name.
     * The name of the repository.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the repository.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Description.
     * A short description of the repository.
     * @return Returns the String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * A short description of the repository.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Homepage.
     * A URL with more information about the repository.
     * @return Returns the String
     */
    @JsonGetter("homepage")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHomepage() {
        return homepage;
    }

    /**
     * Setter for Homepage.
     * A URL with more information about the repository.
     * @param homepage Value for String
     */
    @JsonSetter("homepage")
    public void setHomepage(String homepage) {
        this.homepage = homepage;
    }

    /**
     * Getter for Private.
     * Either `true` to make the repository private or `false` to make it public. Default: `false`.
     * **Note**: You will get a `422` error if the organization restricts [changing repository
     * visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories)
     * to organization owners and a non-owner tries to change the value of private.
     * @return Returns the Boolean
     */
    @JsonGetter("private")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getPrivate() {
        return mPrivate;
    }

    /**
     * Setter for Private.
     * Either `true` to make the repository private or `false` to make it public. Default: `false`.
     * **Note**: You will get a `422` error if the organization restricts [changing repository
     * visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories)
     * to organization owners and a non-owner tries to change the value of private.
     * @param mPrivate Value for Boolean
     */
    @JsonSetter("private")
    public void setPrivate(Boolean mPrivate) {
        this.mPrivate = mPrivate;
    }

    /**
     * Getter for Visibility.
     * @return Returns the Visibility88Enum
     */
    @JsonGetter("visibility")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Visibility88Enum getVisibility() {
        return visibility;
    }

    /**
     * Setter for Visibility.
     * @param visibility Value for Visibility88Enum
     */
    @JsonSetter("visibility")
    public void setVisibility(Visibility88Enum visibility) {
        this.visibility = visibility;
    }

    /**
     * Getter for SecurityAndAnalysis.
     * @return Returns the Object
     */
    @JsonGetter("security_and_analysis")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getSecurityAndAnalysis() {
        return securityAndAnalysis;
    }

    /**
     * Setter for SecurityAndAnalysis.
     * @param securityAndAnalysis Value for Object
     */
    @JsonSetter("security_and_analysis")
    public void setSecurityAndAnalysis(Object securityAndAnalysis) {
        this.securityAndAnalysis = securityAndAnalysis;
    }

    /**
     * Getter for HasIssues.
     * Either `true` to enable issues for this repository or `false` to disable them.
     * @return Returns the Boolean
     */
    @JsonGetter("has_issues")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasIssues() {
        return hasIssues;
    }

    /**
     * Setter for HasIssues.
     * Either `true` to enable issues for this repository or `false` to disable them.
     * @param hasIssues Value for Boolean
     */
    @JsonSetter("has_issues")
    public void setHasIssues(Boolean hasIssues) {
        this.hasIssues = hasIssues;
    }

    /**
     * Getter for HasProjects.
     * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If
     * you're creating a repository in an organization that has disabled repository projects, the
     * default is `false`, and if you pass `true`, the API returns an error.
     * @return Returns the Boolean
     */
    @JsonGetter("has_projects")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasProjects() {
        return hasProjects;
    }

    /**
     * Setter for HasProjects.
     * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If
     * you're creating a repository in an organization that has disabled repository projects, the
     * default is `false`, and if you pass `true`, the API returns an error.
     * @param hasProjects Value for Boolean
     */
    @JsonSetter("has_projects")
    public void setHasProjects(Boolean hasProjects) {
        this.hasProjects = hasProjects;
    }

    /**
     * Getter for HasWiki.
     * Either `true` to enable the wiki for this repository or `false` to disable it.
     * @return Returns the Boolean
     */
    @JsonGetter("has_wiki")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasWiki() {
        return hasWiki;
    }

    /**
     * Setter for HasWiki.
     * Either `true` to enable the wiki for this repository or `false` to disable it.
     * @param hasWiki Value for Boolean
     */
    @JsonSetter("has_wiki")
    public void setHasWiki(Boolean hasWiki) {
        this.hasWiki = hasWiki;
    }

    /**
     * Getter for IsTemplate.
     * Either `true` to make this repo available as a template repository or `false` to prevent it.
     * @return Returns the Boolean
     */
    @JsonGetter("is_template")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsTemplate() {
        return isTemplate;
    }

    /**
     * Setter for IsTemplate.
     * Either `true` to make this repo available as a template repository or `false` to prevent it.
     * @param isTemplate Value for Boolean
     */
    @JsonSetter("is_template")
    public void setIsTemplate(Boolean isTemplate) {
        this.isTemplate = isTemplate;
    }

    /**
     * Getter for DefaultBranch.
     * Updates the default branch for this repository.
     * @return Returns the String
     */
    @JsonGetter("default_branch")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDefaultBranch() {
        return defaultBranch;
    }

    /**
     * Setter for DefaultBranch.
     * Updates the default branch for this repository.
     * @param defaultBranch Value for String
     */
    @JsonSetter("default_branch")
    public void setDefaultBranch(String defaultBranch) {
        this.defaultBranch = defaultBranch;
    }

    /**
     * Getter for AllowSquashMerge.
     * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_squash_merge")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowSquashMerge() {
        return allowSquashMerge;
    }

    /**
     * Setter for AllowSquashMerge.
     * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
     * @param allowSquashMerge Value for Boolean
     */
    @JsonSetter("allow_squash_merge")
    public void setAllowSquashMerge(Boolean allowSquashMerge) {
        this.allowSquashMerge = allowSquashMerge;
    }

    /**
     * Getter for AllowMergeCommit.
     * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent
     * merging pull requests with merge commits.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_merge_commit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowMergeCommit() {
        return allowMergeCommit;
    }

    /**
     * Setter for AllowMergeCommit.
     * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent
     * merging pull requests with merge commits.
     * @param allowMergeCommit Value for Boolean
     */
    @JsonSetter("allow_merge_commit")
    public void setAllowMergeCommit(Boolean allowMergeCommit) {
        this.allowMergeCommit = allowMergeCommit;
    }

    /**
     * Getter for AllowRebaseMerge.
     * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_rebase_merge")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowRebaseMerge() {
        return allowRebaseMerge;
    }

    /**
     * Setter for AllowRebaseMerge.
     * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
     * @param allowRebaseMerge Value for Boolean
     */
    @JsonSetter("allow_rebase_merge")
    public void setAllowRebaseMerge(Boolean allowRebaseMerge) {
        this.allowRebaseMerge = allowRebaseMerge;
    }

    /**
     * Getter for AllowAutoMerge.
     * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_auto_merge")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowAutoMerge() {
        return allowAutoMerge;
    }

    /**
     * Setter for AllowAutoMerge.
     * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
     * @param allowAutoMerge Value for Boolean
     */
    @JsonSetter("allow_auto_merge")
    public void setAllowAutoMerge(Boolean allowAutoMerge) {
        this.allowAutoMerge = allowAutoMerge;
    }

    /**
     * Getter for DeleteBranchOnMerge.
     * Either `true` to allow automatically deleting head branches when pull requests are merged, or
     * `false` to prevent automatic deletion.
     * @return Returns the Boolean
     */
    @JsonGetter("delete_branch_on_merge")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDeleteBranchOnMerge() {
        return deleteBranchOnMerge;
    }

    /**
     * Setter for DeleteBranchOnMerge.
     * Either `true` to allow automatically deleting head branches when pull requests are merged, or
     * `false` to prevent automatic deletion.
     * @param deleteBranchOnMerge Value for Boolean
     */
    @JsonSetter("delete_branch_on_merge")
    public void setDeleteBranchOnMerge(Boolean deleteBranchOnMerge) {
        this.deleteBranchOnMerge = deleteBranchOnMerge;
    }

    /**
     * Getter for AllowUpdateBranch.
     * Either `true` to always allow a pull request head branch that is behind its base branch to be
     * updated even if it is not required to be up to date before merging, or false otherwise.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_update_branch")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowUpdateBranch() {
        return allowUpdateBranch;
    }

    /**
     * Setter for AllowUpdateBranch.
     * Either `true` to always allow a pull request head branch that is behind its base branch to be
     * updated even if it is not required to be up to date before merging, or false otherwise.
     * @param allowUpdateBranch Value for Boolean
     */
    @JsonSetter("allow_update_branch")
    public void setAllowUpdateBranch(Boolean allowUpdateBranch) {
        this.allowUpdateBranch = allowUpdateBranch;
    }

    /**
     * Getter for UseSquashPrTitleAsDefault.
     * Either `true` to allow squash-merge commits to use pull request title, or `false` to use
     * commit message. **This property has been deprecated. Please use `squash_merge_commit_title`
     * instead.
     * @return Returns the Boolean
     */
    @JsonGetter("use_squash_pr_title_as_default")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getUseSquashPrTitleAsDefault() {
        return useSquashPrTitleAsDefault;
    }

    /**
     * Setter for UseSquashPrTitleAsDefault.
     * Either `true` to allow squash-merge commits to use pull request title, or `false` to use
     * commit message. **This property has been deprecated. Please use `squash_merge_commit_title`
     * instead.
     * @param useSquashPrTitleAsDefault Value for Boolean
     */
    @JsonSetter("use_squash_pr_title_as_default")
    public void setUseSquashPrTitleAsDefault(Boolean useSquashPrTitleAsDefault) {
        this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
    }

    /**
     * Getter for SquashMergeCommitTitle.
     * @return Returns the SquashMergeCommitTitleEnum
     */
    @JsonGetter("squash_merge_commit_title")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SquashMergeCommitTitleEnum getSquashMergeCommitTitle() {
        return squashMergeCommitTitle;
    }

    /**
     * Setter for SquashMergeCommitTitle.
     * @param squashMergeCommitTitle Value for SquashMergeCommitTitleEnum
     */
    @JsonSetter("squash_merge_commit_title")
    public void setSquashMergeCommitTitle(SquashMergeCommitTitleEnum squashMergeCommitTitle) {
        this.squashMergeCommitTitle = squashMergeCommitTitle;
    }

    /**
     * Getter for SquashMergeCommitMessage.
     * @return Returns the SquashMergeCommitMessageEnum
     */
    @JsonGetter("squash_merge_commit_message")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SquashMergeCommitMessageEnum getSquashMergeCommitMessage() {
        return squashMergeCommitMessage;
    }

    /**
     * Setter for SquashMergeCommitMessage.
     * @param squashMergeCommitMessage Value for SquashMergeCommitMessageEnum
     */
    @JsonSetter("squash_merge_commit_message")
    public void setSquashMergeCommitMessage(SquashMergeCommitMessageEnum squashMergeCommitMessage) {
        this.squashMergeCommitMessage = squashMergeCommitMessage;
    }

    /**
     * Getter for MergeCommitTitle.
     * @return Returns the MergeCommitTitleEnum
     */
    @JsonGetter("merge_commit_title")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MergeCommitTitleEnum getMergeCommitTitle() {
        return mergeCommitTitle;
    }

    /**
     * Setter for MergeCommitTitle.
     * @param mergeCommitTitle Value for MergeCommitTitleEnum
     */
    @JsonSetter("merge_commit_title")
    public void setMergeCommitTitle(MergeCommitTitleEnum mergeCommitTitle) {
        this.mergeCommitTitle = mergeCommitTitle;
    }

    /**
     * Getter for MergeCommitMessage.
     * @return Returns the MergeCommitMessageEnum
     */
    @JsonGetter("merge_commit_message")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MergeCommitMessageEnum getMergeCommitMessage() {
        return mergeCommitMessage;
    }

    /**
     * Setter for MergeCommitMessage.
     * @param mergeCommitMessage Value for MergeCommitMessageEnum
     */
    @JsonSetter("merge_commit_message")
    public void setMergeCommitMessage(MergeCommitMessageEnum mergeCommitMessage) {
        this.mergeCommitMessage = mergeCommitMessage;
    }

    /**
     * Getter for Archived.
     * Whether to archive this repository. `false` will unarchive a previously archived repository.
     * @return Returns the Boolean
     */
    @JsonGetter("archived")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getArchived() {
        return archived;
    }

    /**
     * Setter for Archived.
     * Whether to archive this repository. `false` will unarchive a previously archived repository.
     * @param archived Value for Boolean
     */
    @JsonSetter("archived")
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Getter for AllowForking.
     * Either `true` to allow private forks, or `false` to prevent private forks.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_forking")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowForking() {
        return allowForking;
    }

    /**
     * Setter for AllowForking.
     * Either `true` to allow private forks, or `false` to prevent private forks.
     * @param allowForking Value for Boolean
     */
    @JsonSetter("allow_forking")
    public void setAllowForking(Boolean allowForking) {
        this.allowForking = allowForking;
    }

    /**
     * Getter for WebCommitSignoffRequired.
     * Either `true` to require contributors to sign off on web-based commits, or `false` to not
     * require contributors to sign off on web-based commits.
     * @return Returns the Boolean
     */
    @JsonGetter("web_commit_signoff_required")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getWebCommitSignoffRequired() {
        return webCommitSignoffRequired;
    }

    /**
     * Setter for WebCommitSignoffRequired.
     * Either `true` to require contributors to sign off on web-based commits, or `false` to not
     * require contributors to sign off on web-based commits.
     * @param webCommitSignoffRequired Value for Boolean
     */
    @JsonSetter("web_commit_signoff_required")
    public void setWebCommitSignoffRequired(Boolean webCommitSignoffRequired) {
        this.webCommitSignoffRequired = webCommitSignoffRequired;
    }

    /**
     * Converts this ReposRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposRequest [" + "name=" + name + ", description=" + description + ", homepage="
                + homepage + ", mPrivate=" + mPrivate + ", visibility=" + visibility
                + ", securityAndAnalysis=" + securityAndAnalysis + ", hasIssues=" + hasIssues
                + ", hasProjects=" + hasProjects + ", hasWiki=" + hasWiki + ", isTemplate="
                + isTemplate + ", defaultBranch=" + defaultBranch + ", allowSquashMerge="
                + allowSquashMerge + ", allowMergeCommit=" + allowMergeCommit
                + ", allowRebaseMerge=" + allowRebaseMerge + ", allowAutoMerge=" + allowAutoMerge
                + ", deleteBranchOnMerge=" + deleteBranchOnMerge + ", allowUpdateBranch="
                + allowUpdateBranch + ", useSquashPrTitleAsDefault=" + useSquashPrTitleAsDefault
                + ", squashMergeCommitTitle=" + squashMergeCommitTitle
                + ", squashMergeCommitMessage=" + squashMergeCommitMessage + ", mergeCommitTitle="
                + mergeCommitTitle + ", mergeCommitMessage=" + mergeCommitMessage + ", archived="
                + archived + ", allowForking=" + allowForking + ", webCommitSignoffRequired="
                + webCommitSignoffRequired + "]";
    }

    /**
     * Builds a new {@link ReposRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .name(getName())
                .description(getDescription())
                .homepage(getHomepage())
                .mPrivate(getPrivate())
                .visibility(getVisibility())
                .securityAndAnalysis(getSecurityAndAnalysis())
                .hasIssues(getHasIssues())
                .hasProjects(getHasProjects())
                .hasWiki(getHasWiki())
                .isTemplate(getIsTemplate())
                .defaultBranch(getDefaultBranch())
                .allowSquashMerge(getAllowSquashMerge())
                .allowMergeCommit(getAllowMergeCommit())
                .allowRebaseMerge(getAllowRebaseMerge())
                .allowAutoMerge(getAllowAutoMerge())
                .deleteBranchOnMerge(getDeleteBranchOnMerge())
                .allowUpdateBranch(getAllowUpdateBranch())
                .useSquashPrTitleAsDefault(getUseSquashPrTitleAsDefault())
                .squashMergeCommitTitle(getSquashMergeCommitTitle())
                .squashMergeCommitMessage(getSquashMergeCommitMessage())
                .mergeCommitTitle(getMergeCommitTitle())
                .mergeCommitMessage(getMergeCommitMessage())
                .archived(getArchived())
                .allowForking(getAllowForking())
                .webCommitSignoffRequired(getWebCommitSignoffRequired());
        return builder;
    }

    /**
     * Class to build instances of {@link ReposRequest}.
     */
    public static class Builder {
        private String name;
        private String description;
        private String homepage;
        private Boolean mPrivate = false;
        private Visibility88Enum visibility;
        private Object securityAndAnalysis;
        private Boolean hasIssues = true;
        private Boolean hasProjects = true;
        private Boolean hasWiki = true;
        private Boolean isTemplate = false;
        private String defaultBranch;
        private Boolean allowSquashMerge = true;
        private Boolean allowMergeCommit = true;
        private Boolean allowRebaseMerge = true;
        private Boolean allowAutoMerge = false;
        private Boolean deleteBranchOnMerge = false;
        private Boolean allowUpdateBranch = false;
        private Boolean useSquashPrTitleAsDefault = false;
        private SquashMergeCommitTitleEnum squashMergeCommitTitle;
        private SquashMergeCommitMessageEnum squashMergeCommitMessage;
        private MergeCommitTitleEnum mergeCommitTitle;
        private MergeCommitMessageEnum mergeCommitMessage;
        private Boolean archived = false;
        private Boolean allowForking = false;
        private Boolean webCommitSignoffRequired = false;



        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for homepage.
         * @param  homepage  String value for homepage.
         * @return Builder
         */
        public Builder homepage(String homepage) {
            this.homepage = homepage;
            return this;
        }

        /**
         * Setter for mPrivate.
         * @param  mPrivate  Boolean value for mPrivate.
         * @return Builder
         */
        public Builder mPrivate(Boolean mPrivate) {
            this.mPrivate = mPrivate;
            return this;
        }

        /**
         * Setter for visibility.
         * @param  visibility  Visibility88Enum value for visibility.
         * @return Builder
         */
        public Builder visibility(Visibility88Enum visibility) {
            this.visibility = visibility;
            return this;
        }

        /**
         * Setter for securityAndAnalysis.
         * @param  securityAndAnalysis  Object value for securityAndAnalysis.
         * @return Builder
         */
        public Builder securityAndAnalysis(Object securityAndAnalysis) {
            this.securityAndAnalysis = securityAndAnalysis;
            return this;
        }

        /**
         * Setter for hasIssues.
         * @param  hasIssues  Boolean value for hasIssues.
         * @return Builder
         */
        public Builder hasIssues(Boolean hasIssues) {
            this.hasIssues = hasIssues;
            return this;
        }

        /**
         * Setter for hasProjects.
         * @param  hasProjects  Boolean value for hasProjects.
         * @return Builder
         */
        public Builder hasProjects(Boolean hasProjects) {
            this.hasProjects = hasProjects;
            return this;
        }

        /**
         * Setter for hasWiki.
         * @param  hasWiki  Boolean value for hasWiki.
         * @return Builder
         */
        public Builder hasWiki(Boolean hasWiki) {
            this.hasWiki = hasWiki;
            return this;
        }

        /**
         * Setter for isTemplate.
         * @param  isTemplate  Boolean value for isTemplate.
         * @return Builder
         */
        public Builder isTemplate(Boolean isTemplate) {
            this.isTemplate = isTemplate;
            return this;
        }

        /**
         * Setter for defaultBranch.
         * @param  defaultBranch  String value for defaultBranch.
         * @return Builder
         */
        public Builder defaultBranch(String defaultBranch) {
            this.defaultBranch = defaultBranch;
            return this;
        }

        /**
         * Setter for allowSquashMerge.
         * @param  allowSquashMerge  Boolean value for allowSquashMerge.
         * @return Builder
         */
        public Builder allowSquashMerge(Boolean allowSquashMerge) {
            this.allowSquashMerge = allowSquashMerge;
            return this;
        }

        /**
         * Setter for allowMergeCommit.
         * @param  allowMergeCommit  Boolean value for allowMergeCommit.
         * @return Builder
         */
        public Builder allowMergeCommit(Boolean allowMergeCommit) {
            this.allowMergeCommit = allowMergeCommit;
            return this;
        }

        /**
         * Setter for allowRebaseMerge.
         * @param  allowRebaseMerge  Boolean value for allowRebaseMerge.
         * @return Builder
         */
        public Builder allowRebaseMerge(Boolean allowRebaseMerge) {
            this.allowRebaseMerge = allowRebaseMerge;
            return this;
        }

        /**
         * Setter for allowAutoMerge.
         * @param  allowAutoMerge  Boolean value for allowAutoMerge.
         * @return Builder
         */
        public Builder allowAutoMerge(Boolean allowAutoMerge) {
            this.allowAutoMerge = allowAutoMerge;
            return this;
        }

        /**
         * Setter for deleteBranchOnMerge.
         * @param  deleteBranchOnMerge  Boolean value for deleteBranchOnMerge.
         * @return Builder
         */
        public Builder deleteBranchOnMerge(Boolean deleteBranchOnMerge) {
            this.deleteBranchOnMerge = deleteBranchOnMerge;
            return this;
        }

        /**
         * Setter for allowUpdateBranch.
         * @param  allowUpdateBranch  Boolean value for allowUpdateBranch.
         * @return Builder
         */
        public Builder allowUpdateBranch(Boolean allowUpdateBranch) {
            this.allowUpdateBranch = allowUpdateBranch;
            return this;
        }

        /**
         * Setter for useSquashPrTitleAsDefault.
         * @param  useSquashPrTitleAsDefault  Boolean value for useSquashPrTitleAsDefault.
         * @return Builder
         */
        public Builder useSquashPrTitleAsDefault(Boolean useSquashPrTitleAsDefault) {
            this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
            return this;
        }

        /**
         * Setter for squashMergeCommitTitle.
         * @param  squashMergeCommitTitle  SquashMergeCommitTitleEnum value for
         *         squashMergeCommitTitle.
         * @return Builder
         */
        public Builder squashMergeCommitTitle(SquashMergeCommitTitleEnum squashMergeCommitTitle) {
            this.squashMergeCommitTitle = squashMergeCommitTitle;
            return this;
        }

        /**
         * Setter for squashMergeCommitMessage.
         * @param  squashMergeCommitMessage  SquashMergeCommitMessageEnum value for
         *         squashMergeCommitMessage.
         * @return Builder
         */
        public Builder squashMergeCommitMessage(
                SquashMergeCommitMessageEnum squashMergeCommitMessage) {
            this.squashMergeCommitMessage = squashMergeCommitMessage;
            return this;
        }

        /**
         * Setter for mergeCommitTitle.
         * @param  mergeCommitTitle  MergeCommitTitleEnum value for mergeCommitTitle.
         * @return Builder
         */
        public Builder mergeCommitTitle(MergeCommitTitleEnum mergeCommitTitle) {
            this.mergeCommitTitle = mergeCommitTitle;
            return this;
        }

        /**
         * Setter for mergeCommitMessage.
         * @param  mergeCommitMessage  MergeCommitMessageEnum value for mergeCommitMessage.
         * @return Builder
         */
        public Builder mergeCommitMessage(MergeCommitMessageEnum mergeCommitMessage) {
            this.mergeCommitMessage = mergeCommitMessage;
            return this;
        }

        /**
         * Setter for archived.
         * @param  archived  Boolean value for archived.
         * @return Builder
         */
        public Builder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }

        /**
         * Setter for allowForking.
         * @param  allowForking  Boolean value for allowForking.
         * @return Builder
         */
        public Builder allowForking(Boolean allowForking) {
            this.allowForking = allowForking;
            return this;
        }

        /**
         * Setter for webCommitSignoffRequired.
         * @param  webCommitSignoffRequired  Boolean value for webCommitSignoffRequired.
         * @return Builder
         */
        public Builder webCommitSignoffRequired(Boolean webCommitSignoffRequired) {
            this.webCommitSignoffRequired = webCommitSignoffRequired;
            return this;
        }

        /**
         * Builds a new {@link ReposRequest} object using the set fields.
         * @return {@link ReposRequest}
         */
        public ReposRequest build() {
            return new ReposRequest(name, description, homepage, mPrivate, visibility,
                    securityAndAnalysis, hasIssues, hasProjects, hasWiki, isTemplate, defaultBranch,
                    allowSquashMerge, allowMergeCommit, allowRebaseMerge, allowAutoMerge,
                    deleteBranchOnMerge, allowUpdateBranch, useSquashPrTitleAsDefault,
                    squashMergeCommitTitle, squashMergeCommitMessage, mergeCommitTitle,
                    mergeCommitMessage, archived, allowForking, webCommitSignoffRequired);
        }
    }
}

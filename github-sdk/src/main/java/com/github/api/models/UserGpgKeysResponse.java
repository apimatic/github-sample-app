/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for UserGpgKeysResponse type.
 */
public class UserGpgKeysResponse {
    private int id;
    private OptionalNullable<String> name;
    private Integer primaryKeyId;
    private String keyId;
    private String publicKey;
    private List<Email1> emails;
    private List<Subkey> subkeys;
    private boolean canSign;
    private boolean canEncryptComms;
    private boolean canEncryptStorage;
    private boolean canCertify;
    private LocalDateTime createdAt;
    private LocalDateTime expiresAt;
    private boolean revoked;
    private String rawKey;

    /**
     * Default constructor.
     */
    public UserGpgKeysResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  primaryKeyId  Integer value for primaryKeyId.
     * @param  keyId  String value for keyId.
     * @param  publicKey  String value for publicKey.
     * @param  emails  List of Email1 value for emails.
     * @param  subkeys  List of Subkey value for subkeys.
     * @param  canSign  boolean value for canSign.
     * @param  canEncryptComms  boolean value for canEncryptComms.
     * @param  canEncryptStorage  boolean value for canEncryptStorage.
     * @param  canCertify  boolean value for canCertify.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  expiresAt  LocalDateTime value for expiresAt.
     * @param  revoked  boolean value for revoked.
     * @param  rawKey  String value for rawKey.
     * @param  name  String value for name.
     */
    public UserGpgKeysResponse(
            int id,
            Integer primaryKeyId,
            String keyId,
            String publicKey,
            List<Email1> emails,
            List<Subkey> subkeys,
            boolean canSign,
            boolean canEncryptComms,
            boolean canEncryptStorage,
            boolean canCertify,
            LocalDateTime createdAt,
            LocalDateTime expiresAt,
            boolean revoked,
            String rawKey,
            String name) {
        this.id = id;
        this.name = OptionalNullable.of(name);
        this.primaryKeyId = primaryKeyId;
        this.keyId = keyId;
        this.publicKey = publicKey;
        this.emails = emails;
        this.subkeys = subkeys;
        this.canSign = canSign;
        this.canEncryptComms = canEncryptComms;
        this.canEncryptStorage = canEncryptStorage;
        this.canCertify = canCertify;
        this.createdAt = createdAt;
        this.expiresAt = expiresAt;
        this.revoked = revoked;
        this.rawKey = rawKey;
    }

    /**
     * Internal initialization constructor.
     */
    protected UserGpgKeysResponse(int id, Integer primaryKeyId, String keyId, String publicKey,
            List<Email1> emails, List<Subkey> subkeys, boolean canSign, boolean canEncryptComms,
            boolean canEncryptStorage, boolean canCertify, LocalDateTime createdAt,
            LocalDateTime expiresAt, boolean revoked, String rawKey,
            OptionalNullable<String> name) {
        this.id = id;
        this.name = name;
        this.primaryKeyId = primaryKeyId;
        this.keyId = keyId;
        this.publicKey = publicKey;
        this.emails = emails;
        this.subkeys = subkeys;
        this.canSign = canSign;
        this.canEncryptComms = canEncryptComms;
        this.canEncryptStorage = canEncryptStorage;
        this.canCertify = canCertify;
        this.createdAt = createdAt;
        this.expiresAt = expiresAt;
        this.revoked = revoked;
        this.rawKey = rawKey;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Internal Getter for Name.
     * @return Returns the Internal String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetName() {
        return this.name;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    public String getName() {
        return OptionalNullable.getFrom(name);
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = OptionalNullable.of(name);
    }

    /**
     * UnSetter for Name.
     */
    public void unsetName() {
        name = null;
    }

    /**
     * Getter for PrimaryKeyId.
     * @return Returns the Integer
     */
    @JsonGetter("primary_key_id")
    public Integer getPrimaryKeyId() {
        return primaryKeyId;
    }

    /**
     * Setter for PrimaryKeyId.
     * @param primaryKeyId Value for Integer
     */
    @JsonSetter("primary_key_id")
    public void setPrimaryKeyId(Integer primaryKeyId) {
        this.primaryKeyId = primaryKeyId;
    }

    /**
     * Getter for KeyId.
     * @return Returns the String
     */
    @JsonGetter("key_id")
    public String getKeyId() {
        return keyId;
    }

    /**
     * Setter for KeyId.
     * @param keyId Value for String
     */
    @JsonSetter("key_id")
    public void setKeyId(String keyId) {
        this.keyId = keyId;
    }

    /**
     * Getter for PublicKey.
     * @return Returns the String
     */
    @JsonGetter("public_key")
    public String getPublicKey() {
        return publicKey;
    }

    /**
     * Setter for PublicKey.
     * @param publicKey Value for String
     */
    @JsonSetter("public_key")
    public void setPublicKey(String publicKey) {
        this.publicKey = publicKey;
    }

    /**
     * Getter for Emails.
     * @return Returns the List of Email1
     */
    @JsonGetter("emails")
    public List<Email1> getEmails() {
        return emails;
    }

    /**
     * Setter for Emails.
     * @param emails Value for List of Email1
     */
    @JsonSetter("emails")
    public void setEmails(List<Email1> emails) {
        this.emails = emails;
    }

    /**
     * Getter for Subkeys.
     * @return Returns the List of Subkey
     */
    @JsonGetter("subkeys")
    public List<Subkey> getSubkeys() {
        return subkeys;
    }

    /**
     * Setter for Subkeys.
     * @param subkeys Value for List of Subkey
     */
    @JsonSetter("subkeys")
    public void setSubkeys(List<Subkey> subkeys) {
        this.subkeys = subkeys;
    }

    /**
     * Getter for CanSign.
     * @return Returns the boolean
     */
    @JsonGetter("can_sign")
    public boolean getCanSign() {
        return canSign;
    }

    /**
     * Setter for CanSign.
     * @param canSign Value for boolean
     */
    @JsonSetter("can_sign")
    public void setCanSign(boolean canSign) {
        this.canSign = canSign;
    }

    /**
     * Getter for CanEncryptComms.
     * @return Returns the boolean
     */
    @JsonGetter("can_encrypt_comms")
    public boolean getCanEncryptComms() {
        return canEncryptComms;
    }

    /**
     * Setter for CanEncryptComms.
     * @param canEncryptComms Value for boolean
     */
    @JsonSetter("can_encrypt_comms")
    public void setCanEncryptComms(boolean canEncryptComms) {
        this.canEncryptComms = canEncryptComms;
    }

    /**
     * Getter for CanEncryptStorage.
     * @return Returns the boolean
     */
    @JsonGetter("can_encrypt_storage")
    public boolean getCanEncryptStorage() {
        return canEncryptStorage;
    }

    /**
     * Setter for CanEncryptStorage.
     * @param canEncryptStorage Value for boolean
     */
    @JsonSetter("can_encrypt_storage")
    public void setCanEncryptStorage(boolean canEncryptStorage) {
        this.canEncryptStorage = canEncryptStorage;
    }

    /**
     * Getter for CanCertify.
     * @return Returns the boolean
     */
    @JsonGetter("can_certify")
    public boolean getCanCertify() {
        return canCertify;
    }

    /**
     * Setter for CanCertify.
     * @param canCertify Value for boolean
     */
    @JsonSetter("can_certify")
    public void setCanCertify(boolean canCertify) {
        this.canCertify = canCertify;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for ExpiresAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("expires_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getExpiresAt() {
        return expiresAt;
    }

    /**
     * Setter for ExpiresAt.
     * @param expiresAt Value for LocalDateTime
     */
    @JsonSetter("expires_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setExpiresAt(LocalDateTime expiresAt) {
        this.expiresAt = expiresAt;
    }

    /**
     * Getter for Revoked.
     * @return Returns the boolean
     */
    @JsonGetter("revoked")
    public boolean getRevoked() {
        return revoked;
    }

    /**
     * Setter for Revoked.
     * @param revoked Value for boolean
     */
    @JsonSetter("revoked")
    public void setRevoked(boolean revoked) {
        this.revoked = revoked;
    }

    /**
     * Getter for RawKey.
     * @return Returns the String
     */
    @JsonGetter("raw_key")
    public String getRawKey() {
        return rawKey;
    }

    /**
     * Setter for RawKey.
     * @param rawKey Value for String
     */
    @JsonSetter("raw_key")
    public void setRawKey(String rawKey) {
        this.rawKey = rawKey;
    }

    /**
     * Converts this UserGpgKeysResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "UserGpgKeysResponse [" + "id=" + id + ", primaryKeyId=" + primaryKeyId + ", keyId="
                + keyId + ", publicKey=" + publicKey + ", emails=" + emails + ", subkeys=" + subkeys
                + ", canSign=" + canSign + ", canEncryptComms=" + canEncryptComms
                + ", canEncryptStorage=" + canEncryptStorage + ", canCertify=" + canCertify
                + ", createdAt=" + createdAt + ", expiresAt=" + expiresAt + ", revoked=" + revoked
                + ", rawKey=" + rawKey + ", name=" + name + "]";
    }

    /**
     * Builds a new {@link UserGpgKeysResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link UserGpgKeysResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, primaryKeyId, keyId, publicKey, emails, subkeys, canSign,
                canEncryptComms, canEncryptStorage, canCertify, createdAt, expiresAt, revoked,
                rawKey);
        builder.name = internalGetName();
        return builder;
    }

    /**
     * Class to build instances of {@link UserGpgKeysResponse}.
     */
    public static class Builder {
        private int id;
        private Integer primaryKeyId;
        private String keyId;
        private String publicKey;
        private List<Email1> emails;
        private List<Subkey> subkeys;
        private boolean canSign;
        private boolean canEncryptComms;
        private boolean canEncryptStorage;
        private boolean canCertify;
        private LocalDateTime createdAt;
        private LocalDateTime expiresAt;
        private boolean revoked;
        private String rawKey;
        private OptionalNullable<String> name;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  primaryKeyId  Integer value for primaryKeyId.
         * @param  keyId  String value for keyId.
         * @param  publicKey  String value for publicKey.
         * @param  emails  List of Email1 value for emails.
         * @param  subkeys  List of Subkey value for subkeys.
         * @param  canSign  boolean value for canSign.
         * @param  canEncryptComms  boolean value for canEncryptComms.
         * @param  canEncryptStorage  boolean value for canEncryptStorage.
         * @param  canCertify  boolean value for canCertify.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  expiresAt  LocalDateTime value for expiresAt.
         * @param  revoked  boolean value for revoked.
         * @param  rawKey  String value for rawKey.
         */
        public Builder(int id, Integer primaryKeyId, String keyId, String publicKey,
                List<Email1> emails, List<Subkey> subkeys, boolean canSign, boolean canEncryptComms,
                boolean canEncryptStorage, boolean canCertify, LocalDateTime createdAt,
                LocalDateTime expiresAt, boolean revoked, String rawKey) {
            this.id = id;
            this.primaryKeyId = primaryKeyId;
            this.keyId = keyId;
            this.publicKey = publicKey;
            this.emails = emails;
            this.subkeys = subkeys;
            this.canSign = canSign;
            this.canEncryptComms = canEncryptComms;
            this.canEncryptStorage = canEncryptStorage;
            this.canCertify = canCertify;
            this.createdAt = createdAt;
            this.expiresAt = expiresAt;
            this.revoked = revoked;
            this.rawKey = rawKey;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for primaryKeyId.
         * @param  primaryKeyId  Integer value for primaryKeyId.
         * @return Builder
         */
        public Builder primaryKeyId(Integer primaryKeyId) {
            this.primaryKeyId = primaryKeyId;
            return this;
        }

        /**
         * Setter for keyId.
         * @param  keyId  String value for keyId.
         * @return Builder
         */
        public Builder keyId(String keyId) {
            this.keyId = keyId;
            return this;
        }

        /**
         * Setter for publicKey.
         * @param  publicKey  String value for publicKey.
         * @return Builder
         */
        public Builder publicKey(String publicKey) {
            this.publicKey = publicKey;
            return this;
        }

        /**
         * Setter for emails.
         * @param  emails  List of Email1 value for emails.
         * @return Builder
         */
        public Builder emails(List<Email1> emails) {
            this.emails = emails;
            return this;
        }

        /**
         * Setter for subkeys.
         * @param  subkeys  List of Subkey value for subkeys.
         * @return Builder
         */
        public Builder subkeys(List<Subkey> subkeys) {
            this.subkeys = subkeys;
            return this;
        }

        /**
         * Setter for canSign.
         * @param  canSign  boolean value for canSign.
         * @return Builder
         */
        public Builder canSign(boolean canSign) {
            this.canSign = canSign;
            return this;
        }

        /**
         * Setter for canEncryptComms.
         * @param  canEncryptComms  boolean value for canEncryptComms.
         * @return Builder
         */
        public Builder canEncryptComms(boolean canEncryptComms) {
            this.canEncryptComms = canEncryptComms;
            return this;
        }

        /**
         * Setter for canEncryptStorage.
         * @param  canEncryptStorage  boolean value for canEncryptStorage.
         * @return Builder
         */
        public Builder canEncryptStorage(boolean canEncryptStorage) {
            this.canEncryptStorage = canEncryptStorage;
            return this;
        }

        /**
         * Setter for canCertify.
         * @param  canCertify  boolean value for canCertify.
         * @return Builder
         */
        public Builder canCertify(boolean canCertify) {
            this.canCertify = canCertify;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for expiresAt.
         * @param  expiresAt  LocalDateTime value for expiresAt.
         * @return Builder
         */
        public Builder expiresAt(LocalDateTime expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * Setter for revoked.
         * @param  revoked  boolean value for revoked.
         * @return Builder
         */
        public Builder revoked(boolean revoked) {
            this.revoked = revoked;
            return this;
        }

        /**
         * Setter for rawKey.
         * @param  rawKey  String value for rawKey.
         * @return Builder
         */
        public Builder rawKey(String rawKey) {
            this.rawKey = rawKey;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = OptionalNullable.of(name);
            return this;
        }

        /**
         * UnSetter for name.
         * @return Builder
         */
        public Builder unsetName() {
            name = null;
            return this;
        }

        /**
         * Builds a new {@link UserGpgKeysResponse} object using the set fields.
         * @return {@link UserGpgKeysResponse}
         */
        public UserGpgKeysResponse build() {
            return new UserGpgKeysResponse(id, primaryKeyId, keyId, publicKey, emails, subkeys,
                    canSign, canEncryptComms, canEncryptStorage, canCertify, createdAt, expiresAt,
                    revoked, rawKey, name);
        }
    }
}

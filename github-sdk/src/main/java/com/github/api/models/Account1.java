/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for Account1 type.
 */
public class Account1 {
    private String avatarUrl;
    private String createdAt;
    private OptionalNullable<Object> description;
    private String eventsUrl;
    private Integer followers;
    private String followersUrl;
    private Integer following;
    private String followingUrl;
    private String gistsUrl;
    private String gravatarId;
    private Boolean hasOrganizationProjects;
    private Boolean hasRepositoryProjects;
    private String hooksUrl;
    private String htmlUrl;
    private int id;
    private Boolean isVerified;
    private String issuesUrl;
    private String login;
    private String membersUrl;
    private String name;
    private String nodeId;
    private String organizationsUrl;
    private Integer publicGists;
    private String publicMembersUrl;
    private Integer publicRepos;
    private String receivedEventsUrl;
    private String reposUrl;
    private Boolean siteAdmin;
    private String slug;
    private String starredUrl;
    private String subscriptionsUrl;
    private String type;
    private String updatedAt;
    private String url;
    private OptionalNullable<Object> websiteUrl;

    /**
     * Default constructor.
     */
    public Account1() {
    }

    /**
     * Initialization constructor.
     * @param  avatarUrl  String value for avatarUrl.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  createdAt  String value for createdAt.
     * @param  description  Object value for description.
     * @param  eventsUrl  String value for eventsUrl.
     * @param  followers  Integer value for followers.
     * @param  followersUrl  String value for followersUrl.
     * @param  following  Integer value for following.
     * @param  followingUrl  String value for followingUrl.
     * @param  gistsUrl  String value for gistsUrl.
     * @param  gravatarId  String value for gravatarId.
     * @param  hasOrganizationProjects  Boolean value for hasOrganizationProjects.
     * @param  hasRepositoryProjects  Boolean value for hasRepositoryProjects.
     * @param  hooksUrl  String value for hooksUrl.
     * @param  isVerified  Boolean value for isVerified.
     * @param  issuesUrl  String value for issuesUrl.
     * @param  login  String value for login.
     * @param  membersUrl  String value for membersUrl.
     * @param  name  String value for name.
     * @param  organizationsUrl  String value for organizationsUrl.
     * @param  publicGists  Integer value for publicGists.
     * @param  publicMembersUrl  String value for publicMembersUrl.
     * @param  publicRepos  Integer value for publicRepos.
     * @param  receivedEventsUrl  String value for receivedEventsUrl.
     * @param  reposUrl  String value for reposUrl.
     * @param  siteAdmin  Boolean value for siteAdmin.
     * @param  slug  String value for slug.
     * @param  starredUrl  String value for starredUrl.
     * @param  subscriptionsUrl  String value for subscriptionsUrl.
     * @param  type  String value for type.
     * @param  updatedAt  String value for updatedAt.
     * @param  url  String value for url.
     * @param  websiteUrl  Object value for websiteUrl.
     */
    public Account1(
            String avatarUrl,
            String htmlUrl,
            int id,
            String nodeId,
            String createdAt,
            Object description,
            String eventsUrl,
            Integer followers,
            String followersUrl,
            Integer following,
            String followingUrl,
            String gistsUrl,
            String gravatarId,
            Boolean hasOrganizationProjects,
            Boolean hasRepositoryProjects,
            String hooksUrl,
            Boolean isVerified,
            String issuesUrl,
            String login,
            String membersUrl,
            String name,
            String organizationsUrl,
            Integer publicGists,
            String publicMembersUrl,
            Integer publicRepos,
            String receivedEventsUrl,
            String reposUrl,
            Boolean siteAdmin,
            String slug,
            String starredUrl,
            String subscriptionsUrl,
            String type,
            String updatedAt,
            String url,
            Object websiteUrl) {
        this.avatarUrl = avatarUrl;
        this.createdAt = createdAt;
        this.description = OptionalNullable.of(description);
        this.eventsUrl = eventsUrl;
        this.followers = followers;
        this.followersUrl = followersUrl;
        this.following = following;
        this.followingUrl = followingUrl;
        this.gistsUrl = gistsUrl;
        this.gravatarId = gravatarId;
        this.hasOrganizationProjects = hasOrganizationProjects;
        this.hasRepositoryProjects = hasRepositoryProjects;
        this.hooksUrl = hooksUrl;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.isVerified = isVerified;
        this.issuesUrl = issuesUrl;
        this.login = login;
        this.membersUrl = membersUrl;
        this.name = name;
        this.nodeId = nodeId;
        this.organizationsUrl = organizationsUrl;
        this.publicGists = publicGists;
        this.publicMembersUrl = publicMembersUrl;
        this.publicRepos = publicRepos;
        this.receivedEventsUrl = receivedEventsUrl;
        this.reposUrl = reposUrl;
        this.siteAdmin = siteAdmin;
        this.slug = slug;
        this.starredUrl = starredUrl;
        this.subscriptionsUrl = subscriptionsUrl;
        this.type = type;
        this.updatedAt = updatedAt;
        this.url = url;
        this.websiteUrl = OptionalNullable.of(websiteUrl);
    }

    /**
     * Internal initialization constructor.
     */
    protected Account1(String avatarUrl, String htmlUrl, int id, String nodeId, String createdAt,
            OptionalNullable<Object> description, String eventsUrl, Integer followers,
            String followersUrl, Integer following, String followingUrl, String gistsUrl,
            String gravatarId, Boolean hasOrganizationProjects, Boolean hasRepositoryProjects,
            String hooksUrl, Boolean isVerified, String issuesUrl, String login, String membersUrl,
            String name, String organizationsUrl, Integer publicGists, String publicMembersUrl,
            Integer publicRepos, String receivedEventsUrl, String reposUrl, Boolean siteAdmin,
            String slug, String starredUrl, String subscriptionsUrl, String type, String updatedAt,
            String url, OptionalNullable<Object> websiteUrl) {
        this.avatarUrl = avatarUrl;
        this.createdAt = createdAt;
        this.description = description;
        this.eventsUrl = eventsUrl;
        this.followers = followers;
        this.followersUrl = followersUrl;
        this.following = following;
        this.followingUrl = followingUrl;
        this.gistsUrl = gistsUrl;
        this.gravatarId = gravatarId;
        this.hasOrganizationProjects = hasOrganizationProjects;
        this.hasRepositoryProjects = hasRepositoryProjects;
        this.hooksUrl = hooksUrl;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.isVerified = isVerified;
        this.issuesUrl = issuesUrl;
        this.login = login;
        this.membersUrl = membersUrl;
        this.name = name;
        this.nodeId = nodeId;
        this.organizationsUrl = organizationsUrl;
        this.publicGists = publicGists;
        this.publicMembersUrl = publicMembersUrl;
        this.publicRepos = publicRepos;
        this.receivedEventsUrl = receivedEventsUrl;
        this.reposUrl = reposUrl;
        this.siteAdmin = siteAdmin;
        this.slug = slug;
        this.starredUrl = starredUrl;
        this.subscriptionsUrl = subscriptionsUrl;
        this.type = type;
        this.updatedAt = updatedAt;
        this.url = url;
        this.websiteUrl = websiteUrl;
    }

    /**
     * Getter for AvatarUrl.
     * @return Returns the String
     */
    @JsonGetter("avatar_url")
    public String getAvatarUrl() {
        return avatarUrl;
    }

    /**
     * Setter for AvatarUrl.
     * @param avatarUrl Value for String
     */
    @JsonSetter("avatar_url")
    public void setAvatarUrl(String avatarUrl) {
        this.avatarUrl = avatarUrl;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the String
     */
    @JsonGetter("created_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for String
     */
    @JsonSetter("created_at")
    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Internal Getter for Description.
     * @return Returns the Internal Object
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * @return Returns the Object
     */
    public Object getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * @param description Value for Object
     */
    @JsonSetter("description")
    public void setDescription(Object description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for EventsUrl.
     * @return Returns the String
     */
    @JsonGetter("events_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEventsUrl() {
        return eventsUrl;
    }

    /**
     * Setter for EventsUrl.
     * @param eventsUrl Value for String
     */
    @JsonSetter("events_url")
    public void setEventsUrl(String eventsUrl) {
        this.eventsUrl = eventsUrl;
    }

    /**
     * Getter for Followers.
     * @return Returns the Integer
     */
    @JsonGetter("followers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getFollowers() {
        return followers;
    }

    /**
     * Setter for Followers.
     * @param followers Value for Integer
     */
    @JsonSetter("followers")
    public void setFollowers(Integer followers) {
        this.followers = followers;
    }

    /**
     * Getter for FollowersUrl.
     * @return Returns the String
     */
    @JsonGetter("followers_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getFollowersUrl() {
        return followersUrl;
    }

    /**
     * Setter for FollowersUrl.
     * @param followersUrl Value for String
     */
    @JsonSetter("followers_url")
    public void setFollowersUrl(String followersUrl) {
        this.followersUrl = followersUrl;
    }

    /**
     * Getter for Following.
     * @return Returns the Integer
     */
    @JsonGetter("following")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getFollowing() {
        return following;
    }

    /**
     * Setter for Following.
     * @param following Value for Integer
     */
    @JsonSetter("following")
    public void setFollowing(Integer following) {
        this.following = following;
    }

    /**
     * Getter for FollowingUrl.
     * @return Returns the String
     */
    @JsonGetter("following_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getFollowingUrl() {
        return followingUrl;
    }

    /**
     * Setter for FollowingUrl.
     * @param followingUrl Value for String
     */
    @JsonSetter("following_url")
    public void setFollowingUrl(String followingUrl) {
        this.followingUrl = followingUrl;
    }

    /**
     * Getter for GistsUrl.
     * @return Returns the String
     */
    @JsonGetter("gists_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getGistsUrl() {
        return gistsUrl;
    }

    /**
     * Setter for GistsUrl.
     * @param gistsUrl Value for String
     */
    @JsonSetter("gists_url")
    public void setGistsUrl(String gistsUrl) {
        this.gistsUrl = gistsUrl;
    }

    /**
     * Getter for GravatarId.
     * @return Returns the String
     */
    @JsonGetter("gravatar_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getGravatarId() {
        return gravatarId;
    }

    /**
     * Setter for GravatarId.
     * @param gravatarId Value for String
     */
    @JsonSetter("gravatar_id")
    public void setGravatarId(String gravatarId) {
        this.gravatarId = gravatarId;
    }

    /**
     * Getter for HasOrganizationProjects.
     * @return Returns the Boolean
     */
    @JsonGetter("has_organization_projects")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasOrganizationProjects() {
        return hasOrganizationProjects;
    }

    /**
     * Setter for HasOrganizationProjects.
     * @param hasOrganizationProjects Value for Boolean
     */
    @JsonSetter("has_organization_projects")
    public void setHasOrganizationProjects(Boolean hasOrganizationProjects) {
        this.hasOrganizationProjects = hasOrganizationProjects;
    }

    /**
     * Getter for HasRepositoryProjects.
     * @return Returns the Boolean
     */
    @JsonGetter("has_repository_projects")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasRepositoryProjects() {
        return hasRepositoryProjects;
    }

    /**
     * Setter for HasRepositoryProjects.
     * @param hasRepositoryProjects Value for Boolean
     */
    @JsonSetter("has_repository_projects")
    public void setHasRepositoryProjects(Boolean hasRepositoryProjects) {
        this.hasRepositoryProjects = hasRepositoryProjects;
    }

    /**
     * Getter for HooksUrl.
     * @return Returns the String
     */
    @JsonGetter("hooks_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHooksUrl() {
        return hooksUrl;
    }

    /**
     * Setter for HooksUrl.
     * @param hooksUrl Value for String
     */
    @JsonSetter("hooks_url")
    public void setHooksUrl(String hooksUrl) {
        this.hooksUrl = hooksUrl;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for IsVerified.
     * @return Returns the Boolean
     */
    @JsonGetter("is_verified")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsVerified() {
        return isVerified;
    }

    /**
     * Setter for IsVerified.
     * @param isVerified Value for Boolean
     */
    @JsonSetter("is_verified")
    public void setIsVerified(Boolean isVerified) {
        this.isVerified = isVerified;
    }

    /**
     * Getter for IssuesUrl.
     * @return Returns the String
     */
    @JsonGetter("issues_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getIssuesUrl() {
        return issuesUrl;
    }

    /**
     * Setter for IssuesUrl.
     * @param issuesUrl Value for String
     */
    @JsonSetter("issues_url")
    public void setIssuesUrl(String issuesUrl) {
        this.issuesUrl = issuesUrl;
    }

    /**
     * Getter for Login.
     * @return Returns the String
     */
    @JsonGetter("login")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLogin() {
        return login;
    }

    /**
     * Setter for Login.
     * @param login Value for String
     */
    @JsonSetter("login")
    public void setLogin(String login) {
        this.login = login;
    }

    /**
     * Getter for MembersUrl.
     * @return Returns the String
     */
    @JsonGetter("members_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMembersUrl() {
        return membersUrl;
    }

    /**
     * Setter for MembersUrl.
     * @param membersUrl Value for String
     */
    @JsonSetter("members_url")
    public void setMembersUrl(String membersUrl) {
        this.membersUrl = membersUrl;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for OrganizationsUrl.
     * @return Returns the String
     */
    @JsonGetter("organizations_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getOrganizationsUrl() {
        return organizationsUrl;
    }

    /**
     * Setter for OrganizationsUrl.
     * @param organizationsUrl Value for String
     */
    @JsonSetter("organizations_url")
    public void setOrganizationsUrl(String organizationsUrl) {
        this.organizationsUrl = organizationsUrl;
    }

    /**
     * Getter for PublicGists.
     * @return Returns the Integer
     */
    @JsonGetter("public_gists")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPublicGists() {
        return publicGists;
    }

    /**
     * Setter for PublicGists.
     * @param publicGists Value for Integer
     */
    @JsonSetter("public_gists")
    public void setPublicGists(Integer publicGists) {
        this.publicGists = publicGists;
    }

    /**
     * Getter for PublicMembersUrl.
     * @return Returns the String
     */
    @JsonGetter("public_members_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPublicMembersUrl() {
        return publicMembersUrl;
    }

    /**
     * Setter for PublicMembersUrl.
     * @param publicMembersUrl Value for String
     */
    @JsonSetter("public_members_url")
    public void setPublicMembersUrl(String publicMembersUrl) {
        this.publicMembersUrl = publicMembersUrl;
    }

    /**
     * Getter for PublicRepos.
     * @return Returns the Integer
     */
    @JsonGetter("public_repos")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPublicRepos() {
        return publicRepos;
    }

    /**
     * Setter for PublicRepos.
     * @param publicRepos Value for Integer
     */
    @JsonSetter("public_repos")
    public void setPublicRepos(Integer publicRepos) {
        this.publicRepos = publicRepos;
    }

    /**
     * Getter for ReceivedEventsUrl.
     * @return Returns the String
     */
    @JsonGetter("received_events_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getReceivedEventsUrl() {
        return receivedEventsUrl;
    }

    /**
     * Setter for ReceivedEventsUrl.
     * @param receivedEventsUrl Value for String
     */
    @JsonSetter("received_events_url")
    public void setReceivedEventsUrl(String receivedEventsUrl) {
        this.receivedEventsUrl = receivedEventsUrl;
    }

    /**
     * Getter for ReposUrl.
     * @return Returns the String
     */
    @JsonGetter("repos_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getReposUrl() {
        return reposUrl;
    }

    /**
     * Setter for ReposUrl.
     * @param reposUrl Value for String
     */
    @JsonSetter("repos_url")
    public void setReposUrl(String reposUrl) {
        this.reposUrl = reposUrl;
    }

    /**
     * Getter for SiteAdmin.
     * @return Returns the Boolean
     */
    @JsonGetter("site_admin")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSiteAdmin() {
        return siteAdmin;
    }

    /**
     * Setter for SiteAdmin.
     * @param siteAdmin Value for Boolean
     */
    @JsonSetter("site_admin")
    public void setSiteAdmin(Boolean siteAdmin) {
        this.siteAdmin = siteAdmin;
    }

    /**
     * Getter for Slug.
     * @return Returns the String
     */
    @JsonGetter("slug")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSlug() {
        return slug;
    }

    /**
     * Setter for Slug.
     * @param slug Value for String
     */
    @JsonSetter("slug")
    public void setSlug(String slug) {
        this.slug = slug;
    }

    /**
     * Getter for StarredUrl.
     * @return Returns the String
     */
    @JsonGetter("starred_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getStarredUrl() {
        return starredUrl;
    }

    /**
     * Setter for StarredUrl.
     * @param starredUrl Value for String
     */
    @JsonSetter("starred_url")
    public void setStarredUrl(String starredUrl) {
        this.starredUrl = starredUrl;
    }

    /**
     * Getter for SubscriptionsUrl.
     * @return Returns the String
     */
    @JsonGetter("subscriptions_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSubscriptionsUrl() {
        return subscriptionsUrl;
    }

    /**
     * Setter for SubscriptionsUrl.
     * @param subscriptionsUrl Value for String
     */
    @JsonSetter("subscriptions_url")
    public void setSubscriptionsUrl(String subscriptionsUrl) {
        this.subscriptionsUrl = subscriptionsUrl;
    }

    /**
     * Getter for Type.
     * @return Returns the String
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the String
     */
    @JsonGetter("updated_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for String
     */
    @JsonSetter("updated_at")
    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Internal Getter for WebsiteUrl.
     * @return Returns the Internal Object
     */
    @JsonGetter("website_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetWebsiteUrl() {
        return this.websiteUrl;
    }

    /**
     * Getter for WebsiteUrl.
     * @return Returns the Object
     */
    public Object getWebsiteUrl() {
        return OptionalNullable.getFrom(websiteUrl);
    }

    /**
     * Setter for WebsiteUrl.
     * @param websiteUrl Value for Object
     */
    @JsonSetter("website_url")
    public void setWebsiteUrl(Object websiteUrl) {
        this.websiteUrl = OptionalNullable.of(websiteUrl);
    }

    /**
     * UnSetter for WebsiteUrl.
     */
    public void unsetWebsiteUrl() {
        websiteUrl = null;
    }

    /**
     * Converts this Account1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Account1 [" + "avatarUrl=" + avatarUrl + ", htmlUrl=" + htmlUrl + ", id=" + id
                + ", nodeId=" + nodeId + ", createdAt=" + createdAt + ", description=" + description
                + ", eventsUrl=" + eventsUrl + ", followers=" + followers + ", followersUrl="
                + followersUrl + ", following=" + following + ", followingUrl=" + followingUrl
                + ", gistsUrl=" + gistsUrl + ", gravatarId=" + gravatarId
                + ", hasOrganizationProjects=" + hasOrganizationProjects
                + ", hasRepositoryProjects=" + hasRepositoryProjects + ", hooksUrl=" + hooksUrl
                + ", isVerified=" + isVerified + ", issuesUrl=" + issuesUrl + ", login=" + login
                + ", membersUrl=" + membersUrl + ", name=" + name + ", organizationsUrl="
                + organizationsUrl + ", publicGists=" + publicGists + ", publicMembersUrl="
                + publicMembersUrl + ", publicRepos=" + publicRepos + ", receivedEventsUrl="
                + receivedEventsUrl + ", reposUrl=" + reposUrl + ", siteAdmin=" + siteAdmin
                + ", slug=" + slug + ", starredUrl=" + starredUrl + ", subscriptionsUrl="
                + subscriptionsUrl + ", type=" + type + ", updatedAt=" + updatedAt + ", url=" + url
                + ", websiteUrl=" + websiteUrl + "]";
    }

    /**
     * Builds a new {@link Account1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Account1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(avatarUrl, htmlUrl, id, nodeId)
                .createdAt(getCreatedAt())
                .eventsUrl(getEventsUrl())
                .followers(getFollowers())
                .followersUrl(getFollowersUrl())
                .following(getFollowing())
                .followingUrl(getFollowingUrl())
                .gistsUrl(getGistsUrl())
                .gravatarId(getGravatarId())
                .hasOrganizationProjects(getHasOrganizationProjects())
                .hasRepositoryProjects(getHasRepositoryProjects())
                .hooksUrl(getHooksUrl())
                .isVerified(getIsVerified())
                .issuesUrl(getIssuesUrl())
                .login(getLogin())
                .membersUrl(getMembersUrl())
                .name(getName())
                .organizationsUrl(getOrganizationsUrl())
                .publicGists(getPublicGists())
                .publicMembersUrl(getPublicMembersUrl())
                .publicRepos(getPublicRepos())
                .receivedEventsUrl(getReceivedEventsUrl())
                .reposUrl(getReposUrl())
                .siteAdmin(getSiteAdmin())
                .slug(getSlug())
                .starredUrl(getStarredUrl())
                .subscriptionsUrl(getSubscriptionsUrl())
                .type(getType())
                .updatedAt(getUpdatedAt())
                .url(getUrl());
        builder.description = internalGetDescription();
        builder.websiteUrl = internalGetWebsiteUrl();
        return builder;
    }

    /**
     * Class to build instances of {@link Account1}.
     */
    public static class Builder {
        private String avatarUrl;
        private String htmlUrl;
        private int id;
        private String nodeId;
        private String createdAt;
        private OptionalNullable<Object> description;
        private String eventsUrl;
        private Integer followers;
        private String followersUrl;
        private Integer following;
        private String followingUrl;
        private String gistsUrl;
        private String gravatarId;
        private Boolean hasOrganizationProjects;
        private Boolean hasRepositoryProjects;
        private String hooksUrl;
        private Boolean isVerified;
        private String issuesUrl;
        private String login;
        private String membersUrl;
        private String name;
        private String organizationsUrl;
        private Integer publicGists;
        private String publicMembersUrl;
        private Integer publicRepos;
        private String receivedEventsUrl;
        private String reposUrl;
        private Boolean siteAdmin;
        private String slug;
        private String starredUrl;
        private String subscriptionsUrl;
        private String type;
        private String updatedAt;
        private String url;
        private OptionalNullable<Object> websiteUrl;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  avatarUrl  String value for avatarUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         */
        public Builder(String avatarUrl, String htmlUrl, int id, String nodeId) {
            this.avatarUrl = avatarUrl;
            this.htmlUrl = htmlUrl;
            this.id = id;
            this.nodeId = nodeId;
        }

        /**
         * Setter for avatarUrl.
         * @param  avatarUrl  String value for avatarUrl.
         * @return Builder
         */
        public Builder avatarUrl(String avatarUrl) {
            this.avatarUrl = avatarUrl;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  String value for createdAt.
         * @return Builder
         */
        public Builder createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  Object value for description.
         * @return Builder
         */
        public Builder description(Object description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for eventsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @return Builder
         */
        public Builder eventsUrl(String eventsUrl) {
            this.eventsUrl = eventsUrl;
            return this;
        }

        /**
         * Setter for followers.
         * @param  followers  Integer value for followers.
         * @return Builder
         */
        public Builder followers(Integer followers) {
            this.followers = followers;
            return this;
        }

        /**
         * Setter for followersUrl.
         * @param  followersUrl  String value for followersUrl.
         * @return Builder
         */
        public Builder followersUrl(String followersUrl) {
            this.followersUrl = followersUrl;
            return this;
        }

        /**
         * Setter for following.
         * @param  following  Integer value for following.
         * @return Builder
         */
        public Builder following(Integer following) {
            this.following = following;
            return this;
        }

        /**
         * Setter for followingUrl.
         * @param  followingUrl  String value for followingUrl.
         * @return Builder
         */
        public Builder followingUrl(String followingUrl) {
            this.followingUrl = followingUrl;
            return this;
        }

        /**
         * Setter for gistsUrl.
         * @param  gistsUrl  String value for gistsUrl.
         * @return Builder
         */
        public Builder gistsUrl(String gistsUrl) {
            this.gistsUrl = gistsUrl;
            return this;
        }

        /**
         * Setter for gravatarId.
         * @param  gravatarId  String value for gravatarId.
         * @return Builder
         */
        public Builder gravatarId(String gravatarId) {
            this.gravatarId = gravatarId;
            return this;
        }

        /**
         * Setter for hasOrganizationProjects.
         * @param  hasOrganizationProjects  Boolean value for hasOrganizationProjects.
         * @return Builder
         */
        public Builder hasOrganizationProjects(Boolean hasOrganizationProjects) {
            this.hasOrganizationProjects = hasOrganizationProjects;
            return this;
        }

        /**
         * Setter for hasRepositoryProjects.
         * @param  hasRepositoryProjects  Boolean value for hasRepositoryProjects.
         * @return Builder
         */
        public Builder hasRepositoryProjects(Boolean hasRepositoryProjects) {
            this.hasRepositoryProjects = hasRepositoryProjects;
            return this;
        }

        /**
         * Setter for hooksUrl.
         * @param  hooksUrl  String value for hooksUrl.
         * @return Builder
         */
        public Builder hooksUrl(String hooksUrl) {
            this.hooksUrl = hooksUrl;
            return this;
        }

        /**
         * Setter for isVerified.
         * @param  isVerified  Boolean value for isVerified.
         * @return Builder
         */
        public Builder isVerified(Boolean isVerified) {
            this.isVerified = isVerified;
            return this;
        }

        /**
         * Setter for issuesUrl.
         * @param  issuesUrl  String value for issuesUrl.
         * @return Builder
         */
        public Builder issuesUrl(String issuesUrl) {
            this.issuesUrl = issuesUrl;
            return this;
        }

        /**
         * Setter for login.
         * @param  login  String value for login.
         * @return Builder
         */
        public Builder login(String login) {
            this.login = login;
            return this;
        }

        /**
         * Setter for membersUrl.
         * @param  membersUrl  String value for membersUrl.
         * @return Builder
         */
        public Builder membersUrl(String membersUrl) {
            this.membersUrl = membersUrl;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for organizationsUrl.
         * @param  organizationsUrl  String value for organizationsUrl.
         * @return Builder
         */
        public Builder organizationsUrl(String organizationsUrl) {
            this.organizationsUrl = organizationsUrl;
            return this;
        }

        /**
         * Setter for publicGists.
         * @param  publicGists  Integer value for publicGists.
         * @return Builder
         */
        public Builder publicGists(Integer publicGists) {
            this.publicGists = publicGists;
            return this;
        }

        /**
         * Setter for publicMembersUrl.
         * @param  publicMembersUrl  String value for publicMembersUrl.
         * @return Builder
         */
        public Builder publicMembersUrl(String publicMembersUrl) {
            this.publicMembersUrl = publicMembersUrl;
            return this;
        }

        /**
         * Setter for publicRepos.
         * @param  publicRepos  Integer value for publicRepos.
         * @return Builder
         */
        public Builder publicRepos(Integer publicRepos) {
            this.publicRepos = publicRepos;
            return this;
        }

        /**
         * Setter for receivedEventsUrl.
         * @param  receivedEventsUrl  String value for receivedEventsUrl.
         * @return Builder
         */
        public Builder receivedEventsUrl(String receivedEventsUrl) {
            this.receivedEventsUrl = receivedEventsUrl;
            return this;
        }

        /**
         * Setter for reposUrl.
         * @param  reposUrl  String value for reposUrl.
         * @return Builder
         */
        public Builder reposUrl(String reposUrl) {
            this.reposUrl = reposUrl;
            return this;
        }

        /**
         * Setter for siteAdmin.
         * @param  siteAdmin  Boolean value for siteAdmin.
         * @return Builder
         */
        public Builder siteAdmin(Boolean siteAdmin) {
            this.siteAdmin = siteAdmin;
            return this;
        }

        /**
         * Setter for slug.
         * @param  slug  String value for slug.
         * @return Builder
         */
        public Builder slug(String slug) {
            this.slug = slug;
            return this;
        }

        /**
         * Setter for starredUrl.
         * @param  starredUrl  String value for starredUrl.
         * @return Builder
         */
        public Builder starredUrl(String starredUrl) {
            this.starredUrl = starredUrl;
            return this;
        }

        /**
         * Setter for subscriptionsUrl.
         * @param  subscriptionsUrl  String value for subscriptionsUrl.
         * @return Builder
         */
        public Builder subscriptionsUrl(String subscriptionsUrl) {
            this.subscriptionsUrl = subscriptionsUrl;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  String value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for websiteUrl.
         * @param  websiteUrl  Object value for websiteUrl.
         * @return Builder
         */
        public Builder websiteUrl(Object websiteUrl) {
            this.websiteUrl = OptionalNullable.of(websiteUrl);
            return this;
        }

        /**
         * UnSetter for websiteUrl.
         * @return Builder
         */
        public Builder unsetWebsiteUrl() {
            websiteUrl = null;
            return this;
        }

        /**
         * Builds a new {@link Account1} object using the set fields.
         * @return {@link Account1}
         */
        public Account1 build() {
            return new Account1(avatarUrl, htmlUrl, id, nodeId, createdAt, description, eventsUrl,
                    followers, followersUrl, following, followingUrl, gistsUrl, gravatarId,
                    hasOrganizationProjects, hasRepositoryProjects, hooksUrl, isVerified, issuesUrl,
                    login, membersUrl, name, organizationsUrl, publicGists, publicMembersUrl,
                    publicRepos, receivedEventsUrl, reposUrl, siteAdmin, slug, starredUrl,
                    subscriptionsUrl, type, updatedAt, url, websiteUrl);
        }
    }
}

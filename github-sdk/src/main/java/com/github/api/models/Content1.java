/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Content1 type.
 */
public class Content1 {
    private String name;
    private String path;
    private String sha;
    private Integer size;
    private String url;
    private String htmlUrl;
    private String gitUrl;
    private String downloadUrl;
    private String type;
    private Links9 links;

    /**
     * Default constructor.
     */
    public Content1() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  path  String value for path.
     * @param  sha  String value for sha.
     * @param  size  Integer value for size.
     * @param  url  String value for url.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  gitUrl  String value for gitUrl.
     * @param  downloadUrl  String value for downloadUrl.
     * @param  type  String value for type.
     * @param  links  Links9 value for links.
     */
    public Content1(
            String name,
            String path,
            String sha,
            Integer size,
            String url,
            String htmlUrl,
            String gitUrl,
            String downloadUrl,
            String type,
            Links9 links) {
        this.name = name;
        this.path = path;
        this.sha = sha;
        this.size = size;
        this.url = url;
        this.htmlUrl = htmlUrl;
        this.gitUrl = gitUrl;
        this.downloadUrl = downloadUrl;
        this.type = type;
        this.links = links;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Path.
     * @return Returns the String
     */
    @JsonGetter("path")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPath() {
        return path;
    }

    /**
     * Setter for Path.
     * @param path Value for String
     */
    @JsonSetter("path")
    public void setPath(String path) {
        this.path = path;
    }

    /**
     * Getter for Sha.
     * @return Returns the String
     */
    @JsonGetter("sha")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSha() {
        return sha;
    }

    /**
     * Setter for Sha.
     * @param sha Value for String
     */
    @JsonSetter("sha")
    public void setSha(String sha) {
        this.sha = sha;
    }

    /**
     * Getter for Size.
     * @return Returns the Integer
     */
    @JsonGetter("size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getSize() {
        return size;
    }

    /**
     * Setter for Size.
     * @param size Value for Integer
     */
    @JsonSetter("size")
    public void setSize(Integer size) {
        this.size = size;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for GitUrl.
     * @return Returns the String
     */
    @JsonGetter("git_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getGitUrl() {
        return gitUrl;
    }

    /**
     * Setter for GitUrl.
     * @param gitUrl Value for String
     */
    @JsonSetter("git_url")
    public void setGitUrl(String gitUrl) {
        this.gitUrl = gitUrl;
    }

    /**
     * Getter for DownloadUrl.
     * @return Returns the String
     */
    @JsonGetter("download_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDownloadUrl() {
        return downloadUrl;
    }

    /**
     * Setter for DownloadUrl.
     * @param downloadUrl Value for String
     */
    @JsonSetter("download_url")
    public void setDownloadUrl(String downloadUrl) {
        this.downloadUrl = downloadUrl;
    }

    /**
     * Getter for Type.
     * @return Returns the String
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for Links.
     * @return Returns the Links9
     */
    @JsonGetter("_links")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Links9 getLinks() {
        return links;
    }

    /**
     * Setter for Links.
     * @param links Value for Links9
     */
    @JsonSetter("_links")
    public void setLinks(Links9 links) {
        this.links = links;
    }

    /**
     * Converts this Content1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Content1 [" + "name=" + name + ", path=" + path + ", sha=" + sha + ", size=" + size
                + ", url=" + url + ", htmlUrl=" + htmlUrl + ", gitUrl=" + gitUrl + ", downloadUrl="
                + downloadUrl + ", type=" + type + ", links=" + links + "]";
    }

    /**
     * Builds a new {@link Content1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Content1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .name(getName())
                .path(getPath())
                .sha(getSha())
                .size(getSize())
                .url(getUrl())
                .htmlUrl(getHtmlUrl())
                .gitUrl(getGitUrl())
                .downloadUrl(getDownloadUrl())
                .type(getType())
                .links(getLinks());
        return builder;
    }

    /**
     * Class to build instances of {@link Content1}.
     */
    public static class Builder {
        private String name;
        private String path;
        private String sha;
        private Integer size;
        private String url;
        private String htmlUrl;
        private String gitUrl;
        private String downloadUrl;
        private String type;
        private Links9 links;



        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for path.
         * @param  path  String value for path.
         * @return Builder
         */
        public Builder path(String path) {
            this.path = path;
            return this;
        }

        /**
         * Setter for sha.
         * @param  sha  String value for sha.
         * @return Builder
         */
        public Builder sha(String sha) {
            this.sha = sha;
            return this;
        }

        /**
         * Setter for size.
         * @param  size  Integer value for size.
         * @return Builder
         */
        public Builder size(Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for gitUrl.
         * @param  gitUrl  String value for gitUrl.
         * @return Builder
         */
        public Builder gitUrl(String gitUrl) {
            this.gitUrl = gitUrl;
            return this;
        }

        /**
         * Setter for downloadUrl.
         * @param  downloadUrl  String value for downloadUrl.
         * @return Builder
         */
        public Builder downloadUrl(String downloadUrl) {
            this.downloadUrl = downloadUrl;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for links.
         * @param  links  Links9 value for links.
         * @return Builder
         */
        public Builder links(Links9 links) {
            this.links = links;
            return this;
        }

        /**
         * Builds a new {@link Content1} object using the set fields.
         * @return {@link Content1}
         */
        public Content1 build() {
            return new Content1(name, path, sha, size, url, htmlUrl, gitUrl, downloadUrl, type,
                    links);
        }
    }
}

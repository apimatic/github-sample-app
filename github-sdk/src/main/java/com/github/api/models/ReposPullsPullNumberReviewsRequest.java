/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for ReposPullsPullNumberReviewsRequest type.
 */
public class ReposPullsPullNumberReviewsRequest {
    private String commitId;
    private String body;
    private Event29Enum event;
    private List<Comment4> comments;

    /**
     * Default constructor.
     */
    public ReposPullsPullNumberReviewsRequest() {
    }

    /**
     * Initialization constructor.
     * @param  commitId  String value for commitId.
     * @param  body  String value for body.
     * @param  event  Event29Enum value for event.
     * @param  comments  List of Comment4 value for comments.
     */
    public ReposPullsPullNumberReviewsRequest(
            String commitId,
            String body,
            Event29Enum event,
            List<Comment4> comments) {
        this.commitId = commitId;
        this.body = body;
        this.event = event;
        this.comments = comments;
    }

    /**
     * Getter for CommitId.
     * The SHA of the commit that needs a review. Not using the latest commit SHA may render your
     * review comment outdated if a subsequent commit modifies the line you specify as the
     * `position`. Defaults to the most recent commit in the pull request when you do not specify a
     * value.
     * @return Returns the String
     */
    @JsonGetter("commit_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCommitId() {
        return commitId;
    }

    /**
     * Setter for CommitId.
     * The SHA of the commit that needs a review. Not using the latest commit SHA may render your
     * review comment outdated if a subsequent commit modifies the line you specify as the
     * `position`. Defaults to the most recent commit in the pull request when you do not specify a
     * value.
     * @param commitId Value for String
     */
    @JsonSetter("commit_id")
    public void setCommitId(String commitId) {
        this.commitId = commitId;
    }

    /**
     * Getter for Body.
     * **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body
     * text of the pull request review.
     * @return Returns the String
     */
    @JsonGetter("body")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBody() {
        return body;
    }

    /**
     * Setter for Body.
     * **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body
     * text of the pull request review.
     * @param body Value for String
     */
    @JsonSetter("body")
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Getter for Event.
     * @return Returns the Event29Enum
     */
    @JsonGetter("event")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Event29Enum getEvent() {
        return event;
    }

    /**
     * Setter for Event.
     * @param event Value for Event29Enum
     */
    @JsonSetter("event")
    public void setEvent(Event29Enum event) {
        this.event = event;
    }

    /**
     * Getter for Comments.
     * Use the following table to specify the location, destination, and contents of the draft
     * review comment.
     * @return Returns the List of Comment4
     */
    @JsonGetter("comments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Comment4> getComments() {
        return comments;
    }

    /**
     * Setter for Comments.
     * Use the following table to specify the location, destination, and contents of the draft
     * review comment.
     * @param comments Value for List of Comment4
     */
    @JsonSetter("comments")
    public void setComments(List<Comment4> comments) {
        this.comments = comments;
    }

    /**
     * Converts this ReposPullsPullNumberReviewsRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposPullsPullNumberReviewsRequest [" + "commitId=" + commitId + ", body=" + body
                + ", event=" + event + ", comments=" + comments + "]";
    }

    /**
     * Builds a new {@link ReposPullsPullNumberReviewsRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposPullsPullNumberReviewsRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .commitId(getCommitId())
                .body(getBody())
                .event(getEvent())
                .comments(getComments());
        return builder;
    }

    /**
     * Class to build instances of {@link ReposPullsPullNumberReviewsRequest}.
     */
    public static class Builder {
        private String commitId;
        private String body;
        private Event29Enum event;
        private List<Comment4> comments;



        /**
         * Setter for commitId.
         * @param  commitId  String value for commitId.
         * @return Builder
         */
        public Builder commitId(String commitId) {
            this.commitId = commitId;
            return this;
        }

        /**
         * Setter for body.
         * @param  body  String value for body.
         * @return Builder
         */
        public Builder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Setter for event.
         * @param  event  Event29Enum value for event.
         * @return Builder
         */
        public Builder event(Event29Enum event) {
            this.event = event;
            return this;
        }

        /**
         * Setter for comments.
         * @param  comments  List of Comment4 value for comments.
         * @return Builder
         */
        public Builder comments(List<Comment4> comments) {
            this.comments = comments;
            return this;
        }

        /**
         * Builds a new {@link ReposPullsPullNumberReviewsRequest} object using the set fields.
         * @return {@link ReposPullsPullNumberReviewsRequest}
         */
        public ReposPullsPullNumberReviewsRequest build() {
            return new ReposPullsPullNumberReviewsRequest(commitId, body, event, comments);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.github.api.ApiHelper;
import com.github.api.models.User3;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = PullRequest42Assignees.PullRequest42AssigneesDeserializer.class)
public abstract class PullRequest42Assignees {
    
    /**
     * One-of type initialization method.
     * @param object Map of String, value for object.
     * @return The ObjectCase object.
     */
    public static PullRequest42Assignees fromObject(Map<String, Object> object) {
        return object == null ? null : new ObjectCase(object);
    }

    /**
     * One-of type initialization method.
     * @param user3 User3 value for user3.
     * @return The User3Case object.
     */
    public static PullRequest42Assignees fromUser3(User3 user3) {
        return user3 == null ? null : new User3Case(user3);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R object(Map<String, Object> object);

        R user3(User3 user3);
    }

    /**
     * This is a implementation class for ObjectCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class ObjectCase extends PullRequest42Assignees {

        @JsonValue
        private Map<String, Object> object;

        ObjectCase(Map<String, Object> object) {
            this.object = object;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.object(this.object);
        }

        @JsonCreator
        private ObjectCase(JsonNode jsonNode) throws IOException {
            this.object = ApiHelper.deserialize(jsonNode,
                new TypeReference<Map<String, Object>>(){});
        }

        @Override
        public String toString() {
            return object.toString();
        }
    }

    /**
     * This is a implementation class for User3Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class User3Case extends PullRequest42Assignees {

        @JsonValue
        private User3 user3;

        User3Case(User3 user3) {
            this.user3 = user3;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.user3(this.user3);
        }

        @JsonCreator
        private User3Case(JsonNode jsonNode) throws IOException {
            this.user3 = ApiHelper.deserialize(jsonNode,
                User3.class);
        }

        @Override
        public String toString() {
            return user3.toString();
        }
    }

    /**
     * This is a custom deserializer class for PullRequest42Assignees.
     */
    protected static class PullRequest42AssigneesDeserializer
            extends JsonDeserializer<PullRequest42Assignees> {

        @Override
        public PullRequest42Assignees deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(ObjectCase.class,
                    User3Case.class), true);
        }
    }

}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;

/**
 * This is a model class for Deployment1 type.
 */
public class Deployment1 {
    private String url;
    private int id;
    private String nodeId;
    private String task;
    private String originalEnvironment;
    private String environment;
    private String description;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private String statusesUrl;
    private String repositoryUrl;
    private Boolean transientEnvironment;
    private Boolean productionEnvironment;
    private Object performedViaGithubApp;

    /**
     * Default constructor.
     */
    public Deployment1() {
    }

    /**
     * Initialization constructor.
     * @param  url  String value for url.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  task  String value for task.
     * @param  environment  String value for environment.
     * @param  description  String value for description.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  statusesUrl  String value for statusesUrl.
     * @param  repositoryUrl  String value for repositoryUrl.
     * @param  originalEnvironment  String value for originalEnvironment.
     * @param  transientEnvironment  Boolean value for transientEnvironment.
     * @param  productionEnvironment  Boolean value for productionEnvironment.
     * @param  performedViaGithubApp  Object value for performedViaGithubApp.
     */
    public Deployment1(
            String url,
            int id,
            String nodeId,
            String task,
            String environment,
            String description,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            String statusesUrl,
            String repositoryUrl,
            String originalEnvironment,
            Boolean transientEnvironment,
            Boolean productionEnvironment,
            Object performedViaGithubApp) {
        this.url = url;
        this.id = id;
        this.nodeId = nodeId;
        this.task = task;
        this.originalEnvironment = originalEnvironment;
        this.environment = environment;
        this.description = description;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.statusesUrl = statusesUrl;
        this.repositoryUrl = repositoryUrl;
        this.transientEnvironment = transientEnvironment;
        this.productionEnvironment = productionEnvironment;
        this.performedViaGithubApp = performedViaGithubApp;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for Id.
     * Unique identifier of the deployment
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier of the deployment
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Task.
     * Parameter to specify a task to execute
     * @return Returns the String
     */
    @JsonGetter("task")
    public String getTask() {
        return task;
    }

    /**
     * Setter for Task.
     * Parameter to specify a task to execute
     * @param task Value for String
     */
    @JsonSetter("task")
    public void setTask(String task) {
        this.task = task;
    }

    /**
     * Getter for OriginalEnvironment.
     * @return Returns the String
     */
    @JsonGetter("original_environment")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getOriginalEnvironment() {
        return originalEnvironment;
    }

    /**
     * Setter for OriginalEnvironment.
     * @param originalEnvironment Value for String
     */
    @JsonSetter("original_environment")
    public void setOriginalEnvironment(String originalEnvironment) {
        this.originalEnvironment = originalEnvironment;
    }

    /**
     * Getter for Environment.
     * Name for the target deployment environment.
     * @return Returns the String
     */
    @JsonGetter("environment")
    public String getEnvironment() {
        return environment;
    }

    /**
     * Setter for Environment.
     * Name for the target deployment environment.
     * @param environment Value for String
     */
    @JsonSetter("environment")
    public void setEnvironment(String environment) {
        this.environment = environment;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for StatusesUrl.
     * @return Returns the String
     */
    @JsonGetter("statuses_url")
    public String getStatusesUrl() {
        return statusesUrl;
    }

    /**
     * Setter for StatusesUrl.
     * @param statusesUrl Value for String
     */
    @JsonSetter("statuses_url")
    public void setStatusesUrl(String statusesUrl) {
        this.statusesUrl = statusesUrl;
    }

    /**
     * Getter for RepositoryUrl.
     * @return Returns the String
     */
    @JsonGetter("repository_url")
    public String getRepositoryUrl() {
        return repositoryUrl;
    }

    /**
     * Setter for RepositoryUrl.
     * @param repositoryUrl Value for String
     */
    @JsonSetter("repository_url")
    public void setRepositoryUrl(String repositoryUrl) {
        this.repositoryUrl = repositoryUrl;
    }

    /**
     * Getter for TransientEnvironment.
     * Specifies if the given environment is will no longer exist at some point in the future.
     * Default: false.
     * @return Returns the Boolean
     */
    @JsonGetter("transient_environment")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTransientEnvironment() {
        return transientEnvironment;
    }

    /**
     * Setter for TransientEnvironment.
     * Specifies if the given environment is will no longer exist at some point in the future.
     * Default: false.
     * @param transientEnvironment Value for Boolean
     */
    @JsonSetter("transient_environment")
    public void setTransientEnvironment(Boolean transientEnvironment) {
        this.transientEnvironment = transientEnvironment;
    }

    /**
     * Getter for ProductionEnvironment.
     * Specifies if the given environment is one that end-users directly interact with. Default:
     * false.
     * @return Returns the Boolean
     */
    @JsonGetter("production_environment")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getProductionEnvironment() {
        return productionEnvironment;
    }

    /**
     * Setter for ProductionEnvironment.
     * Specifies if the given environment is one that end-users directly interact with. Default:
     * false.
     * @param productionEnvironment Value for Boolean
     */
    @JsonSetter("production_environment")
    public void setProductionEnvironment(Boolean productionEnvironment) {
        this.productionEnvironment = productionEnvironment;
    }

    /**
     * Getter for PerformedViaGithubApp.
     * @return Returns the Object
     */
    @JsonGetter("performed_via_github_app")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getPerformedViaGithubApp() {
        return performedViaGithubApp;
    }

    /**
     * Setter for PerformedViaGithubApp.
     * @param performedViaGithubApp Value for Object
     */
    @JsonSetter("performed_via_github_app")
    public void setPerformedViaGithubApp(Object performedViaGithubApp) {
        this.performedViaGithubApp = performedViaGithubApp;
    }

    /**
     * Converts this Deployment1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Deployment1 [" + "url=" + url + ", id=" + id + ", nodeId=" + nodeId + ", task="
                + task + ", environment=" + environment + ", description=" + description
                + ", createdAt=" + createdAt + ", updatedAt=" + updatedAt + ", statusesUrl="
                + statusesUrl + ", repositoryUrl=" + repositoryUrl + ", originalEnvironment="
                + originalEnvironment + ", transientEnvironment=" + transientEnvironment
                + ", productionEnvironment=" + productionEnvironment + ", performedViaGithubApp="
                + performedViaGithubApp + "]";
    }

    /**
     * Builds a new {@link Deployment1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Deployment1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(url, id, nodeId, task, environment, description, createdAt,
                updatedAt, statusesUrl, repositoryUrl)
                .originalEnvironment(getOriginalEnvironment())
                .transientEnvironment(getTransientEnvironment())
                .productionEnvironment(getProductionEnvironment())
                .performedViaGithubApp(getPerformedViaGithubApp());
        return builder;
    }

    /**
     * Class to build instances of {@link Deployment1}.
     */
    public static class Builder {
        private String url;
        private int id;
        private String nodeId;
        private String task;
        private String environment;
        private String description;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private String statusesUrl;
        private String repositoryUrl;
        private String originalEnvironment;
        private Boolean transientEnvironment;
        private Boolean productionEnvironment;
        private Object performedViaGithubApp;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  url  String value for url.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  task  String value for task.
         * @param  environment  String value for environment.
         * @param  description  String value for description.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  statusesUrl  String value for statusesUrl.
         * @param  repositoryUrl  String value for repositoryUrl.
         */
        public Builder(String url, int id, String nodeId, String task, String environment,
                String description, LocalDateTime createdAt, LocalDateTime updatedAt,
                String statusesUrl, String repositoryUrl) {
            this.url = url;
            this.id = id;
            this.nodeId = nodeId;
            this.task = task;
            this.environment = environment;
            this.description = description;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.statusesUrl = statusesUrl;
            this.repositoryUrl = repositoryUrl;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for task.
         * @param  task  String value for task.
         * @return Builder
         */
        public Builder task(String task) {
            this.task = task;
            return this;
        }

        /**
         * Setter for environment.
         * @param  environment  String value for environment.
         * @return Builder
         */
        public Builder environment(String environment) {
            this.environment = environment;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for statusesUrl.
         * @param  statusesUrl  String value for statusesUrl.
         * @return Builder
         */
        public Builder statusesUrl(String statusesUrl) {
            this.statusesUrl = statusesUrl;
            return this;
        }

        /**
         * Setter for repositoryUrl.
         * @param  repositoryUrl  String value for repositoryUrl.
         * @return Builder
         */
        public Builder repositoryUrl(String repositoryUrl) {
            this.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * Setter for originalEnvironment.
         * @param  originalEnvironment  String value for originalEnvironment.
         * @return Builder
         */
        public Builder originalEnvironment(String originalEnvironment) {
            this.originalEnvironment = originalEnvironment;
            return this;
        }

        /**
         * Setter for transientEnvironment.
         * @param  transientEnvironment  Boolean value for transientEnvironment.
         * @return Builder
         */
        public Builder transientEnvironment(Boolean transientEnvironment) {
            this.transientEnvironment = transientEnvironment;
            return this;
        }

        /**
         * Setter for productionEnvironment.
         * @param  productionEnvironment  Boolean value for productionEnvironment.
         * @return Builder
         */
        public Builder productionEnvironment(Boolean productionEnvironment) {
            this.productionEnvironment = productionEnvironment;
            return this;
        }

        /**
         * Setter for performedViaGithubApp.
         * @param  performedViaGithubApp  Object value for performedViaGithubApp.
         * @return Builder
         */
        public Builder performedViaGithubApp(Object performedViaGithubApp) {
            this.performedViaGithubApp = performedViaGithubApp;
            return this;
        }

        /**
         * Builds a new {@link Deployment1} object using the set fields.
         * @return {@link Deployment1}
         */
        public Deployment1 build() {
            return new Deployment1(url, id, nodeId, task, environment, description, createdAt,
                    updatedAt, statusesUrl, repositoryUrl, originalEnvironment,
                    transientEnvironment, productionEnvironment, performedViaGithubApp);
        }
    }
}

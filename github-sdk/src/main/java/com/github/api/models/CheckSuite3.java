/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for CheckSuite3 type.
 */
public class CheckSuite3 {
    private String after;
    private App42 app;
    private String before;
    private String checkRunsUrl;
    private Object conclusion;
    private LocalDateTime createdAt;
    private String headBranch;
    private SimpleCommit2 headCommit;
    private String headSha;
    private int id;
    private int latestCheckRunsCount;
    private String nodeId;
    private List<CheckRunPullRequest> pullRequests;
    private Boolean rerequestable;
    private Boolean runsRerequestable;
    private Object status;
    private LocalDateTime updatedAt;
    private String url;

    /**
     * Default constructor.
     */
    public CheckSuite3() {
    }

    /**
     * Initialization constructor.
     * @param  after  String value for after.
     * @param  app  App42 value for app.
     * @param  before  String value for before.
     * @param  checkRunsUrl  String value for checkRunsUrl.
     * @param  conclusion  Object value for conclusion.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  headBranch  String value for headBranch.
     * @param  headCommit  SimpleCommit2 value for headCommit.
     * @param  headSha  String value for headSha.
     * @param  id  int value for id.
     * @param  latestCheckRunsCount  int value for latestCheckRunsCount.
     * @param  nodeId  String value for nodeId.
     * @param  pullRequests  List of CheckRunPullRequest value for pullRequests.
     * @param  status  Object value for status.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  url  String value for url.
     * @param  rerequestable  Boolean value for rerequestable.
     * @param  runsRerequestable  Boolean value for runsRerequestable.
     */
    public CheckSuite3(
            String after,
            App42 app,
            String before,
            String checkRunsUrl,
            Object conclusion,
            LocalDateTime createdAt,
            String headBranch,
            SimpleCommit2 headCommit,
            String headSha,
            int id,
            int latestCheckRunsCount,
            String nodeId,
            List<CheckRunPullRequest> pullRequests,
            Object status,
            LocalDateTime updatedAt,
            String url,
            Boolean rerequestable,
            Boolean runsRerequestable) {
        this.after = after;
        this.app = app;
        this.before = before;
        this.checkRunsUrl = checkRunsUrl;
        this.conclusion = conclusion;
        this.createdAt = createdAt;
        this.headBranch = headBranch;
        this.headCommit = headCommit;
        this.headSha = headSha;
        this.id = id;
        this.latestCheckRunsCount = latestCheckRunsCount;
        this.nodeId = nodeId;
        this.pullRequests = pullRequests;
        this.rerequestable = rerequestable;
        this.runsRerequestable = runsRerequestable;
        this.status = status;
        this.updatedAt = updatedAt;
        this.url = url;
    }

    /**
     * Getter for After.
     * @return Returns the String
     */
    @JsonGetter("after")
    public String getAfter() {
        return after;
    }

    /**
     * Setter for After.
     * @param after Value for String
     */
    @JsonSetter("after")
    public void setAfter(String after) {
        this.after = after;
    }

    /**
     * Getter for App.
     * @return Returns the App42
     */
    @JsonGetter("app")
    public App42 getApp() {
        return app;
    }

    /**
     * Setter for App.
     * @param app Value for App42
     */
    @JsonSetter("app")
    public void setApp(App42 app) {
        this.app = app;
    }

    /**
     * Getter for Before.
     * @return Returns the String
     */
    @JsonGetter("before")
    public String getBefore() {
        return before;
    }

    /**
     * Setter for Before.
     * @param before Value for String
     */
    @JsonSetter("before")
    public void setBefore(String before) {
        this.before = before;
    }

    /**
     * Getter for CheckRunsUrl.
     * @return Returns the String
     */
    @JsonGetter("check_runs_url")
    public String getCheckRunsUrl() {
        return checkRunsUrl;
    }

    /**
     * Setter for CheckRunsUrl.
     * @param checkRunsUrl Value for String
     */
    @JsonSetter("check_runs_url")
    public void setCheckRunsUrl(String checkRunsUrl) {
        this.checkRunsUrl = checkRunsUrl;
    }

    /**
     * Getter for Conclusion.
     * @return Returns the Object
     */
    @JsonGetter("conclusion")
    public Object getConclusion() {
        return conclusion;
    }

    /**
     * Setter for Conclusion.
     * @param conclusion Value for Object
     */
    @JsonSetter("conclusion")
    public void setConclusion(Object conclusion) {
        this.conclusion = conclusion;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for HeadBranch.
     * The head branch name the changes are on.
     * @return Returns the String
     */
    @JsonGetter("head_branch")
    public String getHeadBranch() {
        return headBranch;
    }

    /**
     * Setter for HeadBranch.
     * The head branch name the changes are on.
     * @param headBranch Value for String
     */
    @JsonSetter("head_branch")
    public void setHeadBranch(String headBranch) {
        this.headBranch = headBranch;
    }

    /**
     * Getter for HeadCommit.
     * @return Returns the SimpleCommit2
     */
    @JsonGetter("head_commit")
    public SimpleCommit2 getHeadCommit() {
        return headCommit;
    }

    /**
     * Setter for HeadCommit.
     * @param headCommit Value for SimpleCommit2
     */
    @JsonSetter("head_commit")
    public void setHeadCommit(SimpleCommit2 headCommit) {
        this.headCommit = headCommit;
    }

    /**
     * Getter for HeadSha.
     * The SHA of the head commit that is being checked.
     * @return Returns the String
     */
    @JsonGetter("head_sha")
    public String getHeadSha() {
        return headSha;
    }

    /**
     * Setter for HeadSha.
     * The SHA of the head commit that is being checked.
     * @param headSha Value for String
     */
    @JsonSetter("head_sha")
    public void setHeadSha(String headSha) {
        this.headSha = headSha;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for LatestCheckRunsCount.
     * @return Returns the int
     */
    @JsonGetter("latest_check_runs_count")
    public int getLatestCheckRunsCount() {
        return latestCheckRunsCount;
    }

    /**
     * Setter for LatestCheckRunsCount.
     * @param latestCheckRunsCount Value for int
     */
    @JsonSetter("latest_check_runs_count")
    public void setLatestCheckRunsCount(int latestCheckRunsCount) {
        this.latestCheckRunsCount = latestCheckRunsCount;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for PullRequests.
     * An array of pull requests that match this check suite. A pull request matches a check suite
     * if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is
     * in a forked repository it will be `null` and the `pull_requests` array will be empty.
     * @return Returns the List of CheckRunPullRequest
     */
    @JsonGetter("pull_requests")
    public List<CheckRunPullRequest> getPullRequests() {
        return pullRequests;
    }

    /**
     * Setter for PullRequests.
     * An array of pull requests that match this check suite. A pull request matches a check suite
     * if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is
     * in a forked repository it will be `null` and the `pull_requests` array will be empty.
     * @param pullRequests Value for List of CheckRunPullRequest
     */
    @JsonSetter("pull_requests")
    public void setPullRequests(List<CheckRunPullRequest> pullRequests) {
        this.pullRequests = pullRequests;
    }

    /**
     * Getter for Rerequestable.
     * @return Returns the Boolean
     */
    @JsonGetter("rerequestable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getRerequestable() {
        return rerequestable;
    }

    /**
     * Setter for Rerequestable.
     * @param rerequestable Value for Boolean
     */
    @JsonSetter("rerequestable")
    public void setRerequestable(Boolean rerequestable) {
        this.rerequestable = rerequestable;
    }

    /**
     * Getter for RunsRerequestable.
     * @return Returns the Boolean
     */
    @JsonGetter("runs_rerequestable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getRunsRerequestable() {
        return runsRerequestable;
    }

    /**
     * Setter for RunsRerequestable.
     * @param runsRerequestable Value for Boolean
     */
    @JsonSetter("runs_rerequestable")
    public void setRunsRerequestable(Boolean runsRerequestable) {
        this.runsRerequestable = runsRerequestable;
    }

    /**
     * Getter for Status.
     * @return Returns the Object
     */
    @JsonGetter("status")
    public Object getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * @param status Value for Object
     */
    @JsonSetter("status")
    public void setStatus(Object status) {
        this.status = status;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Url.
     * URL that points to the check suite API resource.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * URL that points to the check suite API resource.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Converts this CheckSuite3 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CheckSuite3 [" + "after=" + after + ", app=" + app + ", before=" + before
                + ", checkRunsUrl=" + checkRunsUrl + ", conclusion=" + conclusion + ", createdAt="
                + createdAt + ", headBranch=" + headBranch + ", headCommit=" + headCommit
                + ", headSha=" + headSha + ", id=" + id + ", latestCheckRunsCount="
                + latestCheckRunsCount + ", nodeId=" + nodeId + ", pullRequests=" + pullRequests
                + ", status=" + status + ", updatedAt=" + updatedAt + ", url=" + url
                + ", rerequestable=" + rerequestable + ", runsRerequestable=" + runsRerequestable
                + "]";
    }

    /**
     * Builds a new {@link CheckSuite3.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CheckSuite3.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(after, app, before, checkRunsUrl, conclusion, createdAt,
                headBranch, headCommit, headSha, id, latestCheckRunsCount, nodeId, pullRequests,
                status, updatedAt, url)
                .rerequestable(getRerequestable())
                .runsRerequestable(getRunsRerequestable());
        return builder;
    }

    /**
     * Class to build instances of {@link CheckSuite3}.
     */
    public static class Builder {
        private String after;
        private App42 app;
        private String before;
        private String checkRunsUrl;
        private Object conclusion;
        private LocalDateTime createdAt;
        private String headBranch;
        private SimpleCommit2 headCommit;
        private String headSha;
        private int id;
        private int latestCheckRunsCount;
        private String nodeId;
        private List<CheckRunPullRequest> pullRequests;
        private Object status;
        private LocalDateTime updatedAt;
        private String url;
        private Boolean rerequestable;
        private Boolean runsRerequestable;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  after  String value for after.
         * @param  app  App42 value for app.
         * @param  before  String value for before.
         * @param  checkRunsUrl  String value for checkRunsUrl.
         * @param  conclusion  Object value for conclusion.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  headBranch  String value for headBranch.
         * @param  headCommit  SimpleCommit2 value for headCommit.
         * @param  headSha  String value for headSha.
         * @param  id  int value for id.
         * @param  latestCheckRunsCount  int value for latestCheckRunsCount.
         * @param  nodeId  String value for nodeId.
         * @param  pullRequests  List of CheckRunPullRequest value for pullRequests.
         * @param  status  Object value for status.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  url  String value for url.
         */
        public Builder(String after, App42 app, String before, String checkRunsUrl,
                Object conclusion, LocalDateTime createdAt, String headBranch,
                SimpleCommit2 headCommit, String headSha, int id, int latestCheckRunsCount,
                String nodeId, List<CheckRunPullRequest> pullRequests, Object status,
                LocalDateTime updatedAt, String url) {
            this.after = after;
            this.app = app;
            this.before = before;
            this.checkRunsUrl = checkRunsUrl;
            this.conclusion = conclusion;
            this.createdAt = createdAt;
            this.headBranch = headBranch;
            this.headCommit = headCommit;
            this.headSha = headSha;
            this.id = id;
            this.latestCheckRunsCount = latestCheckRunsCount;
            this.nodeId = nodeId;
            this.pullRequests = pullRequests;
            this.status = status;
            this.updatedAt = updatedAt;
            this.url = url;
        }

        /**
         * Setter for after.
         * @param  after  String value for after.
         * @return Builder
         */
        public Builder after(String after) {
            this.after = after;
            return this;
        }

        /**
         * Setter for app.
         * @param  app  App42 value for app.
         * @return Builder
         */
        public Builder app(App42 app) {
            this.app = app;
            return this;
        }

        /**
         * Setter for before.
         * @param  before  String value for before.
         * @return Builder
         */
        public Builder before(String before) {
            this.before = before;
            return this;
        }

        /**
         * Setter for checkRunsUrl.
         * @param  checkRunsUrl  String value for checkRunsUrl.
         * @return Builder
         */
        public Builder checkRunsUrl(String checkRunsUrl) {
            this.checkRunsUrl = checkRunsUrl;
            return this;
        }

        /**
         * Setter for conclusion.
         * @param  conclusion  Object value for conclusion.
         * @return Builder
         */
        public Builder conclusion(Object conclusion) {
            this.conclusion = conclusion;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for headBranch.
         * @param  headBranch  String value for headBranch.
         * @return Builder
         */
        public Builder headBranch(String headBranch) {
            this.headBranch = headBranch;
            return this;
        }

        /**
         * Setter for headCommit.
         * @param  headCommit  SimpleCommit2 value for headCommit.
         * @return Builder
         */
        public Builder headCommit(SimpleCommit2 headCommit) {
            this.headCommit = headCommit;
            return this;
        }

        /**
         * Setter for headSha.
         * @param  headSha  String value for headSha.
         * @return Builder
         */
        public Builder headSha(String headSha) {
            this.headSha = headSha;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for latestCheckRunsCount.
         * @param  latestCheckRunsCount  int value for latestCheckRunsCount.
         * @return Builder
         */
        public Builder latestCheckRunsCount(int latestCheckRunsCount) {
            this.latestCheckRunsCount = latestCheckRunsCount;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for pullRequests.
         * @param  pullRequests  List of CheckRunPullRequest value for pullRequests.
         * @return Builder
         */
        public Builder pullRequests(List<CheckRunPullRequest> pullRequests) {
            this.pullRequests = pullRequests;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  Object value for status.
         * @return Builder
         */
        public Builder status(Object status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for rerequestable.
         * @param  rerequestable  Boolean value for rerequestable.
         * @return Builder
         */
        public Builder rerequestable(Boolean rerequestable) {
            this.rerequestable = rerequestable;
            return this;
        }

        /**
         * Setter for runsRerequestable.
         * @param  runsRerequestable  Boolean value for runsRerequestable.
         * @return Builder
         */
        public Builder runsRerequestable(Boolean runsRerequestable) {
            this.runsRerequestable = runsRerequestable;
            return this;
        }

        /**
         * Builds a new {@link CheckSuite3} object using the set fields.
         * @return {@link CheckSuite3}
         */
        public CheckSuite3 build() {
            return new CheckSuite3(after, app, before, checkRunsUrl, conclusion, createdAt,
                    headBranch, headCommit, headSha, id, latestCheckRunsCount, nodeId, pullRequests,
                    status, updatedAt, url, rerequestable, runsRerequestable);
        }
    }
}

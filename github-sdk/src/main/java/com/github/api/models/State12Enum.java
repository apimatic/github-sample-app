/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * State12Enum to be used.
 */
public enum State12Enum {
    ENUM_NEW,

    AUTHORIZATION_CREATED,

    AUTHORIZATION_PENDING,

    AUTHORIZED,

    AUTHORIZATION_REVOKED,

    ISSUED,

    UPLOADED,

    APPROVED,

    ERRORED,

    BAD_AUTHZ,

    DESTROY_PENDING,

    DNS_CHANGED;


    private static TreeMap<String, State12Enum> valueMap = new TreeMap<>();
    private String value;

    static {
        ENUM_NEW.value = "new";
        AUTHORIZATION_CREATED.value = "authorization_created";
        AUTHORIZATION_PENDING.value = "authorization_pending";
        AUTHORIZED.value = "authorized";
        AUTHORIZATION_REVOKED.value = "authorization_revoked";
        ISSUED.value = "issued";
        UPLOADED.value = "uploaded";
        APPROVED.value = "approved";
        ERRORED.value = "errored";
        BAD_AUTHZ.value = "bad_authz";
        DESTROY_PENDING.value = "destroy_pending";
        DNS_CHANGED.value = "dns_changed";

        valueMap.put("new", ENUM_NEW);
        valueMap.put("authorization_created", AUTHORIZATION_CREATED);
        valueMap.put("authorization_pending", AUTHORIZATION_PENDING);
        valueMap.put("authorized", AUTHORIZED);
        valueMap.put("authorization_revoked", AUTHORIZATION_REVOKED);
        valueMap.put("issued", ISSUED);
        valueMap.put("uploaded", UPLOADED);
        valueMap.put("approved", APPROVED);
        valueMap.put("errored", ERRORED);
        valueMap.put("bad_authz", BAD_AUTHZ);
        valueMap.put("destroy_pending", DESTROY_PENDING);
        valueMap.put("dns_changed", DNS_CHANGED);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    @com.fasterxml.jackson.annotation.JsonCreator
    public static State12Enum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @com.fasterxml.jackson.annotation.JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of State12Enum values to list of string values.
     * @param toConvert The list of State12Enum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<State12Enum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (State12Enum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 
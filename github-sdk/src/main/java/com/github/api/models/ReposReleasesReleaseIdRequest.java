/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for ReposReleasesReleaseIdRequest type.
 */
public class ReposReleasesReleaseIdRequest {
    private String tagName;
    private String targetCommitish;
    private String name;
    private String body;
    private Boolean draft;
    private Boolean prerelease;
    private MakeLatestEnum makeLatest;
    private String discussionCategoryName;

    /**
     * Default constructor.
     */
    public ReposReleasesReleaseIdRequest() {
    }

    /**
     * Initialization constructor.
     * @param  tagName  String value for tagName.
     * @param  targetCommitish  String value for targetCommitish.
     * @param  name  String value for name.
     * @param  body  String value for body.
     * @param  draft  Boolean value for draft.
     * @param  prerelease  Boolean value for prerelease.
     * @param  makeLatest  MakeLatestEnum value for makeLatest.
     * @param  discussionCategoryName  String value for discussionCategoryName.
     */
    public ReposReleasesReleaseIdRequest(
            String tagName,
            String targetCommitish,
            String name,
            String body,
            Boolean draft,
            Boolean prerelease,
            MakeLatestEnum makeLatest,
            String discussionCategoryName) {
        this.tagName = tagName;
        this.targetCommitish = targetCommitish;
        this.name = name;
        this.body = body;
        this.draft = draft;
        this.prerelease = prerelease;
        this.makeLatest = makeLatest;
        this.discussionCategoryName = discussionCategoryName;
    }

    /**
     * Getter for TagName.
     * The name of the tag.
     * @return Returns the String
     */
    @JsonGetter("tag_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTagName() {
        return tagName;
    }

    /**
     * Setter for TagName.
     * The name of the tag.
     * @param tagName Value for String
     */
    @JsonSetter("tag_name")
    public void setTagName(String tagName) {
        this.tagName = tagName;
    }

    /**
     * Getter for TargetCommitish.
     * Specifies the commitish value that determines where the Git tag is created from. Can be any
     * branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default
     * branch (usually `master`).
     * @return Returns the String
     */
    @JsonGetter("target_commitish")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTargetCommitish() {
        return targetCommitish;
    }

    /**
     * Setter for TargetCommitish.
     * Specifies the commitish value that determines where the Git tag is created from. Can be any
     * branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default
     * branch (usually `master`).
     * @param targetCommitish Value for String
     */
    @JsonSetter("target_commitish")
    public void setTargetCommitish(String targetCommitish) {
        this.targetCommitish = targetCommitish;
    }

    /**
     * Getter for Name.
     * The name of the release.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the release.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Body.
     * Text describing the contents of the tag.
     * @return Returns the String
     */
    @JsonGetter("body")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBody() {
        return body;
    }

    /**
     * Setter for Body.
     * Text describing the contents of the tag.
     * @param body Value for String
     */
    @JsonSetter("body")
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Getter for Draft.
     * `true` makes the release a draft, and `false` publishes the release.
     * @return Returns the Boolean
     */
    @JsonGetter("draft")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDraft() {
        return draft;
    }

    /**
     * Setter for Draft.
     * `true` makes the release a draft, and `false` publishes the release.
     * @param draft Value for Boolean
     */
    @JsonSetter("draft")
    public void setDraft(Boolean draft) {
        this.draft = draft;
    }

    /**
     * Getter for Prerelease.
     * `true` to identify the release as a prerelease, `false` to identify the release as a full
     * release.
     * @return Returns the Boolean
     */
    @JsonGetter("prerelease")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getPrerelease() {
        return prerelease;
    }

    /**
     * Setter for Prerelease.
     * `true` to identify the release as a prerelease, `false` to identify the release as a full
     * release.
     * @param prerelease Value for Boolean
     */
    @JsonSetter("prerelease")
    public void setPrerelease(Boolean prerelease) {
        this.prerelease = prerelease;
    }

    /**
     * Getter for MakeLatest.
     * @return Returns the MakeLatestEnum
     */
    @JsonGetter("make_latest")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MakeLatestEnum getMakeLatest() {
        return makeLatest;
    }

    /**
     * Setter for MakeLatest.
     * @param makeLatest Value for MakeLatestEnum
     */
    @JsonSetter("make_latest")
    public void setMakeLatest(MakeLatestEnum makeLatest) {
        this.makeLatest = makeLatest;
    }

    /**
     * Getter for DiscussionCategoryName.
     * If specified, a discussion of the specified category is created and linked to the release.
     * The value must be a category that already exists in the repository. If there is already a
     * discussion linked to the release, this parameter is ignored. For more information, see
     * "[Managing categories for discussions in your
     * repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
     * @return Returns the String
     */
    @JsonGetter("discussion_category_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDiscussionCategoryName() {
        return discussionCategoryName;
    }

    /**
     * Setter for DiscussionCategoryName.
     * If specified, a discussion of the specified category is created and linked to the release.
     * The value must be a category that already exists in the repository. If there is already a
     * discussion linked to the release, this parameter is ignored. For more information, see
     * "[Managing categories for discussions in your
     * repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
     * @param discussionCategoryName Value for String
     */
    @JsonSetter("discussion_category_name")
    public void setDiscussionCategoryName(String discussionCategoryName) {
        this.discussionCategoryName = discussionCategoryName;
    }

    /**
     * Converts this ReposReleasesReleaseIdRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposReleasesReleaseIdRequest [" + "tagName=" + tagName + ", targetCommitish="
                + targetCommitish + ", name=" + name + ", body=" + body + ", draft=" + draft
                + ", prerelease=" + prerelease + ", makeLatest=" + makeLatest
                + ", discussionCategoryName=" + discussionCategoryName + "]";
    }

    /**
     * Builds a new {@link ReposReleasesReleaseIdRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposReleasesReleaseIdRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .tagName(getTagName())
                .targetCommitish(getTargetCommitish())
                .name(getName())
                .body(getBody())
                .draft(getDraft())
                .prerelease(getPrerelease())
                .makeLatest(getMakeLatest())
                .discussionCategoryName(getDiscussionCategoryName());
        return builder;
    }

    /**
     * Class to build instances of {@link ReposReleasesReleaseIdRequest}.
     */
    public static class Builder {
        private String tagName;
        private String targetCommitish;
        private String name;
        private String body;
        private Boolean draft;
        private Boolean prerelease;
        private MakeLatestEnum makeLatest;
        private String discussionCategoryName;



        /**
         * Setter for tagName.
         * @param  tagName  String value for tagName.
         * @return Builder
         */
        public Builder tagName(String tagName) {
            this.tagName = tagName;
            return this;
        }

        /**
         * Setter for targetCommitish.
         * @param  targetCommitish  String value for targetCommitish.
         * @return Builder
         */
        public Builder targetCommitish(String targetCommitish) {
            this.targetCommitish = targetCommitish;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for body.
         * @param  body  String value for body.
         * @return Builder
         */
        public Builder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Setter for draft.
         * @param  draft  Boolean value for draft.
         * @return Builder
         */
        public Builder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }

        /**
         * Setter for prerelease.
         * @param  prerelease  Boolean value for prerelease.
         * @return Builder
         */
        public Builder prerelease(Boolean prerelease) {
            this.prerelease = prerelease;
            return this;
        }

        /**
         * Setter for makeLatest.
         * @param  makeLatest  MakeLatestEnum value for makeLatest.
         * @return Builder
         */
        public Builder makeLatest(MakeLatestEnum makeLatest) {
            this.makeLatest = makeLatest;
            return this;
        }

        /**
         * Setter for discussionCategoryName.
         * @param  discussionCategoryName  String value for discussionCategoryName.
         * @return Builder
         */
        public Builder discussionCategoryName(String discussionCategoryName) {
            this.discussionCategoryName = discussionCategoryName;
            return this;
        }

        /**
         * Builds a new {@link ReposReleasesReleaseIdRequest} object using the set fields.
         * @return {@link ReposReleasesReleaseIdRequest}
         */
        public ReposReleasesReleaseIdRequest build() {
            return new ReposReleasesReleaseIdRequest(tagName, targetCommitish, name, body, draft,
                    prerelease, makeLatest, discussionCategoryName);
        }
    }
}

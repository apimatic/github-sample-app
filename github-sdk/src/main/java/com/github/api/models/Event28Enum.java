/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Event28Enum to be used.
 */
public enum Event28Enum {
    ENUM_0,

    ENUM_1,

    ENUM_2,

    ENUM_3,

    ENUM_4,

    ENUM_5,

    ENUM_6,

    ENUM_7,

    ENUM_8,

    ENUM_9,

    ENUM_10,

    ENUM_11,

    ENUM_12,

    ENUM_13,

    ENUM_14,

    ENUM_15,

    ENUM_16,

    ENUM_17,

    ENUM_18,

    ENUM_19,

    ENUM_20,

    ENUM_21,

    ENUM_22,

    ENUM_23,

    ENUM_24,

    ENUM_25,

    ENUM_26,

    ENUM_27,

    ENUM_28,

    ENUM_29,

    ENUM_30,

    ENUM_31,

    ENUM_32,

    ENUM_33,

    ENUM_34,

    ENUM_35,

    ENUM_36,

    ENUM_37,

    ENUM_38,

    ENUM_39,

    ENUM_40,

    ENUM_41,

    ENUM_42,

    ENUM_43,

    ENUM_44,

    ENUM_45,

    ENUM_46,

    ENUM_47,

    ENUM_48,

    ENUM_49,

    ENUM_50,

    ENUM_51;


    private static TreeMap<String, Event28Enum> valueMap = new TreeMap<>();
    private String value;

    static {
        ENUM_0.value = "*";
        ENUM_1.value = "branch_protection_rule";
        ENUM_2.value = "check_run";
        ENUM_3.value = "check_suite";
        ENUM_4.value = "code_scanning_alert";
        ENUM_5.value = "commit_comment";
        ENUM_6.value = "create";
        ENUM_7.value = "delete";
        ENUM_8.value = "deployment";
        ENUM_9.value = "deployment_status";
        ENUM_10.value = "deploy_key";
        ENUM_11.value = "discussion";
        ENUM_12.value = "discussion_comment";
        ENUM_13.value = "fork";
        ENUM_14.value = "gollum";
        ENUM_15.value = "issues";
        ENUM_16.value = "issue_comment";
        ENUM_17.value = "label";
        ENUM_18.value = "member";
        ENUM_19.value = "membership";
        ENUM_20.value = "meta";
        ENUM_21.value = "milestone";
        ENUM_22.value = "organization";
        ENUM_23.value = "org_block";
        ENUM_24.value = "package";
        ENUM_25.value = "page_build";
        ENUM_26.value = "project";
        ENUM_27.value = "project_card";
        ENUM_28.value = "project_column";
        ENUM_29.value = "public";
        ENUM_30.value = "pull_request";
        ENUM_31.value = "pull_request_review";
        ENUM_32.value = "pull_request_review_comment";
        ENUM_33.value = "pull_request_review_thread";
        ENUM_34.value = "push";
        ENUM_35.value = "registry_package";
        ENUM_36.value = "release";
        ENUM_37.value = "repository";
        ENUM_38.value = "repository_import";
        ENUM_39.value = "repository_vulnerability_alert";
        ENUM_40.value = "secret_scanning_alert";
        ENUM_41.value = "secret_scanning_alert_location";
        ENUM_42.value = "security_and_analysis";
        ENUM_43.value = "star";
        ENUM_44.value = "status";
        ENUM_45.value = "team";
        ENUM_46.value = "team_add";
        ENUM_47.value = "watch";
        ENUM_48.value = "workflow_job";
        ENUM_49.value = "workflow_run";
        ENUM_50.value = "repository_dispatch";
        ENUM_51.value = "projects_v2_item";

        valueMap.put("*", ENUM_0);
        valueMap.put("branch_protection_rule", ENUM_1);
        valueMap.put("check_run", ENUM_2);
        valueMap.put("check_suite", ENUM_3);
        valueMap.put("code_scanning_alert", ENUM_4);
        valueMap.put("commit_comment", ENUM_5);
        valueMap.put("create", ENUM_6);
        valueMap.put("delete", ENUM_7);
        valueMap.put("deployment", ENUM_8);
        valueMap.put("deployment_status", ENUM_9);
        valueMap.put("deploy_key", ENUM_10);
        valueMap.put("discussion", ENUM_11);
        valueMap.put("discussion_comment", ENUM_12);
        valueMap.put("fork", ENUM_13);
        valueMap.put("gollum", ENUM_14);
        valueMap.put("issues", ENUM_15);
        valueMap.put("issue_comment", ENUM_16);
        valueMap.put("label", ENUM_17);
        valueMap.put("member", ENUM_18);
        valueMap.put("membership", ENUM_19);
        valueMap.put("meta", ENUM_20);
        valueMap.put("milestone", ENUM_21);
        valueMap.put("organization", ENUM_22);
        valueMap.put("org_block", ENUM_23);
        valueMap.put("package", ENUM_24);
        valueMap.put("page_build", ENUM_25);
        valueMap.put("project", ENUM_26);
        valueMap.put("project_card", ENUM_27);
        valueMap.put("project_column", ENUM_28);
        valueMap.put("public", ENUM_29);
        valueMap.put("pull_request", ENUM_30);
        valueMap.put("pull_request_review", ENUM_31);
        valueMap.put("pull_request_review_comment", ENUM_32);
        valueMap.put("pull_request_review_thread", ENUM_33);
        valueMap.put("push", ENUM_34);
        valueMap.put("registry_package", ENUM_35);
        valueMap.put("release", ENUM_36);
        valueMap.put("repository", ENUM_37);
        valueMap.put("repository_import", ENUM_38);
        valueMap.put("repository_vulnerability_alert", ENUM_39);
        valueMap.put("secret_scanning_alert", ENUM_40);
        valueMap.put("secret_scanning_alert_location", ENUM_41);
        valueMap.put("security_and_analysis", ENUM_42);
        valueMap.put("star", ENUM_43);
        valueMap.put("status", ENUM_44);
        valueMap.put("team", ENUM_45);
        valueMap.put("team_add", ENUM_46);
        valueMap.put("watch", ENUM_47);
        valueMap.put("workflow_job", ENUM_48);
        valueMap.put("workflow_run", ENUM_49);
        valueMap.put("repository_dispatch", ENUM_50);
        valueMap.put("projects_v2_item", ENUM_51);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    @com.fasterxml.jackson.annotation.JsonCreator
    public static Event28Enum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @com.fasterxml.jackson.annotation.JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of Event28Enum values to list of string values.
     * @param toConvert The list of Event28Enum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<Event28Enum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (Event28Enum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 
/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for Subkey type.
 */
public class Subkey {
    private Integer id;
    private Integer primaryKeyId;
    private String keyId;
    private String publicKey;
    private List<Object> emails;
    private List<Object> subkeys;
    private Boolean canSign;
    private Boolean canEncryptComms;
    private Boolean canEncryptStorage;
    private Boolean canCertify;
    private String createdAt;
    private OptionalNullable<String> expiresAt;
    private OptionalNullable<String> rawKey;
    private Boolean revoked;

    /**
     * Default constructor.
     */
    public Subkey() {
    }

    /**
     * Initialization constructor.
     * @param  id  Integer value for id.
     * @param  primaryKeyId  Integer value for primaryKeyId.
     * @param  keyId  String value for keyId.
     * @param  publicKey  String value for publicKey.
     * @param  emails  List of Object value for emails.
     * @param  subkeys  List of Object value for subkeys.
     * @param  canSign  Boolean value for canSign.
     * @param  canEncryptComms  Boolean value for canEncryptComms.
     * @param  canEncryptStorage  Boolean value for canEncryptStorage.
     * @param  canCertify  Boolean value for canCertify.
     * @param  createdAt  String value for createdAt.
     * @param  expiresAt  String value for expiresAt.
     * @param  rawKey  String value for rawKey.
     * @param  revoked  Boolean value for revoked.
     */
    public Subkey(
            Integer id,
            Integer primaryKeyId,
            String keyId,
            String publicKey,
            List<Object> emails,
            List<Object> subkeys,
            Boolean canSign,
            Boolean canEncryptComms,
            Boolean canEncryptStorage,
            Boolean canCertify,
            String createdAt,
            String expiresAt,
            String rawKey,
            Boolean revoked) {
        this.id = id;
        this.primaryKeyId = primaryKeyId;
        this.keyId = keyId;
        this.publicKey = publicKey;
        this.emails = emails;
        this.subkeys = subkeys;
        this.canSign = canSign;
        this.canEncryptComms = canEncryptComms;
        this.canEncryptStorage = canEncryptStorage;
        this.canCertify = canCertify;
        this.createdAt = createdAt;
        this.expiresAt = OptionalNullable.of(expiresAt);
        this.rawKey = OptionalNullable.of(rawKey);
        this.revoked = revoked;
    }

    /**
     * Internal initialization constructor.
     */
    protected Subkey(Integer id, Integer primaryKeyId, String keyId, String publicKey,
            List<Object> emails, List<Object> subkeys, Boolean canSign, Boolean canEncryptComms,
            Boolean canEncryptStorage, Boolean canCertify, String createdAt,
            OptionalNullable<String> expiresAt, OptionalNullable<String> rawKey,
            Boolean revoked) {
        this.id = id;
        this.primaryKeyId = primaryKeyId;
        this.keyId = keyId;
        this.publicKey = publicKey;
        this.emails = emails;
        this.subkeys = subkeys;
        this.canSign = canSign;
        this.canEncryptComms = canEncryptComms;
        this.canEncryptStorage = canEncryptStorage;
        this.canCertify = canCertify;
        this.createdAt = createdAt;
        this.expiresAt = expiresAt;
        this.rawKey = rawKey;
        this.revoked = revoked;
    }

    /**
     * Getter for Id.
     * @return Returns the Integer
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for Integer
     */
    @JsonSetter("id")
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for PrimaryKeyId.
     * @return Returns the Integer
     */
    @JsonGetter("primary_key_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPrimaryKeyId() {
        return primaryKeyId;
    }

    /**
     * Setter for PrimaryKeyId.
     * @param primaryKeyId Value for Integer
     */
    @JsonSetter("primary_key_id")
    public void setPrimaryKeyId(Integer primaryKeyId) {
        this.primaryKeyId = primaryKeyId;
    }

    /**
     * Getter for KeyId.
     * @return Returns the String
     */
    @JsonGetter("key_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getKeyId() {
        return keyId;
    }

    /**
     * Setter for KeyId.
     * @param keyId Value for String
     */
    @JsonSetter("key_id")
    public void setKeyId(String keyId) {
        this.keyId = keyId;
    }

    /**
     * Getter for PublicKey.
     * @return Returns the String
     */
    @JsonGetter("public_key")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPublicKey() {
        return publicKey;
    }

    /**
     * Setter for PublicKey.
     * @param publicKey Value for String
     */
    @JsonSetter("public_key")
    public void setPublicKey(String publicKey) {
        this.publicKey = publicKey;
    }

    /**
     * Getter for Emails.
     * @return Returns the List of Object
     */
    @JsonGetter("emails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Object> getEmails() {
        return emails;
    }

    /**
     * Setter for Emails.
     * @param emails Value for List of Object
     */
    @JsonSetter("emails")
    public void setEmails(List<Object> emails) {
        this.emails = emails;
    }

    /**
     * Getter for Subkeys.
     * @return Returns the List of Object
     */
    @JsonGetter("subkeys")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Object> getSubkeys() {
        return subkeys;
    }

    /**
     * Setter for Subkeys.
     * @param subkeys Value for List of Object
     */
    @JsonSetter("subkeys")
    public void setSubkeys(List<Object> subkeys) {
        this.subkeys = subkeys;
    }

    /**
     * Getter for CanSign.
     * @return Returns the Boolean
     */
    @JsonGetter("can_sign")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getCanSign() {
        return canSign;
    }

    /**
     * Setter for CanSign.
     * @param canSign Value for Boolean
     */
    @JsonSetter("can_sign")
    public void setCanSign(Boolean canSign) {
        this.canSign = canSign;
    }

    /**
     * Getter for CanEncryptComms.
     * @return Returns the Boolean
     */
    @JsonGetter("can_encrypt_comms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getCanEncryptComms() {
        return canEncryptComms;
    }

    /**
     * Setter for CanEncryptComms.
     * @param canEncryptComms Value for Boolean
     */
    @JsonSetter("can_encrypt_comms")
    public void setCanEncryptComms(Boolean canEncryptComms) {
        this.canEncryptComms = canEncryptComms;
    }

    /**
     * Getter for CanEncryptStorage.
     * @return Returns the Boolean
     */
    @JsonGetter("can_encrypt_storage")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getCanEncryptStorage() {
        return canEncryptStorage;
    }

    /**
     * Setter for CanEncryptStorage.
     * @param canEncryptStorage Value for Boolean
     */
    @JsonSetter("can_encrypt_storage")
    public void setCanEncryptStorage(Boolean canEncryptStorage) {
        this.canEncryptStorage = canEncryptStorage;
    }

    /**
     * Getter for CanCertify.
     * @return Returns the Boolean
     */
    @JsonGetter("can_certify")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getCanCertify() {
        return canCertify;
    }

    /**
     * Setter for CanCertify.
     * @param canCertify Value for Boolean
     */
    @JsonSetter("can_certify")
    public void setCanCertify(Boolean canCertify) {
        this.canCertify = canCertify;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the String
     */
    @JsonGetter("created_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for String
     */
    @JsonSetter("created_at")
    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Internal Getter for ExpiresAt.
     * @return Returns the Internal String
     */
    @JsonGetter("expires_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetExpiresAt() {
        return this.expiresAt;
    }

    /**
     * Getter for ExpiresAt.
     * @return Returns the String
     */
    public String getExpiresAt() {
        return OptionalNullable.getFrom(expiresAt);
    }

    /**
     * Setter for ExpiresAt.
     * @param expiresAt Value for String
     */
    @JsonSetter("expires_at")
    public void setExpiresAt(String expiresAt) {
        this.expiresAt = OptionalNullable.of(expiresAt);
    }

    /**
     * UnSetter for ExpiresAt.
     */
    public void unsetExpiresAt() {
        expiresAt = null;
    }

    /**
     * Internal Getter for RawKey.
     * @return Returns the Internal String
     */
    @JsonGetter("raw_key")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetRawKey() {
        return this.rawKey;
    }

    /**
     * Getter for RawKey.
     * @return Returns the String
     */
    public String getRawKey() {
        return OptionalNullable.getFrom(rawKey);
    }

    /**
     * Setter for RawKey.
     * @param rawKey Value for String
     */
    @JsonSetter("raw_key")
    public void setRawKey(String rawKey) {
        this.rawKey = OptionalNullable.of(rawKey);
    }

    /**
     * UnSetter for RawKey.
     */
    public void unsetRawKey() {
        rawKey = null;
    }

    /**
     * Getter for Revoked.
     * @return Returns the Boolean
     */
    @JsonGetter("revoked")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getRevoked() {
        return revoked;
    }

    /**
     * Setter for Revoked.
     * @param revoked Value for Boolean
     */
    @JsonSetter("revoked")
    public void setRevoked(Boolean revoked) {
        this.revoked = revoked;
    }

    /**
     * Converts this Subkey into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Subkey [" + "id=" + id + ", primaryKeyId=" + primaryKeyId + ", keyId=" + keyId
                + ", publicKey=" + publicKey + ", emails=" + emails + ", subkeys=" + subkeys
                + ", canSign=" + canSign + ", canEncryptComms=" + canEncryptComms
                + ", canEncryptStorage=" + canEncryptStorage + ", canCertify=" + canCertify
                + ", createdAt=" + createdAt + ", expiresAt=" + expiresAt + ", rawKey=" + rawKey
                + ", revoked=" + revoked + "]";
    }

    /**
     * Builds a new {@link Subkey.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Subkey.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .id(getId())
                .primaryKeyId(getPrimaryKeyId())
                .keyId(getKeyId())
                .publicKey(getPublicKey())
                .emails(getEmails())
                .subkeys(getSubkeys())
                .canSign(getCanSign())
                .canEncryptComms(getCanEncryptComms())
                .canEncryptStorage(getCanEncryptStorage())
                .canCertify(getCanCertify())
                .createdAt(getCreatedAt())
                .revoked(getRevoked());
        builder.expiresAt = internalGetExpiresAt();
        builder.rawKey = internalGetRawKey();
        return builder;
    }

    /**
     * Class to build instances of {@link Subkey}.
     */
    public static class Builder {
        private Integer id;
        private Integer primaryKeyId;
        private String keyId;
        private String publicKey;
        private List<Object> emails;
        private List<Object> subkeys;
        private Boolean canSign;
        private Boolean canEncryptComms;
        private Boolean canEncryptStorage;
        private Boolean canCertify;
        private String createdAt;
        private OptionalNullable<String> expiresAt;
        private OptionalNullable<String> rawKey;
        private Boolean revoked;



        /**
         * Setter for id.
         * @param  id  Integer value for id.
         * @return Builder
         */
        public Builder id(Integer id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for primaryKeyId.
         * @param  primaryKeyId  Integer value for primaryKeyId.
         * @return Builder
         */
        public Builder primaryKeyId(Integer primaryKeyId) {
            this.primaryKeyId = primaryKeyId;
            return this;
        }

        /**
         * Setter for keyId.
         * @param  keyId  String value for keyId.
         * @return Builder
         */
        public Builder keyId(String keyId) {
            this.keyId = keyId;
            return this;
        }

        /**
         * Setter for publicKey.
         * @param  publicKey  String value for publicKey.
         * @return Builder
         */
        public Builder publicKey(String publicKey) {
            this.publicKey = publicKey;
            return this;
        }

        /**
         * Setter for emails.
         * @param  emails  List of Object value for emails.
         * @return Builder
         */
        public Builder emails(List<Object> emails) {
            this.emails = emails;
            return this;
        }

        /**
         * Setter for subkeys.
         * @param  subkeys  List of Object value for subkeys.
         * @return Builder
         */
        public Builder subkeys(List<Object> subkeys) {
            this.subkeys = subkeys;
            return this;
        }

        /**
         * Setter for canSign.
         * @param  canSign  Boolean value for canSign.
         * @return Builder
         */
        public Builder canSign(Boolean canSign) {
            this.canSign = canSign;
            return this;
        }

        /**
         * Setter for canEncryptComms.
         * @param  canEncryptComms  Boolean value for canEncryptComms.
         * @return Builder
         */
        public Builder canEncryptComms(Boolean canEncryptComms) {
            this.canEncryptComms = canEncryptComms;
            return this;
        }

        /**
         * Setter for canEncryptStorage.
         * @param  canEncryptStorage  Boolean value for canEncryptStorage.
         * @return Builder
         */
        public Builder canEncryptStorage(Boolean canEncryptStorage) {
            this.canEncryptStorage = canEncryptStorage;
            return this;
        }

        /**
         * Setter for canCertify.
         * @param  canCertify  Boolean value for canCertify.
         * @return Builder
         */
        public Builder canCertify(Boolean canCertify) {
            this.canCertify = canCertify;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  String value for createdAt.
         * @return Builder
         */
        public Builder createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for expiresAt.
         * @param  expiresAt  String value for expiresAt.
         * @return Builder
         */
        public Builder expiresAt(String expiresAt) {
            this.expiresAt = OptionalNullable.of(expiresAt);
            return this;
        }

        /**
         * UnSetter for expiresAt.
         * @return Builder
         */
        public Builder unsetExpiresAt() {
            expiresAt = null;
            return this;
        }

        /**
         * Setter for rawKey.
         * @param  rawKey  String value for rawKey.
         * @return Builder
         */
        public Builder rawKey(String rawKey) {
            this.rawKey = OptionalNullable.of(rawKey);
            return this;
        }

        /**
         * UnSetter for rawKey.
         * @return Builder
         */
        public Builder unsetRawKey() {
            rawKey = null;
            return this;
        }

        /**
         * Setter for revoked.
         * @param  revoked  Boolean value for revoked.
         * @return Builder
         */
        public Builder revoked(Boolean revoked) {
            this.revoked = revoked;
            return this;
        }

        /**
         * Builds a new {@link Subkey} object using the set fields.
         * @return {@link Subkey}
         */
        public Subkey build() {
            return new Subkey(id, primaryKeyId, keyId, publicKey, emails, subkeys, canSign,
                    canEncryptComms, canEncryptStorage, canCertify, createdAt, expiresAt, rawKey,
                    revoked);
        }
    }
}

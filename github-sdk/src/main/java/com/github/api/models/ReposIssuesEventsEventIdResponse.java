/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;

/**
 * This is a model class for ReposIssuesEventsEventIdResponse type.
 */
public class ReposIssuesEventsEventIdResponse {
    private int id;
    private String nodeId;
    private String url;
    private Object actor;
    private String event;
    private String commitId;
    private String commitUrl;
    private LocalDateTime createdAt;
    private Object issue;
    private Label22 label;
    private Object assignee;
    private Object assigner;
    private Object reviewRequester;
    private Object requestedReviewer;
    private RequestedTeam requestedTeam;
    private IssueEventDismissedReview dismissedReview;
    private Milestone1 milestone;
    private ProjectCard1 projectCard;
    private Rename rename;
    private AuthorAssociationEnum authorAssociation;
    private OptionalNullable<String> lockReason;
    private Object performedViaGithubApp;

    /**
     * Default constructor.
     */
    public ReposIssuesEventsEventIdResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  url  String value for url.
     * @param  actor  Object value for actor.
     * @param  event  String value for event.
     * @param  commitId  String value for commitId.
     * @param  commitUrl  String value for commitUrl.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  issue  Object value for issue.
     * @param  label  Label22 value for label.
     * @param  assignee  Object value for assignee.
     * @param  assigner  Object value for assigner.
     * @param  reviewRequester  Object value for reviewRequester.
     * @param  requestedReviewer  Object value for requestedReviewer.
     * @param  requestedTeam  RequestedTeam value for requestedTeam.
     * @param  dismissedReview  IssueEventDismissedReview value for dismissedReview.
     * @param  milestone  Milestone1 value for milestone.
     * @param  projectCard  ProjectCard1 value for projectCard.
     * @param  rename  Rename value for rename.
     * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
     * @param  lockReason  String value for lockReason.
     * @param  performedViaGithubApp  Object value for performedViaGithubApp.
     */
    public ReposIssuesEventsEventIdResponse(
            int id,
            String nodeId,
            String url,
            Object actor,
            String event,
            String commitId,
            String commitUrl,
            LocalDateTime createdAt,
            Object issue,
            Label22 label,
            Object assignee,
            Object assigner,
            Object reviewRequester,
            Object requestedReviewer,
            RequestedTeam requestedTeam,
            IssueEventDismissedReview dismissedReview,
            Milestone1 milestone,
            ProjectCard1 projectCard,
            Rename rename,
            AuthorAssociationEnum authorAssociation,
            String lockReason,
            Object performedViaGithubApp) {
        this.id = id;
        this.nodeId = nodeId;
        this.url = url;
        this.actor = actor;
        this.event = event;
        this.commitId = commitId;
        this.commitUrl = commitUrl;
        this.createdAt = createdAt;
        this.issue = issue;
        this.label = label;
        this.assignee = assignee;
        this.assigner = assigner;
        this.reviewRequester = reviewRequester;
        this.requestedReviewer = requestedReviewer;
        this.requestedTeam = requestedTeam;
        this.dismissedReview = dismissedReview;
        this.milestone = milestone;
        this.projectCard = projectCard;
        this.rename = rename;
        this.authorAssociation = authorAssociation;
        this.lockReason = OptionalNullable.of(lockReason);
        this.performedViaGithubApp = performedViaGithubApp;
    }

    /**
     * Internal initialization constructor.
     */
    protected ReposIssuesEventsEventIdResponse(int id, String nodeId, String url, Object actor,
            String event, String commitId, String commitUrl, LocalDateTime createdAt, Object issue,
            Label22 label, Object assignee, Object assigner, Object reviewRequester,
            Object requestedReviewer, RequestedTeam requestedTeam,
            IssueEventDismissedReview dismissedReview, Milestone1 milestone,
            ProjectCard1 projectCard, Rename rename, AuthorAssociationEnum authorAssociation,
            OptionalNullable<String> lockReason, Object performedViaGithubApp) {
        this.id = id;
        this.nodeId = nodeId;
        this.url = url;
        this.actor = actor;
        this.event = event;
        this.commitId = commitId;
        this.commitUrl = commitUrl;
        this.createdAt = createdAt;
        this.issue = issue;
        this.label = label;
        this.assignee = assignee;
        this.assigner = assigner;
        this.reviewRequester = reviewRequester;
        this.requestedReviewer = requestedReviewer;
        this.requestedTeam = requestedTeam;
        this.dismissedReview = dismissedReview;
        this.milestone = milestone;
        this.projectCard = projectCard;
        this.rename = rename;
        this.authorAssociation = authorAssociation;
        this.lockReason = lockReason;
        this.performedViaGithubApp = performedViaGithubApp;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for Actor.
     * @return Returns the Object
     */
    @JsonGetter("actor")
    public Object getActor() {
        return actor;
    }

    /**
     * Setter for Actor.
     * @param actor Value for Object
     */
    @JsonSetter("actor")
    public void setActor(Object actor) {
        this.actor = actor;
    }

    /**
     * Getter for Event.
     * @return Returns the String
     */
    @JsonGetter("event")
    public String getEvent() {
        return event;
    }

    /**
     * Setter for Event.
     * @param event Value for String
     */
    @JsonSetter("event")
    public void setEvent(String event) {
        this.event = event;
    }

    /**
     * Getter for CommitId.
     * @return Returns the String
     */
    @JsonGetter("commit_id")
    public String getCommitId() {
        return commitId;
    }

    /**
     * Setter for CommitId.
     * @param commitId Value for String
     */
    @JsonSetter("commit_id")
    public void setCommitId(String commitId) {
        this.commitId = commitId;
    }

    /**
     * Getter for CommitUrl.
     * @return Returns the String
     */
    @JsonGetter("commit_url")
    public String getCommitUrl() {
        return commitUrl;
    }

    /**
     * Setter for CommitUrl.
     * @param commitUrl Value for String
     */
    @JsonSetter("commit_url")
    public void setCommitUrl(String commitUrl) {
        this.commitUrl = commitUrl;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for Issue.
     * @return Returns the Object
     */
    @JsonGetter("issue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getIssue() {
        return issue;
    }

    /**
     * Setter for Issue.
     * @param issue Value for Object
     */
    @JsonSetter("issue")
    public void setIssue(Object issue) {
        this.issue = issue;
    }

    /**
     * Getter for Label.
     * @return Returns the Label22
     */
    @JsonGetter("label")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Label22 getLabel() {
        return label;
    }

    /**
     * Setter for Label.
     * @param label Value for Label22
     */
    @JsonSetter("label")
    public void setLabel(Label22 label) {
        this.label = label;
    }

    /**
     * Getter for Assignee.
     * @return Returns the Object
     */
    @JsonGetter("assignee")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getAssignee() {
        return assignee;
    }

    /**
     * Setter for Assignee.
     * @param assignee Value for Object
     */
    @JsonSetter("assignee")
    public void setAssignee(Object assignee) {
        this.assignee = assignee;
    }

    /**
     * Getter for Assigner.
     * @return Returns the Object
     */
    @JsonGetter("assigner")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getAssigner() {
        return assigner;
    }

    /**
     * Setter for Assigner.
     * @param assigner Value for Object
     */
    @JsonSetter("assigner")
    public void setAssigner(Object assigner) {
        this.assigner = assigner;
    }

    /**
     * Getter for ReviewRequester.
     * @return Returns the Object
     */
    @JsonGetter("review_requester")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getReviewRequester() {
        return reviewRequester;
    }

    /**
     * Setter for ReviewRequester.
     * @param reviewRequester Value for Object
     */
    @JsonSetter("review_requester")
    public void setReviewRequester(Object reviewRequester) {
        this.reviewRequester = reviewRequester;
    }

    /**
     * Getter for RequestedReviewer.
     * @return Returns the Object
     */
    @JsonGetter("requested_reviewer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getRequestedReviewer() {
        return requestedReviewer;
    }

    /**
     * Setter for RequestedReviewer.
     * @param requestedReviewer Value for Object
     */
    @JsonSetter("requested_reviewer")
    public void setRequestedReviewer(Object requestedReviewer) {
        this.requestedReviewer = requestedReviewer;
    }

    /**
     * Getter for RequestedTeam.
     * @return Returns the RequestedTeam
     */
    @JsonGetter("requested_team")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RequestedTeam getRequestedTeam() {
        return requestedTeam;
    }

    /**
     * Setter for RequestedTeam.
     * @param requestedTeam Value for RequestedTeam
     */
    @JsonSetter("requested_team")
    public void setRequestedTeam(RequestedTeam requestedTeam) {
        this.requestedTeam = requestedTeam;
    }

    /**
     * Getter for DismissedReview.
     * @return Returns the IssueEventDismissedReview
     */
    @JsonGetter("dismissed_review")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public IssueEventDismissedReview getDismissedReview() {
        return dismissedReview;
    }

    /**
     * Setter for DismissedReview.
     * @param dismissedReview Value for IssueEventDismissedReview
     */
    @JsonSetter("dismissed_review")
    public void setDismissedReview(IssueEventDismissedReview dismissedReview) {
        this.dismissedReview = dismissedReview;
    }

    /**
     * Getter for Milestone.
     * @return Returns the Milestone1
     */
    @JsonGetter("milestone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Milestone1 getMilestone() {
        return milestone;
    }

    /**
     * Setter for Milestone.
     * @param milestone Value for Milestone1
     */
    @JsonSetter("milestone")
    public void setMilestone(Milestone1 milestone) {
        this.milestone = milestone;
    }

    /**
     * Getter for ProjectCard.
     * @return Returns the ProjectCard1
     */
    @JsonGetter("project_card")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ProjectCard1 getProjectCard() {
        return projectCard;
    }

    /**
     * Setter for ProjectCard.
     * @param projectCard Value for ProjectCard1
     */
    @JsonSetter("project_card")
    public void setProjectCard(ProjectCard1 projectCard) {
        this.projectCard = projectCard;
    }

    /**
     * Getter for Rename.
     * @return Returns the Rename
     */
    @JsonGetter("rename")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Rename getRename() {
        return rename;
    }

    /**
     * Setter for Rename.
     * @param rename Value for Rename
     */
    @JsonSetter("rename")
    public void setRename(Rename rename) {
        this.rename = rename;
    }

    /**
     * Getter for AuthorAssociation.
     * @return Returns the AuthorAssociationEnum
     */
    @JsonGetter("author_association")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AuthorAssociationEnum getAuthorAssociation() {
        return authorAssociation;
    }

    /**
     * Setter for AuthorAssociation.
     * @param authorAssociation Value for AuthorAssociationEnum
     */
    @JsonSetter("author_association")
    public void setAuthorAssociation(AuthorAssociationEnum authorAssociation) {
        this.authorAssociation = authorAssociation;
    }

    /**
     * Internal Getter for LockReason.
     * @return Returns the Internal String
     */
    @JsonGetter("lock_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLockReason() {
        return this.lockReason;
    }

    /**
     * Getter for LockReason.
     * @return Returns the String
     */
    public String getLockReason() {
        return OptionalNullable.getFrom(lockReason);
    }

    /**
     * Setter for LockReason.
     * @param lockReason Value for String
     */
    @JsonSetter("lock_reason")
    public void setLockReason(String lockReason) {
        this.lockReason = OptionalNullable.of(lockReason);
    }

    /**
     * UnSetter for LockReason.
     */
    public void unsetLockReason() {
        lockReason = null;
    }

    /**
     * Getter for PerformedViaGithubApp.
     * @return Returns the Object
     */
    @JsonGetter("performed_via_github_app")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getPerformedViaGithubApp() {
        return performedViaGithubApp;
    }

    /**
     * Setter for PerformedViaGithubApp.
     * @param performedViaGithubApp Value for Object
     */
    @JsonSetter("performed_via_github_app")
    public void setPerformedViaGithubApp(Object performedViaGithubApp) {
        this.performedViaGithubApp = performedViaGithubApp;
    }

    /**
     * Converts this ReposIssuesEventsEventIdResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposIssuesEventsEventIdResponse [" + "id=" + id + ", nodeId=" + nodeId + ", url="
                + url + ", actor=" + actor + ", event=" + event + ", commitId=" + commitId
                + ", commitUrl=" + commitUrl + ", createdAt=" + createdAt + ", issue=" + issue
                + ", label=" + label + ", assignee=" + assignee + ", assigner=" + assigner
                + ", reviewRequester=" + reviewRequester + ", requestedReviewer="
                + requestedReviewer + ", requestedTeam=" + requestedTeam + ", dismissedReview="
                + dismissedReview + ", milestone=" + milestone + ", projectCard=" + projectCard
                + ", rename=" + rename + ", authorAssociation=" + authorAssociation
                + ", lockReason=" + lockReason + ", performedViaGithubApp=" + performedViaGithubApp
                + "]";
    }

    /**
     * Builds a new {@link ReposIssuesEventsEventIdResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposIssuesEventsEventIdResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, nodeId, url, actor, event, commitId, commitUrl, createdAt)
                .issue(getIssue())
                .label(getLabel())
                .assignee(getAssignee())
                .assigner(getAssigner())
                .reviewRequester(getReviewRequester())
                .requestedReviewer(getRequestedReviewer())
                .requestedTeam(getRequestedTeam())
                .dismissedReview(getDismissedReview())
                .milestone(getMilestone())
                .projectCard(getProjectCard())
                .rename(getRename())
                .authorAssociation(getAuthorAssociation())
                .performedViaGithubApp(getPerformedViaGithubApp());
        builder.lockReason = internalGetLockReason();
        return builder;
    }

    /**
     * Class to build instances of {@link ReposIssuesEventsEventIdResponse}.
     */
    public static class Builder {
        private int id;
        private String nodeId;
        private String url;
        private Object actor;
        private String event;
        private String commitId;
        private String commitUrl;
        private LocalDateTime createdAt;
        private Object issue;
        private Label22 label;
        private Object assignee;
        private Object assigner;
        private Object reviewRequester;
        private Object requestedReviewer;
        private RequestedTeam requestedTeam;
        private IssueEventDismissedReview dismissedReview;
        private Milestone1 milestone;
        private ProjectCard1 projectCard;
        private Rename rename;
        private AuthorAssociationEnum authorAssociation;
        private OptionalNullable<String> lockReason;
        private Object performedViaGithubApp;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  url  String value for url.
         * @param  actor  Object value for actor.
         * @param  event  String value for event.
         * @param  commitId  String value for commitId.
         * @param  commitUrl  String value for commitUrl.
         * @param  createdAt  LocalDateTime value for createdAt.
         */
        public Builder(int id, String nodeId, String url, Object actor, String event,
                String commitId, String commitUrl, LocalDateTime createdAt) {
            this.id = id;
            this.nodeId = nodeId;
            this.url = url;
            this.actor = actor;
            this.event = event;
            this.commitId = commitId;
            this.commitUrl = commitUrl;
            this.createdAt = createdAt;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for actor.
         * @param  actor  Object value for actor.
         * @return Builder
         */
        public Builder actor(Object actor) {
            this.actor = actor;
            return this;
        }

        /**
         * Setter for event.
         * @param  event  String value for event.
         * @return Builder
         */
        public Builder event(String event) {
            this.event = event;
            return this;
        }

        /**
         * Setter for commitId.
         * @param  commitId  String value for commitId.
         * @return Builder
         */
        public Builder commitId(String commitId) {
            this.commitId = commitId;
            return this;
        }

        /**
         * Setter for commitUrl.
         * @param  commitUrl  String value for commitUrl.
         * @return Builder
         */
        public Builder commitUrl(String commitUrl) {
            this.commitUrl = commitUrl;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for issue.
         * @param  issue  Object value for issue.
         * @return Builder
         */
        public Builder issue(Object issue) {
            this.issue = issue;
            return this;
        }

        /**
         * Setter for label.
         * @param  label  Label22 value for label.
         * @return Builder
         */
        public Builder label(Label22 label) {
            this.label = label;
            return this;
        }

        /**
         * Setter for assignee.
         * @param  assignee  Object value for assignee.
         * @return Builder
         */
        public Builder assignee(Object assignee) {
            this.assignee = assignee;
            return this;
        }

        /**
         * Setter for assigner.
         * @param  assigner  Object value for assigner.
         * @return Builder
         */
        public Builder assigner(Object assigner) {
            this.assigner = assigner;
            return this;
        }

        /**
         * Setter for reviewRequester.
         * @param  reviewRequester  Object value for reviewRequester.
         * @return Builder
         */
        public Builder reviewRequester(Object reviewRequester) {
            this.reviewRequester = reviewRequester;
            return this;
        }

        /**
         * Setter for requestedReviewer.
         * @param  requestedReviewer  Object value for requestedReviewer.
         * @return Builder
         */
        public Builder requestedReviewer(Object requestedReviewer) {
            this.requestedReviewer = requestedReviewer;
            return this;
        }

        /**
         * Setter for requestedTeam.
         * @param  requestedTeam  RequestedTeam value for requestedTeam.
         * @return Builder
         */
        public Builder requestedTeam(RequestedTeam requestedTeam) {
            this.requestedTeam = requestedTeam;
            return this;
        }

        /**
         * Setter for dismissedReview.
         * @param  dismissedReview  IssueEventDismissedReview value for dismissedReview.
         * @return Builder
         */
        public Builder dismissedReview(IssueEventDismissedReview dismissedReview) {
            this.dismissedReview = dismissedReview;
            return this;
        }

        /**
         * Setter for milestone.
         * @param  milestone  Milestone1 value for milestone.
         * @return Builder
         */
        public Builder milestone(Milestone1 milestone) {
            this.milestone = milestone;
            return this;
        }

        /**
         * Setter for projectCard.
         * @param  projectCard  ProjectCard1 value for projectCard.
         * @return Builder
         */
        public Builder projectCard(ProjectCard1 projectCard) {
            this.projectCard = projectCard;
            return this;
        }

        /**
         * Setter for rename.
         * @param  rename  Rename value for rename.
         * @return Builder
         */
        public Builder rename(Rename rename) {
            this.rename = rename;
            return this;
        }

        /**
         * Setter for authorAssociation.
         * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
         * @return Builder
         */
        public Builder authorAssociation(AuthorAssociationEnum authorAssociation) {
            this.authorAssociation = authorAssociation;
            return this;
        }

        /**
         * Setter for lockReason.
         * @param  lockReason  String value for lockReason.
         * @return Builder
         */
        public Builder lockReason(String lockReason) {
            this.lockReason = OptionalNullable.of(lockReason);
            return this;
        }

        /**
         * UnSetter for lockReason.
         * @return Builder
         */
        public Builder unsetLockReason() {
            lockReason = null;
            return this;
        }

        /**
         * Setter for performedViaGithubApp.
         * @param  performedViaGithubApp  Object value for performedViaGithubApp.
         * @return Builder
         */
        public Builder performedViaGithubApp(Object performedViaGithubApp) {
            this.performedViaGithubApp = performedViaGithubApp;
            return this;
        }

        /**
         * Builds a new {@link ReposIssuesEventsEventIdResponse} object using the set fields.
         * @return {@link ReposIssuesEventsEventIdResponse}
         */
        public ReposIssuesEventsEventIdResponse build() {
            return new ReposIssuesEventsEventIdResponse(id, nodeId, url, actor, event, commitId,
                    commitUrl, createdAt, issue, label, assignee, assigner, reviewRequester,
                    requestedReviewer, requestedTeam, dismissedReview, milestone, projectCard,
                    rename, authorAssociation, lockReason, performedViaGithubApp);
        }
    }
}

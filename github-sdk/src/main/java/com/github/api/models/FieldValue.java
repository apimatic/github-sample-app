/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for FieldValue type.
 */
public class FieldValue {
    private String fieldNodeId;
    private String fieldType;

    /**
     * Default constructor.
     */
    public FieldValue() {
    }

    /**
     * Initialization constructor.
     * @param  fieldNodeId  String value for fieldNodeId.
     * @param  fieldType  String value for fieldType.
     */
    public FieldValue(
            String fieldNodeId,
            String fieldType) {
        this.fieldNodeId = fieldNodeId;
        this.fieldType = fieldType;
    }

    /**
     * Getter for FieldNodeId.
     * @return Returns the String
     */
    @JsonGetter("field_node_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getFieldNodeId() {
        return fieldNodeId;
    }

    /**
     * Setter for FieldNodeId.
     * @param fieldNodeId Value for String
     */
    @JsonSetter("field_node_id")
    public void setFieldNodeId(String fieldNodeId) {
        this.fieldNodeId = fieldNodeId;
    }

    /**
     * Getter for FieldType.
     * @return Returns the String
     */
    @JsonGetter("field_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getFieldType() {
        return fieldType;
    }

    /**
     * Setter for FieldType.
     * @param fieldType Value for String
     */
    @JsonSetter("field_type")
    public void setFieldType(String fieldType) {
        this.fieldType = fieldType;
    }

    /**
     * Converts this FieldValue into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "FieldValue [" + "fieldNodeId=" + fieldNodeId + ", fieldType=" + fieldType + "]";
    }

    /**
     * Builds a new {@link FieldValue.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link FieldValue.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .fieldNodeId(getFieldNodeId())
                .fieldType(getFieldType());
        return builder;
    }

    /**
     * Class to build instances of {@link FieldValue}.
     */
    public static class Builder {
        private String fieldNodeId;
        private String fieldType;



        /**
         * Setter for fieldNodeId.
         * @param  fieldNodeId  String value for fieldNodeId.
         * @return Builder
         */
        public Builder fieldNodeId(String fieldNodeId) {
            this.fieldNodeId = fieldNodeId;
            return this;
        }

        /**
         * Setter for fieldType.
         * @param  fieldType  String value for fieldType.
         * @return Builder
         */
        public Builder fieldType(String fieldType) {
            this.fieldType = fieldType;
            return this;
        }

        /**
         * Builds a new {@link FieldValue} object using the set fields.
         * @return {@link FieldValue}
         */
        public FieldValue build() {
            return new FieldValue(fieldNodeId, fieldType);
        }
    }
}

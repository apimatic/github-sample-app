/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Job1 type.
 */
public class Job1 {
    private String id;
    private String correlator;
    private String htmlUrl;

    /**
     * Default constructor.
     */
    public Job1() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  correlator  String value for correlator.
     * @param  htmlUrl  String value for htmlUrl.
     */
    public Job1(
            String id,
            String correlator,
            String htmlUrl) {
        this.id = id;
        this.correlator = correlator;
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Id.
     * The external ID of the job.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The external ID of the job.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Correlator.
     * Correlator provides a key that is used to group snapshots submitted over time. Only the
     * "latest" submitted snapshot for a given combination of `job.correlator` and `detector.name`
     * will be considered when calculating a repository's current dependencies. Correlator should be
     * as unique as it takes to distinguish all detection runs for a given "wave" of CI workflow you
     * run. If you're using GitHub Actions, a good default value for this could be the environment
     * variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build
     * matrix, then you'll also need to add additional key(s) to distinguish between each submission
     * inside a matrix variation.
     * @return Returns the String
     */
    @JsonGetter("correlator")
    public String getCorrelator() {
        return correlator;
    }

    /**
     * Setter for Correlator.
     * Correlator provides a key that is used to group snapshots submitted over time. Only the
     * "latest" submitted snapshot for a given combination of `job.correlator` and `detector.name`
     * will be considered when calculating a repository's current dependencies. Correlator should be
     * as unique as it takes to distinguish all detection runs for a given "wave" of CI workflow you
     * run. If you're using GitHub Actions, a good default value for this could be the environment
     * variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build
     * matrix, then you'll also need to add additional key(s) to distinguish between each submission
     * inside a matrix variation.
     * @param correlator Value for String
     */
    @JsonSetter("correlator")
    public void setCorrelator(String correlator) {
        this.correlator = correlator;
    }

    /**
     * Getter for HtmlUrl.
     * The url for the job.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * The url for the job.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Converts this Job1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Job1 [" + "id=" + id + ", correlator=" + correlator + ", htmlUrl=" + htmlUrl + "]";
    }

    /**
     * Builds a new {@link Job1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Job1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, correlator)
                .htmlUrl(getHtmlUrl());
        return builder;
    }

    /**
     * Class to build instances of {@link Job1}.
     */
    public static class Builder {
        private String id;
        private String correlator;
        private String htmlUrl;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  String value for id.
         * @param  correlator  String value for correlator.
         */
        public Builder(String id, String correlator) {
            this.id = id;
            this.correlator = correlator;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for correlator.
         * @param  correlator  String value for correlator.
         * @return Builder
         */
        public Builder correlator(String correlator) {
            this.correlator = correlator;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Builds a new {@link Job1} object using the set fields.
         * @return {@link Job1}
         */
        public Job1 build() {
            return new Job1(id, correlator, htmlUrl);
        }
    }
}

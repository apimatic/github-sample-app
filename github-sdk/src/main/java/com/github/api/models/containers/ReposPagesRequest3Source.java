/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.github.api.ApiHelper;
import com.github.api.models.Source21;
import com.github.api.models.Source2Enum;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = ReposPagesRequest3Source.ReposPagesRequest3SourceDeserializer.class)
public abstract class ReposPagesRequest3Source {
    
    /**
     * Any-of type initialization method.
     * @param source2 Source2Enum value for source2.
     * @return The Source2Case object.
     */
    public static ReposPagesRequest3Source fromSource2(Source2Enum source2) {
        return source2 == null ? null : new Source2Case(source2);
    }

    /**
     * Any-of type initialization method.
     * @param source21 Source21 value for source21.
     * @return The Source21Case object.
     */
    public static ReposPagesRequest3Source fromSource21(Source21 source21) {
        return source21 == null ? null : new Source21Case(source21);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R source2(Source2Enum source2);

        R source21(Source21 source21);
    }

    /**
     * This is a implementation class for Source2Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class Source2Case extends ReposPagesRequest3Source {

        @JsonValue
        private Source2Enum source2;

        Source2Case(Source2Enum source2) {
            this.source2 = source2;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.source2(this.source2);
        }

        @JsonCreator
        private Source2Case(JsonNode jsonNode) throws IOException {
            this.source2 = 
                Source2Enum.fromString(ApiHelper.deserialize(jsonNode, String.class));
            if (this.source2 == null) {
                throw new IllegalArgumentException();
            }
        }

        @Override
        public String toString() {
            return source2.toString();
        }
    }

    /**
     * This is a implementation class for Source21Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class Source21Case extends ReposPagesRequest3Source {

        @JsonValue
        private Source21 source21;

        Source21Case(Source21 source21) {
            this.source21 = source21;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.source21(this.source21);
        }

        @JsonCreator
        private Source21Case(JsonNode jsonNode) throws IOException {
            this.source21 = ApiHelper.deserialize(jsonNode,
                Source21.class);
        }

        @Override
        public String toString() {
            return source21.toString();
        }
    }

    /**
     * This is a custom deserializer class for ReposPagesRequest3Source.
     */
    protected static class ReposPagesRequest3SourceDeserializer
            extends JsonDeserializer<ReposPagesRequest3Source> {

        @Override
        public ReposPagesRequest3Source deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(Source2Case.class,
                    Source21Case.class), false);
        }
    }

}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for WorkflowRun2 type.
 */
public class WorkflowRun2 {
    private Object actor;
    private String artifactsUrl;
    private String cancelUrl;
    private int checkSuiteId;
    private String checkSuiteNodeId;
    private String checkSuiteUrl;
    private Object conclusion;
    private LocalDateTime createdAt;
    private String event;
    private String headBranch;
    private SimpleCommit2 headCommit;
    private RepositoryLite headRepository;
    private String headSha;
    private String htmlUrl;
    private int id;
    private String jobsUrl;
    private String logsUrl;
    private String name;
    private String nodeId;
    private String path;
    private String previousAttemptUrl;
    private List<PullRequests28> pullRequests;
    private OptionalNullable<List<ReferencedWorkflow1>> referencedWorkflows;
    private RepositoryLite repository;
    private String rerunUrl;
    private int runAttempt;
    private int runNumber;
    private LocalDateTime runStartedAt;
    private Status17Enum status;
    private Object triggeringActor;
    private LocalDateTime updatedAt;
    private String url;
    private int workflowId;
    private String workflowUrl;

    /**
     * Default constructor.
     */
    public WorkflowRun2() {
    }

    /**
     * Initialization constructor.
     * @param  actor  Object value for actor.
     * @param  artifactsUrl  String value for artifactsUrl.
     * @param  cancelUrl  String value for cancelUrl.
     * @param  checkSuiteId  int value for checkSuiteId.
     * @param  checkSuiteNodeId  String value for checkSuiteNodeId.
     * @param  checkSuiteUrl  String value for checkSuiteUrl.
     * @param  conclusion  Object value for conclusion.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  event  String value for event.
     * @param  headBranch  String value for headBranch.
     * @param  headCommit  SimpleCommit2 value for headCommit.
     * @param  headRepository  RepositoryLite value for headRepository.
     * @param  headSha  String value for headSha.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  id  int value for id.
     * @param  jobsUrl  String value for jobsUrl.
     * @param  logsUrl  String value for logsUrl.
     * @param  name  String value for name.
     * @param  nodeId  String value for nodeId.
     * @param  path  String value for path.
     * @param  previousAttemptUrl  String value for previousAttemptUrl.
     * @param  pullRequests  List of PullRequests28 value for pullRequests.
     * @param  repository  RepositoryLite value for repository.
     * @param  rerunUrl  String value for rerunUrl.
     * @param  runAttempt  int value for runAttempt.
     * @param  runNumber  int value for runNumber.
     * @param  runStartedAt  LocalDateTime value for runStartedAt.
     * @param  status  Status17Enum value for status.
     * @param  triggeringActor  Object value for triggeringActor.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  url  String value for url.
     * @param  workflowId  int value for workflowId.
     * @param  workflowUrl  String value for workflowUrl.
     * @param  referencedWorkflows  List of ReferencedWorkflow1 value for referencedWorkflows.
     */
    public WorkflowRun2(
            Object actor,
            String artifactsUrl,
            String cancelUrl,
            int checkSuiteId,
            String checkSuiteNodeId,
            String checkSuiteUrl,
            Object conclusion,
            LocalDateTime createdAt,
            String event,
            String headBranch,
            SimpleCommit2 headCommit,
            RepositoryLite headRepository,
            String headSha,
            String htmlUrl,
            int id,
            String jobsUrl,
            String logsUrl,
            String name,
            String nodeId,
            String path,
            String previousAttemptUrl,
            List<PullRequests28> pullRequests,
            RepositoryLite repository,
            String rerunUrl,
            int runAttempt,
            int runNumber,
            LocalDateTime runStartedAt,
            Status17Enum status,
            Object triggeringActor,
            LocalDateTime updatedAt,
            String url,
            int workflowId,
            String workflowUrl,
            List<ReferencedWorkflow1> referencedWorkflows) {
        this.actor = actor;
        this.artifactsUrl = artifactsUrl;
        this.cancelUrl = cancelUrl;
        this.checkSuiteId = checkSuiteId;
        this.checkSuiteNodeId = checkSuiteNodeId;
        this.checkSuiteUrl = checkSuiteUrl;
        this.conclusion = conclusion;
        this.createdAt = createdAt;
        this.event = event;
        this.headBranch = headBranch;
        this.headCommit = headCommit;
        this.headRepository = headRepository;
        this.headSha = headSha;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.jobsUrl = jobsUrl;
        this.logsUrl = logsUrl;
        this.name = name;
        this.nodeId = nodeId;
        this.path = path;
        this.previousAttemptUrl = previousAttemptUrl;
        this.pullRequests = pullRequests;
        this.referencedWorkflows = OptionalNullable.of(referencedWorkflows);
        this.repository = repository;
        this.rerunUrl = rerunUrl;
        this.runAttempt = runAttempt;
        this.runNumber = runNumber;
        this.runStartedAt = runStartedAt;
        this.status = status;
        this.triggeringActor = triggeringActor;
        this.updatedAt = updatedAt;
        this.url = url;
        this.workflowId = workflowId;
        this.workflowUrl = workflowUrl;
    }

    /**
     * Internal initialization constructor.
     */
    protected WorkflowRun2(Object actor, String artifactsUrl, String cancelUrl, int checkSuiteId,
            String checkSuiteNodeId, String checkSuiteUrl, Object conclusion,
            LocalDateTime createdAt, String event, String headBranch, SimpleCommit2 headCommit,
            RepositoryLite headRepository, String headSha, String htmlUrl, int id, String jobsUrl,
            String logsUrl, String name, String nodeId, String path, String previousAttemptUrl,
            List<PullRequests28> pullRequests, RepositoryLite repository, String rerunUrl,
            int runAttempt, int runNumber, LocalDateTime runStartedAt, Status17Enum status,
            Object triggeringActor, LocalDateTime updatedAt, String url, int workflowId,
            String workflowUrl, OptionalNullable<List<ReferencedWorkflow1>> referencedWorkflows) {
        this.actor = actor;
        this.artifactsUrl = artifactsUrl;
        this.cancelUrl = cancelUrl;
        this.checkSuiteId = checkSuiteId;
        this.checkSuiteNodeId = checkSuiteNodeId;
        this.checkSuiteUrl = checkSuiteUrl;
        this.conclusion = conclusion;
        this.createdAt = createdAt;
        this.event = event;
        this.headBranch = headBranch;
        this.headCommit = headCommit;
        this.headRepository = headRepository;
        this.headSha = headSha;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.jobsUrl = jobsUrl;
        this.logsUrl = logsUrl;
        this.name = name;
        this.nodeId = nodeId;
        this.path = path;
        this.previousAttemptUrl = previousAttemptUrl;
        this.pullRequests = pullRequests;
        this.referencedWorkflows = referencedWorkflows;
        this.repository = repository;
        this.rerunUrl = rerunUrl;
        this.runAttempt = runAttempt;
        this.runNumber = runNumber;
        this.runStartedAt = runStartedAt;
        this.status = status;
        this.triggeringActor = triggeringActor;
        this.updatedAt = updatedAt;
        this.url = url;
        this.workflowId = workflowId;
        this.workflowUrl = workflowUrl;
    }

    /**
     * Getter for Actor.
     * @return Returns the Object
     */
    @JsonGetter("actor")
    public Object getActor() {
        return actor;
    }

    /**
     * Setter for Actor.
     * @param actor Value for Object
     */
    @JsonSetter("actor")
    public void setActor(Object actor) {
        this.actor = actor;
    }

    /**
     * Getter for ArtifactsUrl.
     * @return Returns the String
     */
    @JsonGetter("artifacts_url")
    public String getArtifactsUrl() {
        return artifactsUrl;
    }

    /**
     * Setter for ArtifactsUrl.
     * @param artifactsUrl Value for String
     */
    @JsonSetter("artifacts_url")
    public void setArtifactsUrl(String artifactsUrl) {
        this.artifactsUrl = artifactsUrl;
    }

    /**
     * Getter for CancelUrl.
     * @return Returns the String
     */
    @JsonGetter("cancel_url")
    public String getCancelUrl() {
        return cancelUrl;
    }

    /**
     * Setter for CancelUrl.
     * @param cancelUrl Value for String
     */
    @JsonSetter("cancel_url")
    public void setCancelUrl(String cancelUrl) {
        this.cancelUrl = cancelUrl;
    }

    /**
     * Getter for CheckSuiteId.
     * @return Returns the int
     */
    @JsonGetter("check_suite_id")
    public int getCheckSuiteId() {
        return checkSuiteId;
    }

    /**
     * Setter for CheckSuiteId.
     * @param checkSuiteId Value for int
     */
    @JsonSetter("check_suite_id")
    public void setCheckSuiteId(int checkSuiteId) {
        this.checkSuiteId = checkSuiteId;
    }

    /**
     * Getter for CheckSuiteNodeId.
     * @return Returns the String
     */
    @JsonGetter("check_suite_node_id")
    public String getCheckSuiteNodeId() {
        return checkSuiteNodeId;
    }

    /**
     * Setter for CheckSuiteNodeId.
     * @param checkSuiteNodeId Value for String
     */
    @JsonSetter("check_suite_node_id")
    public void setCheckSuiteNodeId(String checkSuiteNodeId) {
        this.checkSuiteNodeId = checkSuiteNodeId;
    }

    /**
     * Getter for CheckSuiteUrl.
     * @return Returns the String
     */
    @JsonGetter("check_suite_url")
    public String getCheckSuiteUrl() {
        return checkSuiteUrl;
    }

    /**
     * Setter for CheckSuiteUrl.
     * @param checkSuiteUrl Value for String
     */
    @JsonSetter("check_suite_url")
    public void setCheckSuiteUrl(String checkSuiteUrl) {
        this.checkSuiteUrl = checkSuiteUrl;
    }

    /**
     * Getter for Conclusion.
     * @return Returns the Object
     */
    @JsonGetter("conclusion")
    public Object getConclusion() {
        return conclusion;
    }

    /**
     * Setter for Conclusion.
     * @param conclusion Value for Object
     */
    @JsonSetter("conclusion")
    public void setConclusion(Object conclusion) {
        this.conclusion = conclusion;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for Event.
     * @return Returns the String
     */
    @JsonGetter("event")
    public String getEvent() {
        return event;
    }

    /**
     * Setter for Event.
     * @param event Value for String
     */
    @JsonSetter("event")
    public void setEvent(String event) {
        this.event = event;
    }

    /**
     * Getter for HeadBranch.
     * @return Returns the String
     */
    @JsonGetter("head_branch")
    public String getHeadBranch() {
        return headBranch;
    }

    /**
     * Setter for HeadBranch.
     * @param headBranch Value for String
     */
    @JsonSetter("head_branch")
    public void setHeadBranch(String headBranch) {
        this.headBranch = headBranch;
    }

    /**
     * Getter for HeadCommit.
     * @return Returns the SimpleCommit2
     */
    @JsonGetter("head_commit")
    public SimpleCommit2 getHeadCommit() {
        return headCommit;
    }

    /**
     * Setter for HeadCommit.
     * @param headCommit Value for SimpleCommit2
     */
    @JsonSetter("head_commit")
    public void setHeadCommit(SimpleCommit2 headCommit) {
        this.headCommit = headCommit;
    }

    /**
     * Getter for HeadRepository.
     * @return Returns the RepositoryLite
     */
    @JsonGetter("head_repository")
    public RepositoryLite getHeadRepository() {
        return headRepository;
    }

    /**
     * Setter for HeadRepository.
     * @param headRepository Value for RepositoryLite
     */
    @JsonSetter("head_repository")
    public void setHeadRepository(RepositoryLite headRepository) {
        this.headRepository = headRepository;
    }

    /**
     * Getter for HeadSha.
     * @return Returns the String
     */
    @JsonGetter("head_sha")
    public String getHeadSha() {
        return headSha;
    }

    /**
     * Setter for HeadSha.
     * @param headSha Value for String
     */
    @JsonSetter("head_sha")
    public void setHeadSha(String headSha) {
        this.headSha = headSha;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for JobsUrl.
     * @return Returns the String
     */
    @JsonGetter("jobs_url")
    public String getJobsUrl() {
        return jobsUrl;
    }

    /**
     * Setter for JobsUrl.
     * @param jobsUrl Value for String
     */
    @JsonSetter("jobs_url")
    public void setJobsUrl(String jobsUrl) {
        this.jobsUrl = jobsUrl;
    }

    /**
     * Getter for LogsUrl.
     * @return Returns the String
     */
    @JsonGetter("logs_url")
    public String getLogsUrl() {
        return logsUrl;
    }

    /**
     * Setter for LogsUrl.
     * @param logsUrl Value for String
     */
    @JsonSetter("logs_url")
    public void setLogsUrl(String logsUrl) {
        this.logsUrl = logsUrl;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Path.
     * @return Returns the String
     */
    @JsonGetter("path")
    public String getPath() {
        return path;
    }

    /**
     * Setter for Path.
     * @param path Value for String
     */
    @JsonSetter("path")
    public void setPath(String path) {
        this.path = path;
    }

    /**
     * Getter for PreviousAttemptUrl.
     * @return Returns the String
     */
    @JsonGetter("previous_attempt_url")
    public String getPreviousAttemptUrl() {
        return previousAttemptUrl;
    }

    /**
     * Setter for PreviousAttemptUrl.
     * @param previousAttemptUrl Value for String
     */
    @JsonSetter("previous_attempt_url")
    public void setPreviousAttemptUrl(String previousAttemptUrl) {
        this.previousAttemptUrl = previousAttemptUrl;
    }

    /**
     * Getter for PullRequests.
     * @return Returns the List of PullRequests28
     */
    @JsonGetter("pull_requests")
    public List<PullRequests28> getPullRequests() {
        return pullRequests;
    }

    /**
     * Setter for PullRequests.
     * @param pullRequests Value for List of PullRequests28
     */
    @JsonSetter("pull_requests")
    public void setPullRequests(List<PullRequests28> pullRequests) {
        this.pullRequests = pullRequests;
    }

    /**
     * Internal Getter for ReferencedWorkflows.
     * @return Returns the Internal List of ReferencedWorkflow1
     */
    @JsonGetter("referenced_workflows")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<ReferencedWorkflow1>> internalGetReferencedWorkflows() {
        return this.referencedWorkflows;
    }

    /**
     * Getter for ReferencedWorkflows.
     * @return Returns the List of ReferencedWorkflow1
     */
    public List<ReferencedWorkflow1> getReferencedWorkflows() {
        return OptionalNullable.getFrom(referencedWorkflows);
    }

    /**
     * Setter for ReferencedWorkflows.
     * @param referencedWorkflows Value for List of ReferencedWorkflow1
     */
    @JsonSetter("referenced_workflows")
    public void setReferencedWorkflows(List<ReferencedWorkflow1> referencedWorkflows) {
        this.referencedWorkflows = OptionalNullable.of(referencedWorkflows);
    }

    /**
     * UnSetter for ReferencedWorkflows.
     */
    public void unsetReferencedWorkflows() {
        referencedWorkflows = null;
    }

    /**
     * Getter for Repository.
     * @return Returns the RepositoryLite
     */
    @JsonGetter("repository")
    public RepositoryLite getRepository() {
        return repository;
    }

    /**
     * Setter for Repository.
     * @param repository Value for RepositoryLite
     */
    @JsonSetter("repository")
    public void setRepository(RepositoryLite repository) {
        this.repository = repository;
    }

    /**
     * Getter for RerunUrl.
     * @return Returns the String
     */
    @JsonGetter("rerun_url")
    public String getRerunUrl() {
        return rerunUrl;
    }

    /**
     * Setter for RerunUrl.
     * @param rerunUrl Value for String
     */
    @JsonSetter("rerun_url")
    public void setRerunUrl(String rerunUrl) {
        this.rerunUrl = rerunUrl;
    }

    /**
     * Getter for RunAttempt.
     * @return Returns the int
     */
    @JsonGetter("run_attempt")
    public int getRunAttempt() {
        return runAttempt;
    }

    /**
     * Setter for RunAttempt.
     * @param runAttempt Value for int
     */
    @JsonSetter("run_attempt")
    public void setRunAttempt(int runAttempt) {
        this.runAttempt = runAttempt;
    }

    /**
     * Getter for RunNumber.
     * @return Returns the int
     */
    @JsonGetter("run_number")
    public int getRunNumber() {
        return runNumber;
    }

    /**
     * Setter for RunNumber.
     * @param runNumber Value for int
     */
    @JsonSetter("run_number")
    public void setRunNumber(int runNumber) {
        this.runNumber = runNumber;
    }

    /**
     * Getter for RunStartedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("run_started_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getRunStartedAt() {
        return runStartedAt;
    }

    /**
     * Setter for RunStartedAt.
     * @param runStartedAt Value for LocalDateTime
     */
    @JsonSetter("run_started_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setRunStartedAt(LocalDateTime runStartedAt) {
        this.runStartedAt = runStartedAt;
    }

    /**
     * Getter for Status.
     * @return Returns the Status17Enum
     */
    @JsonGetter("status")
    public Status17Enum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * @param status Value for Status17Enum
     */
    @JsonSetter("status")
    public void setStatus(Status17Enum status) {
        this.status = status;
    }

    /**
     * Getter for TriggeringActor.
     * @return Returns the Object
     */
    @JsonGetter("triggering_actor")
    public Object getTriggeringActor() {
        return triggeringActor;
    }

    /**
     * Setter for TriggeringActor.
     * @param triggeringActor Value for Object
     */
    @JsonSetter("triggering_actor")
    public void setTriggeringActor(Object triggeringActor) {
        this.triggeringActor = triggeringActor;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for WorkflowId.
     * @return Returns the int
     */
    @JsonGetter("workflow_id")
    public int getWorkflowId() {
        return workflowId;
    }

    /**
     * Setter for WorkflowId.
     * @param workflowId Value for int
     */
    @JsonSetter("workflow_id")
    public void setWorkflowId(int workflowId) {
        this.workflowId = workflowId;
    }

    /**
     * Getter for WorkflowUrl.
     * @return Returns the String
     */
    @JsonGetter("workflow_url")
    public String getWorkflowUrl() {
        return workflowUrl;
    }

    /**
     * Setter for WorkflowUrl.
     * @param workflowUrl Value for String
     */
    @JsonSetter("workflow_url")
    public void setWorkflowUrl(String workflowUrl) {
        this.workflowUrl = workflowUrl;
    }

    /**
     * Converts this WorkflowRun2 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "WorkflowRun2 [" + "actor=" + actor + ", artifactsUrl=" + artifactsUrl
                + ", cancelUrl=" + cancelUrl + ", checkSuiteId=" + checkSuiteId
                + ", checkSuiteNodeId=" + checkSuiteNodeId + ", checkSuiteUrl=" + checkSuiteUrl
                + ", conclusion=" + conclusion + ", createdAt=" + createdAt + ", event=" + event
                + ", headBranch=" + headBranch + ", headCommit=" + headCommit + ", headRepository="
                + headRepository + ", headSha=" + headSha + ", htmlUrl=" + htmlUrl + ", id=" + id
                + ", jobsUrl=" + jobsUrl + ", logsUrl=" + logsUrl + ", name=" + name + ", nodeId="
                + nodeId + ", path=" + path + ", previousAttemptUrl=" + previousAttemptUrl
                + ", pullRequests=" + pullRequests + ", repository=" + repository + ", rerunUrl="
                + rerunUrl + ", runAttempt=" + runAttempt + ", runNumber=" + runNumber
                + ", runStartedAt=" + runStartedAt + ", status=" + status + ", triggeringActor="
                + triggeringActor + ", updatedAt=" + updatedAt + ", url=" + url + ", workflowId="
                + workflowId + ", workflowUrl=" + workflowUrl + ", referencedWorkflows="
                + referencedWorkflows + "]";
    }

    /**
     * Builds a new {@link WorkflowRun2.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link WorkflowRun2.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(actor, artifactsUrl, cancelUrl, checkSuiteId,
                checkSuiteNodeId, checkSuiteUrl, conclusion, createdAt, event, headBranch,
                headCommit, headRepository, headSha, htmlUrl, id, jobsUrl, logsUrl, name, nodeId,
                path, previousAttemptUrl, pullRequests, repository, rerunUrl, runAttempt, runNumber,
                runStartedAt, status, triggeringActor, updatedAt, url, workflowId, workflowUrl);
        builder.referencedWorkflows = internalGetReferencedWorkflows();
        return builder;
    }

    /**
     * Class to build instances of {@link WorkflowRun2}.
     */
    public static class Builder {
        private Object actor;
        private String artifactsUrl;
        private String cancelUrl;
        private int checkSuiteId;
        private String checkSuiteNodeId;
        private String checkSuiteUrl;
        private Object conclusion;
        private LocalDateTime createdAt;
        private String event;
        private String headBranch;
        private SimpleCommit2 headCommit;
        private RepositoryLite headRepository;
        private String headSha;
        private String htmlUrl;
        private int id;
        private String jobsUrl;
        private String logsUrl;
        private String name;
        private String nodeId;
        private String path;
        private String previousAttemptUrl;
        private List<PullRequests28> pullRequests;
        private RepositoryLite repository;
        private String rerunUrl;
        private int runAttempt;
        private int runNumber;
        private LocalDateTime runStartedAt;
        private Status17Enum status;
        private Object triggeringActor;
        private LocalDateTime updatedAt;
        private String url;
        private int workflowId;
        private String workflowUrl;
        private OptionalNullable<List<ReferencedWorkflow1>> referencedWorkflows;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  actor  Object value for actor.
         * @param  artifactsUrl  String value for artifactsUrl.
         * @param  cancelUrl  String value for cancelUrl.
         * @param  checkSuiteId  int value for checkSuiteId.
         * @param  checkSuiteNodeId  String value for checkSuiteNodeId.
         * @param  checkSuiteUrl  String value for checkSuiteUrl.
         * @param  conclusion  Object value for conclusion.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  event  String value for event.
         * @param  headBranch  String value for headBranch.
         * @param  headCommit  SimpleCommit2 value for headCommit.
         * @param  headRepository  RepositoryLite value for headRepository.
         * @param  headSha  String value for headSha.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  id  int value for id.
         * @param  jobsUrl  String value for jobsUrl.
         * @param  logsUrl  String value for logsUrl.
         * @param  name  String value for name.
         * @param  nodeId  String value for nodeId.
         * @param  path  String value for path.
         * @param  previousAttemptUrl  String value for previousAttemptUrl.
         * @param  pullRequests  List of PullRequests28 value for pullRequests.
         * @param  repository  RepositoryLite value for repository.
         * @param  rerunUrl  String value for rerunUrl.
         * @param  runAttempt  int value for runAttempt.
         * @param  runNumber  int value for runNumber.
         * @param  runStartedAt  LocalDateTime value for runStartedAt.
         * @param  status  Status17Enum value for status.
         * @param  triggeringActor  Object value for triggeringActor.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  url  String value for url.
         * @param  workflowId  int value for workflowId.
         * @param  workflowUrl  String value for workflowUrl.
         */
        public Builder(Object actor, String artifactsUrl, String cancelUrl, int checkSuiteId,
                String checkSuiteNodeId, String checkSuiteUrl, Object conclusion,
                LocalDateTime createdAt, String event, String headBranch, SimpleCommit2 headCommit,
                RepositoryLite headRepository, String headSha, String htmlUrl, int id,
                String jobsUrl, String logsUrl, String name, String nodeId, String path,
                String previousAttemptUrl, List<PullRequests28> pullRequests,
                RepositoryLite repository, String rerunUrl, int runAttempt, int runNumber,
                LocalDateTime runStartedAt, Status17Enum status, Object triggeringActor,
                LocalDateTime updatedAt, String url, int workflowId, String workflowUrl) {
            this.actor = actor;
            this.artifactsUrl = artifactsUrl;
            this.cancelUrl = cancelUrl;
            this.checkSuiteId = checkSuiteId;
            this.checkSuiteNodeId = checkSuiteNodeId;
            this.checkSuiteUrl = checkSuiteUrl;
            this.conclusion = conclusion;
            this.createdAt = createdAt;
            this.event = event;
            this.headBranch = headBranch;
            this.headCommit = headCommit;
            this.headRepository = headRepository;
            this.headSha = headSha;
            this.htmlUrl = htmlUrl;
            this.id = id;
            this.jobsUrl = jobsUrl;
            this.logsUrl = logsUrl;
            this.name = name;
            this.nodeId = nodeId;
            this.path = path;
            this.previousAttemptUrl = previousAttemptUrl;
            this.pullRequests = pullRequests;
            this.repository = repository;
            this.rerunUrl = rerunUrl;
            this.runAttempt = runAttempt;
            this.runNumber = runNumber;
            this.runStartedAt = runStartedAt;
            this.status = status;
            this.triggeringActor = triggeringActor;
            this.updatedAt = updatedAt;
            this.url = url;
            this.workflowId = workflowId;
            this.workflowUrl = workflowUrl;
        }

        /**
         * Setter for actor.
         * @param  actor  Object value for actor.
         * @return Builder
         */
        public Builder actor(Object actor) {
            this.actor = actor;
            return this;
        }

        /**
         * Setter for artifactsUrl.
         * @param  artifactsUrl  String value for artifactsUrl.
         * @return Builder
         */
        public Builder artifactsUrl(String artifactsUrl) {
            this.artifactsUrl = artifactsUrl;
            return this;
        }

        /**
         * Setter for cancelUrl.
         * @param  cancelUrl  String value for cancelUrl.
         * @return Builder
         */
        public Builder cancelUrl(String cancelUrl) {
            this.cancelUrl = cancelUrl;
            return this;
        }

        /**
         * Setter for checkSuiteId.
         * @param  checkSuiteId  int value for checkSuiteId.
         * @return Builder
         */
        public Builder checkSuiteId(int checkSuiteId) {
            this.checkSuiteId = checkSuiteId;
            return this;
        }

        /**
         * Setter for checkSuiteNodeId.
         * @param  checkSuiteNodeId  String value for checkSuiteNodeId.
         * @return Builder
         */
        public Builder checkSuiteNodeId(String checkSuiteNodeId) {
            this.checkSuiteNodeId = checkSuiteNodeId;
            return this;
        }

        /**
         * Setter for checkSuiteUrl.
         * @param  checkSuiteUrl  String value for checkSuiteUrl.
         * @return Builder
         */
        public Builder checkSuiteUrl(String checkSuiteUrl) {
            this.checkSuiteUrl = checkSuiteUrl;
            return this;
        }

        /**
         * Setter for conclusion.
         * @param  conclusion  Object value for conclusion.
         * @return Builder
         */
        public Builder conclusion(Object conclusion) {
            this.conclusion = conclusion;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for event.
         * @param  event  String value for event.
         * @return Builder
         */
        public Builder event(String event) {
            this.event = event;
            return this;
        }

        /**
         * Setter for headBranch.
         * @param  headBranch  String value for headBranch.
         * @return Builder
         */
        public Builder headBranch(String headBranch) {
            this.headBranch = headBranch;
            return this;
        }

        /**
         * Setter for headCommit.
         * @param  headCommit  SimpleCommit2 value for headCommit.
         * @return Builder
         */
        public Builder headCommit(SimpleCommit2 headCommit) {
            this.headCommit = headCommit;
            return this;
        }

        /**
         * Setter for headRepository.
         * @param  headRepository  RepositoryLite value for headRepository.
         * @return Builder
         */
        public Builder headRepository(RepositoryLite headRepository) {
            this.headRepository = headRepository;
            return this;
        }

        /**
         * Setter for headSha.
         * @param  headSha  String value for headSha.
         * @return Builder
         */
        public Builder headSha(String headSha) {
            this.headSha = headSha;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for jobsUrl.
         * @param  jobsUrl  String value for jobsUrl.
         * @return Builder
         */
        public Builder jobsUrl(String jobsUrl) {
            this.jobsUrl = jobsUrl;
            return this;
        }

        /**
         * Setter for logsUrl.
         * @param  logsUrl  String value for logsUrl.
         * @return Builder
         */
        public Builder logsUrl(String logsUrl) {
            this.logsUrl = logsUrl;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for path.
         * @param  path  String value for path.
         * @return Builder
         */
        public Builder path(String path) {
            this.path = path;
            return this;
        }

        /**
         * Setter for previousAttemptUrl.
         * @param  previousAttemptUrl  String value for previousAttemptUrl.
         * @return Builder
         */
        public Builder previousAttemptUrl(String previousAttemptUrl) {
            this.previousAttemptUrl = previousAttemptUrl;
            return this;
        }

        /**
         * Setter for pullRequests.
         * @param  pullRequests  List of PullRequests28 value for pullRequests.
         * @return Builder
         */
        public Builder pullRequests(List<PullRequests28> pullRequests) {
            this.pullRequests = pullRequests;
            return this;
        }

        /**
         * Setter for repository.
         * @param  repository  RepositoryLite value for repository.
         * @return Builder
         */
        public Builder repository(RepositoryLite repository) {
            this.repository = repository;
            return this;
        }

        /**
         * Setter for rerunUrl.
         * @param  rerunUrl  String value for rerunUrl.
         * @return Builder
         */
        public Builder rerunUrl(String rerunUrl) {
            this.rerunUrl = rerunUrl;
            return this;
        }

        /**
         * Setter for runAttempt.
         * @param  runAttempt  int value for runAttempt.
         * @return Builder
         */
        public Builder runAttempt(int runAttempt) {
            this.runAttempt = runAttempt;
            return this;
        }

        /**
         * Setter for runNumber.
         * @param  runNumber  int value for runNumber.
         * @return Builder
         */
        public Builder runNumber(int runNumber) {
            this.runNumber = runNumber;
            return this;
        }

        /**
         * Setter for runStartedAt.
         * @param  runStartedAt  LocalDateTime value for runStartedAt.
         * @return Builder
         */
        public Builder runStartedAt(LocalDateTime runStartedAt) {
            this.runStartedAt = runStartedAt;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  Status17Enum value for status.
         * @return Builder
         */
        public Builder status(Status17Enum status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for triggeringActor.
         * @param  triggeringActor  Object value for triggeringActor.
         * @return Builder
         */
        public Builder triggeringActor(Object triggeringActor) {
            this.triggeringActor = triggeringActor;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for workflowId.
         * @param  workflowId  int value for workflowId.
         * @return Builder
         */
        public Builder workflowId(int workflowId) {
            this.workflowId = workflowId;
            return this;
        }

        /**
         * Setter for workflowUrl.
         * @param  workflowUrl  String value for workflowUrl.
         * @return Builder
         */
        public Builder workflowUrl(String workflowUrl) {
            this.workflowUrl = workflowUrl;
            return this;
        }

        /**
         * Setter for referencedWorkflows.
         * @param  referencedWorkflows  List of ReferencedWorkflow1 value for referencedWorkflows.
         * @return Builder
         */
        public Builder referencedWorkflows(List<ReferencedWorkflow1> referencedWorkflows) {
            this.referencedWorkflows = OptionalNullable.of(referencedWorkflows);
            return this;
        }

        /**
         * UnSetter for referencedWorkflows.
         * @return Builder
         */
        public Builder unsetReferencedWorkflows() {
            referencedWorkflows = null;
            return this;
        }

        /**
         * Builds a new {@link WorkflowRun2} object using the set fields.
         * @return {@link WorkflowRun2}
         */
        public WorkflowRun2 build() {
            return new WorkflowRun2(actor, artifactsUrl, cancelUrl, checkSuiteId, checkSuiteNodeId,
                    checkSuiteUrl, conclusion, createdAt, event, headBranch, headCommit,
                    headRepository, headSha, htmlUrl, id, jobsUrl, logsUrl, name, nodeId, path,
                    previousAttemptUrl, pullRequests, repository, rerunUrl, runAttempt, runNumber,
                    runStartedAt, status, triggeringActor, updatedAt, url, workflowId, workflowUrl,
                    referencedWorkflows);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for Release8 type.
 */
public class Release8 {
    private List<ReleaseAsset1> assets;
    private String assetsUrl;
    private Object author;
    private String body;
    private LocalDateTime createdAt;
    private String discussionUrl;
    private boolean draft;
    private String htmlUrl;
    private int id;
    private String name;
    private String nodeId;
    private String prerelease;
    private LocalDateTime publishedAt;
    private ReactionRollup reactions;
    private String tagName;
    private String tarballUrl;
    private String targetCommitish;
    private String uploadUrl;
    private String url;
    private String zipballUrl;

    /**
     * Default constructor.
     */
    public Release8() {
        prerelease = "True";
    }

    /**
     * Initialization constructor.
     * @param  assets  List of ReleaseAsset1 value for assets.
     * @param  assetsUrl  String value for assetsUrl.
     * @param  author  Object value for author.
     * @param  body  String value for body.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  draft  boolean value for draft.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  id  int value for id.
     * @param  name  String value for name.
     * @param  nodeId  String value for nodeId.
     * @param  prerelease  String value for prerelease.
     * @param  publishedAt  LocalDateTime value for publishedAt.
     * @param  tagName  String value for tagName.
     * @param  tarballUrl  String value for tarballUrl.
     * @param  targetCommitish  String value for targetCommitish.
     * @param  uploadUrl  String value for uploadUrl.
     * @param  url  String value for url.
     * @param  zipballUrl  String value for zipballUrl.
     * @param  discussionUrl  String value for discussionUrl.
     * @param  reactions  ReactionRollup value for reactions.
     */
    public Release8(
            List<ReleaseAsset1> assets,
            String assetsUrl,
            Object author,
            String body,
            LocalDateTime createdAt,
            boolean draft,
            String htmlUrl,
            int id,
            String name,
            String nodeId,
            String prerelease,
            LocalDateTime publishedAt,
            String tagName,
            String tarballUrl,
            String targetCommitish,
            String uploadUrl,
            String url,
            String zipballUrl,
            String discussionUrl,
            ReactionRollup reactions) {
        this.assets = assets;
        this.assetsUrl = assetsUrl;
        this.author = author;
        this.body = body;
        this.createdAt = createdAt;
        this.discussionUrl = discussionUrl;
        this.draft = draft;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.name = name;
        this.nodeId = nodeId;
        this.prerelease = prerelease;
        this.publishedAt = publishedAt;
        this.reactions = reactions;
        this.tagName = tagName;
        this.tarballUrl = tarballUrl;
        this.targetCommitish = targetCommitish;
        this.uploadUrl = uploadUrl;
        this.url = url;
        this.zipballUrl = zipballUrl;
    }

    /**
     * Getter for Assets.
     * @return Returns the List of ReleaseAsset1
     */
    @JsonGetter("assets")
    public List<ReleaseAsset1> getAssets() {
        return assets;
    }

    /**
     * Setter for Assets.
     * @param assets Value for List of ReleaseAsset1
     */
    @JsonSetter("assets")
    public void setAssets(List<ReleaseAsset1> assets) {
        this.assets = assets;
    }

    /**
     * Getter for AssetsUrl.
     * @return Returns the String
     */
    @JsonGetter("assets_url")
    public String getAssetsUrl() {
        return assetsUrl;
    }

    /**
     * Setter for AssetsUrl.
     * @param assetsUrl Value for String
     */
    @JsonSetter("assets_url")
    public void setAssetsUrl(String assetsUrl) {
        this.assetsUrl = assetsUrl;
    }

    /**
     * Getter for Author.
     * @return Returns the Object
     */
    @JsonGetter("author")
    public Object getAuthor() {
        return author;
    }

    /**
     * Setter for Author.
     * @param author Value for Object
     */
    @JsonSetter("author")
    public void setAuthor(Object author) {
        this.author = author;
    }

    /**
     * Getter for Body.
     * @return Returns the String
     */
    @JsonGetter("body")
    public String getBody() {
        return body;
    }

    /**
     * Setter for Body.
     * @param body Value for String
     */
    @JsonSetter("body")
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for DiscussionUrl.
     * @return Returns the String
     */
    @JsonGetter("discussion_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDiscussionUrl() {
        return discussionUrl;
    }

    /**
     * Setter for DiscussionUrl.
     * @param discussionUrl Value for String
     */
    @JsonSetter("discussion_url")
    public void setDiscussionUrl(String discussionUrl) {
        this.discussionUrl = discussionUrl;
    }

    /**
     * Getter for Draft.
     * Whether the release is a draft or published
     * @return Returns the boolean
     */
    @JsonGetter("draft")
    public boolean getDraft() {
        return draft;
    }

    /**
     * Setter for Draft.
     * Whether the release is a draft or published
     * @param draft Value for boolean
     */
    @JsonSetter("draft")
    public void setDraft(boolean draft) {
        this.draft = draft;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Prerelease.
     * Whether the release is identified as a prerelease or a full release.
     * @return Returns the String
     */
    @JsonGetter("prerelease")
    public String getPrerelease() {
        return prerelease;
    }

    /**
     * Setter for Prerelease.
     * Whether the release is identified as a prerelease or a full release.
     * @param prerelease Value for String
     */
    @JsonSetter("prerelease")
    private void setPrerelease(String prerelease) {
        this.prerelease = prerelease;
    }

    /**
     * Getter for PublishedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("published_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getPublishedAt() {
        return publishedAt;
    }

    /**
     * Setter for PublishedAt.
     * @param publishedAt Value for LocalDateTime
     */
    @JsonSetter("published_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setPublishedAt(LocalDateTime publishedAt) {
        this.publishedAt = publishedAt;
    }

    /**
     * Getter for Reactions.
     * @return Returns the ReactionRollup
     */
    @JsonGetter("reactions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ReactionRollup getReactions() {
        return reactions;
    }

    /**
     * Setter for Reactions.
     * @param reactions Value for ReactionRollup
     */
    @JsonSetter("reactions")
    public void setReactions(ReactionRollup reactions) {
        this.reactions = reactions;
    }

    /**
     * Getter for TagName.
     * The name of the tag.
     * @return Returns the String
     */
    @JsonGetter("tag_name")
    public String getTagName() {
        return tagName;
    }

    /**
     * Setter for TagName.
     * The name of the tag.
     * @param tagName Value for String
     */
    @JsonSetter("tag_name")
    public void setTagName(String tagName) {
        this.tagName = tagName;
    }

    /**
     * Getter for TarballUrl.
     * @return Returns the String
     */
    @JsonGetter("tarball_url")
    public String getTarballUrl() {
        return tarballUrl;
    }

    /**
     * Setter for TarballUrl.
     * @param tarballUrl Value for String
     */
    @JsonSetter("tarball_url")
    public void setTarballUrl(String tarballUrl) {
        this.tarballUrl = tarballUrl;
    }

    /**
     * Getter for TargetCommitish.
     * Specifies the commitish value that determines where the Git tag is created from.
     * @return Returns the String
     */
    @JsonGetter("target_commitish")
    public String getTargetCommitish() {
        return targetCommitish;
    }

    /**
     * Setter for TargetCommitish.
     * Specifies the commitish value that determines where the Git tag is created from.
     * @param targetCommitish Value for String
     */
    @JsonSetter("target_commitish")
    public void setTargetCommitish(String targetCommitish) {
        this.targetCommitish = targetCommitish;
    }

    /**
     * Getter for UploadUrl.
     * @return Returns the String
     */
    @JsonGetter("upload_url")
    public String getUploadUrl() {
        return uploadUrl;
    }

    /**
     * Setter for UploadUrl.
     * @param uploadUrl Value for String
     */
    @JsonSetter("upload_url")
    public void setUploadUrl(String uploadUrl) {
        this.uploadUrl = uploadUrl;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for ZipballUrl.
     * @return Returns the String
     */
    @JsonGetter("zipball_url")
    public String getZipballUrl() {
        return zipballUrl;
    }

    /**
     * Setter for ZipballUrl.
     * @param zipballUrl Value for String
     */
    @JsonSetter("zipball_url")
    public void setZipballUrl(String zipballUrl) {
        this.zipballUrl = zipballUrl;
    }

    /**
     * Converts this Release8 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Release8 [" + "assets=" + assets + ", assetsUrl=" + assetsUrl + ", author=" + author
                + ", body=" + body + ", createdAt=" + createdAt + ", draft=" + draft + ", htmlUrl="
                + htmlUrl + ", id=" + id + ", name=" + name + ", nodeId=" + nodeId + ", prerelease="
                + prerelease + ", publishedAt=" + publishedAt + ", tagName=" + tagName
                + ", tarballUrl=" + tarballUrl + ", targetCommitish=" + targetCommitish
                + ", uploadUrl=" + uploadUrl + ", url=" + url + ", zipballUrl=" + zipballUrl
                + ", discussionUrl=" + discussionUrl + ", reactions=" + reactions + "]";
    }

    /**
     * Builds a new {@link Release8.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Release8.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(assets, assetsUrl, author, body, createdAt, draft, htmlUrl,
                id, name, nodeId, prerelease, publishedAt, tagName, tarballUrl, targetCommitish,
                uploadUrl, url, zipballUrl)
                .discussionUrl(getDiscussionUrl())
                .reactions(getReactions());
        return builder;
    }

    /**
     * Class to build instances of {@link Release8}.
     */
    public static class Builder {
        private List<ReleaseAsset1> assets;
        private String assetsUrl;
        private Object author;
        private String body;
        private LocalDateTime createdAt;
        private boolean draft;
        private String htmlUrl;
        private int id;
        private String name;
        private String nodeId;
        private String prerelease = "True";
        private LocalDateTime publishedAt;
        private String tagName;
        private String tarballUrl;
        private String targetCommitish;
        private String uploadUrl;
        private String url;
        private String zipballUrl;
        private String discussionUrl;
        private ReactionRollup reactions;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  assets  List of ReleaseAsset1 value for assets.
         * @param  assetsUrl  String value for assetsUrl.
         * @param  author  Object value for author.
         * @param  body  String value for body.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  draft  boolean value for draft.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  id  int value for id.
         * @param  name  String value for name.
         * @param  nodeId  String value for nodeId.
         * @param  prerelease  String value for prerelease.
         * @param  publishedAt  LocalDateTime value for publishedAt.
         * @param  tagName  String value for tagName.
         * @param  tarballUrl  String value for tarballUrl.
         * @param  targetCommitish  String value for targetCommitish.
         * @param  uploadUrl  String value for uploadUrl.
         * @param  url  String value for url.
         * @param  zipballUrl  String value for zipballUrl.
         */
        public Builder(List<ReleaseAsset1> assets, String assetsUrl, Object author, String body,
                LocalDateTime createdAt, boolean draft, String htmlUrl, int id, String name,
                String nodeId, String prerelease, LocalDateTime publishedAt, String tagName,
                String tarballUrl, String targetCommitish, String uploadUrl, String url,
                String zipballUrl) {
            this.assets = assets;
            this.assetsUrl = assetsUrl;
            this.author = author;
            this.body = body;
            this.createdAt = createdAt;
            this.draft = draft;
            this.htmlUrl = htmlUrl;
            this.id = id;
            this.name = name;
            this.nodeId = nodeId;
            this.prerelease = prerelease;
            this.publishedAt = publishedAt;
            this.tagName = tagName;
            this.tarballUrl = tarballUrl;
            this.targetCommitish = targetCommitish;
            this.uploadUrl = uploadUrl;
            this.url = url;
            this.zipballUrl = zipballUrl;
        }

        /**
         * Setter for assets.
         * @param  assets  List of ReleaseAsset1 value for assets.
         * @return Builder
         */
        public Builder assets(List<ReleaseAsset1> assets) {
            this.assets = assets;
            return this;
        }

        /**
         * Setter for assetsUrl.
         * @param  assetsUrl  String value for assetsUrl.
         * @return Builder
         */
        public Builder assetsUrl(String assetsUrl) {
            this.assetsUrl = assetsUrl;
            return this;
        }

        /**
         * Setter for author.
         * @param  author  Object value for author.
         * @return Builder
         */
        public Builder author(Object author) {
            this.author = author;
            return this;
        }

        /**
         * Setter for body.
         * @param  body  String value for body.
         * @return Builder
         */
        public Builder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for draft.
         * @param  draft  boolean value for draft.
         * @return Builder
         */
        public Builder draft(boolean draft) {
            this.draft = draft;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for prerelease.
         * @param  prerelease  String value for prerelease.
         * @return Builder
         */
        public Builder prerelease(String prerelease) {
            this.prerelease = prerelease;
            return this;
        }

        /**
         * Setter for publishedAt.
         * @param  publishedAt  LocalDateTime value for publishedAt.
         * @return Builder
         */
        public Builder publishedAt(LocalDateTime publishedAt) {
            this.publishedAt = publishedAt;
            return this;
        }

        /**
         * Setter for tagName.
         * @param  tagName  String value for tagName.
         * @return Builder
         */
        public Builder tagName(String tagName) {
            this.tagName = tagName;
            return this;
        }

        /**
         * Setter for tarballUrl.
         * @param  tarballUrl  String value for tarballUrl.
         * @return Builder
         */
        public Builder tarballUrl(String tarballUrl) {
            this.tarballUrl = tarballUrl;
            return this;
        }

        /**
         * Setter for targetCommitish.
         * @param  targetCommitish  String value for targetCommitish.
         * @return Builder
         */
        public Builder targetCommitish(String targetCommitish) {
            this.targetCommitish = targetCommitish;
            return this;
        }

        /**
         * Setter for uploadUrl.
         * @param  uploadUrl  String value for uploadUrl.
         * @return Builder
         */
        public Builder uploadUrl(String uploadUrl) {
            this.uploadUrl = uploadUrl;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for zipballUrl.
         * @param  zipballUrl  String value for zipballUrl.
         * @return Builder
         */
        public Builder zipballUrl(String zipballUrl) {
            this.zipballUrl = zipballUrl;
            return this;
        }

        /**
         * Setter for discussionUrl.
         * @param  discussionUrl  String value for discussionUrl.
         * @return Builder
         */
        public Builder discussionUrl(String discussionUrl) {
            this.discussionUrl = discussionUrl;
            return this;
        }

        /**
         * Setter for reactions.
         * @param  reactions  ReactionRollup value for reactions.
         * @return Builder
         */
        public Builder reactions(ReactionRollup reactions) {
            this.reactions = reactions;
            return this;
        }

        /**
         * Builds a new {@link Release8} object using the set fields.
         * @return {@link Release8}
         */
        public Release8 build() {
            return new Release8(assets, assetsUrl, author, body, createdAt, draft, htmlUrl, id,
                    name, nodeId, prerelease, publishedAt, tagName, tarballUrl, targetCommitish,
                    uploadUrl, url, zipballUrl, discussionUrl, reactions);
        }
    }
}

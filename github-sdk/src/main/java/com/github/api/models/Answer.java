/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;

/**
 * This is a model class for Answer type.
 */
public class Answer {
    private AuthorAssociationEnum authorAssociation;
    private String body;
    private int childCommentCount;
    private LocalDateTime createdAt;
    private int discussionId;
    private String htmlUrl;
    private int id;
    private String nodeId;
    private Object parentId;
    private ReactionRollup reactions;
    private String repositoryUrl;
    private LocalDateTime updatedAt;
    private Object user;

    /**
     * Default constructor.
     */
    public Answer() {
    }

    /**
     * Initialization constructor.
     * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
     * @param  body  String value for body.
     * @param  childCommentCount  int value for childCommentCount.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  discussionId  int value for discussionId.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  parentId  Object value for parentId.
     * @param  repositoryUrl  String value for repositoryUrl.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  user  Object value for user.
     * @param  reactions  ReactionRollup value for reactions.
     */
    public Answer(
            AuthorAssociationEnum authorAssociation,
            String body,
            int childCommentCount,
            LocalDateTime createdAt,
            int discussionId,
            String htmlUrl,
            int id,
            String nodeId,
            Object parentId,
            String repositoryUrl,
            LocalDateTime updatedAt,
            Object user,
            ReactionRollup reactions) {
        this.authorAssociation = authorAssociation;
        this.body = body;
        this.childCommentCount = childCommentCount;
        this.createdAt = createdAt;
        this.discussionId = discussionId;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.nodeId = nodeId;
        this.parentId = parentId;
        this.reactions = reactions;
        this.repositoryUrl = repositoryUrl;
        this.updatedAt = updatedAt;
        this.user = user;
    }

    /**
     * Getter for AuthorAssociation.
     * @return Returns the AuthorAssociationEnum
     */
    @JsonGetter("author_association")
    public AuthorAssociationEnum getAuthorAssociation() {
        return authorAssociation;
    }

    /**
     * Setter for AuthorAssociation.
     * @param authorAssociation Value for AuthorAssociationEnum
     */
    @JsonSetter("author_association")
    public void setAuthorAssociation(AuthorAssociationEnum authorAssociation) {
        this.authorAssociation = authorAssociation;
    }

    /**
     * Getter for Body.
     * @return Returns the String
     */
    @JsonGetter("body")
    public String getBody() {
        return body;
    }

    /**
     * Setter for Body.
     * @param body Value for String
     */
    @JsonSetter("body")
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Getter for ChildCommentCount.
     * @return Returns the int
     */
    @JsonGetter("child_comment_count")
    public int getChildCommentCount() {
        return childCommentCount;
    }

    /**
     * Setter for ChildCommentCount.
     * @param childCommentCount Value for int
     */
    @JsonSetter("child_comment_count")
    public void setChildCommentCount(int childCommentCount) {
        this.childCommentCount = childCommentCount;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for DiscussionId.
     * @return Returns the int
     */
    @JsonGetter("discussion_id")
    public int getDiscussionId() {
        return discussionId;
    }

    /**
     * Setter for DiscussionId.
     * @param discussionId Value for int
     */
    @JsonSetter("discussion_id")
    public void setDiscussionId(int discussionId) {
        this.discussionId = discussionId;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for ParentId.
     * @return Returns the Object
     */
    @JsonGetter("parent_id")
    public Object getParentId() {
        return parentId;
    }

    /**
     * Setter for ParentId.
     * @param parentId Value for Object
     */
    @JsonSetter("parent_id")
    public void setParentId(Object parentId) {
        this.parentId = parentId;
    }

    /**
     * Getter for Reactions.
     * @return Returns the ReactionRollup
     */
    @JsonGetter("reactions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ReactionRollup getReactions() {
        return reactions;
    }

    /**
     * Setter for Reactions.
     * @param reactions Value for ReactionRollup
     */
    @JsonSetter("reactions")
    public void setReactions(ReactionRollup reactions) {
        this.reactions = reactions;
    }

    /**
     * Getter for RepositoryUrl.
     * @return Returns the String
     */
    @JsonGetter("repository_url")
    public String getRepositoryUrl() {
        return repositoryUrl;
    }

    /**
     * Setter for RepositoryUrl.
     * @param repositoryUrl Value for String
     */
    @JsonSetter("repository_url")
    public void setRepositoryUrl(String repositoryUrl) {
        this.repositoryUrl = repositoryUrl;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for User.
     * @return Returns the Object
     */
    @JsonGetter("user")
    public Object getUser() {
        return user;
    }

    /**
     * Setter for User.
     * @param user Value for Object
     */
    @JsonSetter("user")
    public void setUser(Object user) {
        this.user = user;
    }

    /**
     * Converts this Answer into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Answer [" + "authorAssociation=" + authorAssociation + ", body=" + body
                + ", childCommentCount=" + childCommentCount + ", createdAt=" + createdAt
                + ", discussionId=" + discussionId + ", htmlUrl=" + htmlUrl + ", id=" + id
                + ", nodeId=" + nodeId + ", parentId=" + parentId + ", repositoryUrl="
                + repositoryUrl + ", updatedAt=" + updatedAt + ", user=" + user + ", reactions="
                + reactions + "]";
    }

    /**
     * Builds a new {@link Answer.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Answer.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(authorAssociation, body, childCommentCount, createdAt,
                discussionId, htmlUrl, id, nodeId, parentId, repositoryUrl, updatedAt, user)
                .reactions(getReactions());
        return builder;
    }

    /**
     * Class to build instances of {@link Answer}.
     */
    public static class Builder {
        private AuthorAssociationEnum authorAssociation;
        private String body;
        private int childCommentCount;
        private LocalDateTime createdAt;
        private int discussionId;
        private String htmlUrl;
        private int id;
        private String nodeId;
        private Object parentId;
        private String repositoryUrl;
        private LocalDateTime updatedAt;
        private Object user;
        private ReactionRollup reactions;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
         * @param  body  String value for body.
         * @param  childCommentCount  int value for childCommentCount.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  discussionId  int value for discussionId.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  parentId  Object value for parentId.
         * @param  repositoryUrl  String value for repositoryUrl.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  user  Object value for user.
         */
        public Builder(AuthorAssociationEnum authorAssociation, String body, int childCommentCount,
                LocalDateTime createdAt, int discussionId, String htmlUrl, int id, String nodeId,
                Object parentId, String repositoryUrl, LocalDateTime updatedAt, Object user) {
            this.authorAssociation = authorAssociation;
            this.body = body;
            this.childCommentCount = childCommentCount;
            this.createdAt = createdAt;
            this.discussionId = discussionId;
            this.htmlUrl = htmlUrl;
            this.id = id;
            this.nodeId = nodeId;
            this.parentId = parentId;
            this.repositoryUrl = repositoryUrl;
            this.updatedAt = updatedAt;
            this.user = user;
        }

        /**
         * Setter for authorAssociation.
         * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
         * @return Builder
         */
        public Builder authorAssociation(AuthorAssociationEnum authorAssociation) {
            this.authorAssociation = authorAssociation;
            return this;
        }

        /**
         * Setter for body.
         * @param  body  String value for body.
         * @return Builder
         */
        public Builder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Setter for childCommentCount.
         * @param  childCommentCount  int value for childCommentCount.
         * @return Builder
         */
        public Builder childCommentCount(int childCommentCount) {
            this.childCommentCount = childCommentCount;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for discussionId.
         * @param  discussionId  int value for discussionId.
         * @return Builder
         */
        public Builder discussionId(int discussionId) {
            this.discussionId = discussionId;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for parentId.
         * @param  parentId  Object value for parentId.
         * @return Builder
         */
        public Builder parentId(Object parentId) {
            this.parentId = parentId;
            return this;
        }

        /**
         * Setter for repositoryUrl.
         * @param  repositoryUrl  String value for repositoryUrl.
         * @return Builder
         */
        public Builder repositoryUrl(String repositoryUrl) {
            this.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for user.
         * @param  user  Object value for user.
         * @return Builder
         */
        public Builder user(Object user) {
            this.user = user;
            return this;
        }

        /**
         * Setter for reactions.
         * @param  reactions  ReactionRollup value for reactions.
         * @return Builder
         */
        public Builder reactions(ReactionRollup reactions) {
            this.reactions = reactions;
            return this;
        }

        /**
         * Builds a new {@link Answer} object using the set fields.
         * @return {@link Answer}
         */
        public Answer build() {
            return new Answer(authorAssociation, body, childCommentCount, createdAt, discussionId,
                    htmlUrl, id, nodeId, parentId, repositoryUrl, updatedAt, user, reactions);
        }
    }
}

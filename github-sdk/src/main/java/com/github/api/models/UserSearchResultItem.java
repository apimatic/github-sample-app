/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for UserSearchResultItem type.
 */
public class UserSearchResultItem {
    private String login;
    private int id;
    private String nodeId;
    private String avatarUrl;
    private String gravatarId;
    private String url;
    private String htmlUrl;
    private String followersUrl;
    private String subscriptionsUrl;
    private String organizationsUrl;
    private String reposUrl;
    private String receivedEventsUrl;
    private String type;
    private double score;
    private String followingUrl;
    private String gistsUrl;
    private String starredUrl;
    private String eventsUrl;
    private Integer publicRepos;
    private Integer publicGists;
    private Integer followers;
    private Integer following;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private OptionalNullable<String> name;
    private OptionalNullable<String> bio;
    private OptionalNullable<String> email;
    private OptionalNullable<String> location;
    private boolean siteAdmin;
    private OptionalNullable<Boolean> hireable;
    private List<SearchResultTextMatch> textMatches;
    private OptionalNullable<String> blog;
    private OptionalNullable<String> company;
    private OptionalNullable<LocalDateTime> suspendedAt;

    /**
     * Default constructor.
     */
    public UserSearchResultItem() {
    }

    /**
     * Initialization constructor.
     * @param  login  String value for login.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  avatarUrl  String value for avatarUrl.
     * @param  gravatarId  String value for gravatarId.
     * @param  url  String value for url.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  followersUrl  String value for followersUrl.
     * @param  subscriptionsUrl  String value for subscriptionsUrl.
     * @param  organizationsUrl  String value for organizationsUrl.
     * @param  reposUrl  String value for reposUrl.
     * @param  receivedEventsUrl  String value for receivedEventsUrl.
     * @param  type  String value for type.
     * @param  score  double value for score.
     * @param  followingUrl  String value for followingUrl.
     * @param  gistsUrl  String value for gistsUrl.
     * @param  starredUrl  String value for starredUrl.
     * @param  eventsUrl  String value for eventsUrl.
     * @param  siteAdmin  boolean value for siteAdmin.
     * @param  publicRepos  Integer value for publicRepos.
     * @param  publicGists  Integer value for publicGists.
     * @param  followers  Integer value for followers.
     * @param  following  Integer value for following.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  name  String value for name.
     * @param  bio  String value for bio.
     * @param  email  String value for email.
     * @param  location  String value for location.
     * @param  hireable  Boolean value for hireable.
     * @param  textMatches  List of SearchResultTextMatch value for textMatches.
     * @param  blog  String value for blog.
     * @param  company  String value for company.
     * @param  suspendedAt  LocalDateTime value for suspendedAt.
     */
    public UserSearchResultItem(
            String login,
            int id,
            String nodeId,
            String avatarUrl,
            String gravatarId,
            String url,
            String htmlUrl,
            String followersUrl,
            String subscriptionsUrl,
            String organizationsUrl,
            String reposUrl,
            String receivedEventsUrl,
            String type,
            double score,
            String followingUrl,
            String gistsUrl,
            String starredUrl,
            String eventsUrl,
            boolean siteAdmin,
            Integer publicRepos,
            Integer publicGists,
            Integer followers,
            Integer following,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            String name,
            String bio,
            String email,
            String location,
            Boolean hireable,
            List<SearchResultTextMatch> textMatches,
            String blog,
            String company,
            LocalDateTime suspendedAt) {
        this.login = login;
        this.id = id;
        this.nodeId = nodeId;
        this.avatarUrl = avatarUrl;
        this.gravatarId = gravatarId;
        this.url = url;
        this.htmlUrl = htmlUrl;
        this.followersUrl = followersUrl;
        this.subscriptionsUrl = subscriptionsUrl;
        this.organizationsUrl = organizationsUrl;
        this.reposUrl = reposUrl;
        this.receivedEventsUrl = receivedEventsUrl;
        this.type = type;
        this.score = score;
        this.followingUrl = followingUrl;
        this.gistsUrl = gistsUrl;
        this.starredUrl = starredUrl;
        this.eventsUrl = eventsUrl;
        this.publicRepos = publicRepos;
        this.publicGists = publicGists;
        this.followers = followers;
        this.following = following;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.name = OptionalNullable.of(name);
        this.bio = OptionalNullable.of(bio);
        this.email = OptionalNullable.of(email);
        this.location = OptionalNullable.of(location);
        this.siteAdmin = siteAdmin;
        this.hireable = OptionalNullable.of(hireable);
        this.textMatches = textMatches;
        this.blog = OptionalNullable.of(blog);
        this.company = OptionalNullable.of(company);
        this.suspendedAt = OptionalNullable.of(suspendedAt);
    }

    /**
     * Internal initialization constructor.
     */
    protected UserSearchResultItem(String login, int id, String nodeId, String avatarUrl,
            String gravatarId, String url, String htmlUrl, String followersUrl,
            String subscriptionsUrl, String organizationsUrl, String reposUrl,
            String receivedEventsUrl, String type, double score, String followingUrl,
            String gistsUrl, String starredUrl, String eventsUrl, boolean siteAdmin,
            Integer publicRepos, Integer publicGists, Integer followers, Integer following,
            LocalDateTime createdAt, LocalDateTime updatedAt, OptionalNullable<String> name,
            OptionalNullable<String> bio, OptionalNullable<String> email,
            OptionalNullable<String> location, OptionalNullable<Boolean> hireable,
            List<SearchResultTextMatch> textMatches, OptionalNullable<String> blog,
            OptionalNullable<String> company, OptionalNullable<LocalDateTime> suspendedAt) {
        this.login = login;
        this.id = id;
        this.nodeId = nodeId;
        this.avatarUrl = avatarUrl;
        this.gravatarId = gravatarId;
        this.url = url;
        this.htmlUrl = htmlUrl;
        this.followersUrl = followersUrl;
        this.subscriptionsUrl = subscriptionsUrl;
        this.organizationsUrl = organizationsUrl;
        this.reposUrl = reposUrl;
        this.receivedEventsUrl = receivedEventsUrl;
        this.type = type;
        this.score = score;
        this.followingUrl = followingUrl;
        this.gistsUrl = gistsUrl;
        this.starredUrl = starredUrl;
        this.eventsUrl = eventsUrl;
        this.publicRepos = publicRepos;
        this.publicGists = publicGists;
        this.followers = followers;
        this.following = following;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.name = name;
        this.bio = bio;
        this.email = email;
        this.location = location;
        this.siteAdmin = siteAdmin;
        this.hireable = hireable;
        this.textMatches = textMatches;
        this.blog = blog;
        this.company = company;
        this.suspendedAt = suspendedAt;
    }

    /**
     * Getter for Login.
     * @return Returns the String
     */
    @JsonGetter("login")
    public String getLogin() {
        return login;
    }

    /**
     * Setter for Login.
     * @param login Value for String
     */
    @JsonSetter("login")
    public void setLogin(String login) {
        this.login = login;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for AvatarUrl.
     * @return Returns the String
     */
    @JsonGetter("avatar_url")
    public String getAvatarUrl() {
        return avatarUrl;
    }

    /**
     * Setter for AvatarUrl.
     * @param avatarUrl Value for String
     */
    @JsonSetter("avatar_url")
    public void setAvatarUrl(String avatarUrl) {
        this.avatarUrl = avatarUrl;
    }

    /**
     * Getter for GravatarId.
     * @return Returns the String
     */
    @JsonGetter("gravatar_id")
    public String getGravatarId() {
        return gravatarId;
    }

    /**
     * Setter for GravatarId.
     * @param gravatarId Value for String
     */
    @JsonSetter("gravatar_id")
    public void setGravatarId(String gravatarId) {
        this.gravatarId = gravatarId;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for FollowersUrl.
     * @return Returns the String
     */
    @JsonGetter("followers_url")
    public String getFollowersUrl() {
        return followersUrl;
    }

    /**
     * Setter for FollowersUrl.
     * @param followersUrl Value for String
     */
    @JsonSetter("followers_url")
    public void setFollowersUrl(String followersUrl) {
        this.followersUrl = followersUrl;
    }

    /**
     * Getter for SubscriptionsUrl.
     * @return Returns the String
     */
    @JsonGetter("subscriptions_url")
    public String getSubscriptionsUrl() {
        return subscriptionsUrl;
    }

    /**
     * Setter for SubscriptionsUrl.
     * @param subscriptionsUrl Value for String
     */
    @JsonSetter("subscriptions_url")
    public void setSubscriptionsUrl(String subscriptionsUrl) {
        this.subscriptionsUrl = subscriptionsUrl;
    }

    /**
     * Getter for OrganizationsUrl.
     * @return Returns the String
     */
    @JsonGetter("organizations_url")
    public String getOrganizationsUrl() {
        return organizationsUrl;
    }

    /**
     * Setter for OrganizationsUrl.
     * @param organizationsUrl Value for String
     */
    @JsonSetter("organizations_url")
    public void setOrganizationsUrl(String organizationsUrl) {
        this.organizationsUrl = organizationsUrl;
    }

    /**
     * Getter for ReposUrl.
     * @return Returns the String
     */
    @JsonGetter("repos_url")
    public String getReposUrl() {
        return reposUrl;
    }

    /**
     * Setter for ReposUrl.
     * @param reposUrl Value for String
     */
    @JsonSetter("repos_url")
    public void setReposUrl(String reposUrl) {
        this.reposUrl = reposUrl;
    }

    /**
     * Getter for ReceivedEventsUrl.
     * @return Returns the String
     */
    @JsonGetter("received_events_url")
    public String getReceivedEventsUrl() {
        return receivedEventsUrl;
    }

    /**
     * Setter for ReceivedEventsUrl.
     * @param receivedEventsUrl Value for String
     */
    @JsonSetter("received_events_url")
    public void setReceivedEventsUrl(String receivedEventsUrl) {
        this.receivedEventsUrl = receivedEventsUrl;
    }

    /**
     * Getter for Type.
     * @return Returns the String
     */
    @JsonGetter("type")
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for Score.
     * @return Returns the double
     */
    @JsonGetter("score")
    public double getScore() {
        return score;
    }

    /**
     * Setter for Score.
     * @param score Value for double
     */
    @JsonSetter("score")
    public void setScore(double score) {
        this.score = score;
    }

    /**
     * Getter for FollowingUrl.
     * @return Returns the String
     */
    @JsonGetter("following_url")
    public String getFollowingUrl() {
        return followingUrl;
    }

    /**
     * Setter for FollowingUrl.
     * @param followingUrl Value for String
     */
    @JsonSetter("following_url")
    public void setFollowingUrl(String followingUrl) {
        this.followingUrl = followingUrl;
    }

    /**
     * Getter for GistsUrl.
     * @return Returns the String
     */
    @JsonGetter("gists_url")
    public String getGistsUrl() {
        return gistsUrl;
    }

    /**
     * Setter for GistsUrl.
     * @param gistsUrl Value for String
     */
    @JsonSetter("gists_url")
    public void setGistsUrl(String gistsUrl) {
        this.gistsUrl = gistsUrl;
    }

    /**
     * Getter for StarredUrl.
     * @return Returns the String
     */
    @JsonGetter("starred_url")
    public String getStarredUrl() {
        return starredUrl;
    }

    /**
     * Setter for StarredUrl.
     * @param starredUrl Value for String
     */
    @JsonSetter("starred_url")
    public void setStarredUrl(String starredUrl) {
        this.starredUrl = starredUrl;
    }

    /**
     * Getter for EventsUrl.
     * @return Returns the String
     */
    @JsonGetter("events_url")
    public String getEventsUrl() {
        return eventsUrl;
    }

    /**
     * Setter for EventsUrl.
     * @param eventsUrl Value for String
     */
    @JsonSetter("events_url")
    public void setEventsUrl(String eventsUrl) {
        this.eventsUrl = eventsUrl;
    }

    /**
     * Getter for PublicRepos.
     * @return Returns the Integer
     */
    @JsonGetter("public_repos")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPublicRepos() {
        return publicRepos;
    }

    /**
     * Setter for PublicRepos.
     * @param publicRepos Value for Integer
     */
    @JsonSetter("public_repos")
    public void setPublicRepos(Integer publicRepos) {
        this.publicRepos = publicRepos;
    }

    /**
     * Getter for PublicGists.
     * @return Returns the Integer
     */
    @JsonGetter("public_gists")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPublicGists() {
        return publicGists;
    }

    /**
     * Setter for PublicGists.
     * @param publicGists Value for Integer
     */
    @JsonSetter("public_gists")
    public void setPublicGists(Integer publicGists) {
        this.publicGists = publicGists;
    }

    /**
     * Getter for Followers.
     * @return Returns the Integer
     */
    @JsonGetter("followers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getFollowers() {
        return followers;
    }

    /**
     * Setter for Followers.
     * @param followers Value for Integer
     */
    @JsonSetter("followers")
    public void setFollowers(Integer followers) {
        this.followers = followers;
    }

    /**
     * Getter for Following.
     * @return Returns the Integer
     */
    @JsonGetter("following")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getFollowing() {
        return following;
    }

    /**
     * Setter for Following.
     * @param following Value for Integer
     */
    @JsonSetter("following")
    public void setFollowing(Integer following) {
        this.following = following;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Internal Getter for Name.
     * @return Returns the Internal String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetName() {
        return this.name;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    public String getName() {
        return OptionalNullable.getFrom(name);
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = OptionalNullable.of(name);
    }

    /**
     * UnSetter for Name.
     */
    public void unsetName() {
        name = null;
    }

    /**
     * Internal Getter for Bio.
     * @return Returns the Internal String
     */
    @JsonGetter("bio")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBio() {
        return this.bio;
    }

    /**
     * Getter for Bio.
     * @return Returns the String
     */
    public String getBio() {
        return OptionalNullable.getFrom(bio);
    }

    /**
     * Setter for Bio.
     * @param bio Value for String
     */
    @JsonSetter("bio")
    public void setBio(String bio) {
        this.bio = OptionalNullable.of(bio);
    }

    /**
     * UnSetter for Bio.
     */
    public void unsetBio() {
        bio = null;
    }

    /**
     * Internal Getter for Email.
     * @return Returns the Internal String
     */
    @JsonGetter("email")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEmail() {
        return this.email;
    }

    /**
     * Getter for Email.
     * @return Returns the String
     */
    public String getEmail() {
        return OptionalNullable.getFrom(email);
    }

    /**
     * Setter for Email.
     * @param email Value for String
     */
    @JsonSetter("email")
    public void setEmail(String email) {
        this.email = OptionalNullable.of(email);
    }

    /**
     * UnSetter for Email.
     */
    public void unsetEmail() {
        email = null;
    }

    /**
     * Internal Getter for Location.
     * @return Returns the Internal String
     */
    @JsonGetter("location")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocation() {
        return this.location;
    }

    /**
     * Getter for Location.
     * @return Returns the String
     */
    public String getLocation() {
        return OptionalNullable.getFrom(location);
    }

    /**
     * Setter for Location.
     * @param location Value for String
     */
    @JsonSetter("location")
    public void setLocation(String location) {
        this.location = OptionalNullable.of(location);
    }

    /**
     * UnSetter for Location.
     */
    public void unsetLocation() {
        location = null;
    }

    /**
     * Getter for SiteAdmin.
     * @return Returns the boolean
     */
    @JsonGetter("site_admin")
    public boolean getSiteAdmin() {
        return siteAdmin;
    }

    /**
     * Setter for SiteAdmin.
     * @param siteAdmin Value for boolean
     */
    @JsonSetter("site_admin")
    public void setSiteAdmin(boolean siteAdmin) {
        this.siteAdmin = siteAdmin;
    }

    /**
     * Internal Getter for Hireable.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("hireable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetHireable() {
        return this.hireable;
    }

    /**
     * Getter for Hireable.
     * @return Returns the Boolean
     */
    public Boolean getHireable() {
        return OptionalNullable.getFrom(hireable);
    }

    /**
     * Setter for Hireable.
     * @param hireable Value for Boolean
     */
    @JsonSetter("hireable")
    public void setHireable(Boolean hireable) {
        this.hireable = OptionalNullable.of(hireable);
    }

    /**
     * UnSetter for Hireable.
     */
    public void unsetHireable() {
        hireable = null;
    }

    /**
     * Getter for TextMatches.
     * @return Returns the List of SearchResultTextMatch
     */
    @JsonGetter("text_matches")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<SearchResultTextMatch> getTextMatches() {
        return textMatches;
    }

    /**
     * Setter for TextMatches.
     * @param textMatches Value for List of SearchResultTextMatch
     */
    @JsonSetter("text_matches")
    public void setTextMatches(List<SearchResultTextMatch> textMatches) {
        this.textMatches = textMatches;
    }

    /**
     * Internal Getter for Blog.
     * @return Returns the Internal String
     */
    @JsonGetter("blog")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBlog() {
        return this.blog;
    }

    /**
     * Getter for Blog.
     * @return Returns the String
     */
    public String getBlog() {
        return OptionalNullable.getFrom(blog);
    }

    /**
     * Setter for Blog.
     * @param blog Value for String
     */
    @JsonSetter("blog")
    public void setBlog(String blog) {
        this.blog = OptionalNullable.of(blog);
    }

    /**
     * UnSetter for Blog.
     */
    public void unsetBlog() {
        blog = null;
    }

    /**
     * Internal Getter for Company.
     * @return Returns the Internal String
     */
    @JsonGetter("company")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCompany() {
        return this.company;
    }

    /**
     * Getter for Company.
     * @return Returns the String
     */
    public String getCompany() {
        return OptionalNullable.getFrom(company);
    }

    /**
     * Setter for Company.
     * @param company Value for String
     */
    @JsonSetter("company")
    public void setCompany(String company) {
        this.company = OptionalNullable.of(company);
    }

    /**
     * UnSetter for Company.
     */
    public void unsetCompany() {
        company = null;
    }

    /**
     * Internal Getter for SuspendedAt.
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("suspended_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetSuspendedAt() {
        return this.suspendedAt;
    }

    /**
     * Getter for SuspendedAt.
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getSuspendedAt() {
        return OptionalNullable.getFrom(suspendedAt);
    }

    /**
     * Setter for SuspendedAt.
     * @param suspendedAt Value for LocalDateTime
     */
    @JsonSetter("suspended_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setSuspendedAt(LocalDateTime suspendedAt) {
        this.suspendedAt = OptionalNullable.of(suspendedAt);
    }

    /**
     * UnSetter for SuspendedAt.
     */
    public void unsetSuspendedAt() {
        suspendedAt = null;
    }

    /**
     * Converts this UserSearchResultItem into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "UserSearchResultItem [" + "login=" + login + ", id=" + id + ", nodeId=" + nodeId
                + ", avatarUrl=" + avatarUrl + ", gravatarId=" + gravatarId + ", url=" + url
                + ", htmlUrl=" + htmlUrl + ", followersUrl=" + followersUrl + ", subscriptionsUrl="
                + subscriptionsUrl + ", organizationsUrl=" + organizationsUrl + ", reposUrl="
                + reposUrl + ", receivedEventsUrl=" + receivedEventsUrl + ", type=" + type
                + ", score=" + score + ", followingUrl=" + followingUrl + ", gistsUrl=" + gistsUrl
                + ", starredUrl=" + starredUrl + ", eventsUrl=" + eventsUrl + ", siteAdmin="
                + siteAdmin + ", publicRepos=" + publicRepos + ", publicGists=" + publicGists
                + ", followers=" + followers + ", following=" + following + ", createdAt="
                + createdAt + ", updatedAt=" + updatedAt + ", name=" + name + ", bio=" + bio
                + ", email=" + email + ", location=" + location + ", hireable=" + hireable
                + ", textMatches=" + textMatches + ", blog=" + blog + ", company=" + company
                + ", suspendedAt=" + suspendedAt + "]";
    }

    /**
     * Builds a new {@link UserSearchResultItem.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link UserSearchResultItem.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(login, id, nodeId, avatarUrl, gravatarId, url, htmlUrl,
                followersUrl, subscriptionsUrl, organizationsUrl, reposUrl, receivedEventsUrl, type,
                score, followingUrl, gistsUrl, starredUrl, eventsUrl, siteAdmin)
                .publicRepos(getPublicRepos())
                .publicGists(getPublicGists())
                .followers(getFollowers())
                .following(getFollowing())
                .createdAt(getCreatedAt())
                .updatedAt(getUpdatedAt())
                .textMatches(getTextMatches());
        builder.name = internalGetName();
        builder.bio = internalGetBio();
        builder.email = internalGetEmail();
        builder.location = internalGetLocation();
        builder.hireable = internalGetHireable();
        builder.blog = internalGetBlog();
        builder.company = internalGetCompany();
        builder.suspendedAt = internalGetSuspendedAt();
        return builder;
    }

    /**
     * Class to build instances of {@link UserSearchResultItem}.
     */
    public static class Builder {
        private String login;
        private int id;
        private String nodeId;
        private String avatarUrl;
        private String gravatarId;
        private String url;
        private String htmlUrl;
        private String followersUrl;
        private String subscriptionsUrl;
        private String organizationsUrl;
        private String reposUrl;
        private String receivedEventsUrl;
        private String type;
        private double score;
        private String followingUrl;
        private String gistsUrl;
        private String starredUrl;
        private String eventsUrl;
        private boolean siteAdmin;
        private Integer publicRepos;
        private Integer publicGists;
        private Integer followers;
        private Integer following;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private OptionalNullable<String> name;
        private OptionalNullable<String> bio;
        private OptionalNullable<String> email;
        private OptionalNullable<String> location;
        private OptionalNullable<Boolean> hireable;
        private List<SearchResultTextMatch> textMatches;
        private OptionalNullable<String> blog;
        private OptionalNullable<String> company;
        private OptionalNullable<LocalDateTime> suspendedAt;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  login  String value for login.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  avatarUrl  String value for avatarUrl.
         * @param  gravatarId  String value for gravatarId.
         * @param  url  String value for url.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  followersUrl  String value for followersUrl.
         * @param  subscriptionsUrl  String value for subscriptionsUrl.
         * @param  organizationsUrl  String value for organizationsUrl.
         * @param  reposUrl  String value for reposUrl.
         * @param  receivedEventsUrl  String value for receivedEventsUrl.
         * @param  type  String value for type.
         * @param  score  double value for score.
         * @param  followingUrl  String value for followingUrl.
         * @param  gistsUrl  String value for gistsUrl.
         * @param  starredUrl  String value for starredUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @param  siteAdmin  boolean value for siteAdmin.
         */
        public Builder(String login, int id, String nodeId, String avatarUrl, String gravatarId,
                String url, String htmlUrl, String followersUrl, String subscriptionsUrl,
                String organizationsUrl, String reposUrl, String receivedEventsUrl, String type,
                double score, String followingUrl, String gistsUrl, String starredUrl,
                String eventsUrl, boolean siteAdmin) {
            this.login = login;
            this.id = id;
            this.nodeId = nodeId;
            this.avatarUrl = avatarUrl;
            this.gravatarId = gravatarId;
            this.url = url;
            this.htmlUrl = htmlUrl;
            this.followersUrl = followersUrl;
            this.subscriptionsUrl = subscriptionsUrl;
            this.organizationsUrl = organizationsUrl;
            this.reposUrl = reposUrl;
            this.receivedEventsUrl = receivedEventsUrl;
            this.type = type;
            this.score = score;
            this.followingUrl = followingUrl;
            this.gistsUrl = gistsUrl;
            this.starredUrl = starredUrl;
            this.eventsUrl = eventsUrl;
            this.siteAdmin = siteAdmin;
        }

        /**
         * Setter for login.
         * @param  login  String value for login.
         * @return Builder
         */
        public Builder login(String login) {
            this.login = login;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for avatarUrl.
         * @param  avatarUrl  String value for avatarUrl.
         * @return Builder
         */
        public Builder avatarUrl(String avatarUrl) {
            this.avatarUrl = avatarUrl;
            return this;
        }

        /**
         * Setter for gravatarId.
         * @param  gravatarId  String value for gravatarId.
         * @return Builder
         */
        public Builder gravatarId(String gravatarId) {
            this.gravatarId = gravatarId;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for followersUrl.
         * @param  followersUrl  String value for followersUrl.
         * @return Builder
         */
        public Builder followersUrl(String followersUrl) {
            this.followersUrl = followersUrl;
            return this;
        }

        /**
         * Setter for subscriptionsUrl.
         * @param  subscriptionsUrl  String value for subscriptionsUrl.
         * @return Builder
         */
        public Builder subscriptionsUrl(String subscriptionsUrl) {
            this.subscriptionsUrl = subscriptionsUrl;
            return this;
        }

        /**
         * Setter for organizationsUrl.
         * @param  organizationsUrl  String value for organizationsUrl.
         * @return Builder
         */
        public Builder organizationsUrl(String organizationsUrl) {
            this.organizationsUrl = organizationsUrl;
            return this;
        }

        /**
         * Setter for reposUrl.
         * @param  reposUrl  String value for reposUrl.
         * @return Builder
         */
        public Builder reposUrl(String reposUrl) {
            this.reposUrl = reposUrl;
            return this;
        }

        /**
         * Setter for receivedEventsUrl.
         * @param  receivedEventsUrl  String value for receivedEventsUrl.
         * @return Builder
         */
        public Builder receivedEventsUrl(String receivedEventsUrl) {
            this.receivedEventsUrl = receivedEventsUrl;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for score.
         * @param  score  double value for score.
         * @return Builder
         */
        public Builder score(double score) {
            this.score = score;
            return this;
        }

        /**
         * Setter for followingUrl.
         * @param  followingUrl  String value for followingUrl.
         * @return Builder
         */
        public Builder followingUrl(String followingUrl) {
            this.followingUrl = followingUrl;
            return this;
        }

        /**
         * Setter for gistsUrl.
         * @param  gistsUrl  String value for gistsUrl.
         * @return Builder
         */
        public Builder gistsUrl(String gistsUrl) {
            this.gistsUrl = gistsUrl;
            return this;
        }

        /**
         * Setter for starredUrl.
         * @param  starredUrl  String value for starredUrl.
         * @return Builder
         */
        public Builder starredUrl(String starredUrl) {
            this.starredUrl = starredUrl;
            return this;
        }

        /**
         * Setter for eventsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @return Builder
         */
        public Builder eventsUrl(String eventsUrl) {
            this.eventsUrl = eventsUrl;
            return this;
        }

        /**
         * Setter for siteAdmin.
         * @param  siteAdmin  boolean value for siteAdmin.
         * @return Builder
         */
        public Builder siteAdmin(boolean siteAdmin) {
            this.siteAdmin = siteAdmin;
            return this;
        }

        /**
         * Setter for publicRepos.
         * @param  publicRepos  Integer value for publicRepos.
         * @return Builder
         */
        public Builder publicRepos(Integer publicRepos) {
            this.publicRepos = publicRepos;
            return this;
        }

        /**
         * Setter for publicGists.
         * @param  publicGists  Integer value for publicGists.
         * @return Builder
         */
        public Builder publicGists(Integer publicGists) {
            this.publicGists = publicGists;
            return this;
        }

        /**
         * Setter for followers.
         * @param  followers  Integer value for followers.
         * @return Builder
         */
        public Builder followers(Integer followers) {
            this.followers = followers;
            return this;
        }

        /**
         * Setter for following.
         * @param  following  Integer value for following.
         * @return Builder
         */
        public Builder following(Integer following) {
            this.following = following;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = OptionalNullable.of(name);
            return this;
        }

        /**
         * UnSetter for name.
         * @return Builder
         */
        public Builder unsetName() {
            name = null;
            return this;
        }

        /**
         * Setter for bio.
         * @param  bio  String value for bio.
         * @return Builder
         */
        public Builder bio(String bio) {
            this.bio = OptionalNullable.of(bio);
            return this;
        }

        /**
         * UnSetter for bio.
         * @return Builder
         */
        public Builder unsetBio() {
            bio = null;
            return this;
        }

        /**
         * Setter for email.
         * @param  email  String value for email.
         * @return Builder
         */
        public Builder email(String email) {
            this.email = OptionalNullable.of(email);
            return this;
        }

        /**
         * UnSetter for email.
         * @return Builder
         */
        public Builder unsetEmail() {
            email = null;
            return this;
        }

        /**
         * Setter for location.
         * @param  location  String value for location.
         * @return Builder
         */
        public Builder location(String location) {
            this.location = OptionalNullable.of(location);
            return this;
        }

        /**
         * UnSetter for location.
         * @return Builder
         */
        public Builder unsetLocation() {
            location = null;
            return this;
        }

        /**
         * Setter for hireable.
         * @param  hireable  Boolean value for hireable.
         * @return Builder
         */
        public Builder hireable(Boolean hireable) {
            this.hireable = OptionalNullable.of(hireable);
            return this;
        }

        /**
         * UnSetter for hireable.
         * @return Builder
         */
        public Builder unsetHireable() {
            hireable = null;
            return this;
        }

        /**
         * Setter for textMatches.
         * @param  textMatches  List of SearchResultTextMatch value for textMatches.
         * @return Builder
         */
        public Builder textMatches(List<SearchResultTextMatch> textMatches) {
            this.textMatches = textMatches;
            return this;
        }

        /**
         * Setter for blog.
         * @param  blog  String value for blog.
         * @return Builder
         */
        public Builder blog(String blog) {
            this.blog = OptionalNullable.of(blog);
            return this;
        }

        /**
         * UnSetter for blog.
         * @return Builder
         */
        public Builder unsetBlog() {
            blog = null;
            return this;
        }

        /**
         * Setter for company.
         * @param  company  String value for company.
         * @return Builder
         */
        public Builder company(String company) {
            this.company = OptionalNullable.of(company);
            return this;
        }

        /**
         * UnSetter for company.
         * @return Builder
         */
        public Builder unsetCompany() {
            company = null;
            return this;
        }

        /**
         * Setter for suspendedAt.
         * @param  suspendedAt  LocalDateTime value for suspendedAt.
         * @return Builder
         */
        public Builder suspendedAt(LocalDateTime suspendedAt) {
            this.suspendedAt = OptionalNullable.of(suspendedAt);
            return this;
        }

        /**
         * UnSetter for suspendedAt.
         * @return Builder
         */
        public Builder unsetSuspendedAt() {
            suspendedAt = null;
            return this;
        }

        /**
         * Builds a new {@link UserSearchResultItem} object using the set fields.
         * @return {@link UserSearchResultItem}
         */
        public UserSearchResultItem build() {
            return new UserSearchResultItem(login, id, nodeId, avatarUrl, gravatarId, url, htmlUrl,
                    followersUrl, subscriptionsUrl, organizationsUrl, reposUrl, receivedEventsUrl,
                    type, score, followingUrl, gistsUrl, starredUrl, eventsUrl, siteAdmin,
                    publicRepos, publicGists, followers, following, createdAt, updatedAt, name, bio,
                    email, location, hireable, textMatches, blog, company, suspendedAt);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.github.api.ApiHelper;
import com.github.api.models.SecretScanningLocationCommit;
import com.github.api.models.SecretScanningLocationIssueBody;
import com.github.api.models.SecretScanningLocationIssueComment;
import com.github.api.models.SecretScanningLocationIssueTitle;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = SecretScanningLocationDetails.SecretScanningLocationDetailsDeserializer.class)
public abstract class SecretScanningLocationDetails {
    
    /**
     * One-of type initialization method.
     * @param secretScanningLocationCommit SecretScanningLocationCommit value for secretScanningLocationCommit.
     * @return The SecretScanningLocationCommitCase object.
     */
    public static SecretScanningLocationDetails fromSecretScanningLocationCommit(
            SecretScanningLocationCommit secretScanningLocationCommit) {
        return secretScanningLocationCommit == null ? null : new SecretScanningLocationCommitCase(secretScanningLocationCommit);
    }

    /**
     * One-of type initialization method.
     * @param secretScanningLocationIssueTitle SecretScanningLocationIssueTitle value for secretScanningLocationIssueTitle.
     * @return The SecretScanningLocationIssueTitleCase object.
     */
    public static SecretScanningLocationDetails fromSecretScanningLocationIssueTitle(
            SecretScanningLocationIssueTitle secretScanningLocationIssueTitle) {
        return secretScanningLocationIssueTitle == null ? null : new SecretScanningLocationIssueTitleCase(secretScanningLocationIssueTitle);
    }

    /**
     * One-of type initialization method.
     * @param secretScanningLocationIssueBody SecretScanningLocationIssueBody value for secretScanningLocationIssueBody.
     * @return The SecretScanningLocationIssueBodyCase object.
     */
    public static SecretScanningLocationDetails fromSecretScanningLocationIssueBody(
            SecretScanningLocationIssueBody secretScanningLocationIssueBody) {
        return secretScanningLocationIssueBody == null ? null : new SecretScanningLocationIssueBodyCase(secretScanningLocationIssueBody);
    }

    /**
     * One-of type initialization method.
     * @param secretScanningLocationIssueComment SecretScanningLocationIssueComment value for secretScanningLocationIssueComment.
     * @return The SecretScanningLocationIssueCommentCase object.
     */
    public static SecretScanningLocationDetails fromSecretScanningLocationIssueComment(
            SecretScanningLocationIssueComment secretScanningLocationIssueComment) {
        return secretScanningLocationIssueComment == null ? null : new SecretScanningLocationIssueCommentCase(secretScanningLocationIssueComment);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R secretScanningLocationCommit(SecretScanningLocationCommit secretScanningLocationCommit);

        R secretScanningLocationIssueTitle(SecretScanningLocationIssueTitle secretScanningLocationIssueTitle);

        R secretScanningLocationIssueBody(SecretScanningLocationIssueBody secretScanningLocationIssueBody);

        R secretScanningLocationIssueComment(SecretScanningLocationIssueComment secretScanningLocationIssueComment);
    }

    /**
     * This is a implementation class for SecretScanningLocationCommitCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class SecretScanningLocationCommitCase extends SecretScanningLocationDetails {

        @JsonValue
        private SecretScanningLocationCommit secretScanningLocationCommit;

        SecretScanningLocationCommitCase(SecretScanningLocationCommit secretScanningLocationCommit) {
            this.secretScanningLocationCommit = secretScanningLocationCommit;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.secretScanningLocationCommit(this.secretScanningLocationCommit);
        }

        @JsonCreator
        private SecretScanningLocationCommitCase(JsonNode jsonNode) throws IOException {
            this.secretScanningLocationCommit = ApiHelper.deserialize(jsonNode,
                SecretScanningLocationCommit.class);
        }

        @Override
        public String toString() {
            return secretScanningLocationCommit.toString();
        }
    }

    /**
     * This is a implementation class for SecretScanningLocationIssueTitleCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class SecretScanningLocationIssueTitleCase extends SecretScanningLocationDetails {

        @JsonValue
        private SecretScanningLocationIssueTitle secretScanningLocationIssueTitle;

        SecretScanningLocationIssueTitleCase(SecretScanningLocationIssueTitle secretScanningLocationIssueTitle) {
            this.secretScanningLocationIssueTitle = secretScanningLocationIssueTitle;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.secretScanningLocationIssueTitle(this.secretScanningLocationIssueTitle);
        }

        @JsonCreator
        private SecretScanningLocationIssueTitleCase(JsonNode jsonNode) throws IOException {
            this.secretScanningLocationIssueTitle = ApiHelper.deserialize(jsonNode,
                SecretScanningLocationIssueTitle.class);
        }

        @Override
        public String toString() {
            return secretScanningLocationIssueTitle.toString();
        }
    }

    /**
     * This is a implementation class for SecretScanningLocationIssueBodyCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class SecretScanningLocationIssueBodyCase extends SecretScanningLocationDetails {

        @JsonValue
        private SecretScanningLocationIssueBody secretScanningLocationIssueBody;

        SecretScanningLocationIssueBodyCase(SecretScanningLocationIssueBody secretScanningLocationIssueBody) {
            this.secretScanningLocationIssueBody = secretScanningLocationIssueBody;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.secretScanningLocationIssueBody(this.secretScanningLocationIssueBody);
        }

        @JsonCreator
        private SecretScanningLocationIssueBodyCase(JsonNode jsonNode) throws IOException {
            this.secretScanningLocationIssueBody = ApiHelper.deserialize(jsonNode,
                SecretScanningLocationIssueBody.class);
        }

        @Override
        public String toString() {
            return secretScanningLocationIssueBody.toString();
        }
    }

    /**
     * This is a implementation class for SecretScanningLocationIssueCommentCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class SecretScanningLocationIssueCommentCase extends SecretScanningLocationDetails {

        @JsonValue
        private SecretScanningLocationIssueComment secretScanningLocationIssueComment;

        SecretScanningLocationIssueCommentCase(SecretScanningLocationIssueComment secretScanningLocationIssueComment) {
            this.secretScanningLocationIssueComment = secretScanningLocationIssueComment;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.secretScanningLocationIssueComment(this.secretScanningLocationIssueComment);
        }

        @JsonCreator
        private SecretScanningLocationIssueCommentCase(JsonNode jsonNode) throws IOException {
            this.secretScanningLocationIssueComment = ApiHelper.deserialize(jsonNode,
                SecretScanningLocationIssueComment.class);
        }

        @Override
        public String toString() {
            return secretScanningLocationIssueComment.toString();
        }
    }

    /**
     * This is a custom deserializer class for SecretScanningLocationDetails.
     */
    protected static class SecretScanningLocationDetailsDeserializer
            extends JsonDeserializer<SecretScanningLocationDetails> {

        @Override
        public SecretScanningLocationDetails deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(SecretScanningLocationCommitCase.class,
                    SecretScanningLocationIssueTitleCase.class,
                    SecretScanningLocationIssueBodyCase.class,
                    SecretScanningLocationIssueCommentCase.class), true);
        }
    }

}

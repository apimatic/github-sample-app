/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for Payload type.
 */
public class Payload {
    private String action;
    private Issue1 issue;
    private Comment13 comment;
    private List<Pages1> pages;

    /**
     * Default constructor.
     */
    public Payload() {
    }

    /**
     * Initialization constructor.
     * @param  action  String value for action.
     * @param  issue  Issue1 value for issue.
     * @param  comment  Comment13 value for comment.
     * @param  pages  List of Pages1 value for pages.
     */
    public Payload(
            String action,
            Issue1 issue,
            Comment13 comment,
            List<Pages1> pages) {
        this.action = action;
        this.issue = issue;
        this.comment = comment;
        this.pages = pages;
    }

    /**
     * Getter for Action.
     * @return Returns the String
     */
    @JsonGetter("action")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAction() {
        return action;
    }

    /**
     * Setter for Action.
     * @param action Value for String
     */
    @JsonSetter("action")
    public void setAction(String action) {
        this.action = action;
    }

    /**
     * Getter for Issue.
     * @return Returns the Issue1
     */
    @JsonGetter("issue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Issue1 getIssue() {
        return issue;
    }

    /**
     * Setter for Issue.
     * @param issue Value for Issue1
     */
    @JsonSetter("issue")
    public void setIssue(Issue1 issue) {
        this.issue = issue;
    }

    /**
     * Getter for Comment.
     * @return Returns the Comment13
     */
    @JsonGetter("comment")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Comment13 getComment() {
        return comment;
    }

    /**
     * Setter for Comment.
     * @param comment Value for Comment13
     */
    @JsonSetter("comment")
    public void setComment(Comment13 comment) {
        this.comment = comment;
    }

    /**
     * Getter for Pages.
     * @return Returns the List of Pages1
     */
    @JsonGetter("pages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Pages1> getPages() {
        return pages;
    }

    /**
     * Setter for Pages.
     * @param pages Value for List of Pages1
     */
    @JsonSetter("pages")
    public void setPages(List<Pages1> pages) {
        this.pages = pages;
    }

    /**
     * Converts this Payload into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Payload [" + "action=" + action + ", issue=" + issue + ", comment=" + comment
                + ", pages=" + pages + "]";
    }

    /**
     * Builds a new {@link Payload.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Payload.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .action(getAction())
                .issue(getIssue())
                .comment(getComment())
                .pages(getPages());
        return builder;
    }

    /**
     * Class to build instances of {@link Payload}.
     */
    public static class Builder {
        private String action;
        private Issue1 issue;
        private Comment13 comment;
        private List<Pages1> pages;



        /**
         * Setter for action.
         * @param  action  String value for action.
         * @return Builder
         */
        public Builder action(String action) {
            this.action = action;
            return this;
        }

        /**
         * Setter for issue.
         * @param  issue  Issue1 value for issue.
         * @return Builder
         */
        public Builder issue(Issue1 issue) {
            this.issue = issue;
            return this;
        }

        /**
         * Setter for comment.
         * @param  comment  Comment13 value for comment.
         * @return Builder
         */
        public Builder comment(Comment13 comment) {
            this.comment = comment;
            return this;
        }

        /**
         * Setter for pages.
         * @param  pages  List of Pages1 value for pages.
         * @return Builder
         */
        public Builder pages(List<Pages1> pages) {
            this.pages = pages;
            return this;
        }

        /**
         * Builds a new {@link Payload} object using the set fields.
         * @return {@link Payload}
         */
        public Payload build() {
            return new Payload(action, issue, comment, pages);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for OrgsMigrationsRequest type.
 */
public class OrgsMigrationsRequest {
    private List<String> repositories;
    private Boolean lockRepositories;
    private Boolean excludeMetadata;
    private Boolean excludeGitData;
    private Boolean excludeAttachments;
    private Boolean excludeReleases;
    private Boolean excludeOwnerProjects;
    private Boolean orgMetadataOnly;
    private List<Exclude1Enum> exclude;

    /**
     * Default constructor.
     */
    public OrgsMigrationsRequest() {
        lockRepositories = false;
        excludeMetadata = false;
        excludeGitData = false;
        excludeAttachments = false;
        excludeReleases = false;
        excludeOwnerProjects = false;
        orgMetadataOnly = false;
    }

    /**
     * Initialization constructor.
     * @param  repositories  List of String value for repositories.
     * @param  lockRepositories  Boolean value for lockRepositories.
     * @param  excludeMetadata  Boolean value for excludeMetadata.
     * @param  excludeGitData  Boolean value for excludeGitData.
     * @param  excludeAttachments  Boolean value for excludeAttachments.
     * @param  excludeReleases  Boolean value for excludeReleases.
     * @param  excludeOwnerProjects  Boolean value for excludeOwnerProjects.
     * @param  orgMetadataOnly  Boolean value for orgMetadataOnly.
     * @param  exclude  List of Exclude1Enum value for exclude.
     */
    public OrgsMigrationsRequest(
            List<String> repositories,
            Boolean lockRepositories,
            Boolean excludeMetadata,
            Boolean excludeGitData,
            Boolean excludeAttachments,
            Boolean excludeReleases,
            Boolean excludeOwnerProjects,
            Boolean orgMetadataOnly,
            List<Exclude1Enum> exclude) {
        this.repositories = repositories;
        this.lockRepositories = lockRepositories;
        this.excludeMetadata = excludeMetadata;
        this.excludeGitData = excludeGitData;
        this.excludeAttachments = excludeAttachments;
        this.excludeReleases = excludeReleases;
        this.excludeOwnerProjects = excludeOwnerProjects;
        this.orgMetadataOnly = orgMetadataOnly;
        this.exclude = exclude;
    }

    /**
     * Getter for Repositories.
     * A list of arrays indicating which repositories should be migrated.
     * @return Returns the List of String
     */
    @JsonGetter("repositories")
    public List<String> getRepositories() {
        return repositories;
    }

    /**
     * Setter for Repositories.
     * A list of arrays indicating which repositories should be migrated.
     * @param repositories Value for List of String
     */
    @JsonSetter("repositories")
    public void setRepositories(List<String> repositories) {
        this.repositories = repositories;
    }

    /**
     * Getter for LockRepositories.
     * Indicates whether repositories should be locked (to prevent manipulation) while migrating
     * data.
     * @return Returns the Boolean
     */
    @JsonGetter("lock_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getLockRepositories() {
        return lockRepositories;
    }

    /**
     * Setter for LockRepositories.
     * Indicates whether repositories should be locked (to prevent manipulation) while migrating
     * data.
     * @param lockRepositories Value for Boolean
     */
    @JsonSetter("lock_repositories")
    public void setLockRepositories(Boolean lockRepositories) {
        this.lockRepositories = lockRepositories;
    }

    /**
     * Getter for ExcludeMetadata.
     * Indicates whether metadata should be excluded and only git source should be included for the
     * migration.
     * @return Returns the Boolean
     */
    @JsonGetter("exclude_metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getExcludeMetadata() {
        return excludeMetadata;
    }

    /**
     * Setter for ExcludeMetadata.
     * Indicates whether metadata should be excluded and only git source should be included for the
     * migration.
     * @param excludeMetadata Value for Boolean
     */
    @JsonSetter("exclude_metadata")
    public void setExcludeMetadata(Boolean excludeMetadata) {
        this.excludeMetadata = excludeMetadata;
    }

    /**
     * Getter for ExcludeGitData.
     * Indicates whether the repository git data should be excluded from the migration.
     * @return Returns the Boolean
     */
    @JsonGetter("exclude_git_data")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getExcludeGitData() {
        return excludeGitData;
    }

    /**
     * Setter for ExcludeGitData.
     * Indicates whether the repository git data should be excluded from the migration.
     * @param excludeGitData Value for Boolean
     */
    @JsonSetter("exclude_git_data")
    public void setExcludeGitData(Boolean excludeGitData) {
        this.excludeGitData = excludeGitData;
    }

    /**
     * Getter for ExcludeAttachments.
     * Indicates whether attachments should be excluded from the migration (to reduce migration
     * archive file size).
     * @return Returns the Boolean
     */
    @JsonGetter("exclude_attachments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getExcludeAttachments() {
        return excludeAttachments;
    }

    /**
     * Setter for ExcludeAttachments.
     * Indicates whether attachments should be excluded from the migration (to reduce migration
     * archive file size).
     * @param excludeAttachments Value for Boolean
     */
    @JsonSetter("exclude_attachments")
    public void setExcludeAttachments(Boolean excludeAttachments) {
        this.excludeAttachments = excludeAttachments;
    }

    /**
     * Getter for ExcludeReleases.
     * Indicates whether releases should be excluded from the migration (to reduce migration archive
     * file size).
     * @return Returns the Boolean
     */
    @JsonGetter("exclude_releases")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getExcludeReleases() {
        return excludeReleases;
    }

    /**
     * Setter for ExcludeReleases.
     * Indicates whether releases should be excluded from the migration (to reduce migration archive
     * file size).
     * @param excludeReleases Value for Boolean
     */
    @JsonSetter("exclude_releases")
    public void setExcludeReleases(Boolean excludeReleases) {
        this.excludeReleases = excludeReleases;
    }

    /**
     * Getter for ExcludeOwnerProjects.
     * Indicates whether projects owned by the organization or users should be excluded. from the
     * migration.
     * @return Returns the Boolean
     */
    @JsonGetter("exclude_owner_projects")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getExcludeOwnerProjects() {
        return excludeOwnerProjects;
    }

    /**
     * Setter for ExcludeOwnerProjects.
     * Indicates whether projects owned by the organization or users should be excluded. from the
     * migration.
     * @param excludeOwnerProjects Value for Boolean
     */
    @JsonSetter("exclude_owner_projects")
    public void setExcludeOwnerProjects(Boolean excludeOwnerProjects) {
        this.excludeOwnerProjects = excludeOwnerProjects;
    }

    /**
     * Getter for OrgMetadataOnly.
     * Indicates whether this should only include organization metadata (repositories array should
     * be empty and will ignore other flags).
     * @return Returns the Boolean
     */
    @JsonGetter("org_metadata_only")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getOrgMetadataOnly() {
        return orgMetadataOnly;
    }

    /**
     * Setter for OrgMetadataOnly.
     * Indicates whether this should only include organization metadata (repositories array should
     * be empty and will ignore other flags).
     * @param orgMetadataOnly Value for Boolean
     */
    @JsonSetter("org_metadata_only")
    public void setOrgMetadataOnly(Boolean orgMetadataOnly) {
        this.orgMetadataOnly = orgMetadataOnly;
    }

    /**
     * Getter for Exclude.
     * Exclude related items from being returned in the response in order to improve performance of
     * the request. The array can include any of: `"repositories"`.
     * @return Returns the List of Exclude1Enum
     */
    @JsonGetter("exclude")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Exclude1Enum> getExclude() {
        return exclude;
    }

    /**
     * Setter for Exclude.
     * Exclude related items from being returned in the response in order to improve performance of
     * the request. The array can include any of: `"repositories"`.
     * @param exclude Value for List of Exclude1Enum
     */
    @JsonSetter("exclude")
    public void setExclude(List<Exclude1Enum> exclude) {
        this.exclude = exclude;
    }

    /**
     * Converts this OrgsMigrationsRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "OrgsMigrationsRequest [" + "repositories=" + repositories + ", lockRepositories="
                + lockRepositories + ", excludeMetadata=" + excludeMetadata + ", excludeGitData="
                + excludeGitData + ", excludeAttachments=" + excludeAttachments
                + ", excludeReleases=" + excludeReleases + ", excludeOwnerProjects="
                + excludeOwnerProjects + ", orgMetadataOnly=" + orgMetadataOnly + ", exclude="
                + exclude + "]";
    }

    /**
     * Builds a new {@link OrgsMigrationsRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link OrgsMigrationsRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(repositories)
                .lockRepositories(getLockRepositories())
                .excludeMetadata(getExcludeMetadata())
                .excludeGitData(getExcludeGitData())
                .excludeAttachments(getExcludeAttachments())
                .excludeReleases(getExcludeReleases())
                .excludeOwnerProjects(getExcludeOwnerProjects())
                .orgMetadataOnly(getOrgMetadataOnly())
                .exclude(getExclude());
        return builder;
    }

    /**
     * Class to build instances of {@link OrgsMigrationsRequest}.
     */
    public static class Builder {
        private List<String> repositories;
        private Boolean lockRepositories = false;
        private Boolean excludeMetadata = false;
        private Boolean excludeGitData = false;
        private Boolean excludeAttachments = false;
        private Boolean excludeReleases = false;
        private Boolean excludeOwnerProjects = false;
        private Boolean orgMetadataOnly = false;
        private List<Exclude1Enum> exclude;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  repositories  List of String value for repositories.
         */
        public Builder(List<String> repositories) {
            this.repositories = repositories;
        }

        /**
         * Setter for repositories.
         * @param  repositories  List of String value for repositories.
         * @return Builder
         */
        public Builder repositories(List<String> repositories) {
            this.repositories = repositories;
            return this;
        }

        /**
         * Setter for lockRepositories.
         * @param  lockRepositories  Boolean value for lockRepositories.
         * @return Builder
         */
        public Builder lockRepositories(Boolean lockRepositories) {
            this.lockRepositories = lockRepositories;
            return this;
        }

        /**
         * Setter for excludeMetadata.
         * @param  excludeMetadata  Boolean value for excludeMetadata.
         * @return Builder
         */
        public Builder excludeMetadata(Boolean excludeMetadata) {
            this.excludeMetadata = excludeMetadata;
            return this;
        }

        /**
         * Setter for excludeGitData.
         * @param  excludeGitData  Boolean value for excludeGitData.
         * @return Builder
         */
        public Builder excludeGitData(Boolean excludeGitData) {
            this.excludeGitData = excludeGitData;
            return this;
        }

        /**
         * Setter for excludeAttachments.
         * @param  excludeAttachments  Boolean value for excludeAttachments.
         * @return Builder
         */
        public Builder excludeAttachments(Boolean excludeAttachments) {
            this.excludeAttachments = excludeAttachments;
            return this;
        }

        /**
         * Setter for excludeReleases.
         * @param  excludeReleases  Boolean value for excludeReleases.
         * @return Builder
         */
        public Builder excludeReleases(Boolean excludeReleases) {
            this.excludeReleases = excludeReleases;
            return this;
        }

        /**
         * Setter for excludeOwnerProjects.
         * @param  excludeOwnerProjects  Boolean value for excludeOwnerProjects.
         * @return Builder
         */
        public Builder excludeOwnerProjects(Boolean excludeOwnerProjects) {
            this.excludeOwnerProjects = excludeOwnerProjects;
            return this;
        }

        /**
         * Setter for orgMetadataOnly.
         * @param  orgMetadataOnly  Boolean value for orgMetadataOnly.
         * @return Builder
         */
        public Builder orgMetadataOnly(Boolean orgMetadataOnly) {
            this.orgMetadataOnly = orgMetadataOnly;
            return this;
        }

        /**
         * Setter for exclude.
         * @param  exclude  List of Exclude1Enum value for exclude.
         * @return Builder
         */
        public Builder exclude(List<Exclude1Enum> exclude) {
            this.exclude = exclude;
            return this;
        }

        /**
         * Builds a new {@link OrgsMigrationsRequest} object using the set fields.
         * @return {@link OrgsMigrationsRequest}
         */
        public OrgsMigrationsRequest build() {
            return new OrgsMigrationsRequest(repositories, lockRepositories, excludeMetadata,
                    excludeGitData, excludeAttachments, excludeReleases, excludeOwnerProjects,
                    orgMetadataOnly, exclude);
        }
    }
}

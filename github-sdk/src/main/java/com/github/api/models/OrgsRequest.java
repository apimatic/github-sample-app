/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for OrgsRequest type.
 */
public class OrgsRequest {
    private String billingEmail;
    private String company;
    private String email;
    private String twitterUsername;
    private String location;
    private String name;
    private String description;
    private Boolean hasOrganizationProjects;
    private Boolean hasRepositoryProjects;
    private DefaultRepositoryPermissionEnum defaultRepositoryPermission;
    private Boolean membersCanCreateRepositories;
    private Boolean membersCanCreateInternalRepositories;
    private Boolean membersCanCreatePrivateRepositories;
    private Boolean membersCanCreatePublicRepositories;
    private MembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType;
    private Boolean membersCanCreatePages;
    private Boolean membersCanCreatePublicPages;
    private Boolean membersCanCreatePrivatePages;
    private Boolean membersCanForkPrivateRepositories;
    private Boolean webCommitSignoffRequired;
    private String blog;
    private Boolean advancedSecurityEnabledForNewRepositories;
    private Boolean dependabotAlertsEnabledForNewRepositories;
    private Boolean dependabotSecurityUpdatesEnabledForNewRepositories;
    private Boolean dependencyGraphEnabledForNewRepositories;
    private Boolean secretScanningEnabledForNewRepositories;
    private Boolean secretScanningPushProtectionEnabledForNewRepositories;
    private Boolean secretScanningPushProtectionCustomLinkEnabled;
    private String secretScanningPushProtectionCustomLink;

    /**
     * Default constructor.
     */
    public OrgsRequest() {
        membersCanCreateRepositories = true;
        membersCanCreatePages = true;
        membersCanCreatePublicPages = true;
        membersCanCreatePrivatePages = true;
        membersCanForkPrivateRepositories = false;
        webCommitSignoffRequired = false;
    }

    /**
     * Initialization constructor.
     * @param  billingEmail  String value for billingEmail.
     * @param  company  String value for company.
     * @param  email  String value for email.
     * @param  twitterUsername  String value for twitterUsername.
     * @param  location  String value for location.
     * @param  name  String value for name.
     * @param  description  String value for description.
     * @param  hasOrganizationProjects  Boolean value for hasOrganizationProjects.
     * @param  hasRepositoryProjects  Boolean value for hasRepositoryProjects.
     * @param  defaultRepositoryPermission  DefaultRepositoryPermissionEnum value for
     *         defaultRepositoryPermission.
     * @param  membersCanCreateRepositories  Boolean value for membersCanCreateRepositories.
     * @param  membersCanCreateInternalRepositories  Boolean value for
     *         membersCanCreateInternalRepositories.
     * @param  membersCanCreatePrivateRepositories  Boolean value for
     *         membersCanCreatePrivateRepositories.
     * @param  membersCanCreatePublicRepositories  Boolean value for
     *         membersCanCreatePublicRepositories.
     * @param  membersAllowedRepositoryCreationType  MembersAllowedRepositoryCreationTypeEnum value
     *         for membersAllowedRepositoryCreationType.
     * @param  membersCanCreatePages  Boolean value for membersCanCreatePages.
     * @param  membersCanCreatePublicPages  Boolean value for membersCanCreatePublicPages.
     * @param  membersCanCreatePrivatePages  Boolean value for membersCanCreatePrivatePages.
     * @param  membersCanForkPrivateRepositories  Boolean value for
     *         membersCanForkPrivateRepositories.
     * @param  webCommitSignoffRequired  Boolean value for webCommitSignoffRequired.
     * @param  blog  String value for blog.
     * @param  advancedSecurityEnabledForNewRepositories  Boolean value for
     *         advancedSecurityEnabledForNewRepositories.
     * @param  dependabotAlertsEnabledForNewRepositories  Boolean value for
     *         dependabotAlertsEnabledForNewRepositories.
     * @param  dependabotSecurityUpdatesEnabledForNewRepositories  Boolean value for
     *         dependabotSecurityUpdatesEnabledForNewRepositories.
     * @param  dependencyGraphEnabledForNewRepositories  Boolean value for
     *         dependencyGraphEnabledForNewRepositories.
     * @param  secretScanningEnabledForNewRepositories  Boolean value for
     *         secretScanningEnabledForNewRepositories.
     * @param  secretScanningPushProtectionEnabledForNewRepositories  Boolean value for
     *         secretScanningPushProtectionEnabledForNewRepositories.
     * @param  secretScanningPushProtectionCustomLinkEnabled  Boolean value for
     *         secretScanningPushProtectionCustomLinkEnabled.
     * @param  secretScanningPushProtectionCustomLink  String value for
     *         secretScanningPushProtectionCustomLink.
     */
    public OrgsRequest(
            String billingEmail,
            String company,
            String email,
            String twitterUsername,
            String location,
            String name,
            String description,
            Boolean hasOrganizationProjects,
            Boolean hasRepositoryProjects,
            DefaultRepositoryPermissionEnum defaultRepositoryPermission,
            Boolean membersCanCreateRepositories,
            Boolean membersCanCreateInternalRepositories,
            Boolean membersCanCreatePrivateRepositories,
            Boolean membersCanCreatePublicRepositories,
            MembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType,
            Boolean membersCanCreatePages,
            Boolean membersCanCreatePublicPages,
            Boolean membersCanCreatePrivatePages,
            Boolean membersCanForkPrivateRepositories,
            Boolean webCommitSignoffRequired,
            String blog,
            Boolean advancedSecurityEnabledForNewRepositories,
            Boolean dependabotAlertsEnabledForNewRepositories,
            Boolean dependabotSecurityUpdatesEnabledForNewRepositories,
            Boolean dependencyGraphEnabledForNewRepositories,
            Boolean secretScanningEnabledForNewRepositories,
            Boolean secretScanningPushProtectionEnabledForNewRepositories,
            Boolean secretScanningPushProtectionCustomLinkEnabled,
            String secretScanningPushProtectionCustomLink) {
        this.billingEmail = billingEmail;
        this.company = company;
        this.email = email;
        this.twitterUsername = twitterUsername;
        this.location = location;
        this.name = name;
        this.description = description;
        this.hasOrganizationProjects = hasOrganizationProjects;
        this.hasRepositoryProjects = hasRepositoryProjects;
        this.defaultRepositoryPermission = defaultRepositoryPermission;
        this.membersCanCreateRepositories = membersCanCreateRepositories;
        this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
        this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
        this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
        this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
        this.membersCanCreatePages = membersCanCreatePages;
        this.membersCanCreatePublicPages = membersCanCreatePublicPages;
        this.membersCanCreatePrivatePages = membersCanCreatePrivatePages;
        this.membersCanForkPrivateRepositories = membersCanForkPrivateRepositories;
        this.webCommitSignoffRequired = webCommitSignoffRequired;
        this.blog = blog;
        this.advancedSecurityEnabledForNewRepositories = advancedSecurityEnabledForNewRepositories;
        this.dependabotAlertsEnabledForNewRepositories = dependabotAlertsEnabledForNewRepositories;
        this.dependabotSecurityUpdatesEnabledForNewRepositories =
                dependabotSecurityUpdatesEnabledForNewRepositories;
        this.dependencyGraphEnabledForNewRepositories = dependencyGraphEnabledForNewRepositories;
        this.secretScanningEnabledForNewRepositories = secretScanningEnabledForNewRepositories;
        this.secretScanningPushProtectionEnabledForNewRepositories =
                secretScanningPushProtectionEnabledForNewRepositories;
        this.secretScanningPushProtectionCustomLinkEnabled =
                secretScanningPushProtectionCustomLinkEnabled;
        this.secretScanningPushProtectionCustomLink = secretScanningPushProtectionCustomLink;
    }

    /**
     * Getter for BillingEmail.
     * Billing email address. This address is not publicized.
     * @return Returns the String
     */
    @JsonGetter("billing_email")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBillingEmail() {
        return billingEmail;
    }

    /**
     * Setter for BillingEmail.
     * Billing email address. This address is not publicized.
     * @param billingEmail Value for String
     */
    @JsonSetter("billing_email")
    public void setBillingEmail(String billingEmail) {
        this.billingEmail = billingEmail;
    }

    /**
     * Getter for Company.
     * The company name.
     * @return Returns the String
     */
    @JsonGetter("company")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCompany() {
        return company;
    }

    /**
     * Setter for Company.
     * The company name.
     * @param company Value for String
     */
    @JsonSetter("company")
    public void setCompany(String company) {
        this.company = company;
    }

    /**
     * Getter for Email.
     * The publicly visible email address.
     * @return Returns the String
     */
    @JsonGetter("email")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEmail() {
        return email;
    }

    /**
     * Setter for Email.
     * The publicly visible email address.
     * @param email Value for String
     */
    @JsonSetter("email")
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Getter for TwitterUsername.
     * The Twitter username of the company.
     * @return Returns the String
     */
    @JsonGetter("twitter_username")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTwitterUsername() {
        return twitterUsername;
    }

    /**
     * Setter for TwitterUsername.
     * The Twitter username of the company.
     * @param twitterUsername Value for String
     */
    @JsonSetter("twitter_username")
    public void setTwitterUsername(String twitterUsername) {
        this.twitterUsername = twitterUsername;
    }

    /**
     * Getter for Location.
     * The location.
     * @return Returns the String
     */
    @JsonGetter("location")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLocation() {
        return location;
    }

    /**
     * Setter for Location.
     * The location.
     * @param location Value for String
     */
    @JsonSetter("location")
    public void setLocation(String location) {
        this.location = location;
    }

    /**
     * Getter for Name.
     * The shorthand name of the company.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The shorthand name of the company.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Description.
     * The description of the company.
     * @return Returns the String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * The description of the company.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for HasOrganizationProjects.
     * Whether an organization can use organization projects.
     * @return Returns the Boolean
     */
    @JsonGetter("has_organization_projects")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasOrganizationProjects() {
        return hasOrganizationProjects;
    }

    /**
     * Setter for HasOrganizationProjects.
     * Whether an organization can use organization projects.
     * @param hasOrganizationProjects Value for Boolean
     */
    @JsonSetter("has_organization_projects")
    public void setHasOrganizationProjects(Boolean hasOrganizationProjects) {
        this.hasOrganizationProjects = hasOrganizationProjects;
    }

    /**
     * Getter for HasRepositoryProjects.
     * Whether repositories that belong to the organization can use repository projects.
     * @return Returns the Boolean
     */
    @JsonGetter("has_repository_projects")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasRepositoryProjects() {
        return hasRepositoryProjects;
    }

    /**
     * Setter for HasRepositoryProjects.
     * Whether repositories that belong to the organization can use repository projects.
     * @param hasRepositoryProjects Value for Boolean
     */
    @JsonSetter("has_repository_projects")
    public void setHasRepositoryProjects(Boolean hasRepositoryProjects) {
        this.hasRepositoryProjects = hasRepositoryProjects;
    }

    /**
     * Getter for DefaultRepositoryPermission.
     * @return Returns the DefaultRepositoryPermissionEnum
     */
    @JsonGetter("default_repository_permission")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DefaultRepositoryPermissionEnum getDefaultRepositoryPermission() {
        return defaultRepositoryPermission;
    }

    /**
     * Setter for DefaultRepositoryPermission.
     * @param defaultRepositoryPermission Value for DefaultRepositoryPermissionEnum
     */
    @JsonSetter("default_repository_permission")
    public void setDefaultRepositoryPermission(DefaultRepositoryPermissionEnum defaultRepositoryPermission) {
        this.defaultRepositoryPermission = defaultRepositoryPermission;
    }

    /**
     * Getter for MembersCanCreateRepositories.
     * Whether of non-admin organization members can create repositories. **Note:** A parameter can
     * override this parameter. See `members_allowed_repository_creation_type` in this table for
     * details.
     * @return Returns the Boolean
     */
    @JsonGetter("members_can_create_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMembersCanCreateRepositories() {
        return membersCanCreateRepositories;
    }

    /**
     * Setter for MembersCanCreateRepositories.
     * Whether of non-admin organization members can create repositories. **Note:** A parameter can
     * override this parameter. See `members_allowed_repository_creation_type` in this table for
     * details.
     * @param membersCanCreateRepositories Value for Boolean
     */
    @JsonSetter("members_can_create_repositories")
    public void setMembersCanCreateRepositories(Boolean membersCanCreateRepositories) {
        this.membersCanCreateRepositories = membersCanCreateRepositories;
    }

    /**
     * Getter for MembersCanCreateInternalRepositories.
     * Whether organization members can create internal repositories, which are visible to all
     * enterprise members. You can only allow members to create internal repositories if your
     * organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub
     * Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your
     * organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)"
     * in the GitHub Help documentation.
     * @return Returns the Boolean
     */
    @JsonGetter("members_can_create_internal_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMembersCanCreateInternalRepositories() {
        return membersCanCreateInternalRepositories;
    }

    /**
     * Setter for MembersCanCreateInternalRepositories.
     * Whether organization members can create internal repositories, which are visible to all
     * enterprise members. You can only allow members to create internal repositories if your
     * organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub
     * Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your
     * organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)"
     * in the GitHub Help documentation.
     * @param membersCanCreateInternalRepositories Value for Boolean
     */
    @JsonSetter("members_can_create_internal_repositories")
    public void setMembersCanCreateInternalRepositories(Boolean membersCanCreateInternalRepositories) {
        this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
    }

    /**
     * Getter for MembersCanCreatePrivateRepositories.
     * Whether organization members can create private repositories, which are visible to
     * organization members with permission. For more information, see "[Restricting repository
     * creation in your
     * organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)"
     * in the GitHub Help documentation.
     * @return Returns the Boolean
     */
    @JsonGetter("members_can_create_private_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMembersCanCreatePrivateRepositories() {
        return membersCanCreatePrivateRepositories;
    }

    /**
     * Setter for MembersCanCreatePrivateRepositories.
     * Whether organization members can create private repositories, which are visible to
     * organization members with permission. For more information, see "[Restricting repository
     * creation in your
     * organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)"
     * in the GitHub Help documentation.
     * @param membersCanCreatePrivateRepositories Value for Boolean
     */
    @JsonSetter("members_can_create_private_repositories")
    public void setMembersCanCreatePrivateRepositories(Boolean membersCanCreatePrivateRepositories) {
        this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
    }

    /**
     * Getter for MembersCanCreatePublicRepositories.
     * Whether organization members can create public repositories, which are visible to anyone. For
     * more information, see "[Restricting repository creation in your
     * organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)"
     * in the GitHub Help documentation.
     * @return Returns the Boolean
     */
    @JsonGetter("members_can_create_public_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMembersCanCreatePublicRepositories() {
        return membersCanCreatePublicRepositories;
    }

    /**
     * Setter for MembersCanCreatePublicRepositories.
     * Whether organization members can create public repositories, which are visible to anyone. For
     * more information, see "[Restricting repository creation in your
     * organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)"
     * in the GitHub Help documentation.
     * @param membersCanCreatePublicRepositories Value for Boolean
     */
    @JsonSetter("members_can_create_public_repositories")
    public void setMembersCanCreatePublicRepositories(Boolean membersCanCreatePublicRepositories) {
        this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
    }

    /**
     * Getter for MembersAllowedRepositoryCreationType.
     * @return Returns the MembersAllowedRepositoryCreationTypeEnum
     */
    @JsonGetter("members_allowed_repository_creation_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MembersAllowedRepositoryCreationTypeEnum getMembersAllowedRepositoryCreationType() {
        return membersAllowedRepositoryCreationType;
    }

    /**
     * Setter for MembersAllowedRepositoryCreationType.
     * @param membersAllowedRepositoryCreationType Value for MembersAllowedRepositoryCreationTypeEnum
     */
    @JsonSetter("members_allowed_repository_creation_type")
    public void setMembersAllowedRepositoryCreationType(MembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType) {
        this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
    }

    /**
     * Getter for MembersCanCreatePages.
     * Whether organization members can create GitHub Pages sites. Existing published sites will not
     * be impacted.
     * @return Returns the Boolean
     */
    @JsonGetter("members_can_create_pages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMembersCanCreatePages() {
        return membersCanCreatePages;
    }

    /**
     * Setter for MembersCanCreatePages.
     * Whether organization members can create GitHub Pages sites. Existing published sites will not
     * be impacted.
     * @param membersCanCreatePages Value for Boolean
     */
    @JsonSetter("members_can_create_pages")
    public void setMembersCanCreatePages(Boolean membersCanCreatePages) {
        this.membersCanCreatePages = membersCanCreatePages;
    }

    /**
     * Getter for MembersCanCreatePublicPages.
     * Whether organization members can create public GitHub Pages sites. Existing published sites
     * will not be impacted.
     * @return Returns the Boolean
     */
    @JsonGetter("members_can_create_public_pages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMembersCanCreatePublicPages() {
        return membersCanCreatePublicPages;
    }

    /**
     * Setter for MembersCanCreatePublicPages.
     * Whether organization members can create public GitHub Pages sites. Existing published sites
     * will not be impacted.
     * @param membersCanCreatePublicPages Value for Boolean
     */
    @JsonSetter("members_can_create_public_pages")
    public void setMembersCanCreatePublicPages(Boolean membersCanCreatePublicPages) {
        this.membersCanCreatePublicPages = membersCanCreatePublicPages;
    }

    /**
     * Getter for MembersCanCreatePrivatePages.
     * Whether organization members can create private GitHub Pages sites. Existing published sites
     * will not be impacted.
     * @return Returns the Boolean
     */
    @JsonGetter("members_can_create_private_pages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMembersCanCreatePrivatePages() {
        return membersCanCreatePrivatePages;
    }

    /**
     * Setter for MembersCanCreatePrivatePages.
     * Whether organization members can create private GitHub Pages sites. Existing published sites
     * will not be impacted.
     * @param membersCanCreatePrivatePages Value for Boolean
     */
    @JsonSetter("members_can_create_private_pages")
    public void setMembersCanCreatePrivatePages(Boolean membersCanCreatePrivatePages) {
        this.membersCanCreatePrivatePages = membersCanCreatePrivatePages;
    }

    /**
     * Getter for MembersCanForkPrivateRepositories.
     * Whether organization members can fork private organization repositories.
     * @return Returns the Boolean
     */
    @JsonGetter("members_can_fork_private_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMembersCanForkPrivateRepositories() {
        return membersCanForkPrivateRepositories;
    }

    /**
     * Setter for MembersCanForkPrivateRepositories.
     * Whether organization members can fork private organization repositories.
     * @param membersCanForkPrivateRepositories Value for Boolean
     */
    @JsonSetter("members_can_fork_private_repositories")
    public void setMembersCanForkPrivateRepositories(Boolean membersCanForkPrivateRepositories) {
        this.membersCanForkPrivateRepositories = membersCanForkPrivateRepositories;
    }

    /**
     * Getter for WebCommitSignoffRequired.
     * Whether contributors to organization repositories are required to sign off on commits they
     * make through GitHub's web interface.
     * @return Returns the Boolean
     */
    @JsonGetter("web_commit_signoff_required")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getWebCommitSignoffRequired() {
        return webCommitSignoffRequired;
    }

    /**
     * Setter for WebCommitSignoffRequired.
     * Whether contributors to organization repositories are required to sign off on commits they
     * make through GitHub's web interface.
     * @param webCommitSignoffRequired Value for Boolean
     */
    @JsonSetter("web_commit_signoff_required")
    public void setWebCommitSignoffRequired(Boolean webCommitSignoffRequired) {
        this.webCommitSignoffRequired = webCommitSignoffRequired;
    }

    /**
     * Getter for Blog.
     * @return Returns the String
     */
    @JsonGetter("blog")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBlog() {
        return blog;
    }

    /**
     * Setter for Blog.
     * @param blog Value for String
     */
    @JsonSetter("blog")
    public void setBlog(String blog) {
        this.blog = blog;
    }

    /**
     * Getter for AdvancedSecurityEnabledForNewRepositories.
     * Whether GitHub Advanced Security is automatically enabled for new repositories. To use this
     * parameter, you must have admin permissions for the repository or be an owner or security
     * manager for the organization that owns the repository. For more information, see "[Managing
     * security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * You can check which security and analysis features are currently enabled by using a `GET
     * /orgs/{org}` request.
     * @return Returns the Boolean
     */
    @JsonGetter("advanced_security_enabled_for_new_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAdvancedSecurityEnabledForNewRepositories() {
        return advancedSecurityEnabledForNewRepositories;
    }

    /**
     * Setter for AdvancedSecurityEnabledForNewRepositories.
     * Whether GitHub Advanced Security is automatically enabled for new repositories. To use this
     * parameter, you must have admin permissions for the repository or be an owner or security
     * manager for the organization that owns the repository. For more information, see "[Managing
     * security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * You can check which security and analysis features are currently enabled by using a `GET
     * /orgs/{org}` request.
     * @param advancedSecurityEnabledForNewRepositories Value for Boolean
     */
    @JsonSetter("advanced_security_enabled_for_new_repositories")
    public void setAdvancedSecurityEnabledForNewRepositories(Boolean advancedSecurityEnabledForNewRepositories) {
        this.advancedSecurityEnabledForNewRepositories = advancedSecurityEnabledForNewRepositories;
    }

    /**
     * Getter for DependabotAlertsEnabledForNewRepositories.
     * Whether Dependabot alerts is automatically enabled for new repositories. To use this
     * parameter, you must have admin permissions for the repository or be an owner or security
     * manager for the organization that owns the repository. For more information, see "[Managing
     * security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * You can check which security and analysis features are currently enabled by using a `GET
     * /orgs/{org}` request.
     * @return Returns the Boolean
     */
    @JsonGetter("dependabot_alerts_enabled_for_new_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDependabotAlertsEnabledForNewRepositories() {
        return dependabotAlertsEnabledForNewRepositories;
    }

    /**
     * Setter for DependabotAlertsEnabledForNewRepositories.
     * Whether Dependabot alerts is automatically enabled for new repositories. To use this
     * parameter, you must have admin permissions for the repository or be an owner or security
     * manager for the organization that owns the repository. For more information, see "[Managing
     * security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * You can check which security and analysis features are currently enabled by using a `GET
     * /orgs/{org}` request.
     * @param dependabotAlertsEnabledForNewRepositories Value for Boolean
     */
    @JsonSetter("dependabot_alerts_enabled_for_new_repositories")
    public void setDependabotAlertsEnabledForNewRepositories(Boolean dependabotAlertsEnabledForNewRepositories) {
        this.dependabotAlertsEnabledForNewRepositories = dependabotAlertsEnabledForNewRepositories;
    }

    /**
     * Getter for DependabotSecurityUpdatesEnabledForNewRepositories.
     * Whether Dependabot security updates is automatically enabled for new repositories. To use
     * this parameter, you must have admin permissions for the repository or be an owner or security
     * manager for the organization that owns the repository. For more information, see "[Managing
     * security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * You can check which security and analysis features are currently enabled by using a `GET
     * /orgs/{org}` request.
     * @return Returns the Boolean
     */
    @JsonGetter("dependabot_security_updates_enabled_for_new_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDependabotSecurityUpdatesEnabledForNewRepositories() {
        return dependabotSecurityUpdatesEnabledForNewRepositories;
    }

    /**
     * Setter for DependabotSecurityUpdatesEnabledForNewRepositories.
     * Whether Dependabot security updates is automatically enabled for new repositories. To use
     * this parameter, you must have admin permissions for the repository or be an owner or security
     * manager for the organization that owns the repository. For more information, see "[Managing
     * security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * You can check which security and analysis features are currently enabled by using a `GET
     * /orgs/{org}` request.
     * @param dependabotSecurityUpdatesEnabledForNewRepositories Value for Boolean
     */
    @JsonSetter("dependabot_security_updates_enabled_for_new_repositories")
    public void setDependabotSecurityUpdatesEnabledForNewRepositories(Boolean dependabotSecurityUpdatesEnabledForNewRepositories) {
        this.dependabotSecurityUpdatesEnabledForNewRepositories = dependabotSecurityUpdatesEnabledForNewRepositories;
    }

    /**
     * Getter for DependencyGraphEnabledForNewRepositories.
     * Whether dependency graph is automatically enabled for new repositories. To use this
     * parameter, you must have admin permissions for the repository or be an owner or security
     * manager for the organization that owns the repository. For more information, see "[Managing
     * security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * You can check which security and analysis features are currently enabled by using a `GET
     * /orgs/{org}` request.
     * @return Returns the Boolean
     */
    @JsonGetter("dependency_graph_enabled_for_new_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDependencyGraphEnabledForNewRepositories() {
        return dependencyGraphEnabledForNewRepositories;
    }

    /**
     * Setter for DependencyGraphEnabledForNewRepositories.
     * Whether dependency graph is automatically enabled for new repositories. To use this
     * parameter, you must have admin permissions for the repository or be an owner or security
     * manager for the organization that owns the repository. For more information, see "[Managing
     * security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * You can check which security and analysis features are currently enabled by using a `GET
     * /orgs/{org}` request.
     * @param dependencyGraphEnabledForNewRepositories Value for Boolean
     */
    @JsonSetter("dependency_graph_enabled_for_new_repositories")
    public void setDependencyGraphEnabledForNewRepositories(Boolean dependencyGraphEnabledForNewRepositories) {
        this.dependencyGraphEnabledForNewRepositories = dependencyGraphEnabledForNewRepositories;
    }

    /**
     * Getter for SecretScanningEnabledForNewRepositories.
     * Whether secret scanning is automatically enabled for new repositories. To use this parameter,
     * you must have admin permissions for the repository or be an owner or security manager for the
     * organization that owns the repository. For more information, see "[Managing security managers
     * in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * You can check which security and analysis features are currently enabled by using a `GET
     * /orgs/{org}` request.
     * @return Returns the Boolean
     */
    @JsonGetter("secret_scanning_enabled_for_new_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSecretScanningEnabledForNewRepositories() {
        return secretScanningEnabledForNewRepositories;
    }

    /**
     * Setter for SecretScanningEnabledForNewRepositories.
     * Whether secret scanning is automatically enabled for new repositories. To use this parameter,
     * you must have admin permissions for the repository or be an owner or security manager for the
     * organization that owns the repository. For more information, see "[Managing security managers
     * in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * You can check which security and analysis features are currently enabled by using a `GET
     * /orgs/{org}` request.
     * @param secretScanningEnabledForNewRepositories Value for Boolean
     */
    @JsonSetter("secret_scanning_enabled_for_new_repositories")
    public void setSecretScanningEnabledForNewRepositories(Boolean secretScanningEnabledForNewRepositories) {
        this.secretScanningEnabledForNewRepositories = secretScanningEnabledForNewRepositories;
    }

    /**
     * Getter for SecretScanningPushProtectionEnabledForNewRepositories.
     * Whether secret scanning push protection is automatically enabled for new repositories. To use
     * this parameter, you must have admin permissions for the repository or be an owner or security
     * manager for the organization that owns the repository. For more information, see "[Managing
     * security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * You can check which security and analysis features are currently enabled by using a `GET
     * /orgs/{org}` request.
     * @return Returns the Boolean
     */
    @JsonGetter("secret_scanning_push_protection_enabled_for_new_repositories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSecretScanningPushProtectionEnabledForNewRepositories() {
        return secretScanningPushProtectionEnabledForNewRepositories;
    }

    /**
     * Setter for SecretScanningPushProtectionEnabledForNewRepositories.
     * Whether secret scanning push protection is automatically enabled for new repositories. To use
     * this parameter, you must have admin permissions for the repository or be an owner or security
     * manager for the organization that owns the repository. For more information, see "[Managing
     * security managers in your
     * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * You can check which security and analysis features are currently enabled by using a `GET
     * /orgs/{org}` request.
     * @param secretScanningPushProtectionEnabledForNewRepositories Value for Boolean
     */
    @JsonSetter("secret_scanning_push_protection_enabled_for_new_repositories")
    public void setSecretScanningPushProtectionEnabledForNewRepositories(Boolean secretScanningPushProtectionEnabledForNewRepositories) {
        this.secretScanningPushProtectionEnabledForNewRepositories = secretScanningPushProtectionEnabledForNewRepositories;
    }

    /**
     * Getter for SecretScanningPushProtectionCustomLinkEnabled.
     * Whether a custom link is shown to contributors who are blocked from pushing a secret by push
     * protection.
     * @return Returns the Boolean
     */
    @JsonGetter("secret_scanning_push_protection_custom_link_enabled")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSecretScanningPushProtectionCustomLinkEnabled() {
        return secretScanningPushProtectionCustomLinkEnabled;
    }

    /**
     * Setter for SecretScanningPushProtectionCustomLinkEnabled.
     * Whether a custom link is shown to contributors who are blocked from pushing a secret by push
     * protection.
     * @param secretScanningPushProtectionCustomLinkEnabled Value for Boolean
     */
    @JsonSetter("secret_scanning_push_protection_custom_link_enabled")
    public void setSecretScanningPushProtectionCustomLinkEnabled(Boolean secretScanningPushProtectionCustomLinkEnabled) {
        this.secretScanningPushProtectionCustomLinkEnabled = secretScanningPushProtectionCustomLinkEnabled;
    }

    /**
     * Getter for SecretScanningPushProtectionCustomLink.
     * If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be
     * displayed to contributors who are blocked from pushing a secret.
     * @return Returns the String
     */
    @JsonGetter("secret_scanning_push_protection_custom_link")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSecretScanningPushProtectionCustomLink() {
        return secretScanningPushProtectionCustomLink;
    }

    /**
     * Setter for SecretScanningPushProtectionCustomLink.
     * If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be
     * displayed to contributors who are blocked from pushing a secret.
     * @param secretScanningPushProtectionCustomLink Value for String
     */
    @JsonSetter("secret_scanning_push_protection_custom_link")
    public void setSecretScanningPushProtectionCustomLink(String secretScanningPushProtectionCustomLink) {
        this.secretScanningPushProtectionCustomLink = secretScanningPushProtectionCustomLink;
    }

    /**
     * Converts this OrgsRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "OrgsRequest [" + "billingEmail=" + billingEmail + ", company=" + company
                + ", email=" + email + ", twitterUsername=" + twitterUsername + ", location="
                + location + ", name=" + name + ", description=" + description
                + ", hasOrganizationProjects=" + hasOrganizationProjects
                + ", hasRepositoryProjects=" + hasRepositoryProjects
                + ", defaultRepositoryPermission=" + defaultRepositoryPermission
                + ", membersCanCreateRepositories=" + membersCanCreateRepositories
                + ", membersCanCreateInternalRepositories=" + membersCanCreateInternalRepositories
                + ", membersCanCreatePrivateRepositories=" + membersCanCreatePrivateRepositories
                + ", membersCanCreatePublicRepositories=" + membersCanCreatePublicRepositories
                + ", membersAllowedRepositoryCreationType=" + membersAllowedRepositoryCreationType
                + ", membersCanCreatePages=" + membersCanCreatePages
                + ", membersCanCreatePublicPages=" + membersCanCreatePublicPages
                + ", membersCanCreatePrivatePages=" + membersCanCreatePrivatePages
                + ", membersCanForkPrivateRepositories=" + membersCanForkPrivateRepositories
                + ", webCommitSignoffRequired=" + webCommitSignoffRequired + ", blog=" + blog
                + ", advancedSecurityEnabledForNewRepositories="
                + advancedSecurityEnabledForNewRepositories
                + ", dependabotAlertsEnabledForNewRepositories="
                + dependabotAlertsEnabledForNewRepositories
                + ", dependabotSecurityUpdatesEnabledForNewRepositories="
                + dependabotSecurityUpdatesEnabledForNewRepositories
                + ", dependencyGraphEnabledForNewRepositories="
                + dependencyGraphEnabledForNewRepositories
                + ", secretScanningEnabledForNewRepositories="
                + secretScanningEnabledForNewRepositories
                + ", secretScanningPushProtectionEnabledForNewRepositories="
                + secretScanningPushProtectionEnabledForNewRepositories
                + ", secretScanningPushProtectionCustomLinkEnabled="
                + secretScanningPushProtectionCustomLinkEnabled
                + ", secretScanningPushProtectionCustomLink="
                + secretScanningPushProtectionCustomLink + "]";
    }

    /**
     * Builds a new {@link OrgsRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link OrgsRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .billingEmail(getBillingEmail())
                .company(getCompany())
                .email(getEmail())
                .twitterUsername(getTwitterUsername())
                .location(getLocation())
                .name(getName())
                .description(getDescription())
                .hasOrganizationProjects(getHasOrganizationProjects())
                .hasRepositoryProjects(getHasRepositoryProjects())
                .defaultRepositoryPermission(getDefaultRepositoryPermission())
                .membersCanCreateRepositories(getMembersCanCreateRepositories())
                .membersCanCreateInternalRepositories(getMembersCanCreateInternalRepositories())
                .membersCanCreatePrivateRepositories(getMembersCanCreatePrivateRepositories())
                .membersCanCreatePublicRepositories(getMembersCanCreatePublicRepositories())
                .membersAllowedRepositoryCreationType(getMembersAllowedRepositoryCreationType())
                .membersCanCreatePages(getMembersCanCreatePages())
                .membersCanCreatePublicPages(getMembersCanCreatePublicPages())
                .membersCanCreatePrivatePages(getMembersCanCreatePrivatePages())
                .membersCanForkPrivateRepositories(getMembersCanForkPrivateRepositories())
                .webCommitSignoffRequired(getWebCommitSignoffRequired())
                .blog(getBlog())
                .advancedSecurityEnabledForNewRepositories(getAdvancedSecurityEnabledForNewRepositories())
                .dependabotAlertsEnabledForNewRepositories(getDependabotAlertsEnabledForNewRepositories())
                .dependabotSecurityUpdatesEnabledForNewRepositories(getDependabotSecurityUpdatesEnabledForNewRepositories())
                .dependencyGraphEnabledForNewRepositories(getDependencyGraphEnabledForNewRepositories())
                .secretScanningEnabledForNewRepositories(getSecretScanningEnabledForNewRepositories())
                .secretScanningPushProtectionEnabledForNewRepositories(getSecretScanningPushProtectionEnabledForNewRepositories())
                .secretScanningPushProtectionCustomLinkEnabled(getSecretScanningPushProtectionCustomLinkEnabled())
                .secretScanningPushProtectionCustomLink(getSecretScanningPushProtectionCustomLink());
        return builder;
    }

    /**
     * Class to build instances of {@link OrgsRequest}.
     */
    public static class Builder {
        private String billingEmail;
        private String company;
        private String email;
        private String twitterUsername;
        private String location;
        private String name;
        private String description;
        private Boolean hasOrganizationProjects;
        private Boolean hasRepositoryProjects;
        private DefaultRepositoryPermissionEnum defaultRepositoryPermission;
        private Boolean membersCanCreateRepositories = true;
        private Boolean membersCanCreateInternalRepositories;
        private Boolean membersCanCreatePrivateRepositories;
        private Boolean membersCanCreatePublicRepositories;
        private MembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType;
        private Boolean membersCanCreatePages = true;
        private Boolean membersCanCreatePublicPages = true;
        private Boolean membersCanCreatePrivatePages = true;
        private Boolean membersCanForkPrivateRepositories = false;
        private Boolean webCommitSignoffRequired = false;
        private String blog;
        private Boolean advancedSecurityEnabledForNewRepositories;
        private Boolean dependabotAlertsEnabledForNewRepositories;
        private Boolean dependabotSecurityUpdatesEnabledForNewRepositories;
        private Boolean dependencyGraphEnabledForNewRepositories;
        private Boolean secretScanningEnabledForNewRepositories;
        private Boolean secretScanningPushProtectionEnabledForNewRepositories;
        private Boolean secretScanningPushProtectionCustomLinkEnabled;
        private String secretScanningPushProtectionCustomLink;



        /**
         * Setter for billingEmail.
         * @param  billingEmail  String value for billingEmail.
         * @return Builder
         */
        public Builder billingEmail(String billingEmail) {
            this.billingEmail = billingEmail;
            return this;
        }

        /**
         * Setter for company.
         * @param  company  String value for company.
         * @return Builder
         */
        public Builder company(String company) {
            this.company = company;
            return this;
        }

        /**
         * Setter for email.
         * @param  email  String value for email.
         * @return Builder
         */
        public Builder email(String email) {
            this.email = email;
            return this;
        }

        /**
         * Setter for twitterUsername.
         * @param  twitterUsername  String value for twitterUsername.
         * @return Builder
         */
        public Builder twitterUsername(String twitterUsername) {
            this.twitterUsername = twitterUsername;
            return this;
        }

        /**
         * Setter for location.
         * @param  location  String value for location.
         * @return Builder
         */
        public Builder location(String location) {
            this.location = location;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for hasOrganizationProjects.
         * @param  hasOrganizationProjects  Boolean value for hasOrganizationProjects.
         * @return Builder
         */
        public Builder hasOrganizationProjects(Boolean hasOrganizationProjects) {
            this.hasOrganizationProjects = hasOrganizationProjects;
            return this;
        }

        /**
         * Setter for hasRepositoryProjects.
         * @param  hasRepositoryProjects  Boolean value for hasRepositoryProjects.
         * @return Builder
         */
        public Builder hasRepositoryProjects(Boolean hasRepositoryProjects) {
            this.hasRepositoryProjects = hasRepositoryProjects;
            return this;
        }

        /**
         * Setter for defaultRepositoryPermission.
         * @param  defaultRepositoryPermission  DefaultRepositoryPermissionEnum value for
         *         defaultRepositoryPermission.
         * @return Builder
         */
        public Builder defaultRepositoryPermission(
                DefaultRepositoryPermissionEnum defaultRepositoryPermission) {
            this.defaultRepositoryPermission = defaultRepositoryPermission;
            return this;
        }

        /**
         * Setter for membersCanCreateRepositories.
         * @param  membersCanCreateRepositories  Boolean value for membersCanCreateRepositories.
         * @return Builder
         */
        public Builder membersCanCreateRepositories(Boolean membersCanCreateRepositories) {
            this.membersCanCreateRepositories = membersCanCreateRepositories;
            return this;
        }

        /**
         * Setter for membersCanCreateInternalRepositories.
         * @param  membersCanCreateInternalRepositories  Boolean value for
         *         membersCanCreateInternalRepositories.
         * @return Builder
         */
        public Builder membersCanCreateInternalRepositories(
                Boolean membersCanCreateInternalRepositories) {
            this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
            return this;
        }

        /**
         * Setter for membersCanCreatePrivateRepositories.
         * @param  membersCanCreatePrivateRepositories  Boolean value for
         *         membersCanCreatePrivateRepositories.
         * @return Builder
         */
        public Builder membersCanCreatePrivateRepositories(
                Boolean membersCanCreatePrivateRepositories) {
            this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
            return this;
        }

        /**
         * Setter for membersCanCreatePublicRepositories.
         * @param  membersCanCreatePublicRepositories  Boolean value for
         *         membersCanCreatePublicRepositories.
         * @return Builder
         */
        public Builder membersCanCreatePublicRepositories(
                Boolean membersCanCreatePublicRepositories) {
            this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
            return this;
        }

        /**
         * Setter for membersAllowedRepositoryCreationType.
         * @param  membersAllowedRepositoryCreationType  MembersAllowedRepositoryCreationTypeEnum
         *         value for membersAllowedRepositoryCreationType.
         * @return Builder
         */
        public Builder membersAllowedRepositoryCreationType(
                MembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType) {
            this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
            return this;
        }

        /**
         * Setter for membersCanCreatePages.
         * @param  membersCanCreatePages  Boolean value for membersCanCreatePages.
         * @return Builder
         */
        public Builder membersCanCreatePages(Boolean membersCanCreatePages) {
            this.membersCanCreatePages = membersCanCreatePages;
            return this;
        }

        /**
         * Setter for membersCanCreatePublicPages.
         * @param  membersCanCreatePublicPages  Boolean value for membersCanCreatePublicPages.
         * @return Builder
         */
        public Builder membersCanCreatePublicPages(Boolean membersCanCreatePublicPages) {
            this.membersCanCreatePublicPages = membersCanCreatePublicPages;
            return this;
        }

        /**
         * Setter for membersCanCreatePrivatePages.
         * @param  membersCanCreatePrivatePages  Boolean value for membersCanCreatePrivatePages.
         * @return Builder
         */
        public Builder membersCanCreatePrivatePages(Boolean membersCanCreatePrivatePages) {
            this.membersCanCreatePrivatePages = membersCanCreatePrivatePages;
            return this;
        }

        /**
         * Setter for membersCanForkPrivateRepositories.
         * @param  membersCanForkPrivateRepositories  Boolean value for
         *         membersCanForkPrivateRepositories.
         * @return Builder
         */
        public Builder membersCanForkPrivateRepositories(
                Boolean membersCanForkPrivateRepositories) {
            this.membersCanForkPrivateRepositories = membersCanForkPrivateRepositories;
            return this;
        }

        /**
         * Setter for webCommitSignoffRequired.
         * @param  webCommitSignoffRequired  Boolean value for webCommitSignoffRequired.
         * @return Builder
         */
        public Builder webCommitSignoffRequired(Boolean webCommitSignoffRequired) {
            this.webCommitSignoffRequired = webCommitSignoffRequired;
            return this;
        }

        /**
         * Setter for blog.
         * @param  blog  String value for blog.
         * @return Builder
         */
        public Builder blog(String blog) {
            this.blog = blog;
            return this;
        }

        /**
         * Setter for advancedSecurityEnabledForNewRepositories.
         * @param  advancedSecurityEnabledForNewRepositories  Boolean value for
         *         advancedSecurityEnabledForNewRepositories.
         * @return Builder
         */
        public Builder advancedSecurityEnabledForNewRepositories(
                Boolean advancedSecurityEnabledForNewRepositories) {
            this.advancedSecurityEnabledForNewRepositories =
                    advancedSecurityEnabledForNewRepositories;
            return this;
        }

        /**
         * Setter for dependabotAlertsEnabledForNewRepositories.
         * @param  dependabotAlertsEnabledForNewRepositories  Boolean value for
         *         dependabotAlertsEnabledForNewRepositories.
         * @return Builder
         */
        public Builder dependabotAlertsEnabledForNewRepositories(
                Boolean dependabotAlertsEnabledForNewRepositories) {
            this.dependabotAlertsEnabledForNewRepositories =
                    dependabotAlertsEnabledForNewRepositories;
            return this;
        }

        /**
         * Setter for dependabotSecurityUpdatesEnabledForNewRepositories.
         * @param  dependabotSecurityUpdatesEnabledForNewRepositories  Boolean value for
         *         dependabotSecurityUpdatesEnabledForNewRepositories.
         * @return Builder
         */
        public Builder dependabotSecurityUpdatesEnabledForNewRepositories(
                Boolean dependabotSecurityUpdatesEnabledForNewRepositories) {
            this.dependabotSecurityUpdatesEnabledForNewRepositories =
                    dependabotSecurityUpdatesEnabledForNewRepositories;
            return this;
        }

        /**
         * Setter for dependencyGraphEnabledForNewRepositories.
         * @param  dependencyGraphEnabledForNewRepositories  Boolean value for
         *         dependencyGraphEnabledForNewRepositories.
         * @return Builder
         */
        public Builder dependencyGraphEnabledForNewRepositories(
                Boolean dependencyGraphEnabledForNewRepositories) {
            this.dependencyGraphEnabledForNewRepositories =
                    dependencyGraphEnabledForNewRepositories;
            return this;
        }

        /**
         * Setter for secretScanningEnabledForNewRepositories.
         * @param  secretScanningEnabledForNewRepositories  Boolean value for
         *         secretScanningEnabledForNewRepositories.
         * @return Builder
         */
        public Builder secretScanningEnabledForNewRepositories(
                Boolean secretScanningEnabledForNewRepositories) {
            this.secretScanningEnabledForNewRepositories = secretScanningEnabledForNewRepositories;
            return this;
        }

        /**
         * Setter for secretScanningPushProtectionEnabledForNewRepositories.
         * @param  secretScanningPushProtectionEnabledForNewRepositories  Boolean value for
         *         secretScanningPushProtectionEnabledForNewRepositories.
         * @return Builder
         */
        public Builder secretScanningPushProtectionEnabledForNewRepositories(
                Boolean secretScanningPushProtectionEnabledForNewRepositories) {
            this.secretScanningPushProtectionEnabledForNewRepositories =
                    secretScanningPushProtectionEnabledForNewRepositories;
            return this;
        }

        /**
         * Setter for secretScanningPushProtectionCustomLinkEnabled.
         * @param  secretScanningPushProtectionCustomLinkEnabled  Boolean value for
         *         secretScanningPushProtectionCustomLinkEnabled.
         * @return Builder
         */
        public Builder secretScanningPushProtectionCustomLinkEnabled(
                Boolean secretScanningPushProtectionCustomLinkEnabled) {
            this.secretScanningPushProtectionCustomLinkEnabled =
                    secretScanningPushProtectionCustomLinkEnabled;
            return this;
        }

        /**
         * Setter for secretScanningPushProtectionCustomLink.
         * @param  secretScanningPushProtectionCustomLink  String value for
         *         secretScanningPushProtectionCustomLink.
         * @return Builder
         */
        public Builder secretScanningPushProtectionCustomLink(
                String secretScanningPushProtectionCustomLink) {
            this.secretScanningPushProtectionCustomLink = secretScanningPushProtectionCustomLink;
            return this;
        }

        /**
         * Builds a new {@link OrgsRequest} object using the set fields.
         * @return {@link OrgsRequest}
         */
        public OrgsRequest build() {
            return new OrgsRequest(billingEmail, company, email, twitterUsername, location, name,
                    description, hasOrganizationProjects, hasRepositoryProjects,
                    defaultRepositoryPermission, membersCanCreateRepositories,
                    membersCanCreateInternalRepositories, membersCanCreatePrivateRepositories,
                    membersCanCreatePublicRepositories, membersAllowedRepositoryCreationType,
                    membersCanCreatePages, membersCanCreatePublicPages,
                    membersCanCreatePrivatePages, membersCanForkPrivateRepositories,
                    webCommitSignoffRequired, blog, advancedSecurityEnabledForNewRepositories,
                    dependabotAlertsEnabledForNewRepositories,
                    dependabotSecurityUpdatesEnabledForNewRepositories,
                    dependencyGraphEnabledForNewRepositories,
                    secretScanningEnabledForNewRepositories,
                    secretScanningPushProtectionEnabledForNewRepositories,
                    secretScanningPushProtectionCustomLinkEnabled,
                    secretScanningPushProtectionCustomLink);
        }
    }
}

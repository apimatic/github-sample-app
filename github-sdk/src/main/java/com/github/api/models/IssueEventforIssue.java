/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for IssueEventforIssue type.
 */
public class IssueEventforIssue {
    private Integer id;
    private String nodeId;
    private String url;
    private Actor2 actor;
    private String event;
    private OptionalNullable<String> commitId;
    private OptionalNullable<String> commitUrl;
    private String createdAt;
    private Object performedViaGithubApp;
    private Label3 label;
    private Assignee assignee;
    private Assigner assigner;
    private Milestone1 milestone;
    private Rename rename;
    private ReviewRequester reviewRequester;
    private RequestedTeam requestedTeam;
    private RequestedReviewer requestedReviewer;
    private DismissedReview dismissedReview;
    private OptionalNullable<String> lockReason;
    private ProjectCard1 projectCard;

    /**
     * Default constructor.
     */
    public IssueEventforIssue() {
    }

    /**
     * Initialization constructor.
     * @param  id  Integer value for id.
     * @param  nodeId  String value for nodeId.
     * @param  url  String value for url.
     * @param  actor  Actor2 value for actor.
     * @param  event  String value for event.
     * @param  commitId  String value for commitId.
     * @param  commitUrl  String value for commitUrl.
     * @param  createdAt  String value for createdAt.
     * @param  performedViaGithubApp  Object value for performedViaGithubApp.
     * @param  label  Label3 value for label.
     * @param  assignee  Assignee value for assignee.
     * @param  assigner  Assigner value for assigner.
     * @param  milestone  Milestone1 value for milestone.
     * @param  rename  Rename value for rename.
     * @param  reviewRequester  ReviewRequester value for reviewRequester.
     * @param  requestedTeam  RequestedTeam value for requestedTeam.
     * @param  requestedReviewer  RequestedReviewer value for requestedReviewer.
     * @param  dismissedReview  DismissedReview value for dismissedReview.
     * @param  lockReason  String value for lockReason.
     * @param  projectCard  ProjectCard1 value for projectCard.
     */
    public IssueEventforIssue(
            Integer id,
            String nodeId,
            String url,
            Actor2 actor,
            String event,
            String commitId,
            String commitUrl,
            String createdAt,
            Object performedViaGithubApp,
            Label3 label,
            Assignee assignee,
            Assigner assigner,
            Milestone1 milestone,
            Rename rename,
            ReviewRequester reviewRequester,
            RequestedTeam requestedTeam,
            RequestedReviewer requestedReviewer,
            DismissedReview dismissedReview,
            String lockReason,
            ProjectCard1 projectCard) {
        this.id = id;
        this.nodeId = nodeId;
        this.url = url;
        this.actor = actor;
        this.event = event;
        this.commitId = OptionalNullable.of(commitId);
        this.commitUrl = OptionalNullable.of(commitUrl);
        this.createdAt = createdAt;
        this.performedViaGithubApp = performedViaGithubApp;
        this.label = label;
        this.assignee = assignee;
        this.assigner = assigner;
        this.milestone = milestone;
        this.rename = rename;
        this.reviewRequester = reviewRequester;
        this.requestedTeam = requestedTeam;
        this.requestedReviewer = requestedReviewer;
        this.dismissedReview = dismissedReview;
        this.lockReason = OptionalNullable.of(lockReason);
        this.projectCard = projectCard;
    }

    /**
     * Internal initialization constructor.
     */
    protected IssueEventforIssue(Integer id, String nodeId, String url, Actor2 actor, String event,
            OptionalNullable<String> commitId, OptionalNullable<String> commitUrl, String createdAt,
            Object performedViaGithubApp, Label3 label, Assignee assignee, Assigner assigner,
            Milestone1 milestone, Rename rename, ReviewRequester reviewRequester,
            RequestedTeam requestedTeam, RequestedReviewer requestedReviewer,
            DismissedReview dismissedReview, OptionalNullable<String> lockReason,
            ProjectCard1 projectCard) {
        this.id = id;
        this.nodeId = nodeId;
        this.url = url;
        this.actor = actor;
        this.event = event;
        this.commitId = commitId;
        this.commitUrl = commitUrl;
        this.createdAt = createdAt;
        this.performedViaGithubApp = performedViaGithubApp;
        this.label = label;
        this.assignee = assignee;
        this.assigner = assigner;
        this.milestone = milestone;
        this.rename = rename;
        this.reviewRequester = reviewRequester;
        this.requestedTeam = requestedTeam;
        this.requestedReviewer = requestedReviewer;
        this.dismissedReview = dismissedReview;
        this.lockReason = lockReason;
        this.projectCard = projectCard;
    }

    /**
     * Getter for Id.
     * @return Returns the Integer
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for Integer
     */
    @JsonSetter("id")
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for Actor.
     * @return Returns the Actor2
     */
    @JsonGetter("actor")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Actor2 getActor() {
        return actor;
    }

    /**
     * Setter for Actor.
     * @param actor Value for Actor2
     */
    @JsonSetter("actor")
    public void setActor(Actor2 actor) {
        this.actor = actor;
    }

    /**
     * Getter for Event.
     * @return Returns the String
     */
    @JsonGetter("event")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEvent() {
        return event;
    }

    /**
     * Setter for Event.
     * @param event Value for String
     */
    @JsonSetter("event")
    public void setEvent(String event) {
        this.event = event;
    }

    /**
     * Internal Getter for CommitId.
     * @return Returns the Internal String
     */
    @JsonGetter("commit_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCommitId() {
        return this.commitId;
    }

    /**
     * Getter for CommitId.
     * @return Returns the String
     */
    public String getCommitId() {
        return OptionalNullable.getFrom(commitId);
    }

    /**
     * Setter for CommitId.
     * @param commitId Value for String
     */
    @JsonSetter("commit_id")
    public void setCommitId(String commitId) {
        this.commitId = OptionalNullable.of(commitId);
    }

    /**
     * UnSetter for CommitId.
     */
    public void unsetCommitId() {
        commitId = null;
    }

    /**
     * Internal Getter for CommitUrl.
     * @return Returns the Internal String
     */
    @JsonGetter("commit_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCommitUrl() {
        return this.commitUrl;
    }

    /**
     * Getter for CommitUrl.
     * @return Returns the String
     */
    public String getCommitUrl() {
        return OptionalNullable.getFrom(commitUrl);
    }

    /**
     * Setter for CommitUrl.
     * @param commitUrl Value for String
     */
    @JsonSetter("commit_url")
    public void setCommitUrl(String commitUrl) {
        this.commitUrl = OptionalNullable.of(commitUrl);
    }

    /**
     * UnSetter for CommitUrl.
     */
    public void unsetCommitUrl() {
        commitUrl = null;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the String
     */
    @JsonGetter("created_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for String
     */
    @JsonSetter("created_at")
    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for PerformedViaGithubApp.
     * @return Returns the Object
     */
    @JsonGetter("performed_via_github_app")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getPerformedViaGithubApp() {
        return performedViaGithubApp;
    }

    /**
     * Setter for PerformedViaGithubApp.
     * @param performedViaGithubApp Value for Object
     */
    @JsonSetter("performed_via_github_app")
    public void setPerformedViaGithubApp(Object performedViaGithubApp) {
        this.performedViaGithubApp = performedViaGithubApp;
    }

    /**
     * Getter for Label.
     * @return Returns the Label3
     */
    @JsonGetter("label")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Label3 getLabel() {
        return label;
    }

    /**
     * Setter for Label.
     * @param label Value for Label3
     */
    @JsonSetter("label")
    public void setLabel(Label3 label) {
        this.label = label;
    }

    /**
     * Getter for Assignee.
     * @return Returns the Assignee
     */
    @JsonGetter("assignee")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Assignee getAssignee() {
        return assignee;
    }

    /**
     * Setter for Assignee.
     * @param assignee Value for Assignee
     */
    @JsonSetter("assignee")
    public void setAssignee(Assignee assignee) {
        this.assignee = assignee;
    }

    /**
     * Getter for Assigner.
     * @return Returns the Assigner
     */
    @JsonGetter("assigner")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Assigner getAssigner() {
        return assigner;
    }

    /**
     * Setter for Assigner.
     * @param assigner Value for Assigner
     */
    @JsonSetter("assigner")
    public void setAssigner(Assigner assigner) {
        this.assigner = assigner;
    }

    /**
     * Getter for Milestone.
     * @return Returns the Milestone1
     */
    @JsonGetter("milestone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Milestone1 getMilestone() {
        return milestone;
    }

    /**
     * Setter for Milestone.
     * @param milestone Value for Milestone1
     */
    @JsonSetter("milestone")
    public void setMilestone(Milestone1 milestone) {
        this.milestone = milestone;
    }

    /**
     * Getter for Rename.
     * @return Returns the Rename
     */
    @JsonGetter("rename")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Rename getRename() {
        return rename;
    }

    /**
     * Setter for Rename.
     * @param rename Value for Rename
     */
    @JsonSetter("rename")
    public void setRename(Rename rename) {
        this.rename = rename;
    }

    /**
     * Getter for ReviewRequester.
     * @return Returns the ReviewRequester
     */
    @JsonGetter("review_requester")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ReviewRequester getReviewRequester() {
        return reviewRequester;
    }

    /**
     * Setter for ReviewRequester.
     * @param reviewRequester Value for ReviewRequester
     */
    @JsonSetter("review_requester")
    public void setReviewRequester(ReviewRequester reviewRequester) {
        this.reviewRequester = reviewRequester;
    }

    /**
     * Getter for RequestedTeam.
     * @return Returns the RequestedTeam
     */
    @JsonGetter("requested_team")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RequestedTeam getRequestedTeam() {
        return requestedTeam;
    }

    /**
     * Setter for RequestedTeam.
     * @param requestedTeam Value for RequestedTeam
     */
    @JsonSetter("requested_team")
    public void setRequestedTeam(RequestedTeam requestedTeam) {
        this.requestedTeam = requestedTeam;
    }

    /**
     * Getter for RequestedReviewer.
     * @return Returns the RequestedReviewer
     */
    @JsonGetter("requested_reviewer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RequestedReviewer getRequestedReviewer() {
        return requestedReviewer;
    }

    /**
     * Setter for RequestedReviewer.
     * @param requestedReviewer Value for RequestedReviewer
     */
    @JsonSetter("requested_reviewer")
    public void setRequestedReviewer(RequestedReviewer requestedReviewer) {
        this.requestedReviewer = requestedReviewer;
    }

    /**
     * Getter for DismissedReview.
     * @return Returns the DismissedReview
     */
    @JsonGetter("dismissed_review")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DismissedReview getDismissedReview() {
        return dismissedReview;
    }

    /**
     * Setter for DismissedReview.
     * @param dismissedReview Value for DismissedReview
     */
    @JsonSetter("dismissed_review")
    public void setDismissedReview(DismissedReview dismissedReview) {
        this.dismissedReview = dismissedReview;
    }

    /**
     * Internal Getter for LockReason.
     * @return Returns the Internal String
     */
    @JsonGetter("lock_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLockReason() {
        return this.lockReason;
    }

    /**
     * Getter for LockReason.
     * @return Returns the String
     */
    public String getLockReason() {
        return OptionalNullable.getFrom(lockReason);
    }

    /**
     * Setter for LockReason.
     * @param lockReason Value for String
     */
    @JsonSetter("lock_reason")
    public void setLockReason(String lockReason) {
        this.lockReason = OptionalNullable.of(lockReason);
    }

    /**
     * UnSetter for LockReason.
     */
    public void unsetLockReason() {
        lockReason = null;
    }

    /**
     * Getter for ProjectCard.
     * @return Returns the ProjectCard1
     */
    @JsonGetter("project_card")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ProjectCard1 getProjectCard() {
        return projectCard;
    }

    /**
     * Setter for ProjectCard.
     * @param projectCard Value for ProjectCard1
     */
    @JsonSetter("project_card")
    public void setProjectCard(ProjectCard1 projectCard) {
        this.projectCard = projectCard;
    }

    /**
     * Converts this IssueEventforIssue into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "IssueEventforIssue [" + "id=" + id + ", nodeId=" + nodeId + ", url=" + url
                + ", actor=" + actor + ", event=" + event + ", commitId=" + commitId
                + ", commitUrl=" + commitUrl + ", createdAt=" + createdAt
                + ", performedViaGithubApp=" + performedViaGithubApp + ", label=" + label
                + ", assignee=" + assignee + ", assigner=" + assigner + ", milestone=" + milestone
                + ", rename=" + rename + ", reviewRequester=" + reviewRequester + ", requestedTeam="
                + requestedTeam + ", requestedReviewer=" + requestedReviewer + ", dismissedReview="
                + dismissedReview + ", lockReason=" + lockReason + ", projectCard=" + projectCard
                + "]";
    }

    /**
     * Builds a new {@link IssueEventforIssue.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link IssueEventforIssue.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .id(getId())
                .nodeId(getNodeId())
                .url(getUrl())
                .actor(getActor())
                .event(getEvent())
                .createdAt(getCreatedAt())
                .performedViaGithubApp(getPerformedViaGithubApp())
                .label(getLabel())
                .assignee(getAssignee())
                .assigner(getAssigner())
                .milestone(getMilestone())
                .rename(getRename())
                .reviewRequester(getReviewRequester())
                .requestedTeam(getRequestedTeam())
                .requestedReviewer(getRequestedReviewer())
                .dismissedReview(getDismissedReview())
                .projectCard(getProjectCard());
        builder.commitId = internalGetCommitId();
        builder.commitUrl = internalGetCommitUrl();
        builder.lockReason = internalGetLockReason();
        return builder;
    }

    /**
     * Class to build instances of {@link IssueEventforIssue}.
     */
    public static class Builder {
        private Integer id;
        private String nodeId;
        private String url;
        private Actor2 actor;
        private String event;
        private OptionalNullable<String> commitId;
        private OptionalNullable<String> commitUrl;
        private String createdAt;
        private Object performedViaGithubApp;
        private Label3 label;
        private Assignee assignee;
        private Assigner assigner;
        private Milestone1 milestone;
        private Rename rename;
        private ReviewRequester reviewRequester;
        private RequestedTeam requestedTeam;
        private RequestedReviewer requestedReviewer;
        private DismissedReview dismissedReview;
        private OptionalNullable<String> lockReason;
        private ProjectCard1 projectCard;



        /**
         * Setter for id.
         * @param  id  Integer value for id.
         * @return Builder
         */
        public Builder id(Integer id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for actor.
         * @param  actor  Actor2 value for actor.
         * @return Builder
         */
        public Builder actor(Actor2 actor) {
            this.actor = actor;
            return this;
        }

        /**
         * Setter for event.
         * @param  event  String value for event.
         * @return Builder
         */
        public Builder event(String event) {
            this.event = event;
            return this;
        }

        /**
         * Setter for commitId.
         * @param  commitId  String value for commitId.
         * @return Builder
         */
        public Builder commitId(String commitId) {
            this.commitId = OptionalNullable.of(commitId);
            return this;
        }

        /**
         * UnSetter for commitId.
         * @return Builder
         */
        public Builder unsetCommitId() {
            commitId = null;
            return this;
        }

        /**
         * Setter for commitUrl.
         * @param  commitUrl  String value for commitUrl.
         * @return Builder
         */
        public Builder commitUrl(String commitUrl) {
            this.commitUrl = OptionalNullable.of(commitUrl);
            return this;
        }

        /**
         * UnSetter for commitUrl.
         * @return Builder
         */
        public Builder unsetCommitUrl() {
            commitUrl = null;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  String value for createdAt.
         * @return Builder
         */
        public Builder createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for performedViaGithubApp.
         * @param  performedViaGithubApp  Object value for performedViaGithubApp.
         * @return Builder
         */
        public Builder performedViaGithubApp(Object performedViaGithubApp) {
            this.performedViaGithubApp = performedViaGithubApp;
            return this;
        }

        /**
         * Setter for label.
         * @param  label  Label3 value for label.
         * @return Builder
         */
        public Builder label(Label3 label) {
            this.label = label;
            return this;
        }

        /**
         * Setter for assignee.
         * @param  assignee  Assignee value for assignee.
         * @return Builder
         */
        public Builder assignee(Assignee assignee) {
            this.assignee = assignee;
            return this;
        }

        /**
         * Setter for assigner.
         * @param  assigner  Assigner value for assigner.
         * @return Builder
         */
        public Builder assigner(Assigner assigner) {
            this.assigner = assigner;
            return this;
        }

        /**
         * Setter for milestone.
         * @param  milestone  Milestone1 value for milestone.
         * @return Builder
         */
        public Builder milestone(Milestone1 milestone) {
            this.milestone = milestone;
            return this;
        }

        /**
         * Setter for rename.
         * @param  rename  Rename value for rename.
         * @return Builder
         */
        public Builder rename(Rename rename) {
            this.rename = rename;
            return this;
        }

        /**
         * Setter for reviewRequester.
         * @param  reviewRequester  ReviewRequester value for reviewRequester.
         * @return Builder
         */
        public Builder reviewRequester(ReviewRequester reviewRequester) {
            this.reviewRequester = reviewRequester;
            return this;
        }

        /**
         * Setter for requestedTeam.
         * @param  requestedTeam  RequestedTeam value for requestedTeam.
         * @return Builder
         */
        public Builder requestedTeam(RequestedTeam requestedTeam) {
            this.requestedTeam = requestedTeam;
            return this;
        }

        /**
         * Setter for requestedReviewer.
         * @param  requestedReviewer  RequestedReviewer value for requestedReviewer.
         * @return Builder
         */
        public Builder requestedReviewer(RequestedReviewer requestedReviewer) {
            this.requestedReviewer = requestedReviewer;
            return this;
        }

        /**
         * Setter for dismissedReview.
         * @param  dismissedReview  DismissedReview value for dismissedReview.
         * @return Builder
         */
        public Builder dismissedReview(DismissedReview dismissedReview) {
            this.dismissedReview = dismissedReview;
            return this;
        }

        /**
         * Setter for lockReason.
         * @param  lockReason  String value for lockReason.
         * @return Builder
         */
        public Builder lockReason(String lockReason) {
            this.lockReason = OptionalNullable.of(lockReason);
            return this;
        }

        /**
         * UnSetter for lockReason.
         * @return Builder
         */
        public Builder unsetLockReason() {
            lockReason = null;
            return this;
        }

        /**
         * Setter for projectCard.
         * @param  projectCard  ProjectCard1 value for projectCard.
         * @return Builder
         */
        public Builder projectCard(ProjectCard1 projectCard) {
            this.projectCard = projectCard;
            return this;
        }

        /**
         * Builds a new {@link IssueEventforIssue} object using the set fields.
         * @return {@link IssueEventforIssue}
         */
        public IssueEventforIssue build() {
            return new IssueEventforIssue(id, nodeId, url, actor, event, commitId, commitUrl,
                    createdAt, performedViaGithubApp, label, assignee, assigner, milestone, rename,
                    reviewRequester, requestedTeam, requestedReviewer, dismissedReview, lockReason,
                    projectCard);
        }
    }
}

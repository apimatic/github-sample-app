/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for IssueSearchResultItem type.
 */
public class IssueSearchResultItem {
    private String url;
    private String repositoryUrl;
    private String labelsUrl;
    private String commentsUrl;
    private String eventsUrl;
    private String htmlUrl;
    private int id;
    private String nodeId;
    private int number;
    private String title;
    private boolean locked;
    private OptionalNullable<String> activeLockReason;
    private OptionalNullable<List<SimpleUser>> assignees;
    private Object user;
    private List<Label9> labels;
    private String state;
    private OptionalNullable<String> stateReason;
    private Object assignee;
    private Object milestone;
    private int comments;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private LocalDateTime closedAt;
    private List<SearchResultTextMatch> textMatches;
    private PullRequest1 pullRequest;
    private String body;
    private double score;
    private AuthorAssociationEnum authorAssociation;
    private Boolean draft;
    private Repository3 repository;
    private String bodyHtml;
    private String bodyText;
    private String timelineUrl;
    private Object performedViaGithubApp;
    private ReactionRollup reactions;

    /**
     * Default constructor.
     */
    public IssueSearchResultItem() {
    }

    /**
     * Initialization constructor.
     * @param  url  String value for url.
     * @param  repositoryUrl  String value for repositoryUrl.
     * @param  labelsUrl  String value for labelsUrl.
     * @param  commentsUrl  String value for commentsUrl.
     * @param  eventsUrl  String value for eventsUrl.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  number  int value for number.
     * @param  title  String value for title.
     * @param  locked  boolean value for locked.
     * @param  user  Object value for user.
     * @param  labels  List of Label9 value for labels.
     * @param  state  String value for state.
     * @param  assignee  Object value for assignee.
     * @param  milestone  Object value for milestone.
     * @param  comments  int value for comments.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  closedAt  LocalDateTime value for closedAt.
     * @param  score  double value for score.
     * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
     * @param  activeLockReason  String value for activeLockReason.
     * @param  assignees  List of SimpleUser value for assignees.
     * @param  stateReason  String value for stateReason.
     * @param  textMatches  List of SearchResultTextMatch value for textMatches.
     * @param  pullRequest  PullRequest1 value for pullRequest.
     * @param  body  String value for body.
     * @param  draft  Boolean value for draft.
     * @param  repository  Repository3 value for repository.
     * @param  bodyHtml  String value for bodyHtml.
     * @param  bodyText  String value for bodyText.
     * @param  timelineUrl  String value for timelineUrl.
     * @param  performedViaGithubApp  Object value for performedViaGithubApp.
     * @param  reactions  ReactionRollup value for reactions.
     */
    public IssueSearchResultItem(
            String url,
            String repositoryUrl,
            String labelsUrl,
            String commentsUrl,
            String eventsUrl,
            String htmlUrl,
            int id,
            String nodeId,
            int number,
            String title,
            boolean locked,
            Object user,
            List<Label9> labels,
            String state,
            Object assignee,
            Object milestone,
            int comments,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            LocalDateTime closedAt,
            double score,
            AuthorAssociationEnum authorAssociation,
            String activeLockReason,
            List<SimpleUser> assignees,
            String stateReason,
            List<SearchResultTextMatch> textMatches,
            PullRequest1 pullRequest,
            String body,
            Boolean draft,
            Repository3 repository,
            String bodyHtml,
            String bodyText,
            String timelineUrl,
            Object performedViaGithubApp,
            ReactionRollup reactions) {
        this.url = url;
        this.repositoryUrl = repositoryUrl;
        this.labelsUrl = labelsUrl;
        this.commentsUrl = commentsUrl;
        this.eventsUrl = eventsUrl;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.nodeId = nodeId;
        this.number = number;
        this.title = title;
        this.locked = locked;
        this.activeLockReason = OptionalNullable.of(activeLockReason);
        this.assignees = OptionalNullable.of(assignees);
        this.user = user;
        this.labels = labels;
        this.state = state;
        this.stateReason = OptionalNullable.of(stateReason);
        this.assignee = assignee;
        this.milestone = milestone;
        this.comments = comments;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.closedAt = closedAt;
        this.textMatches = textMatches;
        this.pullRequest = pullRequest;
        this.body = body;
        this.score = score;
        this.authorAssociation = authorAssociation;
        this.draft = draft;
        this.repository = repository;
        this.bodyHtml = bodyHtml;
        this.bodyText = bodyText;
        this.timelineUrl = timelineUrl;
        this.performedViaGithubApp = performedViaGithubApp;
        this.reactions = reactions;
    }

    /**
     * Internal initialization constructor.
     */
    protected IssueSearchResultItem(String url, String repositoryUrl, String labelsUrl,
            String commentsUrl, String eventsUrl, String htmlUrl, int id, String nodeId, int number,
            String title, boolean locked, Object user, List<Label9> labels, String state,
            Object assignee, Object milestone, int comments, LocalDateTime createdAt,
            LocalDateTime updatedAt, LocalDateTime closedAt, double score,
            AuthorAssociationEnum authorAssociation, OptionalNullable<String> activeLockReason,
            OptionalNullable<List<SimpleUser>> assignees, OptionalNullable<String> stateReason,
            List<SearchResultTextMatch> textMatches, PullRequest1 pullRequest, String body,
            Boolean draft, Repository3 repository, String bodyHtml, String bodyText,
            String timelineUrl, Object performedViaGithubApp, ReactionRollup reactions) {
        this.url = url;
        this.repositoryUrl = repositoryUrl;
        this.labelsUrl = labelsUrl;
        this.commentsUrl = commentsUrl;
        this.eventsUrl = eventsUrl;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.nodeId = nodeId;
        this.number = number;
        this.title = title;
        this.locked = locked;
        this.activeLockReason = activeLockReason;
        this.assignees = assignees;
        this.user = user;
        this.labels = labels;
        this.state = state;
        this.stateReason = stateReason;
        this.assignee = assignee;
        this.milestone = milestone;
        this.comments = comments;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.closedAt = closedAt;
        this.textMatches = textMatches;
        this.pullRequest = pullRequest;
        this.body = body;
        this.score = score;
        this.authorAssociation = authorAssociation;
        this.draft = draft;
        this.repository = repository;
        this.bodyHtml = bodyHtml;
        this.bodyText = bodyText;
        this.timelineUrl = timelineUrl;
        this.performedViaGithubApp = performedViaGithubApp;
        this.reactions = reactions;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for RepositoryUrl.
     * @return Returns the String
     */
    @JsonGetter("repository_url")
    public String getRepositoryUrl() {
        return repositoryUrl;
    }

    /**
     * Setter for RepositoryUrl.
     * @param repositoryUrl Value for String
     */
    @JsonSetter("repository_url")
    public void setRepositoryUrl(String repositoryUrl) {
        this.repositoryUrl = repositoryUrl;
    }

    /**
     * Getter for LabelsUrl.
     * @return Returns the String
     */
    @JsonGetter("labels_url")
    public String getLabelsUrl() {
        return labelsUrl;
    }

    /**
     * Setter for LabelsUrl.
     * @param labelsUrl Value for String
     */
    @JsonSetter("labels_url")
    public void setLabelsUrl(String labelsUrl) {
        this.labelsUrl = labelsUrl;
    }

    /**
     * Getter for CommentsUrl.
     * @return Returns the String
     */
    @JsonGetter("comments_url")
    public String getCommentsUrl() {
        return commentsUrl;
    }

    /**
     * Setter for CommentsUrl.
     * @param commentsUrl Value for String
     */
    @JsonSetter("comments_url")
    public void setCommentsUrl(String commentsUrl) {
        this.commentsUrl = commentsUrl;
    }

    /**
     * Getter for EventsUrl.
     * @return Returns the String
     */
    @JsonGetter("events_url")
    public String getEventsUrl() {
        return eventsUrl;
    }

    /**
     * Setter for EventsUrl.
     * @param eventsUrl Value for String
     */
    @JsonSetter("events_url")
    public void setEventsUrl(String eventsUrl) {
        this.eventsUrl = eventsUrl;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Number.
     * @return Returns the int
     */
    @JsonGetter("number")
    public int getNumber() {
        return number;
    }

    /**
     * Setter for Number.
     * @param number Value for int
     */
    @JsonSetter("number")
    public void setNumber(int number) {
        this.number = number;
    }

    /**
     * Getter for Title.
     * @return Returns the String
     */
    @JsonGetter("title")
    public String getTitle() {
        return title;
    }

    /**
     * Setter for Title.
     * @param title Value for String
     */
    @JsonSetter("title")
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Getter for Locked.
     * @return Returns the boolean
     */
    @JsonGetter("locked")
    public boolean getLocked() {
        return locked;
    }

    /**
     * Setter for Locked.
     * @param locked Value for boolean
     */
    @JsonSetter("locked")
    public void setLocked(boolean locked) {
        this.locked = locked;
    }

    /**
     * Internal Getter for ActiveLockReason.
     * @return Returns the Internal String
     */
    @JsonGetter("active_lock_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetActiveLockReason() {
        return this.activeLockReason;
    }

    /**
     * Getter for ActiveLockReason.
     * @return Returns the String
     */
    public String getActiveLockReason() {
        return OptionalNullable.getFrom(activeLockReason);
    }

    /**
     * Setter for ActiveLockReason.
     * @param activeLockReason Value for String
     */
    @JsonSetter("active_lock_reason")
    public void setActiveLockReason(String activeLockReason) {
        this.activeLockReason = OptionalNullable.of(activeLockReason);
    }

    /**
     * UnSetter for ActiveLockReason.
     */
    public void unsetActiveLockReason() {
        activeLockReason = null;
    }

    /**
     * Internal Getter for Assignees.
     * @return Returns the Internal List of SimpleUser
     */
    @JsonGetter("assignees")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<SimpleUser>> internalGetAssignees() {
        return this.assignees;
    }

    /**
     * Getter for Assignees.
     * @return Returns the List of SimpleUser
     */
    public List<SimpleUser> getAssignees() {
        return OptionalNullable.getFrom(assignees);
    }

    /**
     * Setter for Assignees.
     * @param assignees Value for List of SimpleUser
     */
    @JsonSetter("assignees")
    public void setAssignees(List<SimpleUser> assignees) {
        this.assignees = OptionalNullable.of(assignees);
    }

    /**
     * UnSetter for Assignees.
     */
    public void unsetAssignees() {
        assignees = null;
    }

    /**
     * Getter for User.
     * @return Returns the Object
     */
    @JsonGetter("user")
    public Object getUser() {
        return user;
    }

    /**
     * Setter for User.
     * @param user Value for Object
     */
    @JsonSetter("user")
    public void setUser(Object user) {
        this.user = user;
    }

    /**
     * Getter for Labels.
     * @return Returns the List of Label9
     */
    @JsonGetter("labels")
    public List<Label9> getLabels() {
        return labels;
    }

    /**
     * Setter for Labels.
     * @param labels Value for List of Label9
     */
    @JsonSetter("labels")
    public void setLabels(List<Label9> labels) {
        this.labels = labels;
    }

    /**
     * Getter for State.
     * @return Returns the String
     */
    @JsonGetter("state")
    public String getState() {
        return state;
    }

    /**
     * Setter for State.
     * @param state Value for String
     */
    @JsonSetter("state")
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Internal Getter for StateReason.
     * @return Returns the Internal String
     */
    @JsonGetter("state_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStateReason() {
        return this.stateReason;
    }

    /**
     * Getter for StateReason.
     * @return Returns the String
     */
    public String getStateReason() {
        return OptionalNullable.getFrom(stateReason);
    }

    /**
     * Setter for StateReason.
     * @param stateReason Value for String
     */
    @JsonSetter("state_reason")
    public void setStateReason(String stateReason) {
        this.stateReason = OptionalNullable.of(stateReason);
    }

    /**
     * UnSetter for StateReason.
     */
    public void unsetStateReason() {
        stateReason = null;
    }

    /**
     * Getter for Assignee.
     * @return Returns the Object
     */
    @JsonGetter("assignee")
    public Object getAssignee() {
        return assignee;
    }

    /**
     * Setter for Assignee.
     * @param assignee Value for Object
     */
    @JsonSetter("assignee")
    public void setAssignee(Object assignee) {
        this.assignee = assignee;
    }

    /**
     * Getter for Milestone.
     * @return Returns the Object
     */
    @JsonGetter("milestone")
    public Object getMilestone() {
        return milestone;
    }

    /**
     * Setter for Milestone.
     * @param milestone Value for Object
     */
    @JsonSetter("milestone")
    public void setMilestone(Object milestone) {
        this.milestone = milestone;
    }

    /**
     * Getter for Comments.
     * @return Returns the int
     */
    @JsonGetter("comments")
    public int getComments() {
        return comments;
    }

    /**
     * Setter for Comments.
     * @param comments Value for int
     */
    @JsonSetter("comments")
    public void setComments(int comments) {
        this.comments = comments;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for ClosedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("closed_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getClosedAt() {
        return closedAt;
    }

    /**
     * Setter for ClosedAt.
     * @param closedAt Value for LocalDateTime
     */
    @JsonSetter("closed_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setClosedAt(LocalDateTime closedAt) {
        this.closedAt = closedAt;
    }

    /**
     * Getter for TextMatches.
     * @return Returns the List of SearchResultTextMatch
     */
    @JsonGetter("text_matches")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<SearchResultTextMatch> getTextMatches() {
        return textMatches;
    }

    /**
     * Setter for TextMatches.
     * @param textMatches Value for List of SearchResultTextMatch
     */
    @JsonSetter("text_matches")
    public void setTextMatches(List<SearchResultTextMatch> textMatches) {
        this.textMatches = textMatches;
    }

    /**
     * Getter for PullRequest.
     * @return Returns the PullRequest1
     */
    @JsonGetter("pull_request")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PullRequest1 getPullRequest() {
        return pullRequest;
    }

    /**
     * Setter for PullRequest.
     * @param pullRequest Value for PullRequest1
     */
    @JsonSetter("pull_request")
    public void setPullRequest(PullRequest1 pullRequest) {
        this.pullRequest = pullRequest;
    }

    /**
     * Getter for Body.
     * @return Returns the String
     */
    @JsonGetter("body")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBody() {
        return body;
    }

    /**
     * Setter for Body.
     * @param body Value for String
     */
    @JsonSetter("body")
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Getter for Score.
     * @return Returns the double
     */
    @JsonGetter("score")
    public double getScore() {
        return score;
    }

    /**
     * Setter for Score.
     * @param score Value for double
     */
    @JsonSetter("score")
    public void setScore(double score) {
        this.score = score;
    }

    /**
     * Getter for AuthorAssociation.
     * @return Returns the AuthorAssociationEnum
     */
    @JsonGetter("author_association")
    public AuthorAssociationEnum getAuthorAssociation() {
        return authorAssociation;
    }

    /**
     * Setter for AuthorAssociation.
     * @param authorAssociation Value for AuthorAssociationEnum
     */
    @JsonSetter("author_association")
    public void setAuthorAssociation(AuthorAssociationEnum authorAssociation) {
        this.authorAssociation = authorAssociation;
    }

    /**
     * Getter for Draft.
     * @return Returns the Boolean
     */
    @JsonGetter("draft")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDraft() {
        return draft;
    }

    /**
     * Setter for Draft.
     * @param draft Value for Boolean
     */
    @JsonSetter("draft")
    public void setDraft(Boolean draft) {
        this.draft = draft;
    }

    /**
     * Getter for Repository.
     * @return Returns the Repository3
     */
    @JsonGetter("repository")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Repository3 getRepository() {
        return repository;
    }

    /**
     * Setter for Repository.
     * @param repository Value for Repository3
     */
    @JsonSetter("repository")
    public void setRepository(Repository3 repository) {
        this.repository = repository;
    }

    /**
     * Getter for BodyHtml.
     * @return Returns the String
     */
    @JsonGetter("body_html")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBodyHtml() {
        return bodyHtml;
    }

    /**
     * Setter for BodyHtml.
     * @param bodyHtml Value for String
     */
    @JsonSetter("body_html")
    public void setBodyHtml(String bodyHtml) {
        this.bodyHtml = bodyHtml;
    }

    /**
     * Getter for BodyText.
     * @return Returns the String
     */
    @JsonGetter("body_text")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBodyText() {
        return bodyText;
    }

    /**
     * Setter for BodyText.
     * @param bodyText Value for String
     */
    @JsonSetter("body_text")
    public void setBodyText(String bodyText) {
        this.bodyText = bodyText;
    }

    /**
     * Getter for TimelineUrl.
     * @return Returns the String
     */
    @JsonGetter("timeline_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTimelineUrl() {
        return timelineUrl;
    }

    /**
     * Setter for TimelineUrl.
     * @param timelineUrl Value for String
     */
    @JsonSetter("timeline_url")
    public void setTimelineUrl(String timelineUrl) {
        this.timelineUrl = timelineUrl;
    }

    /**
     * Getter for PerformedViaGithubApp.
     * @return Returns the Object
     */
    @JsonGetter("performed_via_github_app")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getPerformedViaGithubApp() {
        return performedViaGithubApp;
    }

    /**
     * Setter for PerformedViaGithubApp.
     * @param performedViaGithubApp Value for Object
     */
    @JsonSetter("performed_via_github_app")
    public void setPerformedViaGithubApp(Object performedViaGithubApp) {
        this.performedViaGithubApp = performedViaGithubApp;
    }

    /**
     * Getter for Reactions.
     * @return Returns the ReactionRollup
     */
    @JsonGetter("reactions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ReactionRollup getReactions() {
        return reactions;
    }

    /**
     * Setter for Reactions.
     * @param reactions Value for ReactionRollup
     */
    @JsonSetter("reactions")
    public void setReactions(ReactionRollup reactions) {
        this.reactions = reactions;
    }

    /**
     * Converts this IssueSearchResultItem into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "IssueSearchResultItem [" + "url=" + url + ", repositoryUrl=" + repositoryUrl
                + ", labelsUrl=" + labelsUrl + ", commentsUrl=" + commentsUrl + ", eventsUrl="
                + eventsUrl + ", htmlUrl=" + htmlUrl + ", id=" + id + ", nodeId=" + nodeId
                + ", number=" + number + ", title=" + title + ", locked=" + locked + ", user="
                + user + ", labels=" + labels + ", state=" + state + ", assignee=" + assignee
                + ", milestone=" + milestone + ", comments=" + comments + ", createdAt=" + createdAt
                + ", updatedAt=" + updatedAt + ", closedAt=" + closedAt + ", score=" + score
                + ", authorAssociation=" + authorAssociation + ", activeLockReason="
                + activeLockReason + ", assignees=" + assignees + ", stateReason=" + stateReason
                + ", textMatches=" + textMatches + ", pullRequest=" + pullRequest + ", body=" + body
                + ", draft=" + draft + ", repository=" + repository + ", bodyHtml=" + bodyHtml
                + ", bodyText=" + bodyText + ", timelineUrl=" + timelineUrl
                + ", performedViaGithubApp=" + performedViaGithubApp + ", reactions=" + reactions
                + "]";
    }

    /**
     * Builds a new {@link IssueSearchResultItem.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link IssueSearchResultItem.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(url, repositoryUrl, labelsUrl, commentsUrl, eventsUrl,
                htmlUrl, id, nodeId, number, title, locked, user, labels, state, assignee,
                milestone, comments, createdAt, updatedAt, closedAt, score, authorAssociation)
                .textMatches(getTextMatches())
                .pullRequest(getPullRequest())
                .body(getBody())
                .draft(getDraft())
                .repository(getRepository())
                .bodyHtml(getBodyHtml())
                .bodyText(getBodyText())
                .timelineUrl(getTimelineUrl())
                .performedViaGithubApp(getPerformedViaGithubApp())
                .reactions(getReactions());
        builder.activeLockReason = internalGetActiveLockReason();
        builder.assignees = internalGetAssignees();
        builder.stateReason = internalGetStateReason();
        return builder;
    }

    /**
     * Class to build instances of {@link IssueSearchResultItem}.
     */
    public static class Builder {
        private String url;
        private String repositoryUrl;
        private String labelsUrl;
        private String commentsUrl;
        private String eventsUrl;
        private String htmlUrl;
        private int id;
        private String nodeId;
        private int number;
        private String title;
        private boolean locked;
        private Object user;
        private List<Label9> labels;
        private String state;
        private Object assignee;
        private Object milestone;
        private int comments;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private LocalDateTime closedAt;
        private double score;
        private AuthorAssociationEnum authorAssociation;
        private OptionalNullable<String> activeLockReason;
        private OptionalNullable<List<SimpleUser>> assignees;
        private OptionalNullable<String> stateReason;
        private List<SearchResultTextMatch> textMatches;
        private PullRequest1 pullRequest;
        private String body;
        private Boolean draft;
        private Repository3 repository;
        private String bodyHtml;
        private String bodyText;
        private String timelineUrl;
        private Object performedViaGithubApp;
        private ReactionRollup reactions;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  url  String value for url.
         * @param  repositoryUrl  String value for repositoryUrl.
         * @param  labelsUrl  String value for labelsUrl.
         * @param  commentsUrl  String value for commentsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  number  int value for number.
         * @param  title  String value for title.
         * @param  locked  boolean value for locked.
         * @param  user  Object value for user.
         * @param  labels  List of Label9 value for labels.
         * @param  state  String value for state.
         * @param  assignee  Object value for assignee.
         * @param  milestone  Object value for milestone.
         * @param  comments  int value for comments.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  closedAt  LocalDateTime value for closedAt.
         * @param  score  double value for score.
         * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
         */
        public Builder(String url, String repositoryUrl, String labelsUrl, String commentsUrl,
                String eventsUrl, String htmlUrl, int id, String nodeId, int number, String title,
                boolean locked, Object user, List<Label9> labels, String state, Object assignee,
                Object milestone, int comments, LocalDateTime createdAt, LocalDateTime updatedAt,
                LocalDateTime closedAt, double score, AuthorAssociationEnum authorAssociation) {
            this.url = url;
            this.repositoryUrl = repositoryUrl;
            this.labelsUrl = labelsUrl;
            this.commentsUrl = commentsUrl;
            this.eventsUrl = eventsUrl;
            this.htmlUrl = htmlUrl;
            this.id = id;
            this.nodeId = nodeId;
            this.number = number;
            this.title = title;
            this.locked = locked;
            this.user = user;
            this.labels = labels;
            this.state = state;
            this.assignee = assignee;
            this.milestone = milestone;
            this.comments = comments;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.closedAt = closedAt;
            this.score = score;
            this.authorAssociation = authorAssociation;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for repositoryUrl.
         * @param  repositoryUrl  String value for repositoryUrl.
         * @return Builder
         */
        public Builder repositoryUrl(String repositoryUrl) {
            this.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * Setter for labelsUrl.
         * @param  labelsUrl  String value for labelsUrl.
         * @return Builder
         */
        public Builder labelsUrl(String labelsUrl) {
            this.labelsUrl = labelsUrl;
            return this;
        }

        /**
         * Setter for commentsUrl.
         * @param  commentsUrl  String value for commentsUrl.
         * @return Builder
         */
        public Builder commentsUrl(String commentsUrl) {
            this.commentsUrl = commentsUrl;
            return this;
        }

        /**
         * Setter for eventsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @return Builder
         */
        public Builder eventsUrl(String eventsUrl) {
            this.eventsUrl = eventsUrl;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for number.
         * @param  number  int value for number.
         * @return Builder
         */
        public Builder number(int number) {
            this.number = number;
            return this;
        }

        /**
         * Setter for title.
         * @param  title  String value for title.
         * @return Builder
         */
        public Builder title(String title) {
            this.title = title;
            return this;
        }

        /**
         * Setter for locked.
         * @param  locked  boolean value for locked.
         * @return Builder
         */
        public Builder locked(boolean locked) {
            this.locked = locked;
            return this;
        }

        /**
         * Setter for user.
         * @param  user  Object value for user.
         * @return Builder
         */
        public Builder user(Object user) {
            this.user = user;
            return this;
        }

        /**
         * Setter for labels.
         * @param  labels  List of Label9 value for labels.
         * @return Builder
         */
        public Builder labels(List<Label9> labels) {
            this.labels = labels;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  String value for state.
         * @return Builder
         */
        public Builder state(String state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for assignee.
         * @param  assignee  Object value for assignee.
         * @return Builder
         */
        public Builder assignee(Object assignee) {
            this.assignee = assignee;
            return this;
        }

        /**
         * Setter for milestone.
         * @param  milestone  Object value for milestone.
         * @return Builder
         */
        public Builder milestone(Object milestone) {
            this.milestone = milestone;
            return this;
        }

        /**
         * Setter for comments.
         * @param  comments  int value for comments.
         * @return Builder
         */
        public Builder comments(int comments) {
            this.comments = comments;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for closedAt.
         * @param  closedAt  LocalDateTime value for closedAt.
         * @return Builder
         */
        public Builder closedAt(LocalDateTime closedAt) {
            this.closedAt = closedAt;
            return this;
        }

        /**
         * Setter for score.
         * @param  score  double value for score.
         * @return Builder
         */
        public Builder score(double score) {
            this.score = score;
            return this;
        }

        /**
         * Setter for authorAssociation.
         * @param  authorAssociation  AuthorAssociationEnum value for authorAssociation.
         * @return Builder
         */
        public Builder authorAssociation(AuthorAssociationEnum authorAssociation) {
            this.authorAssociation = authorAssociation;
            return this;
        }

        /**
         * Setter for activeLockReason.
         * @param  activeLockReason  String value for activeLockReason.
         * @return Builder
         */
        public Builder activeLockReason(String activeLockReason) {
            this.activeLockReason = OptionalNullable.of(activeLockReason);
            return this;
        }

        /**
         * UnSetter for activeLockReason.
         * @return Builder
         */
        public Builder unsetActiveLockReason() {
            activeLockReason = null;
            return this;
        }

        /**
         * Setter for assignees.
         * @param  assignees  List of SimpleUser value for assignees.
         * @return Builder
         */
        public Builder assignees(List<SimpleUser> assignees) {
            this.assignees = OptionalNullable.of(assignees);
            return this;
        }

        /**
         * UnSetter for assignees.
         * @return Builder
         */
        public Builder unsetAssignees() {
            assignees = null;
            return this;
        }

        /**
         * Setter for stateReason.
         * @param  stateReason  String value for stateReason.
         * @return Builder
         */
        public Builder stateReason(String stateReason) {
            this.stateReason = OptionalNullable.of(stateReason);
            return this;
        }

        /**
         * UnSetter for stateReason.
         * @return Builder
         */
        public Builder unsetStateReason() {
            stateReason = null;
            return this;
        }

        /**
         * Setter for textMatches.
         * @param  textMatches  List of SearchResultTextMatch value for textMatches.
         * @return Builder
         */
        public Builder textMatches(List<SearchResultTextMatch> textMatches) {
            this.textMatches = textMatches;
            return this;
        }

        /**
         * Setter for pullRequest.
         * @param  pullRequest  PullRequest1 value for pullRequest.
         * @return Builder
         */
        public Builder pullRequest(PullRequest1 pullRequest) {
            this.pullRequest = pullRequest;
            return this;
        }

        /**
         * Setter for body.
         * @param  body  String value for body.
         * @return Builder
         */
        public Builder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Setter for draft.
         * @param  draft  Boolean value for draft.
         * @return Builder
         */
        public Builder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }

        /**
         * Setter for repository.
         * @param  repository  Repository3 value for repository.
         * @return Builder
         */
        public Builder repository(Repository3 repository) {
            this.repository = repository;
            return this;
        }

        /**
         * Setter for bodyHtml.
         * @param  bodyHtml  String value for bodyHtml.
         * @return Builder
         */
        public Builder bodyHtml(String bodyHtml) {
            this.bodyHtml = bodyHtml;
            return this;
        }

        /**
         * Setter for bodyText.
         * @param  bodyText  String value for bodyText.
         * @return Builder
         */
        public Builder bodyText(String bodyText) {
            this.bodyText = bodyText;
            return this;
        }

        /**
         * Setter for timelineUrl.
         * @param  timelineUrl  String value for timelineUrl.
         * @return Builder
         */
        public Builder timelineUrl(String timelineUrl) {
            this.timelineUrl = timelineUrl;
            return this;
        }

        /**
         * Setter for performedViaGithubApp.
         * @param  performedViaGithubApp  Object value for performedViaGithubApp.
         * @return Builder
         */
        public Builder performedViaGithubApp(Object performedViaGithubApp) {
            this.performedViaGithubApp = performedViaGithubApp;
            return this;
        }

        /**
         * Setter for reactions.
         * @param  reactions  ReactionRollup value for reactions.
         * @return Builder
         */
        public Builder reactions(ReactionRollup reactions) {
            this.reactions = reactions;
            return this;
        }

        /**
         * Builds a new {@link IssueSearchResultItem} object using the set fields.
         * @return {@link IssueSearchResultItem}
         */
        public IssueSearchResultItem build() {
            return new IssueSearchResultItem(url, repositoryUrl, labelsUrl, commentsUrl, eventsUrl,
                    htmlUrl, id, nodeId, number, title, locked, user, labels, state, assignee,
                    milestone, comments, createdAt, updatedAt, closedAt, score, authorAssociation,
                    activeLockReason, assignees, stateReason, textMatches, pullRequest, body, draft,
                    repository, bodyHtml, bodyText, timelineUrl, performedViaGithubApp, reactions);
        }
    }
}

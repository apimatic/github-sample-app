/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for NpmMetadata type.
 */
public class NpmMetadata {
    private String name;
    private String version;
    private String npmUser;
    private OptionalNullable<Object> author;
    private OptionalNullable<Object> bugs;
    private Object dependencies;
    private Object devDependencies;
    private Object peerDependencies;
    private Object optionalDependencies;
    private String description;
    private OptionalNullable<Object> dist;
    private String gitHead;
    private String homepage;
    private String license;
    private String main;
    private OptionalNullable<Object> repository;
    private Object scripts;
    private String id;
    private String nodeVersion;
    private String npmVersion;
    private Boolean hasShrinkwrap;
    private List<Object> maintainers;
    private List<Object> contributors;
    private Object engines;
    private List<String> keywords;
    private List<String> files;
    private Object bin;
    private Object man;
    private OptionalNullable<Object> directories;
    private List<String> os;
    private List<String> cpu;
    private String readme;
    private String installationCommand;
    private Integer releaseId;
    private String commitOid;
    private Boolean publishedViaActions;
    private Integer deletedById;

    /**
     * Default constructor.
     */
    public NpmMetadata() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  version  String value for version.
     * @param  npmUser  String value for npmUser.
     * @param  author  Object value for author.
     * @param  bugs  Object value for bugs.
     * @param  dependencies  Object value for dependencies.
     * @param  devDependencies  Object value for devDependencies.
     * @param  peerDependencies  Object value for peerDependencies.
     * @param  optionalDependencies  Object value for optionalDependencies.
     * @param  description  String value for description.
     * @param  dist  Object value for dist.
     * @param  gitHead  String value for gitHead.
     * @param  homepage  String value for homepage.
     * @param  license  String value for license.
     * @param  main  String value for main.
     * @param  repository  Object value for repository.
     * @param  scripts  Object value for scripts.
     * @param  id  String value for id.
     * @param  nodeVersion  String value for nodeVersion.
     * @param  npmVersion  String value for npmVersion.
     * @param  hasShrinkwrap  Boolean value for hasShrinkwrap.
     * @param  maintainers  List of Object value for maintainers.
     * @param  contributors  List of Object value for contributors.
     * @param  engines  Object value for engines.
     * @param  keywords  List of String value for keywords.
     * @param  files  List of String value for files.
     * @param  bin  Object value for bin.
     * @param  man  Object value for man.
     * @param  directories  Object value for directories.
     * @param  os  List of String value for os.
     * @param  cpu  List of String value for cpu.
     * @param  readme  String value for readme.
     * @param  installationCommand  String value for installationCommand.
     * @param  releaseId  Integer value for releaseId.
     * @param  commitOid  String value for commitOid.
     * @param  publishedViaActions  Boolean value for publishedViaActions.
     * @param  deletedById  Integer value for deletedById.
     */
    public NpmMetadata(
            String name,
            String version,
            String npmUser,
            Object author,
            Object bugs,
            Object dependencies,
            Object devDependencies,
            Object peerDependencies,
            Object optionalDependencies,
            String description,
            Object dist,
            String gitHead,
            String homepage,
            String license,
            String main,
            Object repository,
            Object scripts,
            String id,
            String nodeVersion,
            String npmVersion,
            Boolean hasShrinkwrap,
            List<Object> maintainers,
            List<Object> contributors,
            Object engines,
            List<String> keywords,
            List<String> files,
            Object bin,
            Object man,
            Object directories,
            List<String> os,
            List<String> cpu,
            String readme,
            String installationCommand,
            Integer releaseId,
            String commitOid,
            Boolean publishedViaActions,
            Integer deletedById) {
        this.name = name;
        this.version = version;
        this.npmUser = npmUser;
        this.author = OptionalNullable.of(author);
        this.bugs = OptionalNullable.of(bugs);
        this.dependencies = dependencies;
        this.devDependencies = devDependencies;
        this.peerDependencies = peerDependencies;
        this.optionalDependencies = optionalDependencies;
        this.description = description;
        this.dist = OptionalNullable.of(dist);
        this.gitHead = gitHead;
        this.homepage = homepage;
        this.license = license;
        this.main = main;
        this.repository = OptionalNullable.of(repository);
        this.scripts = scripts;
        this.id = id;
        this.nodeVersion = nodeVersion;
        this.npmVersion = npmVersion;
        this.hasShrinkwrap = hasShrinkwrap;
        this.maintainers = maintainers;
        this.contributors = contributors;
        this.engines = engines;
        this.keywords = keywords;
        this.files = files;
        this.bin = bin;
        this.man = man;
        this.directories = OptionalNullable.of(directories);
        this.os = os;
        this.cpu = cpu;
        this.readme = readme;
        this.installationCommand = installationCommand;
        this.releaseId = releaseId;
        this.commitOid = commitOid;
        this.publishedViaActions = publishedViaActions;
        this.deletedById = deletedById;
    }

    /**
     * Internal initialization constructor.
     */
    protected NpmMetadata(String name, String version, String npmUser,
            OptionalNullable<Object> author, OptionalNullable<Object> bugs, Object dependencies,
            Object devDependencies, Object peerDependencies, Object optionalDependencies,
            String description, OptionalNullable<Object> dist, String gitHead, String homepage,
            String license, String main, OptionalNullable<Object> repository, Object scripts,
            String id, String nodeVersion, String npmVersion, Boolean hasShrinkwrap,
            List<Object> maintainers, List<Object> contributors, Object engines,
            List<String> keywords, List<String> files, Object bin, Object man,
            OptionalNullable<Object> directories, List<String> os, List<String> cpu, String readme,
            String installationCommand, Integer releaseId, String commitOid,
            Boolean publishedViaActions, Integer deletedById) {
        this.name = name;
        this.version = version;
        this.npmUser = npmUser;
        this.author = author;
        this.bugs = bugs;
        this.dependencies = dependencies;
        this.devDependencies = devDependencies;
        this.peerDependencies = peerDependencies;
        this.optionalDependencies = optionalDependencies;
        this.description = description;
        this.dist = dist;
        this.gitHead = gitHead;
        this.homepage = homepage;
        this.license = license;
        this.main = main;
        this.repository = repository;
        this.scripts = scripts;
        this.id = id;
        this.nodeVersion = nodeVersion;
        this.npmVersion = npmVersion;
        this.hasShrinkwrap = hasShrinkwrap;
        this.maintainers = maintainers;
        this.contributors = contributors;
        this.engines = engines;
        this.keywords = keywords;
        this.files = files;
        this.bin = bin;
        this.man = man;
        this.directories = directories;
        this.os = os;
        this.cpu = cpu;
        this.readme = readme;
        this.installationCommand = installationCommand;
        this.releaseId = releaseId;
        this.commitOid = commitOid;
        this.publishedViaActions = publishedViaActions;
        this.deletedById = deletedById;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Version.
     * @return Returns the String
     */
    @JsonGetter("version")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getVersion() {
        return version;
    }

    /**
     * Setter for Version.
     * @param version Value for String
     */
    @JsonSetter("version")
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Getter for NpmUser.
     * @return Returns the String
     */
    @JsonGetter("npm_user")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNpmUser() {
        return npmUser;
    }

    /**
     * Setter for NpmUser.
     * @param npmUser Value for String
     */
    @JsonSetter("npm_user")
    public void setNpmUser(String npmUser) {
        this.npmUser = npmUser;
    }

    /**
     * Internal Getter for Author.
     * @return Returns the Internal Object
     */
    @JsonGetter("author")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetAuthor() {
        return this.author;
    }

    /**
     * Getter for Author.
     * @return Returns the Object
     */
    public Object getAuthor() {
        return OptionalNullable.getFrom(author);
    }

    /**
     * Setter for Author.
     * @param author Value for Object
     */
    @JsonSetter("author")
    public void setAuthor(Object author) {
        this.author = OptionalNullable.of(author);
    }

    /**
     * UnSetter for Author.
     */
    public void unsetAuthor() {
        author = null;
    }

    /**
     * Internal Getter for Bugs.
     * @return Returns the Internal Object
     */
    @JsonGetter("bugs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetBugs() {
        return this.bugs;
    }

    /**
     * Getter for Bugs.
     * @return Returns the Object
     */
    public Object getBugs() {
        return OptionalNullable.getFrom(bugs);
    }

    /**
     * Setter for Bugs.
     * @param bugs Value for Object
     */
    @JsonSetter("bugs")
    public void setBugs(Object bugs) {
        this.bugs = OptionalNullable.of(bugs);
    }

    /**
     * UnSetter for Bugs.
     */
    public void unsetBugs() {
        bugs = null;
    }

    /**
     * Getter for Dependencies.
     * @return Returns the Object
     */
    @JsonGetter("dependencies")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getDependencies() {
        return dependencies;
    }

    /**
     * Setter for Dependencies.
     * @param dependencies Value for Object
     */
    @JsonSetter("dependencies")
    public void setDependencies(Object dependencies) {
        this.dependencies = dependencies;
    }

    /**
     * Getter for DevDependencies.
     * @return Returns the Object
     */
    @JsonGetter("dev_dependencies")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getDevDependencies() {
        return devDependencies;
    }

    /**
     * Setter for DevDependencies.
     * @param devDependencies Value for Object
     */
    @JsonSetter("dev_dependencies")
    public void setDevDependencies(Object devDependencies) {
        this.devDependencies = devDependencies;
    }

    /**
     * Getter for PeerDependencies.
     * @return Returns the Object
     */
    @JsonGetter("peer_dependencies")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getPeerDependencies() {
        return peerDependencies;
    }

    /**
     * Setter for PeerDependencies.
     * @param peerDependencies Value for Object
     */
    @JsonSetter("peer_dependencies")
    public void setPeerDependencies(Object peerDependencies) {
        this.peerDependencies = peerDependencies;
    }

    /**
     * Getter for OptionalDependencies.
     * @return Returns the Object
     */
    @JsonGetter("optional_dependencies")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getOptionalDependencies() {
        return optionalDependencies;
    }

    /**
     * Setter for OptionalDependencies.
     * @param optionalDependencies Value for Object
     */
    @JsonSetter("optional_dependencies")
    public void setOptionalDependencies(Object optionalDependencies) {
        this.optionalDependencies = optionalDependencies;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Internal Getter for Dist.
     * @return Returns the Internal Object
     */
    @JsonGetter("dist")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetDist() {
        return this.dist;
    }

    /**
     * Getter for Dist.
     * @return Returns the Object
     */
    public Object getDist() {
        return OptionalNullable.getFrom(dist);
    }

    /**
     * Setter for Dist.
     * @param dist Value for Object
     */
    @JsonSetter("dist")
    public void setDist(Object dist) {
        this.dist = OptionalNullable.of(dist);
    }

    /**
     * UnSetter for Dist.
     */
    public void unsetDist() {
        dist = null;
    }

    /**
     * Getter for GitHead.
     * @return Returns the String
     */
    @JsonGetter("git_head")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getGitHead() {
        return gitHead;
    }

    /**
     * Setter for GitHead.
     * @param gitHead Value for String
     */
    @JsonSetter("git_head")
    public void setGitHead(String gitHead) {
        this.gitHead = gitHead;
    }

    /**
     * Getter for Homepage.
     * @return Returns the String
     */
    @JsonGetter("homepage")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHomepage() {
        return homepage;
    }

    /**
     * Setter for Homepage.
     * @param homepage Value for String
     */
    @JsonSetter("homepage")
    public void setHomepage(String homepage) {
        this.homepage = homepage;
    }

    /**
     * Getter for License.
     * @return Returns the String
     */
    @JsonGetter("license")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLicense() {
        return license;
    }

    /**
     * Setter for License.
     * @param license Value for String
     */
    @JsonSetter("license")
    public void setLicense(String license) {
        this.license = license;
    }

    /**
     * Getter for Main.
     * @return Returns the String
     */
    @JsonGetter("main")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMain() {
        return main;
    }

    /**
     * Setter for Main.
     * @param main Value for String
     */
    @JsonSetter("main")
    public void setMain(String main) {
        this.main = main;
    }

    /**
     * Internal Getter for Repository.
     * @return Returns the Internal Object
     */
    @JsonGetter("repository")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetRepository() {
        return this.repository;
    }

    /**
     * Getter for Repository.
     * @return Returns the Object
     */
    public Object getRepository() {
        return OptionalNullable.getFrom(repository);
    }

    /**
     * Setter for Repository.
     * @param repository Value for Object
     */
    @JsonSetter("repository")
    public void setRepository(Object repository) {
        this.repository = OptionalNullable.of(repository);
    }

    /**
     * UnSetter for Repository.
     */
    public void unsetRepository() {
        repository = null;
    }

    /**
     * Getter for Scripts.
     * @return Returns the Object
     */
    @JsonGetter("scripts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getScripts() {
        return scripts;
    }

    /**
     * Setter for Scripts.
     * @param scripts Value for Object
     */
    @JsonSetter("scripts")
    public void setScripts(Object scripts) {
        this.scripts = scripts;
    }

    /**
     * Getter for Id.
     * @return Returns the String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for NodeVersion.
     * @return Returns the String
     */
    @JsonGetter("node_version")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNodeVersion() {
        return nodeVersion;
    }

    /**
     * Setter for NodeVersion.
     * @param nodeVersion Value for String
     */
    @JsonSetter("node_version")
    public void setNodeVersion(String nodeVersion) {
        this.nodeVersion = nodeVersion;
    }

    /**
     * Getter for NpmVersion.
     * @return Returns the String
     */
    @JsonGetter("npm_version")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNpmVersion() {
        return npmVersion;
    }

    /**
     * Setter for NpmVersion.
     * @param npmVersion Value for String
     */
    @JsonSetter("npm_version")
    public void setNpmVersion(String npmVersion) {
        this.npmVersion = npmVersion;
    }

    /**
     * Getter for HasShrinkwrap.
     * @return Returns the Boolean
     */
    @JsonGetter("has_shrinkwrap")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasShrinkwrap() {
        return hasShrinkwrap;
    }

    /**
     * Setter for HasShrinkwrap.
     * @param hasShrinkwrap Value for Boolean
     */
    @JsonSetter("has_shrinkwrap")
    public void setHasShrinkwrap(Boolean hasShrinkwrap) {
        this.hasShrinkwrap = hasShrinkwrap;
    }

    /**
     * Getter for Maintainers.
     * @return Returns the List of Object
     */
    @JsonGetter("maintainers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Object> getMaintainers() {
        return maintainers;
    }

    /**
     * Setter for Maintainers.
     * @param maintainers Value for List of Object
     */
    @JsonSetter("maintainers")
    public void setMaintainers(List<Object> maintainers) {
        this.maintainers = maintainers;
    }

    /**
     * Getter for Contributors.
     * @return Returns the List of Object
     */
    @JsonGetter("contributors")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Object> getContributors() {
        return contributors;
    }

    /**
     * Setter for Contributors.
     * @param contributors Value for List of Object
     */
    @JsonSetter("contributors")
    public void setContributors(List<Object> contributors) {
        this.contributors = contributors;
    }

    /**
     * Getter for Engines.
     * @return Returns the Object
     */
    @JsonGetter("engines")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getEngines() {
        return engines;
    }

    /**
     * Setter for Engines.
     * @param engines Value for Object
     */
    @JsonSetter("engines")
    public void setEngines(Object engines) {
        this.engines = engines;
    }

    /**
     * Getter for Keywords.
     * @return Returns the List of String
     */
    @JsonGetter("keywords")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getKeywords() {
        return keywords;
    }

    /**
     * Setter for Keywords.
     * @param keywords Value for List of String
     */
    @JsonSetter("keywords")
    public void setKeywords(List<String> keywords) {
        this.keywords = keywords;
    }

    /**
     * Getter for Files.
     * @return Returns the List of String
     */
    @JsonGetter("files")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getFiles() {
        return files;
    }

    /**
     * Setter for Files.
     * @param files Value for List of String
     */
    @JsonSetter("files")
    public void setFiles(List<String> files) {
        this.files = files;
    }

    /**
     * Getter for Bin.
     * @return Returns the Object
     */
    @JsonGetter("bin")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getBin() {
        return bin;
    }

    /**
     * Setter for Bin.
     * @param bin Value for Object
     */
    @JsonSetter("bin")
    public void setBin(Object bin) {
        this.bin = bin;
    }

    /**
     * Getter for Man.
     * @return Returns the Object
     */
    @JsonGetter("man")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getMan() {
        return man;
    }

    /**
     * Setter for Man.
     * @param man Value for Object
     */
    @JsonSetter("man")
    public void setMan(Object man) {
        this.man = man;
    }

    /**
     * Internal Getter for Directories.
     * @return Returns the Internal Object
     */
    @JsonGetter("directories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetDirectories() {
        return this.directories;
    }

    /**
     * Getter for Directories.
     * @return Returns the Object
     */
    public Object getDirectories() {
        return OptionalNullable.getFrom(directories);
    }

    /**
     * Setter for Directories.
     * @param directories Value for Object
     */
    @JsonSetter("directories")
    public void setDirectories(Object directories) {
        this.directories = OptionalNullable.of(directories);
    }

    /**
     * UnSetter for Directories.
     */
    public void unsetDirectories() {
        directories = null;
    }

    /**
     * Getter for Os.
     * @return Returns the List of String
     */
    @JsonGetter("os")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getOs() {
        return os;
    }

    /**
     * Setter for Os.
     * @param os Value for List of String
     */
    @JsonSetter("os")
    public void setOs(List<String> os) {
        this.os = os;
    }

    /**
     * Getter for Cpu.
     * @return Returns the List of String
     */
    @JsonGetter("cpu")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getCpu() {
        return cpu;
    }

    /**
     * Setter for Cpu.
     * @param cpu Value for List of String
     */
    @JsonSetter("cpu")
    public void setCpu(List<String> cpu) {
        this.cpu = cpu;
    }

    /**
     * Getter for Readme.
     * @return Returns the String
     */
    @JsonGetter("readme")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getReadme() {
        return readme;
    }

    /**
     * Setter for Readme.
     * @param readme Value for String
     */
    @JsonSetter("readme")
    public void setReadme(String readme) {
        this.readme = readme;
    }

    /**
     * Getter for InstallationCommand.
     * @return Returns the String
     */
    @JsonGetter("installation_command")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInstallationCommand() {
        return installationCommand;
    }

    /**
     * Setter for InstallationCommand.
     * @param installationCommand Value for String
     */
    @JsonSetter("installation_command")
    public void setInstallationCommand(String installationCommand) {
        this.installationCommand = installationCommand;
    }

    /**
     * Getter for ReleaseId.
     * @return Returns the Integer
     */
    @JsonGetter("release_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getReleaseId() {
        return releaseId;
    }

    /**
     * Setter for ReleaseId.
     * @param releaseId Value for Integer
     */
    @JsonSetter("release_id")
    public void setReleaseId(Integer releaseId) {
        this.releaseId = releaseId;
    }

    /**
     * Getter for CommitOid.
     * @return Returns the String
     */
    @JsonGetter("commit_oid")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCommitOid() {
        return commitOid;
    }

    /**
     * Setter for CommitOid.
     * @param commitOid Value for String
     */
    @JsonSetter("commit_oid")
    public void setCommitOid(String commitOid) {
        this.commitOid = commitOid;
    }

    /**
     * Getter for PublishedViaActions.
     * @return Returns the Boolean
     */
    @JsonGetter("published_via_actions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getPublishedViaActions() {
        return publishedViaActions;
    }

    /**
     * Setter for PublishedViaActions.
     * @param publishedViaActions Value for Boolean
     */
    @JsonSetter("published_via_actions")
    public void setPublishedViaActions(Boolean publishedViaActions) {
        this.publishedViaActions = publishedViaActions;
    }

    /**
     * Getter for DeletedById.
     * @return Returns the Integer
     */
    @JsonGetter("deleted_by_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getDeletedById() {
        return deletedById;
    }

    /**
     * Setter for DeletedById.
     * @param deletedById Value for Integer
     */
    @JsonSetter("deleted_by_id")
    public void setDeletedById(Integer deletedById) {
        this.deletedById = deletedById;
    }

    /**
     * Converts this NpmMetadata into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "NpmMetadata [" + "name=" + name + ", version=" + version + ", npmUser=" + npmUser
                + ", author=" + author + ", bugs=" + bugs + ", dependencies=" + dependencies
                + ", devDependencies=" + devDependencies + ", peerDependencies=" + peerDependencies
                + ", optionalDependencies=" + optionalDependencies + ", description=" + description
                + ", dist=" + dist + ", gitHead=" + gitHead + ", homepage=" + homepage
                + ", license=" + license + ", main=" + main + ", repository=" + repository
                + ", scripts=" + scripts + ", id=" + id + ", nodeVersion=" + nodeVersion
                + ", npmVersion=" + npmVersion + ", hasShrinkwrap=" + hasShrinkwrap
                + ", maintainers=" + maintainers + ", contributors=" + contributors + ", engines="
                + engines + ", keywords=" + keywords + ", files=" + files + ", bin=" + bin
                + ", man=" + man + ", directories=" + directories + ", os=" + os + ", cpu=" + cpu
                + ", readme=" + readme + ", installationCommand=" + installationCommand
                + ", releaseId=" + releaseId + ", commitOid=" + commitOid + ", publishedViaActions="
                + publishedViaActions + ", deletedById=" + deletedById + "]";
    }

    /**
     * Builds a new {@link NpmMetadata.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link NpmMetadata.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .name(getName())
                .version(getVersion())
                .npmUser(getNpmUser())
                .dependencies(getDependencies())
                .devDependencies(getDevDependencies())
                .peerDependencies(getPeerDependencies())
                .optionalDependencies(getOptionalDependencies())
                .description(getDescription())
                .gitHead(getGitHead())
                .homepage(getHomepage())
                .license(getLicense())
                .main(getMain())
                .scripts(getScripts())
                .id(getId())
                .nodeVersion(getNodeVersion())
                .npmVersion(getNpmVersion())
                .hasShrinkwrap(getHasShrinkwrap())
                .maintainers(getMaintainers())
                .contributors(getContributors())
                .engines(getEngines())
                .keywords(getKeywords())
                .files(getFiles())
                .bin(getBin())
                .man(getMan())
                .os(getOs())
                .cpu(getCpu())
                .readme(getReadme())
                .installationCommand(getInstallationCommand())
                .releaseId(getReleaseId())
                .commitOid(getCommitOid())
                .publishedViaActions(getPublishedViaActions())
                .deletedById(getDeletedById());
        builder.author = internalGetAuthor();
        builder.bugs = internalGetBugs();
        builder.dist = internalGetDist();
        builder.repository = internalGetRepository();
        builder.directories = internalGetDirectories();
        return builder;
    }

    /**
     * Class to build instances of {@link NpmMetadata}.
     */
    public static class Builder {
        private String name;
        private String version;
        private String npmUser;
        private OptionalNullable<Object> author;
        private OptionalNullable<Object> bugs;
        private Object dependencies;
        private Object devDependencies;
        private Object peerDependencies;
        private Object optionalDependencies;
        private String description;
        private OptionalNullable<Object> dist;
        private String gitHead;
        private String homepage;
        private String license;
        private String main;
        private OptionalNullable<Object> repository;
        private Object scripts;
        private String id;
        private String nodeVersion;
        private String npmVersion;
        private Boolean hasShrinkwrap;
        private List<Object> maintainers;
        private List<Object> contributors;
        private Object engines;
        private List<String> keywords;
        private List<String> files;
        private Object bin;
        private Object man;
        private OptionalNullable<Object> directories;
        private List<String> os;
        private List<String> cpu;
        private String readme;
        private String installationCommand;
        private Integer releaseId;
        private String commitOid;
        private Boolean publishedViaActions;
        private Integer deletedById;



        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for version.
         * @param  version  String value for version.
         * @return Builder
         */
        public Builder version(String version) {
            this.version = version;
            return this;
        }

        /**
         * Setter for npmUser.
         * @param  npmUser  String value for npmUser.
         * @return Builder
         */
        public Builder npmUser(String npmUser) {
            this.npmUser = npmUser;
            return this;
        }

        /**
         * Setter for author.
         * @param  author  Object value for author.
         * @return Builder
         */
        public Builder author(Object author) {
            this.author = OptionalNullable.of(author);
            return this;
        }

        /**
         * UnSetter for author.
         * @return Builder
         */
        public Builder unsetAuthor() {
            author = null;
            return this;
        }

        /**
         * Setter for bugs.
         * @param  bugs  Object value for bugs.
         * @return Builder
         */
        public Builder bugs(Object bugs) {
            this.bugs = OptionalNullable.of(bugs);
            return this;
        }

        /**
         * UnSetter for bugs.
         * @return Builder
         */
        public Builder unsetBugs() {
            bugs = null;
            return this;
        }

        /**
         * Setter for dependencies.
         * @param  dependencies  Object value for dependencies.
         * @return Builder
         */
        public Builder dependencies(Object dependencies) {
            this.dependencies = dependencies;
            return this;
        }

        /**
         * Setter for devDependencies.
         * @param  devDependencies  Object value for devDependencies.
         * @return Builder
         */
        public Builder devDependencies(Object devDependencies) {
            this.devDependencies = devDependencies;
            return this;
        }

        /**
         * Setter for peerDependencies.
         * @param  peerDependencies  Object value for peerDependencies.
         * @return Builder
         */
        public Builder peerDependencies(Object peerDependencies) {
            this.peerDependencies = peerDependencies;
            return this;
        }

        /**
         * Setter for optionalDependencies.
         * @param  optionalDependencies  Object value for optionalDependencies.
         * @return Builder
         */
        public Builder optionalDependencies(Object optionalDependencies) {
            this.optionalDependencies = optionalDependencies;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for dist.
         * @param  dist  Object value for dist.
         * @return Builder
         */
        public Builder dist(Object dist) {
            this.dist = OptionalNullable.of(dist);
            return this;
        }

        /**
         * UnSetter for dist.
         * @return Builder
         */
        public Builder unsetDist() {
            dist = null;
            return this;
        }

        /**
         * Setter for gitHead.
         * @param  gitHead  String value for gitHead.
         * @return Builder
         */
        public Builder gitHead(String gitHead) {
            this.gitHead = gitHead;
            return this;
        }

        /**
         * Setter for homepage.
         * @param  homepage  String value for homepage.
         * @return Builder
         */
        public Builder homepage(String homepage) {
            this.homepage = homepage;
            return this;
        }

        /**
         * Setter for license.
         * @param  license  String value for license.
         * @return Builder
         */
        public Builder license(String license) {
            this.license = license;
            return this;
        }

        /**
         * Setter for main.
         * @param  main  String value for main.
         * @return Builder
         */
        public Builder main(String main) {
            this.main = main;
            return this;
        }

        /**
         * Setter for repository.
         * @param  repository  Object value for repository.
         * @return Builder
         */
        public Builder repository(Object repository) {
            this.repository = OptionalNullable.of(repository);
            return this;
        }

        /**
         * UnSetter for repository.
         * @return Builder
         */
        public Builder unsetRepository() {
            repository = null;
            return this;
        }

        /**
         * Setter for scripts.
         * @param  scripts  Object value for scripts.
         * @return Builder
         */
        public Builder scripts(Object scripts) {
            this.scripts = scripts;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeVersion.
         * @param  nodeVersion  String value for nodeVersion.
         * @return Builder
         */
        public Builder nodeVersion(String nodeVersion) {
            this.nodeVersion = nodeVersion;
            return this;
        }

        /**
         * Setter for npmVersion.
         * @param  npmVersion  String value for npmVersion.
         * @return Builder
         */
        public Builder npmVersion(String npmVersion) {
            this.npmVersion = npmVersion;
            return this;
        }

        /**
         * Setter for hasShrinkwrap.
         * @param  hasShrinkwrap  Boolean value for hasShrinkwrap.
         * @return Builder
         */
        public Builder hasShrinkwrap(Boolean hasShrinkwrap) {
            this.hasShrinkwrap = hasShrinkwrap;
            return this;
        }

        /**
         * Setter for maintainers.
         * @param  maintainers  List of Object value for maintainers.
         * @return Builder
         */
        public Builder maintainers(List<Object> maintainers) {
            this.maintainers = maintainers;
            return this;
        }

        /**
         * Setter for contributors.
         * @param  contributors  List of Object value for contributors.
         * @return Builder
         */
        public Builder contributors(List<Object> contributors) {
            this.contributors = contributors;
            return this;
        }

        /**
         * Setter for engines.
         * @param  engines  Object value for engines.
         * @return Builder
         */
        public Builder engines(Object engines) {
            this.engines = engines;
            return this;
        }

        /**
         * Setter for keywords.
         * @param  keywords  List of String value for keywords.
         * @return Builder
         */
        public Builder keywords(List<String> keywords) {
            this.keywords = keywords;
            return this;
        }

        /**
         * Setter for files.
         * @param  files  List of String value for files.
         * @return Builder
         */
        public Builder files(List<String> files) {
            this.files = files;
            return this;
        }

        /**
         * Setter for bin.
         * @param  bin  Object value for bin.
         * @return Builder
         */
        public Builder bin(Object bin) {
            this.bin = bin;
            return this;
        }

        /**
         * Setter for man.
         * @param  man  Object value for man.
         * @return Builder
         */
        public Builder man(Object man) {
            this.man = man;
            return this;
        }

        /**
         * Setter for directories.
         * @param  directories  Object value for directories.
         * @return Builder
         */
        public Builder directories(Object directories) {
            this.directories = OptionalNullable.of(directories);
            return this;
        }

        /**
         * UnSetter for directories.
         * @return Builder
         */
        public Builder unsetDirectories() {
            directories = null;
            return this;
        }

        /**
         * Setter for os.
         * @param  os  List of String value for os.
         * @return Builder
         */
        public Builder os(List<String> os) {
            this.os = os;
            return this;
        }

        /**
         * Setter for cpu.
         * @param  cpu  List of String value for cpu.
         * @return Builder
         */
        public Builder cpu(List<String> cpu) {
            this.cpu = cpu;
            return this;
        }

        /**
         * Setter for readme.
         * @param  readme  String value for readme.
         * @return Builder
         */
        public Builder readme(String readme) {
            this.readme = readme;
            return this;
        }

        /**
         * Setter for installationCommand.
         * @param  installationCommand  String value for installationCommand.
         * @return Builder
         */
        public Builder installationCommand(String installationCommand) {
            this.installationCommand = installationCommand;
            return this;
        }

        /**
         * Setter for releaseId.
         * @param  releaseId  Integer value for releaseId.
         * @return Builder
         */
        public Builder releaseId(Integer releaseId) {
            this.releaseId = releaseId;
            return this;
        }

        /**
         * Setter for commitOid.
         * @param  commitOid  String value for commitOid.
         * @return Builder
         */
        public Builder commitOid(String commitOid) {
            this.commitOid = commitOid;
            return this;
        }

        /**
         * Setter for publishedViaActions.
         * @param  publishedViaActions  Boolean value for publishedViaActions.
         * @return Builder
         */
        public Builder publishedViaActions(Boolean publishedViaActions) {
            this.publishedViaActions = publishedViaActions;
            return this;
        }

        /**
         * Setter for deletedById.
         * @param  deletedById  Integer value for deletedById.
         * @return Builder
         */
        public Builder deletedById(Integer deletedById) {
            this.deletedById = deletedById;
            return this;
        }

        /**
         * Builds a new {@link NpmMetadata} object using the set fields.
         * @return {@link NpmMetadata}
         */
        public NpmMetadata build() {
            return new NpmMetadata(name, version, npmUser, author, bugs, dependencies,
                    devDependencies, peerDependencies, optionalDependencies, description, dist,
                    gitHead, homepage, license, main, repository, scripts, id, nodeVersion,
                    npmVersion, hasShrinkwrap, maintainers, contributors, engines, keywords, files,
                    bin, man, directories, os, cpu, readme, installationCommand, releaseId,
                    commitOid, publishedViaActions, deletedById);
        }
    }
}

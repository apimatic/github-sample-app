/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Membershipremovedevent type.
 */
public class Membershipremovedevent {
    private String action;
    private Enterprise1 enterprise;
    private Installation1 installation;
    private Object member;
    private Organization2 organization;
    private Repository3 repository;
    private Scope5Enum scope;
    private Object sender;
    private Team2 team;

    /**
     * Default constructor.
     */
    public Membershipremovedevent() {
        action = "removed";
    }

    /**
     * Initialization constructor.
     * @param  action  String value for action.
     * @param  member  Object value for member.
     * @param  organization  Organization2 value for organization.
     * @param  scope  Scope5Enum value for scope.
     * @param  sender  Object value for sender.
     * @param  team  Team2 value for team.
     * @param  enterprise  Enterprise1 value for enterprise.
     * @param  installation  Installation1 value for installation.
     * @param  repository  Repository3 value for repository.
     */
    public Membershipremovedevent(
            String action,
            Object member,
            Organization2 organization,
            Scope5Enum scope,
            Object sender,
            Team2 team,
            Enterprise1 enterprise,
            Installation1 installation,
            Repository3 repository) {
        this.action = action;
        this.enterprise = enterprise;
        this.installation = installation;
        this.member = member;
        this.organization = organization;
        this.repository = repository;
        this.scope = scope;
        this.sender = sender;
        this.team = team;
    }

    /**
     * Getter for Action.
     * @return Returns the String
     */
    @JsonGetter("action")
    public String getAction() {
        return action;
    }

    /**
     * Setter for Action.
     * @param action Value for String
     */
    @JsonSetter("action")
    private void setAction(String action) {
        this.action = action;
    }

    /**
     * Getter for Enterprise.
     * @return Returns the Enterprise1
     */
    @JsonGetter("enterprise")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Enterprise1 getEnterprise() {
        return enterprise;
    }

    /**
     * Setter for Enterprise.
     * @param enterprise Value for Enterprise1
     */
    @JsonSetter("enterprise")
    public void setEnterprise(Enterprise1 enterprise) {
        this.enterprise = enterprise;
    }

    /**
     * Getter for Installation.
     * @return Returns the Installation1
     */
    @JsonGetter("installation")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Installation1 getInstallation() {
        return installation;
    }

    /**
     * Setter for Installation.
     * @param installation Value for Installation1
     */
    @JsonSetter("installation")
    public void setInstallation(Installation1 installation) {
        this.installation = installation;
    }

    /**
     * Getter for Member.
     * @return Returns the Object
     */
    @JsonGetter("member")
    public Object getMember() {
        return member;
    }

    /**
     * Setter for Member.
     * @param member Value for Object
     */
    @JsonSetter("member")
    public void setMember(Object member) {
        this.member = member;
    }

    /**
     * Getter for Organization.
     * @return Returns the Organization2
     */
    @JsonGetter("organization")
    public Organization2 getOrganization() {
        return organization;
    }

    /**
     * Setter for Organization.
     * @param organization Value for Organization2
     */
    @JsonSetter("organization")
    public void setOrganization(Organization2 organization) {
        this.organization = organization;
    }

    /**
     * Getter for Repository.
     * @return Returns the Repository3
     */
    @JsonGetter("repository")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Repository3 getRepository() {
        return repository;
    }

    /**
     * Setter for Repository.
     * @param repository Value for Repository3
     */
    @JsonSetter("repository")
    public void setRepository(Repository3 repository) {
        this.repository = repository;
    }

    /**
     * Getter for Scope.
     * @return Returns the Scope5Enum
     */
    @JsonGetter("scope")
    public Scope5Enum getScope() {
        return scope;
    }

    /**
     * Setter for Scope.
     * @param scope Value for Scope5Enum
     */
    @JsonSetter("scope")
    public void setScope(Scope5Enum scope) {
        this.scope = scope;
    }

    /**
     * Getter for Sender.
     * @return Returns the Object
     */
    @JsonGetter("sender")
    public Object getSender() {
        return sender;
    }

    /**
     * Setter for Sender.
     * @param sender Value for Object
     */
    @JsonSetter("sender")
    public void setSender(Object sender) {
        this.sender = sender;
    }

    /**
     * Getter for Team.
     * @return Returns the Team2
     */
    @JsonGetter("team")
    public Team2 getTeam() {
        return team;
    }

    /**
     * Setter for Team.
     * @param team Value for Team2
     */
    @JsonSetter("team")
    public void setTeam(Team2 team) {
        this.team = team;
    }

    /**
     * Converts this Membershipremovedevent into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Membershipremovedevent [" + "action=" + action + ", member=" + member
                + ", organization=" + organization + ", scope=" + scope + ", sender=" + sender
                + ", team=" + team + ", enterprise=" + enterprise + ", installation=" + installation
                + ", repository=" + repository + "]";
    }

    /**
     * Builds a new {@link Membershipremovedevent.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Membershipremovedevent.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(action, member, organization, scope, sender, team)
                .enterprise(getEnterprise())
                .installation(getInstallation())
                .repository(getRepository());
        return builder;
    }

    /**
     * Class to build instances of {@link Membershipremovedevent}.
     */
    public static class Builder {
        private String action = "removed";
        private Object member;
        private Organization2 organization;
        private Scope5Enum scope;
        private Object sender;
        private Team2 team;
        private Enterprise1 enterprise;
        private Installation1 installation;
        private Repository3 repository;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  action  String value for action.
         * @param  member  Object value for member.
         * @param  organization  Organization2 value for organization.
         * @param  scope  Scope5Enum value for scope.
         * @param  sender  Object value for sender.
         * @param  team  Team2 value for team.
         */
        public Builder(String action, Object member, Organization2 organization, Scope5Enum scope,
                Object sender, Team2 team) {
            this.action = action;
            this.member = member;
            this.organization = organization;
            this.scope = scope;
            this.sender = sender;
            this.team = team;
        }

        /**
         * Setter for action.
         * @param  action  String value for action.
         * @return Builder
         */
        public Builder action(String action) {
            this.action = action;
            return this;
        }

        /**
         * Setter for member.
         * @param  member  Object value for member.
         * @return Builder
         */
        public Builder member(Object member) {
            this.member = member;
            return this;
        }

        /**
         * Setter for organization.
         * @param  organization  Organization2 value for organization.
         * @return Builder
         */
        public Builder organization(Organization2 organization) {
            this.organization = organization;
            return this;
        }

        /**
         * Setter for scope.
         * @param  scope  Scope5Enum value for scope.
         * @return Builder
         */
        public Builder scope(Scope5Enum scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Setter for sender.
         * @param  sender  Object value for sender.
         * @return Builder
         */
        public Builder sender(Object sender) {
            this.sender = sender;
            return this;
        }

        /**
         * Setter for team.
         * @param  team  Team2 value for team.
         * @return Builder
         */
        public Builder team(Team2 team) {
            this.team = team;
            return this;
        }

        /**
         * Setter for enterprise.
         * @param  enterprise  Enterprise1 value for enterprise.
         * @return Builder
         */
        public Builder enterprise(Enterprise1 enterprise) {
            this.enterprise = enterprise;
            return this;
        }

        /**
         * Setter for installation.
         * @param  installation  Installation1 value for installation.
         * @return Builder
         */
        public Builder installation(Installation1 installation) {
            this.installation = installation;
            return this;
        }

        /**
         * Setter for repository.
         * @param  repository  Repository3 value for repository.
         * @return Builder
         */
        public Builder repository(Repository3 repository) {
            this.repository = repository;
            return this;
        }

        /**
         * Builds a new {@link Membershipremovedevent} object using the set fields.
         * @return {@link Membershipremovedevent}
         */
        public Membershipremovedevent build() {
            return new Membershipremovedevent(action, member, organization, scope, sender, team,
                    enterprise, installation, repository);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for InstallationRepositoriesremovedevent type.
 */
public class InstallationRepositoriesremovedevent {
    private String action;
    private Enterprise1 enterprise;
    private Installation48 installation;
    private Organization2 organization;
    private List<RepositoriesAdded> repositoriesAdded;
    private List<RepositoriesRemoved1> repositoriesRemoved;
    private Repository3 repository;
    private RepositorySelectionEnum repositorySelection;
    private Object requester;
    private Sender sender;

    /**
     * Default constructor.
     */
    public InstallationRepositoriesremovedevent() {
        action = "removed";
    }

    /**
     * Initialization constructor.
     * @param  action  String value for action.
     * @param  installation  Installation48 value for installation.
     * @param  repositoriesAdded  List of RepositoriesAdded value for repositoriesAdded.
     * @param  repositoriesRemoved  List of RepositoriesRemoved1 value for repositoriesRemoved.
     * @param  repositorySelection  RepositorySelectionEnum value for repositorySelection.
     * @param  requester  Object value for requester.
     * @param  sender  Sender value for sender.
     * @param  enterprise  Enterprise1 value for enterprise.
     * @param  organization  Organization2 value for organization.
     * @param  repository  Repository3 value for repository.
     */
    public InstallationRepositoriesremovedevent(
            String action,
            Installation48 installation,
            List<RepositoriesAdded> repositoriesAdded,
            List<RepositoriesRemoved1> repositoriesRemoved,
            RepositorySelectionEnum repositorySelection,
            Object requester,
            Sender sender,
            Enterprise1 enterprise,
            Organization2 organization,
            Repository3 repository) {
        this.action = action;
        this.enterprise = enterprise;
        this.installation = installation;
        this.organization = organization;
        this.repositoriesAdded = repositoriesAdded;
        this.repositoriesRemoved = repositoriesRemoved;
        this.repository = repository;
        this.repositorySelection = repositorySelection;
        this.requester = requester;
        this.sender = sender;
    }

    /**
     * Getter for Action.
     * @return Returns the String
     */
    @JsonGetter("action")
    public String getAction() {
        return action;
    }

    /**
     * Setter for Action.
     * @param action Value for String
     */
    @JsonSetter("action")
    private void setAction(String action) {
        this.action = action;
    }

    /**
     * Getter for Enterprise.
     * @return Returns the Enterprise1
     */
    @JsonGetter("enterprise")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Enterprise1 getEnterprise() {
        return enterprise;
    }

    /**
     * Setter for Enterprise.
     * @param enterprise Value for Enterprise1
     */
    @JsonSetter("enterprise")
    public void setEnterprise(Enterprise1 enterprise) {
        this.enterprise = enterprise;
    }

    /**
     * Getter for Installation.
     * @return Returns the Installation48
     */
    @JsonGetter("installation")
    public Installation48 getInstallation() {
        return installation;
    }

    /**
     * Setter for Installation.
     * @param installation Value for Installation48
     */
    @JsonSetter("installation")
    public void setInstallation(Installation48 installation) {
        this.installation = installation;
    }

    /**
     * Getter for Organization.
     * @return Returns the Organization2
     */
    @JsonGetter("organization")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Organization2 getOrganization() {
        return organization;
    }

    /**
     * Setter for Organization.
     * @param organization Value for Organization2
     */
    @JsonSetter("organization")
    public void setOrganization(Organization2 organization) {
        this.organization = organization;
    }

    /**
     * Getter for RepositoriesAdded.
     * An array of repository objects, which were added to the installation.
     * @return Returns the List of RepositoriesAdded
     */
    @JsonGetter("repositories_added")
    public List<RepositoriesAdded> getRepositoriesAdded() {
        return repositoriesAdded;
    }

    /**
     * Setter for RepositoriesAdded.
     * An array of repository objects, which were added to the installation.
     * @param repositoriesAdded Value for List of RepositoriesAdded
     */
    @JsonSetter("repositories_added")
    public void setRepositoriesAdded(List<RepositoriesAdded> repositoriesAdded) {
        this.repositoriesAdded = repositoriesAdded;
    }

    /**
     * Getter for RepositoriesRemoved.
     * An array of repository objects, which were removed from the installation.
     * @return Returns the List of RepositoriesRemoved1
     */
    @JsonGetter("repositories_removed")
    public List<RepositoriesRemoved1> getRepositoriesRemoved() {
        return repositoriesRemoved;
    }

    /**
     * Setter for RepositoriesRemoved.
     * An array of repository objects, which were removed from the installation.
     * @param repositoriesRemoved Value for List of RepositoriesRemoved1
     */
    @JsonSetter("repositories_removed")
    public void setRepositoriesRemoved(List<RepositoriesRemoved1> repositoriesRemoved) {
        this.repositoriesRemoved = repositoriesRemoved;
    }

    /**
     * Getter for Repository.
     * @return Returns the Repository3
     */
    @JsonGetter("repository")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Repository3 getRepository() {
        return repository;
    }

    /**
     * Setter for Repository.
     * @param repository Value for Repository3
     */
    @JsonSetter("repository")
    public void setRepository(Repository3 repository) {
        this.repository = repository;
    }

    /**
     * Getter for RepositorySelection.
     * @return Returns the RepositorySelectionEnum
     */
    @JsonGetter("repository_selection")
    public RepositorySelectionEnum getRepositorySelection() {
        return repositorySelection;
    }

    /**
     * Setter for RepositorySelection.
     * @param repositorySelection Value for RepositorySelectionEnum
     */
    @JsonSetter("repository_selection")
    public void setRepositorySelection(RepositorySelectionEnum repositorySelection) {
        this.repositorySelection = repositorySelection;
    }

    /**
     * Getter for Requester.
     * @return Returns the Object
     */
    @JsonGetter("requester")
    public Object getRequester() {
        return requester;
    }

    /**
     * Setter for Requester.
     * @param requester Value for Object
     */
    @JsonSetter("requester")
    public void setRequester(Object requester) {
        this.requester = requester;
    }

    /**
     * Getter for Sender.
     * @return Returns the Sender
     */
    @JsonGetter("sender")
    public Sender getSender() {
        return sender;
    }

    /**
     * Setter for Sender.
     * @param sender Value for Sender
     */
    @JsonSetter("sender")
    public void setSender(Sender sender) {
        this.sender = sender;
    }

    /**
     * Converts this InstallationRepositoriesremovedevent into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "InstallationRepositoriesremovedevent [" + "action=" + action + ", installation="
                + installation + ", repositoriesAdded=" + repositoriesAdded
                + ", repositoriesRemoved=" + repositoriesRemoved + ", repositorySelection="
                + repositorySelection + ", requester=" + requester + ", sender=" + sender
                + ", enterprise=" + enterprise + ", organization=" + organization + ", repository="
                + repository + "]";
    }

    /**
     * Builds a new {@link InstallationRepositoriesremovedevent.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link InstallationRepositoriesremovedevent.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(action, installation, repositoriesAdded, repositoriesRemoved,
                repositorySelection, requester, sender)
                .enterprise(getEnterprise())
                .organization(getOrganization())
                .repository(getRepository());
        return builder;
    }

    /**
     * Class to build instances of {@link InstallationRepositoriesremovedevent}.
     */
    public static class Builder {
        private String action = "removed";
        private Installation48 installation;
        private List<RepositoriesAdded> repositoriesAdded;
        private List<RepositoriesRemoved1> repositoriesRemoved;
        private RepositorySelectionEnum repositorySelection;
        private Object requester;
        private Sender sender;
        private Enterprise1 enterprise;
        private Organization2 organization;
        private Repository3 repository;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  action  String value for action.
         * @param  installation  Installation48 value for installation.
         * @param  repositoriesAdded  List of RepositoriesAdded value for repositoriesAdded.
         * @param  repositoriesRemoved  List of RepositoriesRemoved1 value for repositoriesRemoved.
         * @param  repositorySelection  RepositorySelectionEnum value for repositorySelection.
         * @param  requester  Object value for requester.
         * @param  sender  Sender value for sender.
         */
        public Builder(String action, Installation48 installation,
                List<RepositoriesAdded> repositoriesAdded,
                List<RepositoriesRemoved1> repositoriesRemoved,
                RepositorySelectionEnum repositorySelection, Object requester, Sender sender) {
            this.action = action;
            this.installation = installation;
            this.repositoriesAdded = repositoriesAdded;
            this.repositoriesRemoved = repositoriesRemoved;
            this.repositorySelection = repositorySelection;
            this.requester = requester;
            this.sender = sender;
        }

        /**
         * Setter for action.
         * @param  action  String value for action.
         * @return Builder
         */
        public Builder action(String action) {
            this.action = action;
            return this;
        }

        /**
         * Setter for installation.
         * @param  installation  Installation48 value for installation.
         * @return Builder
         */
        public Builder installation(Installation48 installation) {
            this.installation = installation;
            return this;
        }

        /**
         * Setter for repositoriesAdded.
         * @param  repositoriesAdded  List of RepositoriesAdded value for repositoriesAdded.
         * @return Builder
         */
        public Builder repositoriesAdded(List<RepositoriesAdded> repositoriesAdded) {
            this.repositoriesAdded = repositoriesAdded;
            return this;
        }

        /**
         * Setter for repositoriesRemoved.
         * @param  repositoriesRemoved  List of RepositoriesRemoved1 value for repositoriesRemoved.
         * @return Builder
         */
        public Builder repositoriesRemoved(List<RepositoriesRemoved1> repositoriesRemoved) {
            this.repositoriesRemoved = repositoriesRemoved;
            return this;
        }

        /**
         * Setter for repositorySelection.
         * @param  repositorySelection  RepositorySelectionEnum value for repositorySelection.
         * @return Builder
         */
        public Builder repositorySelection(RepositorySelectionEnum repositorySelection) {
            this.repositorySelection = repositorySelection;
            return this;
        }

        /**
         * Setter for requester.
         * @param  requester  Object value for requester.
         * @return Builder
         */
        public Builder requester(Object requester) {
            this.requester = requester;
            return this;
        }

        /**
         * Setter for sender.
         * @param  sender  Sender value for sender.
         * @return Builder
         */
        public Builder sender(Sender sender) {
            this.sender = sender;
            return this;
        }

        /**
         * Setter for enterprise.
         * @param  enterprise  Enterprise1 value for enterprise.
         * @return Builder
         */
        public Builder enterprise(Enterprise1 enterprise) {
            this.enterprise = enterprise;
            return this;
        }

        /**
         * Setter for organization.
         * @param  organization  Organization2 value for organization.
         * @return Builder
         */
        public Builder organization(Organization2 organization) {
            this.organization = organization;
            return this;
        }

        /**
         * Setter for repository.
         * @param  repository  Repository3 value for repository.
         * @return Builder
         */
        public Builder repository(Repository3 repository) {
            this.repository = repository;
            return this;
        }

        /**
         * Builds a new {@link InstallationRepositoriesremovedevent} object using the set fields.
         * @return {@link InstallationRepositoriesremovedevent}
         */
        public InstallationRepositoriesremovedevent build() {
            return new InstallationRepositoriesremovedevent(action, installation, repositoriesAdded,
                    repositoriesRemoved, repositorySelection, requester, sender, enterprise,
                    organization, repository);
        }
    }
}

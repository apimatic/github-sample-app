/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for PackageVersion2 type.
 */
public class PackageVersion2 {
    private Object author;
    private String body;
    private String bodyHtml;
    private String createdAt;
    private String description;
    private List<Object> dockerMetadata;
    private Boolean draft;
    private String htmlUrl;
    private int id;
    private String installationCommand;
    private String manifest;
    private List<Object> metadata;
    private String name;
    private List<PackageFile1> packageFiles;
    private String packageUrl;
    private Boolean prerelease;
    private Release2 release;
    private List<Object> rubygemsMetadata;
    private String sourceUrl;
    private String summary;
    private String tagName;
    private String targetCommitish;
    private String targetOid;
    private String updatedAt;
    private String version;

    /**
     * Default constructor.
     */
    public PackageVersion2() {
    }

    /**
     * Initialization constructor.
     * @param  author  Object value for author.
     * @param  body  String value for body.
     * @param  bodyHtml  String value for bodyHtml.
     * @param  createdAt  String value for createdAt.
     * @param  description  String value for description.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  id  int value for id.
     * @param  installationCommand  String value for installationCommand.
     * @param  metadata  List of Object value for metadata.
     * @param  name  String value for name.
     * @param  packageFiles  List of PackageFile1 value for packageFiles.
     * @param  summary  String value for summary.
     * @param  targetCommitish  String value for targetCommitish.
     * @param  targetOid  String value for targetOid.
     * @param  updatedAt  String value for updatedAt.
     * @param  version  String value for version.
     * @param  dockerMetadata  List of Object value for dockerMetadata.
     * @param  draft  Boolean value for draft.
     * @param  manifest  String value for manifest.
     * @param  packageUrl  String value for packageUrl.
     * @param  prerelease  Boolean value for prerelease.
     * @param  release  Release2 value for release.
     * @param  rubygemsMetadata  List of Object value for rubygemsMetadata.
     * @param  sourceUrl  String value for sourceUrl.
     * @param  tagName  String value for tagName.
     */
    public PackageVersion2(
            Object author,
            String body,
            String bodyHtml,
            String createdAt,
            String description,
            String htmlUrl,
            int id,
            String installationCommand,
            List<Object> metadata,
            String name,
            List<PackageFile1> packageFiles,
            String summary,
            String targetCommitish,
            String targetOid,
            String updatedAt,
            String version,
            List<Object> dockerMetadata,
            Boolean draft,
            String manifest,
            String packageUrl,
            Boolean prerelease,
            Release2 release,
            List<Object> rubygemsMetadata,
            String sourceUrl,
            String tagName) {
        this.author = author;
        this.body = body;
        this.bodyHtml = bodyHtml;
        this.createdAt = createdAt;
        this.description = description;
        this.dockerMetadata = dockerMetadata;
        this.draft = draft;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.installationCommand = installationCommand;
        this.manifest = manifest;
        this.metadata = metadata;
        this.name = name;
        this.packageFiles = packageFiles;
        this.packageUrl = packageUrl;
        this.prerelease = prerelease;
        this.release = release;
        this.rubygemsMetadata = rubygemsMetadata;
        this.sourceUrl = sourceUrl;
        this.summary = summary;
        this.tagName = tagName;
        this.targetCommitish = targetCommitish;
        this.targetOid = targetOid;
        this.updatedAt = updatedAt;
        this.version = version;
    }

    /**
     * Getter for Author.
     * @return Returns the Object
     */
    @JsonGetter("author")
    public Object getAuthor() {
        return author;
    }

    /**
     * Setter for Author.
     * @param author Value for Object
     */
    @JsonSetter("author")
    public void setAuthor(Object author) {
        this.author = author;
    }

    /**
     * Getter for Body.
     * @return Returns the String
     */
    @JsonGetter("body")
    public String getBody() {
        return body;
    }

    /**
     * Setter for Body.
     * @param body Value for String
     */
    @JsonSetter("body")
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Getter for BodyHtml.
     * @return Returns the String
     */
    @JsonGetter("body_html")
    public String getBodyHtml() {
        return bodyHtml;
    }

    /**
     * Setter for BodyHtml.
     * @param bodyHtml Value for String
     */
    @JsonSetter("body_html")
    public void setBodyHtml(String bodyHtml) {
        this.bodyHtml = bodyHtml;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the String
     */
    @JsonGetter("created_at")
    public String getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for String
     */
    @JsonSetter("created_at")
    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for DockerMetadata.
     * @return Returns the List of Object
     */
    @JsonGetter("docker_metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Object> getDockerMetadata() {
        return dockerMetadata;
    }

    /**
     * Setter for DockerMetadata.
     * @param dockerMetadata Value for List of Object
     */
    @JsonSetter("docker_metadata")
    public void setDockerMetadata(List<Object> dockerMetadata) {
        this.dockerMetadata = dockerMetadata;
    }

    /**
     * Getter for Draft.
     * @return Returns the Boolean
     */
    @JsonGetter("draft")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDraft() {
        return draft;
    }

    /**
     * Setter for Draft.
     * @param draft Value for Boolean
     */
    @JsonSetter("draft")
    public void setDraft(Boolean draft) {
        this.draft = draft;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for InstallationCommand.
     * @return Returns the String
     */
    @JsonGetter("installation_command")
    public String getInstallationCommand() {
        return installationCommand;
    }

    /**
     * Setter for InstallationCommand.
     * @param installationCommand Value for String
     */
    @JsonSetter("installation_command")
    public void setInstallationCommand(String installationCommand) {
        this.installationCommand = installationCommand;
    }

    /**
     * Getter for Manifest.
     * @return Returns the String
     */
    @JsonGetter("manifest")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getManifest() {
        return manifest;
    }

    /**
     * Setter for Manifest.
     * @param manifest Value for String
     */
    @JsonSetter("manifest")
    public void setManifest(String manifest) {
        this.manifest = manifest;
    }

    /**
     * Getter for Metadata.
     * @return Returns the List of Object
     */
    @JsonGetter("metadata")
    public List<Object> getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * @param metadata Value for List of Object
     */
    @JsonSetter("metadata")
    public void setMetadata(List<Object> metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for PackageFiles.
     * @return Returns the List of PackageFile1
     */
    @JsonGetter("package_files")
    public List<PackageFile1> getPackageFiles() {
        return packageFiles;
    }

    /**
     * Setter for PackageFiles.
     * @param packageFiles Value for List of PackageFile1
     */
    @JsonSetter("package_files")
    public void setPackageFiles(List<PackageFile1> packageFiles) {
        this.packageFiles = packageFiles;
    }

    /**
     * Getter for PackageUrl.
     * @return Returns the String
     */
    @JsonGetter("package_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPackageUrl() {
        return packageUrl;
    }

    /**
     * Setter for PackageUrl.
     * @param packageUrl Value for String
     */
    @JsonSetter("package_url")
    public void setPackageUrl(String packageUrl) {
        this.packageUrl = packageUrl;
    }

    /**
     * Getter for Prerelease.
     * @return Returns the Boolean
     */
    @JsonGetter("prerelease")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getPrerelease() {
        return prerelease;
    }

    /**
     * Setter for Prerelease.
     * @param prerelease Value for Boolean
     */
    @JsonSetter("prerelease")
    public void setPrerelease(Boolean prerelease) {
        this.prerelease = prerelease;
    }

    /**
     * Getter for Release.
     * @return Returns the Release2
     */
    @JsonGetter("release")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Release2 getRelease() {
        return release;
    }

    /**
     * Setter for Release.
     * @param release Value for Release2
     */
    @JsonSetter("release")
    public void setRelease(Release2 release) {
        this.release = release;
    }

    /**
     * Getter for RubygemsMetadata.
     * @return Returns the List of Object
     */
    @JsonGetter("rubygems_metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Object> getRubygemsMetadata() {
        return rubygemsMetadata;
    }

    /**
     * Setter for RubygemsMetadata.
     * @param rubygemsMetadata Value for List of Object
     */
    @JsonSetter("rubygems_metadata")
    public void setRubygemsMetadata(List<Object> rubygemsMetadata) {
        this.rubygemsMetadata = rubygemsMetadata;
    }

    /**
     * Getter for SourceUrl.
     * @return Returns the String
     */
    @JsonGetter("source_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSourceUrl() {
        return sourceUrl;
    }

    /**
     * Setter for SourceUrl.
     * @param sourceUrl Value for String
     */
    @JsonSetter("source_url")
    public void setSourceUrl(String sourceUrl) {
        this.sourceUrl = sourceUrl;
    }

    /**
     * Getter for Summary.
     * @return Returns the String
     */
    @JsonGetter("summary")
    public String getSummary() {
        return summary;
    }

    /**
     * Setter for Summary.
     * @param summary Value for String
     */
    @JsonSetter("summary")
    public void setSummary(String summary) {
        this.summary = summary;
    }

    /**
     * Getter for TagName.
     * @return Returns the String
     */
    @JsonGetter("tag_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTagName() {
        return tagName;
    }

    /**
     * Setter for TagName.
     * @param tagName Value for String
     */
    @JsonSetter("tag_name")
    public void setTagName(String tagName) {
        this.tagName = tagName;
    }

    /**
     * Getter for TargetCommitish.
     * @return Returns the String
     */
    @JsonGetter("target_commitish")
    public String getTargetCommitish() {
        return targetCommitish;
    }

    /**
     * Setter for TargetCommitish.
     * @param targetCommitish Value for String
     */
    @JsonSetter("target_commitish")
    public void setTargetCommitish(String targetCommitish) {
        this.targetCommitish = targetCommitish;
    }

    /**
     * Getter for TargetOid.
     * @return Returns the String
     */
    @JsonGetter("target_oid")
    public String getTargetOid() {
        return targetOid;
    }

    /**
     * Setter for TargetOid.
     * @param targetOid Value for String
     */
    @JsonSetter("target_oid")
    public void setTargetOid(String targetOid) {
        this.targetOid = targetOid;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the String
     */
    @JsonGetter("updated_at")
    public String getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for String
     */
    @JsonSetter("updated_at")
    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Version.
     * @return Returns the String
     */
    @JsonGetter("version")
    public String getVersion() {
        return version;
    }

    /**
     * Setter for Version.
     * @param version Value for String
     */
    @JsonSetter("version")
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Converts this PackageVersion2 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PackageVersion2 [" + "author=" + author + ", body=" + body + ", bodyHtml="
                + bodyHtml + ", createdAt=" + createdAt + ", description=" + description
                + ", htmlUrl=" + htmlUrl + ", id=" + id + ", installationCommand="
                + installationCommand + ", metadata=" + metadata + ", name=" + name
                + ", packageFiles=" + packageFiles + ", summary=" + summary + ", targetCommitish="
                + targetCommitish + ", targetOid=" + targetOid + ", updatedAt=" + updatedAt
                + ", version=" + version + ", dockerMetadata=" + dockerMetadata + ", draft=" + draft
                + ", manifest=" + manifest + ", packageUrl=" + packageUrl + ", prerelease="
                + prerelease + ", release=" + release + ", rubygemsMetadata=" + rubygemsMetadata
                + ", sourceUrl=" + sourceUrl + ", tagName=" + tagName + "]";
    }

    /**
     * Builds a new {@link PackageVersion2.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PackageVersion2.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(author, body, bodyHtml, createdAt, description, htmlUrl, id,
                installationCommand, metadata, name, packageFiles, summary, targetCommitish,
                targetOid, updatedAt, version)
                .dockerMetadata(getDockerMetadata())
                .draft(getDraft())
                .manifest(getManifest())
                .packageUrl(getPackageUrl())
                .prerelease(getPrerelease())
                .release(getRelease())
                .rubygemsMetadata(getRubygemsMetadata())
                .sourceUrl(getSourceUrl())
                .tagName(getTagName());
        return builder;
    }

    /**
     * Class to build instances of {@link PackageVersion2}.
     */
    public static class Builder {
        private Object author;
        private String body;
        private String bodyHtml;
        private String createdAt;
        private String description;
        private String htmlUrl;
        private int id;
        private String installationCommand;
        private List<Object> metadata;
        private String name;
        private List<PackageFile1> packageFiles;
        private String summary;
        private String targetCommitish;
        private String targetOid;
        private String updatedAt;
        private String version;
        private List<Object> dockerMetadata;
        private Boolean draft;
        private String manifest;
        private String packageUrl;
        private Boolean prerelease;
        private Release2 release;
        private List<Object> rubygemsMetadata;
        private String sourceUrl;
        private String tagName;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  author  Object value for author.
         * @param  body  String value for body.
         * @param  bodyHtml  String value for bodyHtml.
         * @param  createdAt  String value for createdAt.
         * @param  description  String value for description.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  id  int value for id.
         * @param  installationCommand  String value for installationCommand.
         * @param  metadata  List of Object value for metadata.
         * @param  name  String value for name.
         * @param  packageFiles  List of PackageFile1 value for packageFiles.
         * @param  summary  String value for summary.
         * @param  targetCommitish  String value for targetCommitish.
         * @param  targetOid  String value for targetOid.
         * @param  updatedAt  String value for updatedAt.
         * @param  version  String value for version.
         */
        public Builder(Object author, String body, String bodyHtml, String createdAt,
                String description, String htmlUrl, int id, String installationCommand,
                List<Object> metadata, String name, List<PackageFile1> packageFiles, String summary,
                String targetCommitish, String targetOid, String updatedAt, String version) {
            this.author = author;
            this.body = body;
            this.bodyHtml = bodyHtml;
            this.createdAt = createdAt;
            this.description = description;
            this.htmlUrl = htmlUrl;
            this.id = id;
            this.installationCommand = installationCommand;
            this.metadata = metadata;
            this.name = name;
            this.packageFiles = packageFiles;
            this.summary = summary;
            this.targetCommitish = targetCommitish;
            this.targetOid = targetOid;
            this.updatedAt = updatedAt;
            this.version = version;
        }

        /**
         * Setter for author.
         * @param  author  Object value for author.
         * @return Builder
         */
        public Builder author(Object author) {
            this.author = author;
            return this;
        }

        /**
         * Setter for body.
         * @param  body  String value for body.
         * @return Builder
         */
        public Builder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Setter for bodyHtml.
         * @param  bodyHtml  String value for bodyHtml.
         * @return Builder
         */
        public Builder bodyHtml(String bodyHtml) {
            this.bodyHtml = bodyHtml;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  String value for createdAt.
         * @return Builder
         */
        public Builder createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for installationCommand.
         * @param  installationCommand  String value for installationCommand.
         * @return Builder
         */
        public Builder installationCommand(String installationCommand) {
            this.installationCommand = installationCommand;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  List of Object value for metadata.
         * @return Builder
         */
        public Builder metadata(List<Object> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for packageFiles.
         * @param  packageFiles  List of PackageFile1 value for packageFiles.
         * @return Builder
         */
        public Builder packageFiles(List<PackageFile1> packageFiles) {
            this.packageFiles = packageFiles;
            return this;
        }

        /**
         * Setter for summary.
         * @param  summary  String value for summary.
         * @return Builder
         */
        public Builder summary(String summary) {
            this.summary = summary;
            return this;
        }

        /**
         * Setter for targetCommitish.
         * @param  targetCommitish  String value for targetCommitish.
         * @return Builder
         */
        public Builder targetCommitish(String targetCommitish) {
            this.targetCommitish = targetCommitish;
            return this;
        }

        /**
         * Setter for targetOid.
         * @param  targetOid  String value for targetOid.
         * @return Builder
         */
        public Builder targetOid(String targetOid) {
            this.targetOid = targetOid;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  String value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for version.
         * @param  version  String value for version.
         * @return Builder
         */
        public Builder version(String version) {
            this.version = version;
            return this;
        }

        /**
         * Setter for dockerMetadata.
         * @param  dockerMetadata  List of Object value for dockerMetadata.
         * @return Builder
         */
        public Builder dockerMetadata(List<Object> dockerMetadata) {
            this.dockerMetadata = dockerMetadata;
            return this;
        }

        /**
         * Setter for draft.
         * @param  draft  Boolean value for draft.
         * @return Builder
         */
        public Builder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }

        /**
         * Setter for manifest.
         * @param  manifest  String value for manifest.
         * @return Builder
         */
        public Builder manifest(String manifest) {
            this.manifest = manifest;
            return this;
        }

        /**
         * Setter for packageUrl.
         * @param  packageUrl  String value for packageUrl.
         * @return Builder
         */
        public Builder packageUrl(String packageUrl) {
            this.packageUrl = packageUrl;
            return this;
        }

        /**
         * Setter for prerelease.
         * @param  prerelease  Boolean value for prerelease.
         * @return Builder
         */
        public Builder prerelease(Boolean prerelease) {
            this.prerelease = prerelease;
            return this;
        }

        /**
         * Setter for release.
         * @param  release  Release2 value for release.
         * @return Builder
         */
        public Builder release(Release2 release) {
            this.release = release;
            return this;
        }

        /**
         * Setter for rubygemsMetadata.
         * @param  rubygemsMetadata  List of Object value for rubygemsMetadata.
         * @return Builder
         */
        public Builder rubygemsMetadata(List<Object> rubygemsMetadata) {
            this.rubygemsMetadata = rubygemsMetadata;
            return this;
        }

        /**
         * Setter for sourceUrl.
         * @param  sourceUrl  String value for sourceUrl.
         * @return Builder
         */
        public Builder sourceUrl(String sourceUrl) {
            this.sourceUrl = sourceUrl;
            return this;
        }

        /**
         * Setter for tagName.
         * @param  tagName  String value for tagName.
         * @return Builder
         */
        public Builder tagName(String tagName) {
            this.tagName = tagName;
            return this;
        }

        /**
         * Builds a new {@link PackageVersion2} object using the set fields.
         * @return {@link PackageVersion2}
         */
        public PackageVersion2 build() {
            return new PackageVersion2(author, body, bodyHtml, createdAt, description, htmlUrl, id,
                    installationCommand, metadata, name, packageFiles, summary, targetCommitish,
                    targetOid, updatedAt, version, dockerMetadata, draft, manifest, packageUrl,
                    prerelease, release, rubygemsMetadata, sourceUrl, tagName);
        }
    }
}

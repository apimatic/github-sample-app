/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for RepoSearchResultItem type.
 */
public class RepoSearchResultItem {
    private int id;
    private String nodeId;
    private String name;
    private String fullName;
    private Object owner;
    private boolean mPrivate;
    private String htmlUrl;
    private String description;
    private boolean fork;
    private String url;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private LocalDateTime pushedAt;
    private String homepage;
    private int size;
    private int stargazersCount;
    private int watchersCount;
    private String language;
    private int forksCount;
    private int openIssuesCount;
    private String masterBranch;
    private String defaultBranch;
    private double score;
    private String forksUrl;
    private String keysUrl;
    private String collaboratorsUrl;
    private String teamsUrl;
    private String hooksUrl;
    private String issueEventsUrl;
    private String eventsUrl;
    private String assigneesUrl;
    private String branchesUrl;
    private String tagsUrl;
    private String blobsUrl;
    private String gitTagsUrl;
    private String gitRefsUrl;
    private String treesUrl;
    private String statusesUrl;
    private String languagesUrl;
    private String stargazersUrl;
    private String contributorsUrl;
    private String subscribersUrl;
    private String subscriptionUrl;
    private String commitsUrl;
    private String gitCommitsUrl;
    private String commentsUrl;
    private String issueCommentUrl;
    private String contentsUrl;
    private String compareUrl;
    private String mergesUrl;
    private String archiveUrl;
    private String downloadsUrl;
    private String issuesUrl;
    private String pullsUrl;
    private String milestonesUrl;
    private String notificationsUrl;
    private String labelsUrl;
    private String releasesUrl;
    private String deploymentsUrl;
    private String gitUrl;
    private String sshUrl;
    private String cloneUrl;
    private String svnUrl;
    private int forks;
    private int openIssues;
    private int watchers;
    private List<String> topics;
    private String mirrorUrl;
    private boolean hasIssues;
    private boolean hasProjects;
    private boolean hasPages;
    private boolean hasWiki;
    private boolean hasDownloads;
    private Boolean hasDiscussions;
    private boolean archived;
    private boolean disabled;
    private String visibility;
    private Object license;
    private Permissions1 permissions;
    private List<SearchResultTextMatch> textMatches;
    private String tempCloneToken;
    private Boolean allowMergeCommit;
    private Boolean allowSquashMerge;
    private Boolean allowRebaseMerge;
    private Boolean allowAutoMerge;
    private Boolean deleteBranchOnMerge;
    private Boolean allowForking;
    private Boolean isTemplate;
    private Boolean webCommitSignoffRequired;

    /**
     * Default constructor.
     */
    public RepoSearchResultItem() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  name  String value for name.
     * @param  fullName  String value for fullName.
     * @param  owner  Object value for owner.
     * @param  mPrivate  boolean value for mPrivate.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  description  String value for description.
     * @param  fork  boolean value for fork.
     * @param  url  String value for url.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  pushedAt  LocalDateTime value for pushedAt.
     * @param  homepage  String value for homepage.
     * @param  size  int value for size.
     * @param  stargazersCount  int value for stargazersCount.
     * @param  watchersCount  int value for watchersCount.
     * @param  language  String value for language.
     * @param  forksCount  int value for forksCount.
     * @param  openIssuesCount  int value for openIssuesCount.
     * @param  defaultBranch  String value for defaultBranch.
     * @param  score  double value for score.
     * @param  forksUrl  String value for forksUrl.
     * @param  keysUrl  String value for keysUrl.
     * @param  collaboratorsUrl  String value for collaboratorsUrl.
     * @param  teamsUrl  String value for teamsUrl.
     * @param  hooksUrl  String value for hooksUrl.
     * @param  issueEventsUrl  String value for issueEventsUrl.
     * @param  eventsUrl  String value for eventsUrl.
     * @param  assigneesUrl  String value for assigneesUrl.
     * @param  branchesUrl  String value for branchesUrl.
     * @param  tagsUrl  String value for tagsUrl.
     * @param  blobsUrl  String value for blobsUrl.
     * @param  gitTagsUrl  String value for gitTagsUrl.
     * @param  gitRefsUrl  String value for gitRefsUrl.
     * @param  treesUrl  String value for treesUrl.
     * @param  statusesUrl  String value for statusesUrl.
     * @param  languagesUrl  String value for languagesUrl.
     * @param  stargazersUrl  String value for stargazersUrl.
     * @param  contributorsUrl  String value for contributorsUrl.
     * @param  subscribersUrl  String value for subscribersUrl.
     * @param  subscriptionUrl  String value for subscriptionUrl.
     * @param  commitsUrl  String value for commitsUrl.
     * @param  gitCommitsUrl  String value for gitCommitsUrl.
     * @param  commentsUrl  String value for commentsUrl.
     * @param  issueCommentUrl  String value for issueCommentUrl.
     * @param  contentsUrl  String value for contentsUrl.
     * @param  compareUrl  String value for compareUrl.
     * @param  mergesUrl  String value for mergesUrl.
     * @param  archiveUrl  String value for archiveUrl.
     * @param  downloadsUrl  String value for downloadsUrl.
     * @param  issuesUrl  String value for issuesUrl.
     * @param  pullsUrl  String value for pullsUrl.
     * @param  milestonesUrl  String value for milestonesUrl.
     * @param  notificationsUrl  String value for notificationsUrl.
     * @param  labelsUrl  String value for labelsUrl.
     * @param  releasesUrl  String value for releasesUrl.
     * @param  deploymentsUrl  String value for deploymentsUrl.
     * @param  gitUrl  String value for gitUrl.
     * @param  sshUrl  String value for sshUrl.
     * @param  cloneUrl  String value for cloneUrl.
     * @param  svnUrl  String value for svnUrl.
     * @param  forks  int value for forks.
     * @param  openIssues  int value for openIssues.
     * @param  watchers  int value for watchers.
     * @param  mirrorUrl  String value for mirrorUrl.
     * @param  hasIssues  boolean value for hasIssues.
     * @param  hasProjects  boolean value for hasProjects.
     * @param  hasPages  boolean value for hasPages.
     * @param  hasWiki  boolean value for hasWiki.
     * @param  hasDownloads  boolean value for hasDownloads.
     * @param  archived  boolean value for archived.
     * @param  disabled  boolean value for disabled.
     * @param  license  Object value for license.
     * @param  masterBranch  String value for masterBranch.
     * @param  topics  List of String value for topics.
     * @param  hasDiscussions  Boolean value for hasDiscussions.
     * @param  visibility  String value for visibility.
     * @param  permissions  Permissions1 value for permissions.
     * @param  textMatches  List of SearchResultTextMatch value for textMatches.
     * @param  tempCloneToken  String value for tempCloneToken.
     * @param  allowMergeCommit  Boolean value for allowMergeCommit.
     * @param  allowSquashMerge  Boolean value for allowSquashMerge.
     * @param  allowRebaseMerge  Boolean value for allowRebaseMerge.
     * @param  allowAutoMerge  Boolean value for allowAutoMerge.
     * @param  deleteBranchOnMerge  Boolean value for deleteBranchOnMerge.
     * @param  allowForking  Boolean value for allowForking.
     * @param  isTemplate  Boolean value for isTemplate.
     * @param  webCommitSignoffRequired  Boolean value for webCommitSignoffRequired.
     */
    public RepoSearchResultItem(
            int id,
            String nodeId,
            String name,
            String fullName,
            Object owner,
            boolean mPrivate,
            String htmlUrl,
            String description,
            boolean fork,
            String url,
            LocalDateTime createdAt,
            LocalDateTime updatedAt,
            LocalDateTime pushedAt,
            String homepage,
            int size,
            int stargazersCount,
            int watchersCount,
            String language,
            int forksCount,
            int openIssuesCount,
            String defaultBranch,
            double score,
            String forksUrl,
            String keysUrl,
            String collaboratorsUrl,
            String teamsUrl,
            String hooksUrl,
            String issueEventsUrl,
            String eventsUrl,
            String assigneesUrl,
            String branchesUrl,
            String tagsUrl,
            String blobsUrl,
            String gitTagsUrl,
            String gitRefsUrl,
            String treesUrl,
            String statusesUrl,
            String languagesUrl,
            String stargazersUrl,
            String contributorsUrl,
            String subscribersUrl,
            String subscriptionUrl,
            String commitsUrl,
            String gitCommitsUrl,
            String commentsUrl,
            String issueCommentUrl,
            String contentsUrl,
            String compareUrl,
            String mergesUrl,
            String archiveUrl,
            String downloadsUrl,
            String issuesUrl,
            String pullsUrl,
            String milestonesUrl,
            String notificationsUrl,
            String labelsUrl,
            String releasesUrl,
            String deploymentsUrl,
            String gitUrl,
            String sshUrl,
            String cloneUrl,
            String svnUrl,
            int forks,
            int openIssues,
            int watchers,
            String mirrorUrl,
            boolean hasIssues,
            boolean hasProjects,
            boolean hasPages,
            boolean hasWiki,
            boolean hasDownloads,
            boolean archived,
            boolean disabled,
            Object license,
            String masterBranch,
            List<String> topics,
            Boolean hasDiscussions,
            String visibility,
            Permissions1 permissions,
            List<SearchResultTextMatch> textMatches,
            String tempCloneToken,
            Boolean allowMergeCommit,
            Boolean allowSquashMerge,
            Boolean allowRebaseMerge,
            Boolean allowAutoMerge,
            Boolean deleteBranchOnMerge,
            Boolean allowForking,
            Boolean isTemplate,
            Boolean webCommitSignoffRequired) {
        this.id = id;
        this.nodeId = nodeId;
        this.name = name;
        this.fullName = fullName;
        this.owner = owner;
        this.mPrivate = mPrivate;
        this.htmlUrl = htmlUrl;
        this.description = description;
        this.fork = fork;
        this.url = url;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.pushedAt = pushedAt;
        this.homepage = homepage;
        this.size = size;
        this.stargazersCount = stargazersCount;
        this.watchersCount = watchersCount;
        this.language = language;
        this.forksCount = forksCount;
        this.openIssuesCount = openIssuesCount;
        this.masterBranch = masterBranch;
        this.defaultBranch = defaultBranch;
        this.score = score;
        this.forksUrl = forksUrl;
        this.keysUrl = keysUrl;
        this.collaboratorsUrl = collaboratorsUrl;
        this.teamsUrl = teamsUrl;
        this.hooksUrl = hooksUrl;
        this.issueEventsUrl = issueEventsUrl;
        this.eventsUrl = eventsUrl;
        this.assigneesUrl = assigneesUrl;
        this.branchesUrl = branchesUrl;
        this.tagsUrl = tagsUrl;
        this.blobsUrl = blobsUrl;
        this.gitTagsUrl = gitTagsUrl;
        this.gitRefsUrl = gitRefsUrl;
        this.treesUrl = treesUrl;
        this.statusesUrl = statusesUrl;
        this.languagesUrl = languagesUrl;
        this.stargazersUrl = stargazersUrl;
        this.contributorsUrl = contributorsUrl;
        this.subscribersUrl = subscribersUrl;
        this.subscriptionUrl = subscriptionUrl;
        this.commitsUrl = commitsUrl;
        this.gitCommitsUrl = gitCommitsUrl;
        this.commentsUrl = commentsUrl;
        this.issueCommentUrl = issueCommentUrl;
        this.contentsUrl = contentsUrl;
        this.compareUrl = compareUrl;
        this.mergesUrl = mergesUrl;
        this.archiveUrl = archiveUrl;
        this.downloadsUrl = downloadsUrl;
        this.issuesUrl = issuesUrl;
        this.pullsUrl = pullsUrl;
        this.milestonesUrl = milestonesUrl;
        this.notificationsUrl = notificationsUrl;
        this.labelsUrl = labelsUrl;
        this.releasesUrl = releasesUrl;
        this.deploymentsUrl = deploymentsUrl;
        this.gitUrl = gitUrl;
        this.sshUrl = sshUrl;
        this.cloneUrl = cloneUrl;
        this.svnUrl = svnUrl;
        this.forks = forks;
        this.openIssues = openIssues;
        this.watchers = watchers;
        this.topics = topics;
        this.mirrorUrl = mirrorUrl;
        this.hasIssues = hasIssues;
        this.hasProjects = hasProjects;
        this.hasPages = hasPages;
        this.hasWiki = hasWiki;
        this.hasDownloads = hasDownloads;
        this.hasDiscussions = hasDiscussions;
        this.archived = archived;
        this.disabled = disabled;
        this.visibility = visibility;
        this.license = license;
        this.permissions = permissions;
        this.textMatches = textMatches;
        this.tempCloneToken = tempCloneToken;
        this.allowMergeCommit = allowMergeCommit;
        this.allowSquashMerge = allowSquashMerge;
        this.allowRebaseMerge = allowRebaseMerge;
        this.allowAutoMerge = allowAutoMerge;
        this.deleteBranchOnMerge = deleteBranchOnMerge;
        this.allowForking = allowForking;
        this.isTemplate = isTemplate;
        this.webCommitSignoffRequired = webCommitSignoffRequired;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for FullName.
     * @return Returns the String
     */
    @JsonGetter("full_name")
    public String getFullName() {
        return fullName;
    }

    /**
     * Setter for FullName.
     * @param fullName Value for String
     */
    @JsonSetter("full_name")
    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    /**
     * Getter for Owner.
     * @return Returns the Object
     */
    @JsonGetter("owner")
    public Object getOwner() {
        return owner;
    }

    /**
     * Setter for Owner.
     * @param owner Value for Object
     */
    @JsonSetter("owner")
    public void setOwner(Object owner) {
        this.owner = owner;
    }

    /**
     * Getter for Private.
     * @return Returns the boolean
     */
    @JsonGetter("private")
    public boolean getPrivate() {
        return mPrivate;
    }

    /**
     * Setter for Private.
     * @param mPrivate Value for boolean
     */
    @JsonSetter("private")
    public void setPrivate(boolean mPrivate) {
        this.mPrivate = mPrivate;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Fork.
     * @return Returns the boolean
     */
    @JsonGetter("fork")
    public boolean getFork() {
        return fork;
    }

    /**
     * Setter for Fork.
     * @param fork Value for boolean
     */
    @JsonSetter("fork")
    public void setFork(boolean fork) {
        this.fork = fork;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for PushedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("pushed_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getPushedAt() {
        return pushedAt;
    }

    /**
     * Setter for PushedAt.
     * @param pushedAt Value for LocalDateTime
     */
    @JsonSetter("pushed_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setPushedAt(LocalDateTime pushedAt) {
        this.pushedAt = pushedAt;
    }

    /**
     * Getter for Homepage.
     * @return Returns the String
     */
    @JsonGetter("homepage")
    public String getHomepage() {
        return homepage;
    }

    /**
     * Setter for Homepage.
     * @param homepage Value for String
     */
    @JsonSetter("homepage")
    public void setHomepage(String homepage) {
        this.homepage = homepage;
    }

    /**
     * Getter for Size.
     * @return Returns the int
     */
    @JsonGetter("size")
    public int getSize() {
        return size;
    }

    /**
     * Setter for Size.
     * @param size Value for int
     */
    @JsonSetter("size")
    public void setSize(int size) {
        this.size = size;
    }

    /**
     * Getter for StargazersCount.
     * @return Returns the int
     */
    @JsonGetter("stargazers_count")
    public int getStargazersCount() {
        return stargazersCount;
    }

    /**
     * Setter for StargazersCount.
     * @param stargazersCount Value for int
     */
    @JsonSetter("stargazers_count")
    public void setStargazersCount(int stargazersCount) {
        this.stargazersCount = stargazersCount;
    }

    /**
     * Getter for WatchersCount.
     * @return Returns the int
     */
    @JsonGetter("watchers_count")
    public int getWatchersCount() {
        return watchersCount;
    }

    /**
     * Setter for WatchersCount.
     * @param watchersCount Value for int
     */
    @JsonSetter("watchers_count")
    public void setWatchersCount(int watchersCount) {
        this.watchersCount = watchersCount;
    }

    /**
     * Getter for Language.
     * @return Returns the String
     */
    @JsonGetter("language")
    public String getLanguage() {
        return language;
    }

    /**
     * Setter for Language.
     * @param language Value for String
     */
    @JsonSetter("language")
    public void setLanguage(String language) {
        this.language = language;
    }

    /**
     * Getter for ForksCount.
     * @return Returns the int
     */
    @JsonGetter("forks_count")
    public int getForksCount() {
        return forksCount;
    }

    /**
     * Setter for ForksCount.
     * @param forksCount Value for int
     */
    @JsonSetter("forks_count")
    public void setForksCount(int forksCount) {
        this.forksCount = forksCount;
    }

    /**
     * Getter for OpenIssuesCount.
     * @return Returns the int
     */
    @JsonGetter("open_issues_count")
    public int getOpenIssuesCount() {
        return openIssuesCount;
    }

    /**
     * Setter for OpenIssuesCount.
     * @param openIssuesCount Value for int
     */
    @JsonSetter("open_issues_count")
    public void setOpenIssuesCount(int openIssuesCount) {
        this.openIssuesCount = openIssuesCount;
    }

    /**
     * Getter for MasterBranch.
     * @return Returns the String
     */
    @JsonGetter("master_branch")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMasterBranch() {
        return masterBranch;
    }

    /**
     * Setter for MasterBranch.
     * @param masterBranch Value for String
     */
    @JsonSetter("master_branch")
    public void setMasterBranch(String masterBranch) {
        this.masterBranch = masterBranch;
    }

    /**
     * Getter for DefaultBranch.
     * @return Returns the String
     */
    @JsonGetter("default_branch")
    public String getDefaultBranch() {
        return defaultBranch;
    }

    /**
     * Setter for DefaultBranch.
     * @param defaultBranch Value for String
     */
    @JsonSetter("default_branch")
    public void setDefaultBranch(String defaultBranch) {
        this.defaultBranch = defaultBranch;
    }

    /**
     * Getter for Score.
     * @return Returns the double
     */
    @JsonGetter("score")
    public double getScore() {
        return score;
    }

    /**
     * Setter for Score.
     * @param score Value for double
     */
    @JsonSetter("score")
    public void setScore(double score) {
        this.score = score;
    }

    /**
     * Getter for ForksUrl.
     * @return Returns the String
     */
    @JsonGetter("forks_url")
    public String getForksUrl() {
        return forksUrl;
    }

    /**
     * Setter for ForksUrl.
     * @param forksUrl Value for String
     */
    @JsonSetter("forks_url")
    public void setForksUrl(String forksUrl) {
        this.forksUrl = forksUrl;
    }

    /**
     * Getter for KeysUrl.
     * @return Returns the String
     */
    @JsonGetter("keys_url")
    public String getKeysUrl() {
        return keysUrl;
    }

    /**
     * Setter for KeysUrl.
     * @param keysUrl Value for String
     */
    @JsonSetter("keys_url")
    public void setKeysUrl(String keysUrl) {
        this.keysUrl = keysUrl;
    }

    /**
     * Getter for CollaboratorsUrl.
     * @return Returns the String
     */
    @JsonGetter("collaborators_url")
    public String getCollaboratorsUrl() {
        return collaboratorsUrl;
    }

    /**
     * Setter for CollaboratorsUrl.
     * @param collaboratorsUrl Value for String
     */
    @JsonSetter("collaborators_url")
    public void setCollaboratorsUrl(String collaboratorsUrl) {
        this.collaboratorsUrl = collaboratorsUrl;
    }

    /**
     * Getter for TeamsUrl.
     * @return Returns the String
     */
    @JsonGetter("teams_url")
    public String getTeamsUrl() {
        return teamsUrl;
    }

    /**
     * Setter for TeamsUrl.
     * @param teamsUrl Value for String
     */
    @JsonSetter("teams_url")
    public void setTeamsUrl(String teamsUrl) {
        this.teamsUrl = teamsUrl;
    }

    /**
     * Getter for HooksUrl.
     * @return Returns the String
     */
    @JsonGetter("hooks_url")
    public String getHooksUrl() {
        return hooksUrl;
    }

    /**
     * Setter for HooksUrl.
     * @param hooksUrl Value for String
     */
    @JsonSetter("hooks_url")
    public void setHooksUrl(String hooksUrl) {
        this.hooksUrl = hooksUrl;
    }

    /**
     * Getter for IssueEventsUrl.
     * @return Returns the String
     */
    @JsonGetter("issue_events_url")
    public String getIssueEventsUrl() {
        return issueEventsUrl;
    }

    /**
     * Setter for IssueEventsUrl.
     * @param issueEventsUrl Value for String
     */
    @JsonSetter("issue_events_url")
    public void setIssueEventsUrl(String issueEventsUrl) {
        this.issueEventsUrl = issueEventsUrl;
    }

    /**
     * Getter for EventsUrl.
     * @return Returns the String
     */
    @JsonGetter("events_url")
    public String getEventsUrl() {
        return eventsUrl;
    }

    /**
     * Setter for EventsUrl.
     * @param eventsUrl Value for String
     */
    @JsonSetter("events_url")
    public void setEventsUrl(String eventsUrl) {
        this.eventsUrl = eventsUrl;
    }

    /**
     * Getter for AssigneesUrl.
     * @return Returns the String
     */
    @JsonGetter("assignees_url")
    public String getAssigneesUrl() {
        return assigneesUrl;
    }

    /**
     * Setter for AssigneesUrl.
     * @param assigneesUrl Value for String
     */
    @JsonSetter("assignees_url")
    public void setAssigneesUrl(String assigneesUrl) {
        this.assigneesUrl = assigneesUrl;
    }

    /**
     * Getter for BranchesUrl.
     * @return Returns the String
     */
    @JsonGetter("branches_url")
    public String getBranchesUrl() {
        return branchesUrl;
    }

    /**
     * Setter for BranchesUrl.
     * @param branchesUrl Value for String
     */
    @JsonSetter("branches_url")
    public void setBranchesUrl(String branchesUrl) {
        this.branchesUrl = branchesUrl;
    }

    /**
     * Getter for TagsUrl.
     * @return Returns the String
     */
    @JsonGetter("tags_url")
    public String getTagsUrl() {
        return tagsUrl;
    }

    /**
     * Setter for TagsUrl.
     * @param tagsUrl Value for String
     */
    @JsonSetter("tags_url")
    public void setTagsUrl(String tagsUrl) {
        this.tagsUrl = tagsUrl;
    }

    /**
     * Getter for BlobsUrl.
     * @return Returns the String
     */
    @JsonGetter("blobs_url")
    public String getBlobsUrl() {
        return blobsUrl;
    }

    /**
     * Setter for BlobsUrl.
     * @param blobsUrl Value for String
     */
    @JsonSetter("blobs_url")
    public void setBlobsUrl(String blobsUrl) {
        this.blobsUrl = blobsUrl;
    }

    /**
     * Getter for GitTagsUrl.
     * @return Returns the String
     */
    @JsonGetter("git_tags_url")
    public String getGitTagsUrl() {
        return gitTagsUrl;
    }

    /**
     * Setter for GitTagsUrl.
     * @param gitTagsUrl Value for String
     */
    @JsonSetter("git_tags_url")
    public void setGitTagsUrl(String gitTagsUrl) {
        this.gitTagsUrl = gitTagsUrl;
    }

    /**
     * Getter for GitRefsUrl.
     * @return Returns the String
     */
    @JsonGetter("git_refs_url")
    public String getGitRefsUrl() {
        return gitRefsUrl;
    }

    /**
     * Setter for GitRefsUrl.
     * @param gitRefsUrl Value for String
     */
    @JsonSetter("git_refs_url")
    public void setGitRefsUrl(String gitRefsUrl) {
        this.gitRefsUrl = gitRefsUrl;
    }

    /**
     * Getter for TreesUrl.
     * @return Returns the String
     */
    @JsonGetter("trees_url")
    public String getTreesUrl() {
        return treesUrl;
    }

    /**
     * Setter for TreesUrl.
     * @param treesUrl Value for String
     */
    @JsonSetter("trees_url")
    public void setTreesUrl(String treesUrl) {
        this.treesUrl = treesUrl;
    }

    /**
     * Getter for StatusesUrl.
     * @return Returns the String
     */
    @JsonGetter("statuses_url")
    public String getStatusesUrl() {
        return statusesUrl;
    }

    /**
     * Setter for StatusesUrl.
     * @param statusesUrl Value for String
     */
    @JsonSetter("statuses_url")
    public void setStatusesUrl(String statusesUrl) {
        this.statusesUrl = statusesUrl;
    }

    /**
     * Getter for LanguagesUrl.
     * @return Returns the String
     */
    @JsonGetter("languages_url")
    public String getLanguagesUrl() {
        return languagesUrl;
    }

    /**
     * Setter for LanguagesUrl.
     * @param languagesUrl Value for String
     */
    @JsonSetter("languages_url")
    public void setLanguagesUrl(String languagesUrl) {
        this.languagesUrl = languagesUrl;
    }

    /**
     * Getter for StargazersUrl.
     * @return Returns the String
     */
    @JsonGetter("stargazers_url")
    public String getStargazersUrl() {
        return stargazersUrl;
    }

    /**
     * Setter for StargazersUrl.
     * @param stargazersUrl Value for String
     */
    @JsonSetter("stargazers_url")
    public void setStargazersUrl(String stargazersUrl) {
        this.stargazersUrl = stargazersUrl;
    }

    /**
     * Getter for ContributorsUrl.
     * @return Returns the String
     */
    @JsonGetter("contributors_url")
    public String getContributorsUrl() {
        return contributorsUrl;
    }

    /**
     * Setter for ContributorsUrl.
     * @param contributorsUrl Value for String
     */
    @JsonSetter("contributors_url")
    public void setContributorsUrl(String contributorsUrl) {
        this.contributorsUrl = contributorsUrl;
    }

    /**
     * Getter for SubscribersUrl.
     * @return Returns the String
     */
    @JsonGetter("subscribers_url")
    public String getSubscribersUrl() {
        return subscribersUrl;
    }

    /**
     * Setter for SubscribersUrl.
     * @param subscribersUrl Value for String
     */
    @JsonSetter("subscribers_url")
    public void setSubscribersUrl(String subscribersUrl) {
        this.subscribersUrl = subscribersUrl;
    }

    /**
     * Getter for SubscriptionUrl.
     * @return Returns the String
     */
    @JsonGetter("subscription_url")
    public String getSubscriptionUrl() {
        return subscriptionUrl;
    }

    /**
     * Setter for SubscriptionUrl.
     * @param subscriptionUrl Value for String
     */
    @JsonSetter("subscription_url")
    public void setSubscriptionUrl(String subscriptionUrl) {
        this.subscriptionUrl = subscriptionUrl;
    }

    /**
     * Getter for CommitsUrl.
     * @return Returns the String
     */
    @JsonGetter("commits_url")
    public String getCommitsUrl() {
        return commitsUrl;
    }

    /**
     * Setter for CommitsUrl.
     * @param commitsUrl Value for String
     */
    @JsonSetter("commits_url")
    public void setCommitsUrl(String commitsUrl) {
        this.commitsUrl = commitsUrl;
    }

    /**
     * Getter for GitCommitsUrl.
     * @return Returns the String
     */
    @JsonGetter("git_commits_url")
    public String getGitCommitsUrl() {
        return gitCommitsUrl;
    }

    /**
     * Setter for GitCommitsUrl.
     * @param gitCommitsUrl Value for String
     */
    @JsonSetter("git_commits_url")
    public void setGitCommitsUrl(String gitCommitsUrl) {
        this.gitCommitsUrl = gitCommitsUrl;
    }

    /**
     * Getter for CommentsUrl.
     * @return Returns the String
     */
    @JsonGetter("comments_url")
    public String getCommentsUrl() {
        return commentsUrl;
    }

    /**
     * Setter for CommentsUrl.
     * @param commentsUrl Value for String
     */
    @JsonSetter("comments_url")
    public void setCommentsUrl(String commentsUrl) {
        this.commentsUrl = commentsUrl;
    }

    /**
     * Getter for IssueCommentUrl.
     * @return Returns the String
     */
    @JsonGetter("issue_comment_url")
    public String getIssueCommentUrl() {
        return issueCommentUrl;
    }

    /**
     * Setter for IssueCommentUrl.
     * @param issueCommentUrl Value for String
     */
    @JsonSetter("issue_comment_url")
    public void setIssueCommentUrl(String issueCommentUrl) {
        this.issueCommentUrl = issueCommentUrl;
    }

    /**
     * Getter for ContentsUrl.
     * @return Returns the String
     */
    @JsonGetter("contents_url")
    public String getContentsUrl() {
        return contentsUrl;
    }

    /**
     * Setter for ContentsUrl.
     * @param contentsUrl Value for String
     */
    @JsonSetter("contents_url")
    public void setContentsUrl(String contentsUrl) {
        this.contentsUrl = contentsUrl;
    }

    /**
     * Getter for CompareUrl.
     * @return Returns the String
     */
    @JsonGetter("compare_url")
    public String getCompareUrl() {
        return compareUrl;
    }

    /**
     * Setter for CompareUrl.
     * @param compareUrl Value for String
     */
    @JsonSetter("compare_url")
    public void setCompareUrl(String compareUrl) {
        this.compareUrl = compareUrl;
    }

    /**
     * Getter for MergesUrl.
     * @return Returns the String
     */
    @JsonGetter("merges_url")
    public String getMergesUrl() {
        return mergesUrl;
    }

    /**
     * Setter for MergesUrl.
     * @param mergesUrl Value for String
     */
    @JsonSetter("merges_url")
    public void setMergesUrl(String mergesUrl) {
        this.mergesUrl = mergesUrl;
    }

    /**
     * Getter for ArchiveUrl.
     * @return Returns the String
     */
    @JsonGetter("archive_url")
    public String getArchiveUrl() {
        return archiveUrl;
    }

    /**
     * Setter for ArchiveUrl.
     * @param archiveUrl Value for String
     */
    @JsonSetter("archive_url")
    public void setArchiveUrl(String archiveUrl) {
        this.archiveUrl = archiveUrl;
    }

    /**
     * Getter for DownloadsUrl.
     * @return Returns the String
     */
    @JsonGetter("downloads_url")
    public String getDownloadsUrl() {
        return downloadsUrl;
    }

    /**
     * Setter for DownloadsUrl.
     * @param downloadsUrl Value for String
     */
    @JsonSetter("downloads_url")
    public void setDownloadsUrl(String downloadsUrl) {
        this.downloadsUrl = downloadsUrl;
    }

    /**
     * Getter for IssuesUrl.
     * @return Returns the String
     */
    @JsonGetter("issues_url")
    public String getIssuesUrl() {
        return issuesUrl;
    }

    /**
     * Setter for IssuesUrl.
     * @param issuesUrl Value for String
     */
    @JsonSetter("issues_url")
    public void setIssuesUrl(String issuesUrl) {
        this.issuesUrl = issuesUrl;
    }

    /**
     * Getter for PullsUrl.
     * @return Returns the String
     */
    @JsonGetter("pulls_url")
    public String getPullsUrl() {
        return pullsUrl;
    }

    /**
     * Setter for PullsUrl.
     * @param pullsUrl Value for String
     */
    @JsonSetter("pulls_url")
    public void setPullsUrl(String pullsUrl) {
        this.pullsUrl = pullsUrl;
    }

    /**
     * Getter for MilestonesUrl.
     * @return Returns the String
     */
    @JsonGetter("milestones_url")
    public String getMilestonesUrl() {
        return milestonesUrl;
    }

    /**
     * Setter for MilestonesUrl.
     * @param milestonesUrl Value for String
     */
    @JsonSetter("milestones_url")
    public void setMilestonesUrl(String milestonesUrl) {
        this.milestonesUrl = milestonesUrl;
    }

    /**
     * Getter for NotificationsUrl.
     * @return Returns the String
     */
    @JsonGetter("notifications_url")
    public String getNotificationsUrl() {
        return notificationsUrl;
    }

    /**
     * Setter for NotificationsUrl.
     * @param notificationsUrl Value for String
     */
    @JsonSetter("notifications_url")
    public void setNotificationsUrl(String notificationsUrl) {
        this.notificationsUrl = notificationsUrl;
    }

    /**
     * Getter for LabelsUrl.
     * @return Returns the String
     */
    @JsonGetter("labels_url")
    public String getLabelsUrl() {
        return labelsUrl;
    }

    /**
     * Setter for LabelsUrl.
     * @param labelsUrl Value for String
     */
    @JsonSetter("labels_url")
    public void setLabelsUrl(String labelsUrl) {
        this.labelsUrl = labelsUrl;
    }

    /**
     * Getter for ReleasesUrl.
     * @return Returns the String
     */
    @JsonGetter("releases_url")
    public String getReleasesUrl() {
        return releasesUrl;
    }

    /**
     * Setter for ReleasesUrl.
     * @param releasesUrl Value for String
     */
    @JsonSetter("releases_url")
    public void setReleasesUrl(String releasesUrl) {
        this.releasesUrl = releasesUrl;
    }

    /**
     * Getter for DeploymentsUrl.
     * @return Returns the String
     */
    @JsonGetter("deployments_url")
    public String getDeploymentsUrl() {
        return deploymentsUrl;
    }

    /**
     * Setter for DeploymentsUrl.
     * @param deploymentsUrl Value for String
     */
    @JsonSetter("deployments_url")
    public void setDeploymentsUrl(String deploymentsUrl) {
        this.deploymentsUrl = deploymentsUrl;
    }

    /**
     * Getter for GitUrl.
     * @return Returns the String
     */
    @JsonGetter("git_url")
    public String getGitUrl() {
        return gitUrl;
    }

    /**
     * Setter for GitUrl.
     * @param gitUrl Value for String
     */
    @JsonSetter("git_url")
    public void setGitUrl(String gitUrl) {
        this.gitUrl = gitUrl;
    }

    /**
     * Getter for SshUrl.
     * @return Returns the String
     */
    @JsonGetter("ssh_url")
    public String getSshUrl() {
        return sshUrl;
    }

    /**
     * Setter for SshUrl.
     * @param sshUrl Value for String
     */
    @JsonSetter("ssh_url")
    public void setSshUrl(String sshUrl) {
        this.sshUrl = sshUrl;
    }

    /**
     * Getter for CloneUrl.
     * @return Returns the String
     */
    @JsonGetter("clone_url")
    public String getCloneUrl() {
        return cloneUrl;
    }

    /**
     * Setter for CloneUrl.
     * @param cloneUrl Value for String
     */
    @JsonSetter("clone_url")
    public void setCloneUrl(String cloneUrl) {
        this.cloneUrl = cloneUrl;
    }

    /**
     * Getter for SvnUrl.
     * @return Returns the String
     */
    @JsonGetter("svn_url")
    public String getSvnUrl() {
        return svnUrl;
    }

    /**
     * Setter for SvnUrl.
     * @param svnUrl Value for String
     */
    @JsonSetter("svn_url")
    public void setSvnUrl(String svnUrl) {
        this.svnUrl = svnUrl;
    }

    /**
     * Getter for Forks.
     * @return Returns the int
     */
    @JsonGetter("forks")
    public int getForks() {
        return forks;
    }

    /**
     * Setter for Forks.
     * @param forks Value for int
     */
    @JsonSetter("forks")
    public void setForks(int forks) {
        this.forks = forks;
    }

    /**
     * Getter for OpenIssues.
     * @return Returns the int
     */
    @JsonGetter("open_issues")
    public int getOpenIssues() {
        return openIssues;
    }

    /**
     * Setter for OpenIssues.
     * @param openIssues Value for int
     */
    @JsonSetter("open_issues")
    public void setOpenIssues(int openIssues) {
        this.openIssues = openIssues;
    }

    /**
     * Getter for Watchers.
     * @return Returns the int
     */
    @JsonGetter("watchers")
    public int getWatchers() {
        return watchers;
    }

    /**
     * Setter for Watchers.
     * @param watchers Value for int
     */
    @JsonSetter("watchers")
    public void setWatchers(int watchers) {
        this.watchers = watchers;
    }

    /**
     * Getter for Topics.
     * @return Returns the List of String
     */
    @JsonGetter("topics")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getTopics() {
        return topics;
    }

    /**
     * Setter for Topics.
     * @param topics Value for List of String
     */
    @JsonSetter("topics")
    public void setTopics(List<String> topics) {
        this.topics = topics;
    }

    /**
     * Getter for MirrorUrl.
     * @return Returns the String
     */
    @JsonGetter("mirror_url")
    public String getMirrorUrl() {
        return mirrorUrl;
    }

    /**
     * Setter for MirrorUrl.
     * @param mirrorUrl Value for String
     */
    @JsonSetter("mirror_url")
    public void setMirrorUrl(String mirrorUrl) {
        this.mirrorUrl = mirrorUrl;
    }

    /**
     * Getter for HasIssues.
     * @return Returns the boolean
     */
    @JsonGetter("has_issues")
    public boolean getHasIssues() {
        return hasIssues;
    }

    /**
     * Setter for HasIssues.
     * @param hasIssues Value for boolean
     */
    @JsonSetter("has_issues")
    public void setHasIssues(boolean hasIssues) {
        this.hasIssues = hasIssues;
    }

    /**
     * Getter for HasProjects.
     * @return Returns the boolean
     */
    @JsonGetter("has_projects")
    public boolean getHasProjects() {
        return hasProjects;
    }

    /**
     * Setter for HasProjects.
     * @param hasProjects Value for boolean
     */
    @JsonSetter("has_projects")
    public void setHasProjects(boolean hasProjects) {
        this.hasProjects = hasProjects;
    }

    /**
     * Getter for HasPages.
     * @return Returns the boolean
     */
    @JsonGetter("has_pages")
    public boolean getHasPages() {
        return hasPages;
    }

    /**
     * Setter for HasPages.
     * @param hasPages Value for boolean
     */
    @JsonSetter("has_pages")
    public void setHasPages(boolean hasPages) {
        this.hasPages = hasPages;
    }

    /**
     * Getter for HasWiki.
     * @return Returns the boolean
     */
    @JsonGetter("has_wiki")
    public boolean getHasWiki() {
        return hasWiki;
    }

    /**
     * Setter for HasWiki.
     * @param hasWiki Value for boolean
     */
    @JsonSetter("has_wiki")
    public void setHasWiki(boolean hasWiki) {
        this.hasWiki = hasWiki;
    }

    /**
     * Getter for HasDownloads.
     * @return Returns the boolean
     */
    @JsonGetter("has_downloads")
    public boolean getHasDownloads() {
        return hasDownloads;
    }

    /**
     * Setter for HasDownloads.
     * @param hasDownloads Value for boolean
     */
    @JsonSetter("has_downloads")
    public void setHasDownloads(boolean hasDownloads) {
        this.hasDownloads = hasDownloads;
    }

    /**
     * Getter for HasDiscussions.
     * @return Returns the Boolean
     */
    @JsonGetter("has_discussions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasDiscussions() {
        return hasDiscussions;
    }

    /**
     * Setter for HasDiscussions.
     * @param hasDiscussions Value for Boolean
     */
    @JsonSetter("has_discussions")
    public void setHasDiscussions(Boolean hasDiscussions) {
        this.hasDiscussions = hasDiscussions;
    }

    /**
     * Getter for Archived.
     * @return Returns the boolean
     */
    @JsonGetter("archived")
    public boolean getArchived() {
        return archived;
    }

    /**
     * Setter for Archived.
     * @param archived Value for boolean
     */
    @JsonSetter("archived")
    public void setArchived(boolean archived) {
        this.archived = archived;
    }

    /**
     * Getter for Disabled.
     * Returns whether or not this repository disabled.
     * @return Returns the boolean
     */
    @JsonGetter("disabled")
    public boolean getDisabled() {
        return disabled;
    }

    /**
     * Setter for Disabled.
     * Returns whether or not this repository disabled.
     * @param disabled Value for boolean
     */
    @JsonSetter("disabled")
    public void setDisabled(boolean disabled) {
        this.disabled = disabled;
    }

    /**
     * Getter for Visibility.
     * The repository visibility: public, private, or internal.
     * @return Returns the String
     */
    @JsonGetter("visibility")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getVisibility() {
        return visibility;
    }

    /**
     * Setter for Visibility.
     * The repository visibility: public, private, or internal.
     * @param visibility Value for String
     */
    @JsonSetter("visibility")
    public void setVisibility(String visibility) {
        this.visibility = visibility;
    }

    /**
     * Getter for License.
     * @return Returns the Object
     */
    @JsonGetter("license")
    public Object getLicense() {
        return license;
    }

    /**
     * Setter for License.
     * @param license Value for Object
     */
    @JsonSetter("license")
    public void setLicense(Object license) {
        this.license = license;
    }

    /**
     * Getter for Permissions.
     * @return Returns the Permissions1
     */
    @JsonGetter("permissions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Permissions1 getPermissions() {
        return permissions;
    }

    /**
     * Setter for Permissions.
     * @param permissions Value for Permissions1
     */
    @JsonSetter("permissions")
    public void setPermissions(Permissions1 permissions) {
        this.permissions = permissions;
    }

    /**
     * Getter for TextMatches.
     * @return Returns the List of SearchResultTextMatch
     */
    @JsonGetter("text_matches")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<SearchResultTextMatch> getTextMatches() {
        return textMatches;
    }

    /**
     * Setter for TextMatches.
     * @param textMatches Value for List of SearchResultTextMatch
     */
    @JsonSetter("text_matches")
    public void setTextMatches(List<SearchResultTextMatch> textMatches) {
        this.textMatches = textMatches;
    }

    /**
     * Getter for TempCloneToken.
     * @return Returns the String
     */
    @JsonGetter("temp_clone_token")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTempCloneToken() {
        return tempCloneToken;
    }

    /**
     * Setter for TempCloneToken.
     * @param tempCloneToken Value for String
     */
    @JsonSetter("temp_clone_token")
    public void setTempCloneToken(String tempCloneToken) {
        this.tempCloneToken = tempCloneToken;
    }

    /**
     * Getter for AllowMergeCommit.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_merge_commit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowMergeCommit() {
        return allowMergeCommit;
    }

    /**
     * Setter for AllowMergeCommit.
     * @param allowMergeCommit Value for Boolean
     */
    @JsonSetter("allow_merge_commit")
    public void setAllowMergeCommit(Boolean allowMergeCommit) {
        this.allowMergeCommit = allowMergeCommit;
    }

    /**
     * Getter for AllowSquashMerge.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_squash_merge")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowSquashMerge() {
        return allowSquashMerge;
    }

    /**
     * Setter for AllowSquashMerge.
     * @param allowSquashMerge Value for Boolean
     */
    @JsonSetter("allow_squash_merge")
    public void setAllowSquashMerge(Boolean allowSquashMerge) {
        this.allowSquashMerge = allowSquashMerge;
    }

    /**
     * Getter for AllowRebaseMerge.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_rebase_merge")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowRebaseMerge() {
        return allowRebaseMerge;
    }

    /**
     * Setter for AllowRebaseMerge.
     * @param allowRebaseMerge Value for Boolean
     */
    @JsonSetter("allow_rebase_merge")
    public void setAllowRebaseMerge(Boolean allowRebaseMerge) {
        this.allowRebaseMerge = allowRebaseMerge;
    }

    /**
     * Getter for AllowAutoMerge.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_auto_merge")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowAutoMerge() {
        return allowAutoMerge;
    }

    /**
     * Setter for AllowAutoMerge.
     * @param allowAutoMerge Value for Boolean
     */
    @JsonSetter("allow_auto_merge")
    public void setAllowAutoMerge(Boolean allowAutoMerge) {
        this.allowAutoMerge = allowAutoMerge;
    }

    /**
     * Getter for DeleteBranchOnMerge.
     * @return Returns the Boolean
     */
    @JsonGetter("delete_branch_on_merge")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDeleteBranchOnMerge() {
        return deleteBranchOnMerge;
    }

    /**
     * Setter for DeleteBranchOnMerge.
     * @param deleteBranchOnMerge Value for Boolean
     */
    @JsonSetter("delete_branch_on_merge")
    public void setDeleteBranchOnMerge(Boolean deleteBranchOnMerge) {
        this.deleteBranchOnMerge = deleteBranchOnMerge;
    }

    /**
     * Getter for AllowForking.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_forking")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowForking() {
        return allowForking;
    }

    /**
     * Setter for AllowForking.
     * @param allowForking Value for Boolean
     */
    @JsonSetter("allow_forking")
    public void setAllowForking(Boolean allowForking) {
        this.allowForking = allowForking;
    }

    /**
     * Getter for IsTemplate.
     * @return Returns the Boolean
     */
    @JsonGetter("is_template")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsTemplate() {
        return isTemplate;
    }

    /**
     * Setter for IsTemplate.
     * @param isTemplate Value for Boolean
     */
    @JsonSetter("is_template")
    public void setIsTemplate(Boolean isTemplate) {
        this.isTemplate = isTemplate;
    }

    /**
     * Getter for WebCommitSignoffRequired.
     * @return Returns the Boolean
     */
    @JsonGetter("web_commit_signoff_required")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getWebCommitSignoffRequired() {
        return webCommitSignoffRequired;
    }

    /**
     * Setter for WebCommitSignoffRequired.
     * @param webCommitSignoffRequired Value for Boolean
     */
    @JsonSetter("web_commit_signoff_required")
    public void setWebCommitSignoffRequired(Boolean webCommitSignoffRequired) {
        this.webCommitSignoffRequired = webCommitSignoffRequired;
    }

    /**
     * Converts this RepoSearchResultItem into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "RepoSearchResultItem [" + "id=" + id + ", nodeId=" + nodeId + ", name=" + name
                + ", fullName=" + fullName + ", owner=" + owner + ", mPrivate=" + mPrivate
                + ", htmlUrl=" + htmlUrl + ", description=" + description + ", fork=" + fork
                + ", url=" + url + ", createdAt=" + createdAt + ", updatedAt=" + updatedAt
                + ", pushedAt=" + pushedAt + ", homepage=" + homepage + ", size=" + size
                + ", stargazersCount=" + stargazersCount + ", watchersCount=" + watchersCount
                + ", language=" + language + ", forksCount=" + forksCount + ", openIssuesCount="
                + openIssuesCount + ", defaultBranch=" + defaultBranch + ", score=" + score
                + ", forksUrl=" + forksUrl + ", keysUrl=" + keysUrl + ", collaboratorsUrl="
                + collaboratorsUrl + ", teamsUrl=" + teamsUrl + ", hooksUrl=" + hooksUrl
                + ", issueEventsUrl=" + issueEventsUrl + ", eventsUrl=" + eventsUrl
                + ", assigneesUrl=" + assigneesUrl + ", branchesUrl=" + branchesUrl + ", tagsUrl="
                + tagsUrl + ", blobsUrl=" + blobsUrl + ", gitTagsUrl=" + gitTagsUrl
                + ", gitRefsUrl=" + gitRefsUrl + ", treesUrl=" + treesUrl + ", statusesUrl="
                + statusesUrl + ", languagesUrl=" + languagesUrl + ", stargazersUrl="
                + stargazersUrl + ", contributorsUrl=" + contributorsUrl + ", subscribersUrl="
                + subscribersUrl + ", subscriptionUrl=" + subscriptionUrl + ", commitsUrl="
                + commitsUrl + ", gitCommitsUrl=" + gitCommitsUrl + ", commentsUrl=" + commentsUrl
                + ", issueCommentUrl=" + issueCommentUrl + ", contentsUrl=" + contentsUrl
                + ", compareUrl=" + compareUrl + ", mergesUrl=" + mergesUrl + ", archiveUrl="
                + archiveUrl + ", downloadsUrl=" + downloadsUrl + ", issuesUrl=" + issuesUrl
                + ", pullsUrl=" + pullsUrl + ", milestonesUrl=" + milestonesUrl
                + ", notificationsUrl=" + notificationsUrl + ", labelsUrl=" + labelsUrl
                + ", releasesUrl=" + releasesUrl + ", deploymentsUrl=" + deploymentsUrl
                + ", gitUrl=" + gitUrl + ", sshUrl=" + sshUrl + ", cloneUrl=" + cloneUrl
                + ", svnUrl=" + svnUrl + ", forks=" + forks + ", openIssues=" + openIssues
                + ", watchers=" + watchers + ", mirrorUrl=" + mirrorUrl + ", hasIssues=" + hasIssues
                + ", hasProjects=" + hasProjects + ", hasPages=" + hasPages + ", hasWiki=" + hasWiki
                + ", hasDownloads=" + hasDownloads + ", archived=" + archived + ", disabled="
                + disabled + ", license=" + license + ", masterBranch=" + masterBranch + ", topics="
                + topics + ", hasDiscussions=" + hasDiscussions + ", visibility=" + visibility
                + ", permissions=" + permissions + ", textMatches=" + textMatches
                + ", tempCloneToken=" + tempCloneToken + ", allowMergeCommit=" + allowMergeCommit
                + ", allowSquashMerge=" + allowSquashMerge + ", allowRebaseMerge="
                + allowRebaseMerge + ", allowAutoMerge=" + allowAutoMerge + ", deleteBranchOnMerge="
                + deleteBranchOnMerge + ", allowForking=" + allowForking + ", isTemplate="
                + isTemplate + ", webCommitSignoffRequired=" + webCommitSignoffRequired + "]";
    }

    /**
     * Builds a new {@link RepoSearchResultItem.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link RepoSearchResultItem.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, nodeId, name, fullName, owner, mPrivate, htmlUrl,
                description, fork, url, createdAt, updatedAt, pushedAt, homepage, size,
                stargazersCount, watchersCount, language, forksCount, openIssuesCount,
                defaultBranch, score, forksUrl, keysUrl, collaboratorsUrl, teamsUrl, hooksUrl,
                issueEventsUrl, eventsUrl, assigneesUrl, branchesUrl, tagsUrl, blobsUrl, gitTagsUrl,
                gitRefsUrl, treesUrl, statusesUrl, languagesUrl, stargazersUrl, contributorsUrl,
                subscribersUrl, subscriptionUrl, commitsUrl, gitCommitsUrl, commentsUrl,
                issueCommentUrl, contentsUrl, compareUrl, mergesUrl, archiveUrl, downloadsUrl,
                issuesUrl, pullsUrl, milestonesUrl, notificationsUrl, labelsUrl, releasesUrl,
                deploymentsUrl, gitUrl, sshUrl, cloneUrl, svnUrl, forks, openIssues, watchers,
                mirrorUrl, hasIssues, hasProjects, hasPages, hasWiki, hasDownloads, archived,
                disabled, license)
                .masterBranch(getMasterBranch())
                .topics(getTopics())
                .hasDiscussions(getHasDiscussions())
                .visibility(getVisibility())
                .permissions(getPermissions())
                .textMatches(getTextMatches())
                .tempCloneToken(getTempCloneToken())
                .allowMergeCommit(getAllowMergeCommit())
                .allowSquashMerge(getAllowSquashMerge())
                .allowRebaseMerge(getAllowRebaseMerge())
                .allowAutoMerge(getAllowAutoMerge())
                .deleteBranchOnMerge(getDeleteBranchOnMerge())
                .allowForking(getAllowForking())
                .isTemplate(getIsTemplate())
                .webCommitSignoffRequired(getWebCommitSignoffRequired());
        return builder;
    }

    /**
     * Class to build instances of {@link RepoSearchResultItem}.
     */
    public static class Builder {
        private int id;
        private String nodeId;
        private String name;
        private String fullName;
        private Object owner;
        private boolean mPrivate;
        private String htmlUrl;
        private String description;
        private boolean fork;
        private String url;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private LocalDateTime pushedAt;
        private String homepage;
        private int size;
        private int stargazersCount;
        private int watchersCount;
        private String language;
        private int forksCount;
        private int openIssuesCount;
        private String defaultBranch;
        private double score;
        private String forksUrl;
        private String keysUrl;
        private String collaboratorsUrl;
        private String teamsUrl;
        private String hooksUrl;
        private String issueEventsUrl;
        private String eventsUrl;
        private String assigneesUrl;
        private String branchesUrl;
        private String tagsUrl;
        private String blobsUrl;
        private String gitTagsUrl;
        private String gitRefsUrl;
        private String treesUrl;
        private String statusesUrl;
        private String languagesUrl;
        private String stargazersUrl;
        private String contributorsUrl;
        private String subscribersUrl;
        private String subscriptionUrl;
        private String commitsUrl;
        private String gitCommitsUrl;
        private String commentsUrl;
        private String issueCommentUrl;
        private String contentsUrl;
        private String compareUrl;
        private String mergesUrl;
        private String archiveUrl;
        private String downloadsUrl;
        private String issuesUrl;
        private String pullsUrl;
        private String milestonesUrl;
        private String notificationsUrl;
        private String labelsUrl;
        private String releasesUrl;
        private String deploymentsUrl;
        private String gitUrl;
        private String sshUrl;
        private String cloneUrl;
        private String svnUrl;
        private int forks;
        private int openIssues;
        private int watchers;
        private String mirrorUrl;
        private boolean hasIssues;
        private boolean hasProjects;
        private boolean hasPages;
        private boolean hasWiki;
        private boolean hasDownloads;
        private boolean archived;
        private boolean disabled;
        private Object license;
        private String masterBranch;
        private List<String> topics;
        private Boolean hasDiscussions;
        private String visibility;
        private Permissions1 permissions;
        private List<SearchResultTextMatch> textMatches;
        private String tempCloneToken;
        private Boolean allowMergeCommit;
        private Boolean allowSquashMerge;
        private Boolean allowRebaseMerge;
        private Boolean allowAutoMerge;
        private Boolean deleteBranchOnMerge;
        private Boolean allowForking;
        private Boolean isTemplate;
        private Boolean webCommitSignoffRequired;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  name  String value for name.
         * @param  fullName  String value for fullName.
         * @param  owner  Object value for owner.
         * @param  mPrivate  boolean value for mPrivate.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  description  String value for description.
         * @param  fork  boolean value for fork.
         * @param  url  String value for url.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  pushedAt  LocalDateTime value for pushedAt.
         * @param  homepage  String value for homepage.
         * @param  size  int value for size.
         * @param  stargazersCount  int value for stargazersCount.
         * @param  watchersCount  int value for watchersCount.
         * @param  language  String value for language.
         * @param  forksCount  int value for forksCount.
         * @param  openIssuesCount  int value for openIssuesCount.
         * @param  defaultBranch  String value for defaultBranch.
         * @param  score  double value for score.
         * @param  forksUrl  String value for forksUrl.
         * @param  keysUrl  String value for keysUrl.
         * @param  collaboratorsUrl  String value for collaboratorsUrl.
         * @param  teamsUrl  String value for teamsUrl.
         * @param  hooksUrl  String value for hooksUrl.
         * @param  issueEventsUrl  String value for issueEventsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @param  assigneesUrl  String value for assigneesUrl.
         * @param  branchesUrl  String value for branchesUrl.
         * @param  tagsUrl  String value for tagsUrl.
         * @param  blobsUrl  String value for blobsUrl.
         * @param  gitTagsUrl  String value for gitTagsUrl.
         * @param  gitRefsUrl  String value for gitRefsUrl.
         * @param  treesUrl  String value for treesUrl.
         * @param  statusesUrl  String value for statusesUrl.
         * @param  languagesUrl  String value for languagesUrl.
         * @param  stargazersUrl  String value for stargazersUrl.
         * @param  contributorsUrl  String value for contributorsUrl.
         * @param  subscribersUrl  String value for subscribersUrl.
         * @param  subscriptionUrl  String value for subscriptionUrl.
         * @param  commitsUrl  String value for commitsUrl.
         * @param  gitCommitsUrl  String value for gitCommitsUrl.
         * @param  commentsUrl  String value for commentsUrl.
         * @param  issueCommentUrl  String value for issueCommentUrl.
         * @param  contentsUrl  String value for contentsUrl.
         * @param  compareUrl  String value for compareUrl.
         * @param  mergesUrl  String value for mergesUrl.
         * @param  archiveUrl  String value for archiveUrl.
         * @param  downloadsUrl  String value for downloadsUrl.
         * @param  issuesUrl  String value for issuesUrl.
         * @param  pullsUrl  String value for pullsUrl.
         * @param  milestonesUrl  String value for milestonesUrl.
         * @param  notificationsUrl  String value for notificationsUrl.
         * @param  labelsUrl  String value for labelsUrl.
         * @param  releasesUrl  String value for releasesUrl.
         * @param  deploymentsUrl  String value for deploymentsUrl.
         * @param  gitUrl  String value for gitUrl.
         * @param  sshUrl  String value for sshUrl.
         * @param  cloneUrl  String value for cloneUrl.
         * @param  svnUrl  String value for svnUrl.
         * @param  forks  int value for forks.
         * @param  openIssues  int value for openIssues.
         * @param  watchers  int value for watchers.
         * @param  mirrorUrl  String value for mirrorUrl.
         * @param  hasIssues  boolean value for hasIssues.
         * @param  hasProjects  boolean value for hasProjects.
         * @param  hasPages  boolean value for hasPages.
         * @param  hasWiki  boolean value for hasWiki.
         * @param  hasDownloads  boolean value for hasDownloads.
         * @param  archived  boolean value for archived.
         * @param  disabled  boolean value for disabled.
         * @param  license  Object value for license.
         */
        public Builder(int id, String nodeId, String name, String fullName, Object owner,
                boolean mPrivate, String htmlUrl, String description, boolean fork, String url,
                LocalDateTime createdAt, LocalDateTime updatedAt, LocalDateTime pushedAt,
                String homepage, int size, int stargazersCount, int watchersCount, String language,
                int forksCount, int openIssuesCount, String defaultBranch, double score,
                String forksUrl, String keysUrl, String collaboratorsUrl, String teamsUrl,
                String hooksUrl, String issueEventsUrl, String eventsUrl, String assigneesUrl,
                String branchesUrl, String tagsUrl, String blobsUrl, String gitTagsUrl,
                String gitRefsUrl, String treesUrl, String statusesUrl, String languagesUrl,
                String stargazersUrl, String contributorsUrl, String subscribersUrl,
                String subscriptionUrl, String commitsUrl, String gitCommitsUrl, String commentsUrl,
                String issueCommentUrl, String contentsUrl, String compareUrl, String mergesUrl,
                String archiveUrl, String downloadsUrl, String issuesUrl, String pullsUrl,
                String milestonesUrl, String notificationsUrl, String labelsUrl, String releasesUrl,
                String deploymentsUrl, String gitUrl, String sshUrl, String cloneUrl, String svnUrl,
                int forks, int openIssues, int watchers, String mirrorUrl, boolean hasIssues,
                boolean hasProjects, boolean hasPages, boolean hasWiki, boolean hasDownloads,
                boolean archived, boolean disabled, Object license) {
            this.id = id;
            this.nodeId = nodeId;
            this.name = name;
            this.fullName = fullName;
            this.owner = owner;
            this.mPrivate = mPrivate;
            this.htmlUrl = htmlUrl;
            this.description = description;
            this.fork = fork;
            this.url = url;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.pushedAt = pushedAt;
            this.homepage = homepage;
            this.size = size;
            this.stargazersCount = stargazersCount;
            this.watchersCount = watchersCount;
            this.language = language;
            this.forksCount = forksCount;
            this.openIssuesCount = openIssuesCount;
            this.defaultBranch = defaultBranch;
            this.score = score;
            this.forksUrl = forksUrl;
            this.keysUrl = keysUrl;
            this.collaboratorsUrl = collaboratorsUrl;
            this.teamsUrl = teamsUrl;
            this.hooksUrl = hooksUrl;
            this.issueEventsUrl = issueEventsUrl;
            this.eventsUrl = eventsUrl;
            this.assigneesUrl = assigneesUrl;
            this.branchesUrl = branchesUrl;
            this.tagsUrl = tagsUrl;
            this.blobsUrl = blobsUrl;
            this.gitTagsUrl = gitTagsUrl;
            this.gitRefsUrl = gitRefsUrl;
            this.treesUrl = treesUrl;
            this.statusesUrl = statusesUrl;
            this.languagesUrl = languagesUrl;
            this.stargazersUrl = stargazersUrl;
            this.contributorsUrl = contributorsUrl;
            this.subscribersUrl = subscribersUrl;
            this.subscriptionUrl = subscriptionUrl;
            this.commitsUrl = commitsUrl;
            this.gitCommitsUrl = gitCommitsUrl;
            this.commentsUrl = commentsUrl;
            this.issueCommentUrl = issueCommentUrl;
            this.contentsUrl = contentsUrl;
            this.compareUrl = compareUrl;
            this.mergesUrl = mergesUrl;
            this.archiveUrl = archiveUrl;
            this.downloadsUrl = downloadsUrl;
            this.issuesUrl = issuesUrl;
            this.pullsUrl = pullsUrl;
            this.milestonesUrl = milestonesUrl;
            this.notificationsUrl = notificationsUrl;
            this.labelsUrl = labelsUrl;
            this.releasesUrl = releasesUrl;
            this.deploymentsUrl = deploymentsUrl;
            this.gitUrl = gitUrl;
            this.sshUrl = sshUrl;
            this.cloneUrl = cloneUrl;
            this.svnUrl = svnUrl;
            this.forks = forks;
            this.openIssues = openIssues;
            this.watchers = watchers;
            this.mirrorUrl = mirrorUrl;
            this.hasIssues = hasIssues;
            this.hasProjects = hasProjects;
            this.hasPages = hasPages;
            this.hasWiki = hasWiki;
            this.hasDownloads = hasDownloads;
            this.archived = archived;
            this.disabled = disabled;
            this.license = license;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for fullName.
         * @param  fullName  String value for fullName.
         * @return Builder
         */
        public Builder fullName(String fullName) {
            this.fullName = fullName;
            return this;
        }

        /**
         * Setter for owner.
         * @param  owner  Object value for owner.
         * @return Builder
         */
        public Builder owner(Object owner) {
            this.owner = owner;
            return this;
        }

        /**
         * Setter for mPrivate.
         * @param  mPrivate  boolean value for mPrivate.
         * @return Builder
         */
        public Builder mPrivate(boolean mPrivate) {
            this.mPrivate = mPrivate;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for fork.
         * @param  fork  boolean value for fork.
         * @return Builder
         */
        public Builder fork(boolean fork) {
            this.fork = fork;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for pushedAt.
         * @param  pushedAt  LocalDateTime value for pushedAt.
         * @return Builder
         */
        public Builder pushedAt(LocalDateTime pushedAt) {
            this.pushedAt = pushedAt;
            return this;
        }

        /**
         * Setter for homepage.
         * @param  homepage  String value for homepage.
         * @return Builder
         */
        public Builder homepage(String homepage) {
            this.homepage = homepage;
            return this;
        }

        /**
         * Setter for size.
         * @param  size  int value for size.
         * @return Builder
         */
        public Builder size(int size) {
            this.size = size;
            return this;
        }

        /**
         * Setter for stargazersCount.
         * @param  stargazersCount  int value for stargazersCount.
         * @return Builder
         */
        public Builder stargazersCount(int stargazersCount) {
            this.stargazersCount = stargazersCount;
            return this;
        }

        /**
         * Setter for watchersCount.
         * @param  watchersCount  int value for watchersCount.
         * @return Builder
         */
        public Builder watchersCount(int watchersCount) {
            this.watchersCount = watchersCount;
            return this;
        }

        /**
         * Setter for language.
         * @param  language  String value for language.
         * @return Builder
         */
        public Builder language(String language) {
            this.language = language;
            return this;
        }

        /**
         * Setter for forksCount.
         * @param  forksCount  int value for forksCount.
         * @return Builder
         */
        public Builder forksCount(int forksCount) {
            this.forksCount = forksCount;
            return this;
        }

        /**
         * Setter for openIssuesCount.
         * @param  openIssuesCount  int value for openIssuesCount.
         * @return Builder
         */
        public Builder openIssuesCount(int openIssuesCount) {
            this.openIssuesCount = openIssuesCount;
            return this;
        }

        /**
         * Setter for defaultBranch.
         * @param  defaultBranch  String value for defaultBranch.
         * @return Builder
         */
        public Builder defaultBranch(String defaultBranch) {
            this.defaultBranch = defaultBranch;
            return this;
        }

        /**
         * Setter for score.
         * @param  score  double value for score.
         * @return Builder
         */
        public Builder score(double score) {
            this.score = score;
            return this;
        }

        /**
         * Setter for forksUrl.
         * @param  forksUrl  String value for forksUrl.
         * @return Builder
         */
        public Builder forksUrl(String forksUrl) {
            this.forksUrl = forksUrl;
            return this;
        }

        /**
         * Setter for keysUrl.
         * @param  keysUrl  String value for keysUrl.
         * @return Builder
         */
        public Builder keysUrl(String keysUrl) {
            this.keysUrl = keysUrl;
            return this;
        }

        /**
         * Setter for collaboratorsUrl.
         * @param  collaboratorsUrl  String value for collaboratorsUrl.
         * @return Builder
         */
        public Builder collaboratorsUrl(String collaboratorsUrl) {
            this.collaboratorsUrl = collaboratorsUrl;
            return this;
        }

        /**
         * Setter for teamsUrl.
         * @param  teamsUrl  String value for teamsUrl.
         * @return Builder
         */
        public Builder teamsUrl(String teamsUrl) {
            this.teamsUrl = teamsUrl;
            return this;
        }

        /**
         * Setter for hooksUrl.
         * @param  hooksUrl  String value for hooksUrl.
         * @return Builder
         */
        public Builder hooksUrl(String hooksUrl) {
            this.hooksUrl = hooksUrl;
            return this;
        }

        /**
         * Setter for issueEventsUrl.
         * @param  issueEventsUrl  String value for issueEventsUrl.
         * @return Builder
         */
        public Builder issueEventsUrl(String issueEventsUrl) {
            this.issueEventsUrl = issueEventsUrl;
            return this;
        }

        /**
         * Setter for eventsUrl.
         * @param  eventsUrl  String value for eventsUrl.
         * @return Builder
         */
        public Builder eventsUrl(String eventsUrl) {
            this.eventsUrl = eventsUrl;
            return this;
        }

        /**
         * Setter for assigneesUrl.
         * @param  assigneesUrl  String value for assigneesUrl.
         * @return Builder
         */
        public Builder assigneesUrl(String assigneesUrl) {
            this.assigneesUrl = assigneesUrl;
            return this;
        }

        /**
         * Setter for branchesUrl.
         * @param  branchesUrl  String value for branchesUrl.
         * @return Builder
         */
        public Builder branchesUrl(String branchesUrl) {
            this.branchesUrl = branchesUrl;
            return this;
        }

        /**
         * Setter for tagsUrl.
         * @param  tagsUrl  String value for tagsUrl.
         * @return Builder
         */
        public Builder tagsUrl(String tagsUrl) {
            this.tagsUrl = tagsUrl;
            return this;
        }

        /**
         * Setter for blobsUrl.
         * @param  blobsUrl  String value for blobsUrl.
         * @return Builder
         */
        public Builder blobsUrl(String blobsUrl) {
            this.blobsUrl = blobsUrl;
            return this;
        }

        /**
         * Setter for gitTagsUrl.
         * @param  gitTagsUrl  String value for gitTagsUrl.
         * @return Builder
         */
        public Builder gitTagsUrl(String gitTagsUrl) {
            this.gitTagsUrl = gitTagsUrl;
            return this;
        }

        /**
         * Setter for gitRefsUrl.
         * @param  gitRefsUrl  String value for gitRefsUrl.
         * @return Builder
         */
        public Builder gitRefsUrl(String gitRefsUrl) {
            this.gitRefsUrl = gitRefsUrl;
            return this;
        }

        /**
         * Setter for treesUrl.
         * @param  treesUrl  String value for treesUrl.
         * @return Builder
         */
        public Builder treesUrl(String treesUrl) {
            this.treesUrl = treesUrl;
            return this;
        }

        /**
         * Setter for statusesUrl.
         * @param  statusesUrl  String value for statusesUrl.
         * @return Builder
         */
        public Builder statusesUrl(String statusesUrl) {
            this.statusesUrl = statusesUrl;
            return this;
        }

        /**
         * Setter for languagesUrl.
         * @param  languagesUrl  String value for languagesUrl.
         * @return Builder
         */
        public Builder languagesUrl(String languagesUrl) {
            this.languagesUrl = languagesUrl;
            return this;
        }

        /**
         * Setter for stargazersUrl.
         * @param  stargazersUrl  String value for stargazersUrl.
         * @return Builder
         */
        public Builder stargazersUrl(String stargazersUrl) {
            this.stargazersUrl = stargazersUrl;
            return this;
        }

        /**
         * Setter for contributorsUrl.
         * @param  contributorsUrl  String value for contributorsUrl.
         * @return Builder
         */
        public Builder contributorsUrl(String contributorsUrl) {
            this.contributorsUrl = contributorsUrl;
            return this;
        }

        /**
         * Setter for subscribersUrl.
         * @param  subscribersUrl  String value for subscribersUrl.
         * @return Builder
         */
        public Builder subscribersUrl(String subscribersUrl) {
            this.subscribersUrl = subscribersUrl;
            return this;
        }

        /**
         * Setter for subscriptionUrl.
         * @param  subscriptionUrl  String value for subscriptionUrl.
         * @return Builder
         */
        public Builder subscriptionUrl(String subscriptionUrl) {
            this.subscriptionUrl = subscriptionUrl;
            return this;
        }

        /**
         * Setter for commitsUrl.
         * @param  commitsUrl  String value for commitsUrl.
         * @return Builder
         */
        public Builder commitsUrl(String commitsUrl) {
            this.commitsUrl = commitsUrl;
            return this;
        }

        /**
         * Setter for gitCommitsUrl.
         * @param  gitCommitsUrl  String value for gitCommitsUrl.
         * @return Builder
         */
        public Builder gitCommitsUrl(String gitCommitsUrl) {
            this.gitCommitsUrl = gitCommitsUrl;
            return this;
        }

        /**
         * Setter for commentsUrl.
         * @param  commentsUrl  String value for commentsUrl.
         * @return Builder
         */
        public Builder commentsUrl(String commentsUrl) {
            this.commentsUrl = commentsUrl;
            return this;
        }

        /**
         * Setter for issueCommentUrl.
         * @param  issueCommentUrl  String value for issueCommentUrl.
         * @return Builder
         */
        public Builder issueCommentUrl(String issueCommentUrl) {
            this.issueCommentUrl = issueCommentUrl;
            return this;
        }

        /**
         * Setter for contentsUrl.
         * @param  contentsUrl  String value for contentsUrl.
         * @return Builder
         */
        public Builder contentsUrl(String contentsUrl) {
            this.contentsUrl = contentsUrl;
            return this;
        }

        /**
         * Setter for compareUrl.
         * @param  compareUrl  String value for compareUrl.
         * @return Builder
         */
        public Builder compareUrl(String compareUrl) {
            this.compareUrl = compareUrl;
            return this;
        }

        /**
         * Setter for mergesUrl.
         * @param  mergesUrl  String value for mergesUrl.
         * @return Builder
         */
        public Builder mergesUrl(String mergesUrl) {
            this.mergesUrl = mergesUrl;
            return this;
        }

        /**
         * Setter for archiveUrl.
         * @param  archiveUrl  String value for archiveUrl.
         * @return Builder
         */
        public Builder archiveUrl(String archiveUrl) {
            this.archiveUrl = archiveUrl;
            return this;
        }

        /**
         * Setter for downloadsUrl.
         * @param  downloadsUrl  String value for downloadsUrl.
         * @return Builder
         */
        public Builder downloadsUrl(String downloadsUrl) {
            this.downloadsUrl = downloadsUrl;
            return this;
        }

        /**
         * Setter for issuesUrl.
         * @param  issuesUrl  String value for issuesUrl.
         * @return Builder
         */
        public Builder issuesUrl(String issuesUrl) {
            this.issuesUrl = issuesUrl;
            return this;
        }

        /**
         * Setter for pullsUrl.
         * @param  pullsUrl  String value for pullsUrl.
         * @return Builder
         */
        public Builder pullsUrl(String pullsUrl) {
            this.pullsUrl = pullsUrl;
            return this;
        }

        /**
         * Setter for milestonesUrl.
         * @param  milestonesUrl  String value for milestonesUrl.
         * @return Builder
         */
        public Builder milestonesUrl(String milestonesUrl) {
            this.milestonesUrl = milestonesUrl;
            return this;
        }

        /**
         * Setter for notificationsUrl.
         * @param  notificationsUrl  String value for notificationsUrl.
         * @return Builder
         */
        public Builder notificationsUrl(String notificationsUrl) {
            this.notificationsUrl = notificationsUrl;
            return this;
        }

        /**
         * Setter for labelsUrl.
         * @param  labelsUrl  String value for labelsUrl.
         * @return Builder
         */
        public Builder labelsUrl(String labelsUrl) {
            this.labelsUrl = labelsUrl;
            return this;
        }

        /**
         * Setter for releasesUrl.
         * @param  releasesUrl  String value for releasesUrl.
         * @return Builder
         */
        public Builder releasesUrl(String releasesUrl) {
            this.releasesUrl = releasesUrl;
            return this;
        }

        /**
         * Setter for deploymentsUrl.
         * @param  deploymentsUrl  String value for deploymentsUrl.
         * @return Builder
         */
        public Builder deploymentsUrl(String deploymentsUrl) {
            this.deploymentsUrl = deploymentsUrl;
            return this;
        }

        /**
         * Setter for gitUrl.
         * @param  gitUrl  String value for gitUrl.
         * @return Builder
         */
        public Builder gitUrl(String gitUrl) {
            this.gitUrl = gitUrl;
            return this;
        }

        /**
         * Setter for sshUrl.
         * @param  sshUrl  String value for sshUrl.
         * @return Builder
         */
        public Builder sshUrl(String sshUrl) {
            this.sshUrl = sshUrl;
            return this;
        }

        /**
         * Setter for cloneUrl.
         * @param  cloneUrl  String value for cloneUrl.
         * @return Builder
         */
        public Builder cloneUrl(String cloneUrl) {
            this.cloneUrl = cloneUrl;
            return this;
        }

        /**
         * Setter for svnUrl.
         * @param  svnUrl  String value for svnUrl.
         * @return Builder
         */
        public Builder svnUrl(String svnUrl) {
            this.svnUrl = svnUrl;
            return this;
        }

        /**
         * Setter for forks.
         * @param  forks  int value for forks.
         * @return Builder
         */
        public Builder forks(int forks) {
            this.forks = forks;
            return this;
        }

        /**
         * Setter for openIssues.
         * @param  openIssues  int value for openIssues.
         * @return Builder
         */
        public Builder openIssues(int openIssues) {
            this.openIssues = openIssues;
            return this;
        }

        /**
         * Setter for watchers.
         * @param  watchers  int value for watchers.
         * @return Builder
         */
        public Builder watchers(int watchers) {
            this.watchers = watchers;
            return this;
        }

        /**
         * Setter for mirrorUrl.
         * @param  mirrorUrl  String value for mirrorUrl.
         * @return Builder
         */
        public Builder mirrorUrl(String mirrorUrl) {
            this.mirrorUrl = mirrorUrl;
            return this;
        }

        /**
         * Setter for hasIssues.
         * @param  hasIssues  boolean value for hasIssues.
         * @return Builder
         */
        public Builder hasIssues(boolean hasIssues) {
            this.hasIssues = hasIssues;
            return this;
        }

        /**
         * Setter for hasProjects.
         * @param  hasProjects  boolean value for hasProjects.
         * @return Builder
         */
        public Builder hasProjects(boolean hasProjects) {
            this.hasProjects = hasProjects;
            return this;
        }

        /**
         * Setter for hasPages.
         * @param  hasPages  boolean value for hasPages.
         * @return Builder
         */
        public Builder hasPages(boolean hasPages) {
            this.hasPages = hasPages;
            return this;
        }

        /**
         * Setter for hasWiki.
         * @param  hasWiki  boolean value for hasWiki.
         * @return Builder
         */
        public Builder hasWiki(boolean hasWiki) {
            this.hasWiki = hasWiki;
            return this;
        }

        /**
         * Setter for hasDownloads.
         * @param  hasDownloads  boolean value for hasDownloads.
         * @return Builder
         */
        public Builder hasDownloads(boolean hasDownloads) {
            this.hasDownloads = hasDownloads;
            return this;
        }

        /**
         * Setter for archived.
         * @param  archived  boolean value for archived.
         * @return Builder
         */
        public Builder archived(boolean archived) {
            this.archived = archived;
            return this;
        }

        /**
         * Setter for disabled.
         * @param  disabled  boolean value for disabled.
         * @return Builder
         */
        public Builder disabled(boolean disabled) {
            this.disabled = disabled;
            return this;
        }

        /**
         * Setter for license.
         * @param  license  Object value for license.
         * @return Builder
         */
        public Builder license(Object license) {
            this.license = license;
            return this;
        }

        /**
         * Setter for masterBranch.
         * @param  masterBranch  String value for masterBranch.
         * @return Builder
         */
        public Builder masterBranch(String masterBranch) {
            this.masterBranch = masterBranch;
            return this;
        }

        /**
         * Setter for topics.
         * @param  topics  List of String value for topics.
         * @return Builder
         */
        public Builder topics(List<String> topics) {
            this.topics = topics;
            return this;
        }

        /**
         * Setter for hasDiscussions.
         * @param  hasDiscussions  Boolean value for hasDiscussions.
         * @return Builder
         */
        public Builder hasDiscussions(Boolean hasDiscussions) {
            this.hasDiscussions = hasDiscussions;
            return this;
        }

        /**
         * Setter for visibility.
         * @param  visibility  String value for visibility.
         * @return Builder
         */
        public Builder visibility(String visibility) {
            this.visibility = visibility;
            return this;
        }

        /**
         * Setter for permissions.
         * @param  permissions  Permissions1 value for permissions.
         * @return Builder
         */
        public Builder permissions(Permissions1 permissions) {
            this.permissions = permissions;
            return this;
        }

        /**
         * Setter for textMatches.
         * @param  textMatches  List of SearchResultTextMatch value for textMatches.
         * @return Builder
         */
        public Builder textMatches(List<SearchResultTextMatch> textMatches) {
            this.textMatches = textMatches;
            return this;
        }

        /**
         * Setter for tempCloneToken.
         * @param  tempCloneToken  String value for tempCloneToken.
         * @return Builder
         */
        public Builder tempCloneToken(String tempCloneToken) {
            this.tempCloneToken = tempCloneToken;
            return this;
        }

        /**
         * Setter for allowMergeCommit.
         * @param  allowMergeCommit  Boolean value for allowMergeCommit.
         * @return Builder
         */
        public Builder allowMergeCommit(Boolean allowMergeCommit) {
            this.allowMergeCommit = allowMergeCommit;
            return this;
        }

        /**
         * Setter for allowSquashMerge.
         * @param  allowSquashMerge  Boolean value for allowSquashMerge.
         * @return Builder
         */
        public Builder allowSquashMerge(Boolean allowSquashMerge) {
            this.allowSquashMerge = allowSquashMerge;
            return this;
        }

        /**
         * Setter for allowRebaseMerge.
         * @param  allowRebaseMerge  Boolean value for allowRebaseMerge.
         * @return Builder
         */
        public Builder allowRebaseMerge(Boolean allowRebaseMerge) {
            this.allowRebaseMerge = allowRebaseMerge;
            return this;
        }

        /**
         * Setter for allowAutoMerge.
         * @param  allowAutoMerge  Boolean value for allowAutoMerge.
         * @return Builder
         */
        public Builder allowAutoMerge(Boolean allowAutoMerge) {
            this.allowAutoMerge = allowAutoMerge;
            return this;
        }

        /**
         * Setter for deleteBranchOnMerge.
         * @param  deleteBranchOnMerge  Boolean value for deleteBranchOnMerge.
         * @return Builder
         */
        public Builder deleteBranchOnMerge(Boolean deleteBranchOnMerge) {
            this.deleteBranchOnMerge = deleteBranchOnMerge;
            return this;
        }

        /**
         * Setter for allowForking.
         * @param  allowForking  Boolean value for allowForking.
         * @return Builder
         */
        public Builder allowForking(Boolean allowForking) {
            this.allowForking = allowForking;
            return this;
        }

        /**
         * Setter for isTemplate.
         * @param  isTemplate  Boolean value for isTemplate.
         * @return Builder
         */
        public Builder isTemplate(Boolean isTemplate) {
            this.isTemplate = isTemplate;
            return this;
        }

        /**
         * Setter for webCommitSignoffRequired.
         * @param  webCommitSignoffRequired  Boolean value for webCommitSignoffRequired.
         * @return Builder
         */
        public Builder webCommitSignoffRequired(Boolean webCommitSignoffRequired) {
            this.webCommitSignoffRequired = webCommitSignoffRequired;
            return this;
        }

        /**
         * Builds a new {@link RepoSearchResultItem} object using the set fields.
         * @return {@link RepoSearchResultItem}
         */
        public RepoSearchResultItem build() {
            return new RepoSearchResultItem(id, nodeId, name, fullName, owner, mPrivate, htmlUrl,
                    description, fork, url, createdAt, updatedAt, pushedAt, homepage, size,
                    stargazersCount, watchersCount, language, forksCount, openIssuesCount,
                    defaultBranch, score, forksUrl, keysUrl, collaboratorsUrl, teamsUrl, hooksUrl,
                    issueEventsUrl, eventsUrl, assigneesUrl, branchesUrl, tagsUrl, blobsUrl,
                    gitTagsUrl, gitRefsUrl, treesUrl, statusesUrl, languagesUrl, stargazersUrl,
                    contributorsUrl, subscribersUrl, subscriptionUrl, commitsUrl, gitCommitsUrl,
                    commentsUrl, issueCommentUrl, contentsUrl, compareUrl, mergesUrl, archiveUrl,
                    downloadsUrl, issuesUrl, pullsUrl, milestonesUrl, notificationsUrl, labelsUrl,
                    releasesUrl, deploymentsUrl, gitUrl, sshUrl, cloneUrl, svnUrl, forks,
                    openIssues, watchers, mirrorUrl, hasIssues, hasProjects, hasPages, hasWiki,
                    hasDownloads, archived, disabled, license, masterBranch, topics, hasDiscussions,
                    visibility, permissions, textMatches, tempCloneToken, allowMergeCommit,
                    allowSquashMerge, allowRebaseMerge, allowAutoMerge, deleteBranchOnMerge,
                    allowForking, isTemplate, webCommitSignoffRequired);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for Topics type.
 */
public class Topics {
    private OptionalNullable<List<String>> from;

    /**
     * Default constructor.
     */
    public Topics() {
    }

    /**
     * Initialization constructor.
     * @param  from  List of String value for from.
     */
    public Topics(
            List<String> from) {
        this.from = OptionalNullable.of(from);
    }

    /**
     * Internal initialization constructor.
     */
    protected Topics(OptionalNullable<List<String>> from) {
        this.from = from;
    }

    /**
     * Internal Getter for From.
     * @return Returns the Internal List of String
     */
    @JsonGetter("from")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<String>> internalGetFrom() {
        return this.from;
    }

    /**
     * Getter for From.
     * @return Returns the List of String
     */
    public List<String> getFrom() {
        return OptionalNullable.getFrom(from);
    }

    /**
     * Setter for From.
     * @param from Value for List of String
     */
    @JsonSetter("from")
    public void setFrom(List<String> from) {
        this.from = OptionalNullable.of(from);
    }

    /**
     * UnSetter for From.
     */
    public void unsetFrom() {
        from = null;
    }

    /**
     * Converts this Topics into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Topics [" + "from=" + from + "]";
    }

    /**
     * Builds a new {@link Topics.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Topics.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.from = internalGetFrom();
        return builder;
    }

    /**
     * Class to build instances of {@link Topics}.
     */
    public static class Builder {
        private OptionalNullable<List<String>> from;



        /**
         * Setter for from.
         * @param  from  List of String value for from.
         * @return Builder
         */
        public Builder from(List<String> from) {
            this.from = OptionalNullable.of(from);
            return this;
        }

        /**
         * UnSetter for from.
         * @return Builder
         */
        public Builder unsetFrom() {
            from = null;
            return this;
        }

        /**
         * Builds a new {@link Topics} object using the set fields.
         * @return {@link Topics}
         */
        public Topics build() {
            return new Topics(from);
        }
    }
}

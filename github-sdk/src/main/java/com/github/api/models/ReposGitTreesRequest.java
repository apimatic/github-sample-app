/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for ReposGitTreesRequest type.
 */
public class ReposGitTreesRequest {
    private List<Tree7> tree;
    private String baseTree;

    /**
     * Default constructor.
     */
    public ReposGitTreesRequest() {
    }

    /**
     * Initialization constructor.
     * @param  tree  List of Tree7 value for tree.
     * @param  baseTree  String value for baseTree.
     */
    public ReposGitTreesRequest(
            List<Tree7> tree,
            String baseTree) {
        this.tree = tree;
        this.baseTree = baseTree;
    }

    /**
     * Getter for Tree.
     * Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
     * @return Returns the List of Tree7
     */
    @JsonGetter("tree")
    public List<Tree7> getTree() {
        return tree;
    }

    /**
     * Setter for Tree.
     * Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
     * @param tree Value for List of Tree7
     */
    @JsonSetter("tree")
    public void setTree(List<Tree7> tree) {
        this.tree = tree;
    }

    /**
     * Getter for BaseTree.
     * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If
     * provided, a new Git tree object will be created from entries in the Git tree object pointed
     * to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree`
     * parameter will overwrite items from `base_tree` with the same `path`. If you're creating new
     * changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object
     * of the current latest commit on the branch you're working on. If not provided, GitHub will
     * create a new Git tree object from only the entries defined in the `tree` parameter. If you
     * create a new commit pointing to such a tree, then all files which were a part of the parent
     * commit's tree and were not defined in the `tree` parameter will be listed as deleted by the
     * new commit.
     * @return Returns the String
     */
    @JsonGetter("base_tree")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBaseTree() {
        return baseTree;
    }

    /**
     * Setter for BaseTree.
     * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If
     * provided, a new Git tree object will be created from entries in the Git tree object pointed
     * to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree`
     * parameter will overwrite items from `base_tree` with the same `path`. If you're creating new
     * changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object
     * of the current latest commit on the branch you're working on. If not provided, GitHub will
     * create a new Git tree object from only the entries defined in the `tree` parameter. If you
     * create a new commit pointing to such a tree, then all files which were a part of the parent
     * commit's tree and were not defined in the `tree` parameter will be listed as deleted by the
     * new commit.
     * @param baseTree Value for String
     */
    @JsonSetter("base_tree")
    public void setBaseTree(String baseTree) {
        this.baseTree = baseTree;
    }

    /**
     * Converts this ReposGitTreesRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposGitTreesRequest [" + "tree=" + tree + ", baseTree=" + baseTree + "]";
    }

    /**
     * Builds a new {@link ReposGitTreesRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposGitTreesRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(tree)
                .baseTree(getBaseTree());
        return builder;
    }

    /**
     * Class to build instances of {@link ReposGitTreesRequest}.
     */
    public static class Builder {
        private List<Tree7> tree;
        private String baseTree;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  tree  List of Tree7 value for tree.
         */
        public Builder(List<Tree7> tree) {
            this.tree = tree;
        }

        /**
         * Setter for tree.
         * @param  tree  List of Tree7 value for tree.
         * @return Builder
         */
        public Builder tree(List<Tree7> tree) {
            this.tree = tree;
            return this;
        }

        /**
         * Setter for baseTree.
         * @param  baseTree  String value for baseTree.
         * @return Builder
         */
        public Builder baseTree(String baseTree) {
            this.baseTree = baseTree;
            return this;
        }

        /**
         * Builds a new {@link ReposGitTreesRequest} object using the set fields.
         * @return {@link ReposGitTreesRequest}
         */
        public ReposGitTreesRequest build() {
            return new ReposGitTreesRequest(tree, baseTree);
        }
    }
}

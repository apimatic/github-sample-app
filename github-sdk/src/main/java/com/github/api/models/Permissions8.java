/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Permissions8 type.
 */
public class Permissions8 {
    private boolean read;
    private boolean write;
    private boolean admin;

    /**
     * Default constructor.
     */
    public Permissions8() {
    }

    /**
     * Initialization constructor.
     * @param  read  boolean value for read.
     * @param  write  boolean value for write.
     * @param  admin  boolean value for admin.
     */
    public Permissions8(
            boolean read,
            boolean write,
            boolean admin) {
        this.read = read;
        this.write = write;
        this.admin = admin;
    }

    /**
     * Getter for Read.
     * @return Returns the boolean
     */
    @JsonGetter("read")
    public boolean getRead() {
        return read;
    }

    /**
     * Setter for Read.
     * @param read Value for boolean
     */
    @JsonSetter("read")
    public void setRead(boolean read) {
        this.read = read;
    }

    /**
     * Getter for Write.
     * @return Returns the boolean
     */
    @JsonGetter("write")
    public boolean getWrite() {
        return write;
    }

    /**
     * Setter for Write.
     * @param write Value for boolean
     */
    @JsonSetter("write")
    public void setWrite(boolean write) {
        this.write = write;
    }

    /**
     * Getter for Admin.
     * @return Returns the boolean
     */
    @JsonGetter("admin")
    public boolean getAdmin() {
        return admin;
    }

    /**
     * Setter for Admin.
     * @param admin Value for boolean
     */
    @JsonSetter("admin")
    public void setAdmin(boolean admin) {
        this.admin = admin;
    }

    /**
     * Converts this Permissions8 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Permissions8 [" + "read=" + read + ", write=" + write + ", admin=" + admin + "]";
    }

    /**
     * Builds a new {@link Permissions8.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Permissions8.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(read, write, admin);
        return builder;
    }

    /**
     * Class to build instances of {@link Permissions8}.
     */
    public static class Builder {
        private boolean read;
        private boolean write;
        private boolean admin;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  read  boolean value for read.
         * @param  write  boolean value for write.
         * @param  admin  boolean value for admin.
         */
        public Builder(boolean read, boolean write, boolean admin) {
            this.read = read;
            this.write = write;
            this.admin = admin;
        }

        /**
         * Setter for read.
         * @param  read  boolean value for read.
         * @return Builder
         */
        public Builder read(boolean read) {
            this.read = read;
            return this;
        }

        /**
         * Setter for write.
         * @param  write  boolean value for write.
         * @return Builder
         */
        public Builder write(boolean write) {
            this.write = write;
            return this;
        }

        /**
         * Setter for admin.
         * @param  admin  boolean value for admin.
         * @return Builder
         */
        public Builder admin(boolean admin) {
            this.admin = admin;
            return this;
        }

        /**
         * Builds a new {@link Permissions8} object using the set fields.
         * @return {@link Permissions8}
         */
        public Permissions8 build() {
            return new Permissions8(read, write, admin);
        }
    }
}

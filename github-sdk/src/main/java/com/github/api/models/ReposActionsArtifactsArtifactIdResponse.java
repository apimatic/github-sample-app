/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;

/**
 * This is a model class for ReposActionsArtifactsArtifactIdResponse type.
 */
public class ReposActionsArtifactsArtifactIdResponse {
    private int id;
    private String nodeId;
    private String name;
    private int sizeInBytes;
    private String url;
    private String archiveDownloadUrl;
    private boolean expired;
    private LocalDateTime createdAt;
    private LocalDateTime expiresAt;
    private LocalDateTime updatedAt;
    private Object workflowRun;

    /**
     * Default constructor.
     */
    public ReposActionsArtifactsArtifactIdResponse() {
    }

    /**
     * Initialization constructor.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  name  String value for name.
     * @param  sizeInBytes  int value for sizeInBytes.
     * @param  url  String value for url.
     * @param  archiveDownloadUrl  String value for archiveDownloadUrl.
     * @param  expired  boolean value for expired.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  expiresAt  LocalDateTime value for expiresAt.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  workflowRun  Object value for workflowRun.
     */
    public ReposActionsArtifactsArtifactIdResponse(
            int id,
            String nodeId,
            String name,
            int sizeInBytes,
            String url,
            String archiveDownloadUrl,
            boolean expired,
            LocalDateTime createdAt,
            LocalDateTime expiresAt,
            LocalDateTime updatedAt,
            Object workflowRun) {
        this.id = id;
        this.nodeId = nodeId;
        this.name = name;
        this.sizeInBytes = sizeInBytes;
        this.url = url;
        this.archiveDownloadUrl = archiveDownloadUrl;
        this.expired = expired;
        this.createdAt = createdAt;
        this.expiresAt = expiresAt;
        this.updatedAt = updatedAt;
        this.workflowRun = workflowRun;
    }

    /**
     * Getter for Id.
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Name.
     * The name of the artifact.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the artifact.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for SizeInBytes.
     * The size in bytes of the artifact.
     * @return Returns the int
     */
    @JsonGetter("size_in_bytes")
    public int getSizeInBytes() {
        return sizeInBytes;
    }

    /**
     * Setter for SizeInBytes.
     * The size in bytes of the artifact.
     * @param sizeInBytes Value for int
     */
    @JsonSetter("size_in_bytes")
    public void setSizeInBytes(int sizeInBytes) {
        this.sizeInBytes = sizeInBytes;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for ArchiveDownloadUrl.
     * @return Returns the String
     */
    @JsonGetter("archive_download_url")
    public String getArchiveDownloadUrl() {
        return archiveDownloadUrl;
    }

    /**
     * Setter for ArchiveDownloadUrl.
     * @param archiveDownloadUrl Value for String
     */
    @JsonSetter("archive_download_url")
    public void setArchiveDownloadUrl(String archiveDownloadUrl) {
        this.archiveDownloadUrl = archiveDownloadUrl;
    }

    /**
     * Getter for Expired.
     * Whether or not the artifact has expired.
     * @return Returns the boolean
     */
    @JsonGetter("expired")
    public boolean getExpired() {
        return expired;
    }

    /**
     * Setter for Expired.
     * Whether or not the artifact has expired.
     * @param expired Value for boolean
     */
    @JsonSetter("expired")
    public void setExpired(boolean expired) {
        this.expired = expired;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for ExpiresAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("expires_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getExpiresAt() {
        return expiresAt;
    }

    /**
     * Setter for ExpiresAt.
     * @param expiresAt Value for LocalDateTime
     */
    @JsonSetter("expires_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setExpiresAt(LocalDateTime expiresAt) {
        this.expiresAt = expiresAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for WorkflowRun.
     * @return Returns the Object
     */
    @JsonGetter("workflow_run")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getWorkflowRun() {
        return workflowRun;
    }

    /**
     * Setter for WorkflowRun.
     * @param workflowRun Value for Object
     */
    @JsonSetter("workflow_run")
    public void setWorkflowRun(Object workflowRun) {
        this.workflowRun = workflowRun;
    }

    /**
     * Converts this ReposActionsArtifactsArtifactIdResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposActionsArtifactsArtifactIdResponse [" + "id=" + id + ", nodeId=" + nodeId
                + ", name=" + name + ", sizeInBytes=" + sizeInBytes + ", url=" + url
                + ", archiveDownloadUrl=" + archiveDownloadUrl + ", expired=" + expired
                + ", createdAt=" + createdAt + ", expiresAt=" + expiresAt + ", updatedAt="
                + updatedAt + ", workflowRun=" + workflowRun + "]";
    }

    /**
     * Builds a new {@link ReposActionsArtifactsArtifactIdResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposActionsArtifactsArtifactIdResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, nodeId, name, sizeInBytes, url, archiveDownloadUrl,
                expired, createdAt, expiresAt, updatedAt)
                .workflowRun(getWorkflowRun());
        return builder;
    }

    /**
     * Class to build instances of {@link ReposActionsArtifactsArtifactIdResponse}.
     */
    public static class Builder {
        private int id;
        private String nodeId;
        private String name;
        private int sizeInBytes;
        private String url;
        private String archiveDownloadUrl;
        private boolean expired;
        private LocalDateTime createdAt;
        private LocalDateTime expiresAt;
        private LocalDateTime updatedAt;
        private Object workflowRun;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  name  String value for name.
         * @param  sizeInBytes  int value for sizeInBytes.
         * @param  url  String value for url.
         * @param  archiveDownloadUrl  String value for archiveDownloadUrl.
         * @param  expired  boolean value for expired.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  expiresAt  LocalDateTime value for expiresAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         */
        public Builder(int id, String nodeId, String name, int sizeInBytes, String url,
                String archiveDownloadUrl, boolean expired, LocalDateTime createdAt,
                LocalDateTime expiresAt, LocalDateTime updatedAt) {
            this.id = id;
            this.nodeId = nodeId;
            this.name = name;
            this.sizeInBytes = sizeInBytes;
            this.url = url;
            this.archiveDownloadUrl = archiveDownloadUrl;
            this.expired = expired;
            this.createdAt = createdAt;
            this.expiresAt = expiresAt;
            this.updatedAt = updatedAt;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for sizeInBytes.
         * @param  sizeInBytes  int value for sizeInBytes.
         * @return Builder
         */
        public Builder sizeInBytes(int sizeInBytes) {
            this.sizeInBytes = sizeInBytes;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for archiveDownloadUrl.
         * @param  archiveDownloadUrl  String value for archiveDownloadUrl.
         * @return Builder
         */
        public Builder archiveDownloadUrl(String archiveDownloadUrl) {
            this.archiveDownloadUrl = archiveDownloadUrl;
            return this;
        }

        /**
         * Setter for expired.
         * @param  expired  boolean value for expired.
         * @return Builder
         */
        public Builder expired(boolean expired) {
            this.expired = expired;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for expiresAt.
         * @param  expiresAt  LocalDateTime value for expiresAt.
         * @return Builder
         */
        public Builder expiresAt(LocalDateTime expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for workflowRun.
         * @param  workflowRun  Object value for workflowRun.
         * @return Builder
         */
        public Builder workflowRun(Object workflowRun) {
            this.workflowRun = workflowRun;
            return this;
        }

        /**
         * Builds a new {@link ReposActionsArtifactsArtifactIdResponse} object using the set fields.
         * @return {@link ReposActionsArtifactsArtifactIdResponse}
         */
        public ReposActionsArtifactsArtifactIdResponse build() {
            return new ReposActionsArtifactsArtifactIdResponse(id, nodeId, name, sizeInBytes, url,
                    archiveDownloadUrl, expired, createdAt, expiresAt, updatedAt, workflowRun);
        }
    }
}

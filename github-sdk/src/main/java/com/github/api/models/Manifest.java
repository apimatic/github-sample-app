/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.github.api.models.containers.ManifestMetadata;
import io.apimatic.core.types.BaseModel;
import java.util.Map;

/**
 * This is a model class for Manifest type.
 */
public class Manifest {
    private String name;
    private File file;
    private Map<String, ManifestMetadata> metadata;
    private Map<String, Dependency> resolved;

    /**
     * Default constructor.
     */
    public Manifest() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  file  File value for file.
     * @param  metadata  Map of String, value for metadata.
     * @param  resolved  Map of String, value for resolved.
     */
    public Manifest(
            String name,
            File file,
            Map<String, ManifestMetadata> metadata,
            Map<String, Dependency> resolved) {
        this.name = name;
        this.file = file;
        this.metadata = metadata;
        this.resolved = resolved;
    }

    /**
     * Getter for Name.
     * The name of the manifest.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the manifest.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for File.
     * @return Returns the File
     */
    @JsonGetter("file")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public File getFile() {
        return file;
    }

    /**
     * Setter for File.
     * @param file Value for File
     */
    @JsonSetter("file")
    public void setFile(File file) {
        this.file = file;
    }

    /**
     * Getter for Metadata.
     * User-defined metadata to store domain-specific information limited to 8 keys with scalar
     * values.
     * @return Returns the Map of String, ManifestMetadata
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, ManifestMetadata> getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * User-defined metadata to store domain-specific information limited to 8 keys with scalar
     * values.
     * @param metadata Value for Map of String, ManifestMetadata
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, ManifestMetadata> metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for Resolved.
     * A collection of resolved package dependencies.
     * @return Returns the Map of String, Dependency
     */
    @JsonGetter("resolved")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, Dependency> getResolved() {
        return resolved;
    }

    /**
     * Setter for Resolved.
     * A collection of resolved package dependencies.
     * @param resolved Value for Map of String, Dependency
     */
    @JsonSetter("resolved")
    public void setResolved(Map<String, Dependency> resolved) {
        this.resolved = resolved;
    }

    /**
     * Converts this Manifest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Manifest [" + "name=" + name + ", file=" + file + ", metadata=" + metadata
                + ", resolved=" + resolved + "]";
    }

    /**
     * Builds a new {@link Manifest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Manifest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(name)
                .file(getFile())
                .metadata(getMetadata())
                .resolved(getResolved());
        return builder;
    }

    /**
     * Class to build instances of {@link Manifest}.
     */
    public static class Builder {
        private String name;
        private File file;
        private Map<String, ManifestMetadata> metadata;
        private Map<String, Dependency> resolved;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  name  String value for name.
         */
        public Builder(String name) {
            this.name = name;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for file.
         * @param  file  File value for file.
         * @return Builder
         */
        public Builder file(File file) {
            this.file = file;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, ManifestMetadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for resolved.
         * @param  resolved  Map of String, value for resolved.
         * @return Builder
         */
        public Builder resolved(Map<String, Dependency> resolved) {
            this.resolved = resolved;
            return this;
        }

        /**
         * Builds a new {@link Manifest} object using the set fields.
         * @return {@link Manifest}
         */
        public Manifest build() {
            return new Manifest(name, file, metadata, resolved);
        }
    }
}

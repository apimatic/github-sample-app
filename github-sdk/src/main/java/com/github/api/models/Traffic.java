/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;

/**
 * This is a model class for Traffic type.
 */
public class Traffic {
    private LocalDateTime timestamp;
    private int uniques;
    private int count;

    /**
     * Default constructor.
     */
    public Traffic() {
    }

    /**
     * Initialization constructor.
     * @param  timestamp  LocalDateTime value for timestamp.
     * @param  uniques  int value for uniques.
     * @param  count  int value for count.
     */
    public Traffic(
            LocalDateTime timestamp,
            int uniques,
            int count) {
        this.timestamp = timestamp;
        this.uniques = uniques;
        this.count = count;
    }

    /**
     * Getter for Timestamp.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("timestamp")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getTimestamp() {
        return timestamp;
    }

    /**
     * Setter for Timestamp.
     * @param timestamp Value for LocalDateTime
     */
    @JsonSetter("timestamp")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }

    /**
     * Getter for Uniques.
     * @return Returns the int
     */
    @JsonGetter("uniques")
    public int getUniques() {
        return uniques;
    }

    /**
     * Setter for Uniques.
     * @param uniques Value for int
     */
    @JsonSetter("uniques")
    public void setUniques(int uniques) {
        this.uniques = uniques;
    }

    /**
     * Getter for Count.
     * @return Returns the int
     */
    @JsonGetter("count")
    public int getCount() {
        return count;
    }

    /**
     * Setter for Count.
     * @param count Value for int
     */
    @JsonSetter("count")
    public void setCount(int count) {
        this.count = count;
    }

    /**
     * Converts this Traffic into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Traffic [" + "timestamp=" + timestamp + ", uniques=" + uniques + ", count=" + count
                + "]";
    }

    /**
     * Builds a new {@link Traffic.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Traffic.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(timestamp, uniques, count);
        return builder;
    }

    /**
     * Class to build instances of {@link Traffic}.
     */
    public static class Builder {
        private LocalDateTime timestamp;
        private int uniques;
        private int count;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  timestamp  LocalDateTime value for timestamp.
         * @param  uniques  int value for uniques.
         * @param  count  int value for count.
         */
        public Builder(LocalDateTime timestamp, int uniques, int count) {
            this.timestamp = timestamp;
            this.uniques = uniques;
            this.count = count;
        }

        /**
         * Setter for timestamp.
         * @param  timestamp  LocalDateTime value for timestamp.
         * @return Builder
         */
        public Builder timestamp(LocalDateTime timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        /**
         * Setter for uniques.
         * @param  uniques  int value for uniques.
         * @return Builder
         */
        public Builder uniques(int uniques) {
            this.uniques = uniques;
            return this;
        }

        /**
         * Setter for count.
         * @param  count  int value for count.
         * @return Builder
         */
        public Builder count(int count) {
            this.count = count;
            return this;
        }

        /**
         * Builds a new {@link Traffic} object using the set fields.
         * @return {@link Traffic}
         */
        public Traffic build() {
            return new Traffic(timestamp, uniques, count);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for Links type.
 */
public class Links {
    private Timeline timeline;
    private User14 user;
    private SecurityAdvisories securityAdvisories;
    private CurrentUser currentUser;
    private CurrentUserPublic currentUserPublic;
    private CurrentUserActor currentUserActor;
    private CurrentUserOrganization currentUserOrganization;
    private List<LinkWithType> currentUserOrganizations;
    private RepositoryDiscussions repositoryDiscussions;
    private RepositoryDiscussionsCategory repositoryDiscussionsCategory;

    /**
     * Default constructor.
     */
    public Links() {
    }

    /**
     * Initialization constructor.
     * @param  timeline  Timeline value for timeline.
     * @param  user  User14 value for user.
     * @param  securityAdvisories  SecurityAdvisories value for securityAdvisories.
     * @param  currentUser  CurrentUser value for currentUser.
     * @param  currentUserPublic  CurrentUserPublic value for currentUserPublic.
     * @param  currentUserActor  CurrentUserActor value for currentUserActor.
     * @param  currentUserOrganization  CurrentUserOrganization value for currentUserOrganization.
     * @param  currentUserOrganizations  List of LinkWithType value for currentUserOrganizations.
     * @param  repositoryDiscussions  RepositoryDiscussions value for repositoryDiscussions.
     * @param  repositoryDiscussionsCategory  RepositoryDiscussionsCategory value for
     *         repositoryDiscussionsCategory.
     */
    public Links(
            Timeline timeline,
            User14 user,
            SecurityAdvisories securityAdvisories,
            CurrentUser currentUser,
            CurrentUserPublic currentUserPublic,
            CurrentUserActor currentUserActor,
            CurrentUserOrganization currentUserOrganization,
            List<LinkWithType> currentUserOrganizations,
            RepositoryDiscussions repositoryDiscussions,
            RepositoryDiscussionsCategory repositoryDiscussionsCategory) {
        this.timeline = timeline;
        this.user = user;
        this.securityAdvisories = securityAdvisories;
        this.currentUser = currentUser;
        this.currentUserPublic = currentUserPublic;
        this.currentUserActor = currentUserActor;
        this.currentUserOrganization = currentUserOrganization;
        this.currentUserOrganizations = currentUserOrganizations;
        this.repositoryDiscussions = repositoryDiscussions;
        this.repositoryDiscussionsCategory = repositoryDiscussionsCategory;
    }

    /**
     * Getter for Timeline.
     * @return Returns the Timeline
     */
    @JsonGetter("timeline")
    public Timeline getTimeline() {
        return timeline;
    }

    /**
     * Setter for Timeline.
     * @param timeline Value for Timeline
     */
    @JsonSetter("timeline")
    public void setTimeline(Timeline timeline) {
        this.timeline = timeline;
    }

    /**
     * Getter for User.
     * @return Returns the User14
     */
    @JsonGetter("user")
    public User14 getUser() {
        return user;
    }

    /**
     * Setter for User.
     * @param user Value for User14
     */
    @JsonSetter("user")
    public void setUser(User14 user) {
        this.user = user;
    }

    /**
     * Getter for SecurityAdvisories.
     * @return Returns the SecurityAdvisories
     */
    @JsonGetter("security_advisories")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SecurityAdvisories getSecurityAdvisories() {
        return securityAdvisories;
    }

    /**
     * Setter for SecurityAdvisories.
     * @param securityAdvisories Value for SecurityAdvisories
     */
    @JsonSetter("security_advisories")
    public void setSecurityAdvisories(SecurityAdvisories securityAdvisories) {
        this.securityAdvisories = securityAdvisories;
    }

    /**
     * Getter for CurrentUser.
     * @return Returns the CurrentUser
     */
    @JsonGetter("current_user")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CurrentUser getCurrentUser() {
        return currentUser;
    }

    /**
     * Setter for CurrentUser.
     * @param currentUser Value for CurrentUser
     */
    @JsonSetter("current_user")
    public void setCurrentUser(CurrentUser currentUser) {
        this.currentUser = currentUser;
    }

    /**
     * Getter for CurrentUserPublic.
     * @return Returns the CurrentUserPublic
     */
    @JsonGetter("current_user_public")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CurrentUserPublic getCurrentUserPublic() {
        return currentUserPublic;
    }

    /**
     * Setter for CurrentUserPublic.
     * @param currentUserPublic Value for CurrentUserPublic
     */
    @JsonSetter("current_user_public")
    public void setCurrentUserPublic(CurrentUserPublic currentUserPublic) {
        this.currentUserPublic = currentUserPublic;
    }

    /**
     * Getter for CurrentUserActor.
     * @return Returns the CurrentUserActor
     */
    @JsonGetter("current_user_actor")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CurrentUserActor getCurrentUserActor() {
        return currentUserActor;
    }

    /**
     * Setter for CurrentUserActor.
     * @param currentUserActor Value for CurrentUserActor
     */
    @JsonSetter("current_user_actor")
    public void setCurrentUserActor(CurrentUserActor currentUserActor) {
        this.currentUserActor = currentUserActor;
    }

    /**
     * Getter for CurrentUserOrganization.
     * @return Returns the CurrentUserOrganization
     */
    @JsonGetter("current_user_organization")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CurrentUserOrganization getCurrentUserOrganization() {
        return currentUserOrganization;
    }

    /**
     * Setter for CurrentUserOrganization.
     * @param currentUserOrganization Value for CurrentUserOrganization
     */
    @JsonSetter("current_user_organization")
    public void setCurrentUserOrganization(CurrentUserOrganization currentUserOrganization) {
        this.currentUserOrganization = currentUserOrganization;
    }

    /**
     * Getter for CurrentUserOrganizations.
     * @return Returns the List of LinkWithType
     */
    @JsonGetter("current_user_organizations")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<LinkWithType> getCurrentUserOrganizations() {
        return currentUserOrganizations;
    }

    /**
     * Setter for CurrentUserOrganizations.
     * @param currentUserOrganizations Value for List of LinkWithType
     */
    @JsonSetter("current_user_organizations")
    public void setCurrentUserOrganizations(List<LinkWithType> currentUserOrganizations) {
        this.currentUserOrganizations = currentUserOrganizations;
    }

    /**
     * Getter for RepositoryDiscussions.
     * @return Returns the RepositoryDiscussions
     */
    @JsonGetter("repository_discussions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RepositoryDiscussions getRepositoryDiscussions() {
        return repositoryDiscussions;
    }

    /**
     * Setter for RepositoryDiscussions.
     * @param repositoryDiscussions Value for RepositoryDiscussions
     */
    @JsonSetter("repository_discussions")
    public void setRepositoryDiscussions(RepositoryDiscussions repositoryDiscussions) {
        this.repositoryDiscussions = repositoryDiscussions;
    }

    /**
     * Getter for RepositoryDiscussionsCategory.
     * @return Returns the RepositoryDiscussionsCategory
     */
    @JsonGetter("repository_discussions_category")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RepositoryDiscussionsCategory getRepositoryDiscussionsCategory() {
        return repositoryDiscussionsCategory;
    }

    /**
     * Setter for RepositoryDiscussionsCategory.
     * @param repositoryDiscussionsCategory Value for RepositoryDiscussionsCategory
     */
    @JsonSetter("repository_discussions_category")
    public void setRepositoryDiscussionsCategory(RepositoryDiscussionsCategory repositoryDiscussionsCategory) {
        this.repositoryDiscussionsCategory = repositoryDiscussionsCategory;
    }

    /**
     * Converts this Links into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Links [" + "timeline=" + timeline + ", user=" + user + ", securityAdvisories="
                + securityAdvisories + ", currentUser=" + currentUser + ", currentUserPublic="
                + currentUserPublic + ", currentUserActor=" + currentUserActor
                + ", currentUserOrganization=" + currentUserOrganization
                + ", currentUserOrganizations=" + currentUserOrganizations
                + ", repositoryDiscussions=" + repositoryDiscussions
                + ", repositoryDiscussionsCategory=" + repositoryDiscussionsCategory + "]";
    }

    /**
     * Builds a new {@link Links.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Links.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(timeline, user)
                .securityAdvisories(getSecurityAdvisories())
                .currentUser(getCurrentUser())
                .currentUserPublic(getCurrentUserPublic())
                .currentUserActor(getCurrentUserActor())
                .currentUserOrganization(getCurrentUserOrganization())
                .currentUserOrganizations(getCurrentUserOrganizations())
                .repositoryDiscussions(getRepositoryDiscussions())
                .repositoryDiscussionsCategory(getRepositoryDiscussionsCategory());
        return builder;
    }

    /**
     * Class to build instances of {@link Links}.
     */
    public static class Builder {
        private Timeline timeline;
        private User14 user;
        private SecurityAdvisories securityAdvisories;
        private CurrentUser currentUser;
        private CurrentUserPublic currentUserPublic;
        private CurrentUserActor currentUserActor;
        private CurrentUserOrganization currentUserOrganization;
        private List<LinkWithType> currentUserOrganizations;
        private RepositoryDiscussions repositoryDiscussions;
        private RepositoryDiscussionsCategory repositoryDiscussionsCategory;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  timeline  Timeline value for timeline.
         * @param  user  User14 value for user.
         */
        public Builder(Timeline timeline, User14 user) {
            this.timeline = timeline;
            this.user = user;
        }

        /**
         * Setter for timeline.
         * @param  timeline  Timeline value for timeline.
         * @return Builder
         */
        public Builder timeline(Timeline timeline) {
            this.timeline = timeline;
            return this;
        }

        /**
         * Setter for user.
         * @param  user  User14 value for user.
         * @return Builder
         */
        public Builder user(User14 user) {
            this.user = user;
            return this;
        }

        /**
         * Setter for securityAdvisories.
         * @param  securityAdvisories  SecurityAdvisories value for securityAdvisories.
         * @return Builder
         */
        public Builder securityAdvisories(SecurityAdvisories securityAdvisories) {
            this.securityAdvisories = securityAdvisories;
            return this;
        }

        /**
         * Setter for currentUser.
         * @param  currentUser  CurrentUser value for currentUser.
         * @return Builder
         */
        public Builder currentUser(CurrentUser currentUser) {
            this.currentUser = currentUser;
            return this;
        }

        /**
         * Setter for currentUserPublic.
         * @param  currentUserPublic  CurrentUserPublic value for currentUserPublic.
         * @return Builder
         */
        public Builder currentUserPublic(CurrentUserPublic currentUserPublic) {
            this.currentUserPublic = currentUserPublic;
            return this;
        }

        /**
         * Setter for currentUserActor.
         * @param  currentUserActor  CurrentUserActor value for currentUserActor.
         * @return Builder
         */
        public Builder currentUserActor(CurrentUserActor currentUserActor) {
            this.currentUserActor = currentUserActor;
            return this;
        }

        /**
         * Setter for currentUserOrganization.
         * @param  currentUserOrganization  CurrentUserOrganization value for
         *         currentUserOrganization.
         * @return Builder
         */
        public Builder currentUserOrganization(CurrentUserOrganization currentUserOrganization) {
            this.currentUserOrganization = currentUserOrganization;
            return this;
        }

        /**
         * Setter for currentUserOrganizations.
         * @param  currentUserOrganizations  List of LinkWithType value for
         *         currentUserOrganizations.
         * @return Builder
         */
        public Builder currentUserOrganizations(List<LinkWithType> currentUserOrganizations) {
            this.currentUserOrganizations = currentUserOrganizations;
            return this;
        }

        /**
         * Setter for repositoryDiscussions.
         * @param  repositoryDiscussions  RepositoryDiscussions value for repositoryDiscussions.
         * @return Builder
         */
        public Builder repositoryDiscussions(RepositoryDiscussions repositoryDiscussions) {
            this.repositoryDiscussions = repositoryDiscussions;
            return this;
        }

        /**
         * Setter for repositoryDiscussionsCategory.
         * @param  repositoryDiscussionsCategory  RepositoryDiscussionsCategory value for
         *         repositoryDiscussionsCategory.
         * @return Builder
         */
        public Builder repositoryDiscussionsCategory(
                RepositoryDiscussionsCategory repositoryDiscussionsCategory) {
            this.repositoryDiscussionsCategory = repositoryDiscussionsCategory;
            return this;
        }

        /**
         * Builds a new {@link Links} object using the set fields.
         * @return {@link Links}
         */
        public Links build() {
            return new Links(timeline, user, securityAdvisories, currentUser, currentUserPublic,
                    currentUserActor, currentUserOrganization, currentUserOrganizations,
                    repositoryDiscussions, repositoryDiscussionsCategory);
        }
    }
}

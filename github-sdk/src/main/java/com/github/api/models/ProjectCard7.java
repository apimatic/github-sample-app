/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;

/**
 * This is a model class for ProjectCard7 type.
 */
public class ProjectCard7 {
    private OptionalNullable<Integer> afterId;
    private boolean archived;
    private int columnId;
    private String columnUrl;
    private String contentUrl;
    private LocalDateTime createdAt;
    private Object creator;
    private int id;
    private String nodeId;
    private String note;
    private String projectUrl;
    private LocalDateTime updatedAt;
    private String url;

    /**
     * Default constructor.
     */
    public ProjectCard7() {
    }

    /**
     * Initialization constructor.
     * @param  archived  boolean value for archived.
     * @param  columnId  int value for columnId.
     * @param  columnUrl  String value for columnUrl.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  creator  Object value for creator.
     * @param  id  int value for id.
     * @param  nodeId  String value for nodeId.
     * @param  note  String value for note.
     * @param  projectUrl  String value for projectUrl.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  url  String value for url.
     * @param  afterId  Integer value for afterId.
     * @param  contentUrl  String value for contentUrl.
     */
    public ProjectCard7(
            boolean archived,
            int columnId,
            String columnUrl,
            LocalDateTime createdAt,
            Object creator,
            int id,
            String nodeId,
            String note,
            String projectUrl,
            LocalDateTime updatedAt,
            String url,
            Integer afterId,
            String contentUrl) {
        this.afterId = OptionalNullable.of(afterId);
        this.archived = archived;
        this.columnId = columnId;
        this.columnUrl = columnUrl;
        this.contentUrl = contentUrl;
        this.createdAt = createdAt;
        this.creator = creator;
        this.id = id;
        this.nodeId = nodeId;
        this.note = note;
        this.projectUrl = projectUrl;
        this.updatedAt = updatedAt;
        this.url = url;
    }

    /**
     * Internal initialization constructor.
     */
    protected ProjectCard7(boolean archived, int columnId, String columnUrl,
            LocalDateTime createdAt, Object creator, int id, String nodeId, String note,
            String projectUrl, LocalDateTime updatedAt, String url,
            OptionalNullable<Integer> afterId, String contentUrl) {
        this.afterId = afterId;
        this.archived = archived;
        this.columnId = columnId;
        this.columnUrl = columnUrl;
        this.contentUrl = contentUrl;
        this.createdAt = createdAt;
        this.creator = creator;
        this.id = id;
        this.nodeId = nodeId;
        this.note = note;
        this.projectUrl = projectUrl;
        this.updatedAt = updatedAt;
        this.url = url;
    }

    /**
     * Internal Getter for AfterId.
     * @return Returns the Internal Integer
     */
    @JsonGetter("after_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAfterId() {
        return this.afterId;
    }

    /**
     * Getter for AfterId.
     * @return Returns the Integer
     */
    public Integer getAfterId() {
        return OptionalNullable.getFrom(afterId);
    }

    /**
     * Setter for AfterId.
     * @param afterId Value for Integer
     */
    @JsonSetter("after_id")
    public void setAfterId(Integer afterId) {
        this.afterId = OptionalNullable.of(afterId);
    }

    /**
     * UnSetter for AfterId.
     */
    public void unsetAfterId() {
        afterId = null;
    }

    /**
     * Getter for Archived.
     * Whether or not the card is archived
     * @return Returns the boolean
     */
    @JsonGetter("archived")
    public boolean getArchived() {
        return archived;
    }

    /**
     * Setter for Archived.
     * Whether or not the card is archived
     * @param archived Value for boolean
     */
    @JsonSetter("archived")
    public void setArchived(boolean archived) {
        this.archived = archived;
    }

    /**
     * Getter for ColumnId.
     * @return Returns the int
     */
    @JsonGetter("column_id")
    public int getColumnId() {
        return columnId;
    }

    /**
     * Setter for ColumnId.
     * @param columnId Value for int
     */
    @JsonSetter("column_id")
    public void setColumnId(int columnId) {
        this.columnId = columnId;
    }

    /**
     * Getter for ColumnUrl.
     * @return Returns the String
     */
    @JsonGetter("column_url")
    public String getColumnUrl() {
        return columnUrl;
    }

    /**
     * Setter for ColumnUrl.
     * @param columnUrl Value for String
     */
    @JsonSetter("column_url")
    public void setColumnUrl(String columnUrl) {
        this.columnUrl = columnUrl;
    }

    /**
     * Getter for ContentUrl.
     * @return Returns the String
     */
    @JsonGetter("content_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getContentUrl() {
        return contentUrl;
    }

    /**
     * Setter for ContentUrl.
     * @param contentUrl Value for String
     */
    @JsonSetter("content_url")
    public void setContentUrl(String contentUrl) {
        this.contentUrl = contentUrl;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for Creator.
     * @return Returns the Object
     */
    @JsonGetter("creator")
    public Object getCreator() {
        return creator;
    }

    /**
     * Setter for Creator.
     * @param creator Value for Object
     */
    @JsonSetter("creator")
    public void setCreator(Object creator) {
        this.creator = creator;
    }

    /**
     * Getter for Id.
     * The project card's ID
     * @return Returns the int
     */
    @JsonGetter("id")
    public int getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The project card's ID
     * @param id Value for int
     */
    @JsonSetter("id")
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Note.
     * @return Returns the String
     */
    @JsonGetter("note")
    public String getNote() {
        return note;
    }

    /**
     * Setter for Note.
     * @param note Value for String
     */
    @JsonSetter("note")
    public void setNote(String note) {
        this.note = note;
    }

    /**
     * Getter for ProjectUrl.
     * @return Returns the String
     */
    @JsonGetter("project_url")
    public String getProjectUrl() {
        return projectUrl;
    }

    /**
     * Setter for ProjectUrl.
     * @param projectUrl Value for String
     */
    @JsonSetter("project_url")
    public void setProjectUrl(String projectUrl) {
        this.projectUrl = projectUrl;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Converts this ProjectCard7 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ProjectCard7 [" + "archived=" + archived + ", columnId=" + columnId + ", columnUrl="
                + columnUrl + ", createdAt=" + createdAt + ", creator=" + creator + ", id=" + id
                + ", nodeId=" + nodeId + ", note=" + note + ", projectUrl=" + projectUrl
                + ", updatedAt=" + updatedAt + ", url=" + url + ", afterId=" + afterId
                + ", contentUrl=" + contentUrl + "]";
    }

    /**
     * Builds a new {@link ProjectCard7.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ProjectCard7.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(archived, columnId, columnUrl, createdAt, creator, id, nodeId,
                note, projectUrl, updatedAt, url)
                .contentUrl(getContentUrl());
        builder.afterId = internalGetAfterId();
        return builder;
    }

    /**
     * Class to build instances of {@link ProjectCard7}.
     */
    public static class Builder {
        private boolean archived;
        private int columnId;
        private String columnUrl;
        private LocalDateTime createdAt;
        private Object creator;
        private int id;
        private String nodeId;
        private String note;
        private String projectUrl;
        private LocalDateTime updatedAt;
        private String url;
        private OptionalNullable<Integer> afterId;
        private String contentUrl;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  archived  boolean value for archived.
         * @param  columnId  int value for columnId.
         * @param  columnUrl  String value for columnUrl.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  creator  Object value for creator.
         * @param  id  int value for id.
         * @param  nodeId  String value for nodeId.
         * @param  note  String value for note.
         * @param  projectUrl  String value for projectUrl.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  url  String value for url.
         */
        public Builder(boolean archived, int columnId, String columnUrl, LocalDateTime createdAt,
                Object creator, int id, String nodeId, String note, String projectUrl,
                LocalDateTime updatedAt, String url) {
            this.archived = archived;
            this.columnId = columnId;
            this.columnUrl = columnUrl;
            this.createdAt = createdAt;
            this.creator = creator;
            this.id = id;
            this.nodeId = nodeId;
            this.note = note;
            this.projectUrl = projectUrl;
            this.updatedAt = updatedAt;
            this.url = url;
        }

        /**
         * Setter for archived.
         * @param  archived  boolean value for archived.
         * @return Builder
         */
        public Builder archived(boolean archived) {
            this.archived = archived;
            return this;
        }

        /**
         * Setter for columnId.
         * @param  columnId  int value for columnId.
         * @return Builder
         */
        public Builder columnId(int columnId) {
            this.columnId = columnId;
            return this;
        }

        /**
         * Setter for columnUrl.
         * @param  columnUrl  String value for columnUrl.
         * @return Builder
         */
        public Builder columnUrl(String columnUrl) {
            this.columnUrl = columnUrl;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for creator.
         * @param  creator  Object value for creator.
         * @return Builder
         */
        public Builder creator(Object creator) {
            this.creator = creator;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  int value for id.
         * @return Builder
         */
        public Builder id(int id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for note.
         * @param  note  String value for note.
         * @return Builder
         */
        public Builder note(String note) {
            this.note = note;
            return this;
        }

        /**
         * Setter for projectUrl.
         * @param  projectUrl  String value for projectUrl.
         * @return Builder
         */
        public Builder projectUrl(String projectUrl) {
            this.projectUrl = projectUrl;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for afterId.
         * @param  afterId  Integer value for afterId.
         * @return Builder
         */
        public Builder afterId(Integer afterId) {
            this.afterId = OptionalNullable.of(afterId);
            return this;
        }

        /**
         * UnSetter for afterId.
         * @return Builder
         */
        public Builder unsetAfterId() {
            afterId = null;
            return this;
        }

        /**
         * Setter for contentUrl.
         * @param  contentUrl  String value for contentUrl.
         * @return Builder
         */
        public Builder contentUrl(String contentUrl) {
            this.contentUrl = contentUrl;
            return this;
        }

        /**
         * Builds a new {@link ProjectCard7} object using the set fields.
         * @return {@link ProjectCard7}
         */
        public ProjectCard7 build() {
            return new ProjectCard7(archived, columnId, columnUrl, createdAt, creator, id, nodeId,
                    note, projectUrl, updatedAt, url, afterId, contentUrl);
        }
    }
}

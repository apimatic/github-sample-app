/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for ReposLabelsRequest type.
 */
public class ReposLabelsRequest {
    private String name;
    private String color;
    private String description;

    /**
     * Default constructor.
     */
    public ReposLabelsRequest() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  color  String value for color.
     * @param  description  String value for description.
     */
    public ReposLabelsRequest(
            String name,
            String color,
            String description) {
        this.name = name;
        this.color = color;
        this.description = description;
    }

    /**
     * Getter for Name.
     * The name of the label. Emoji can be added to label names, using either native emoji or
     * colon-style markup. For example, typing `:strawberry:` will render the emoji
     * ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png
     * ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat
     * sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the label. Emoji can be added to label names, using either native emoji or
     * colon-style markup. For example, typing `:strawberry:` will render the emoji
     * ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png
     * ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat
     * sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Color.
     * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading
     * `#`.
     * @return Returns the String
     */
    @JsonGetter("color")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getColor() {
        return color;
    }

    /**
     * Setter for Color.
     * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading
     * `#`.
     * @param color Value for String
     */
    @JsonSetter("color")
    public void setColor(String color) {
        this.color = color;
    }

    /**
     * Getter for Description.
     * A short description of the label. Must be 100 characters or fewer.
     * @return Returns the String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * A short description of the label. Must be 100 characters or fewer.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Converts this ReposLabelsRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposLabelsRequest [" + "name=" + name + ", color=" + color + ", description="
                + description + "]";
    }

    /**
     * Builds a new {@link ReposLabelsRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposLabelsRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(name)
                .color(getColor())
                .description(getDescription());
        return builder;
    }

    /**
     * Class to build instances of {@link ReposLabelsRequest}.
     */
    public static class Builder {
        private String name;
        private String color;
        private String description;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  name  String value for name.
         */
        public Builder(String name) {
            this.name = name;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for color.
         * @param  color  String value for color.
         * @return Builder
         */
        public Builder color(String color) {
            this.color = color;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Builds a new {@link ReposLabelsRequest} object using the set fields.
         * @return {@link ReposLabelsRequest}
         */
        public ReposLabelsRequest build() {
            return new ReposLabelsRequest(name, color, description);
        }
    }
}

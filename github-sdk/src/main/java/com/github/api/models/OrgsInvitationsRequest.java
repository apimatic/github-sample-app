/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for OrgsInvitationsRequest type.
 */
public class OrgsInvitationsRequest {
    private Integer inviteeId;
    private String email;
    private Role2Enum role;
    private List<Integer> teamIds;

    /**
     * Default constructor.
     */
    public OrgsInvitationsRequest() {
    }

    /**
     * Initialization constructor.
     * @param  inviteeId  Integer value for inviteeId.
     * @param  email  String value for email.
     * @param  role  Role2Enum value for role.
     * @param  teamIds  List of Integer value for teamIds.
     */
    public OrgsInvitationsRequest(
            Integer inviteeId,
            String email,
            Role2Enum role,
            List<Integer> teamIds) {
        this.inviteeId = inviteeId;
        this.email = email;
        this.role = role;
        this.teamIds = teamIds;
    }

    /**
     * Getter for InviteeId.
     * **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
     * @return Returns the Integer
     */
    @JsonGetter("invitee_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getInviteeId() {
        return inviteeId;
    }

    /**
     * Setter for InviteeId.
     * **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
     * @param inviteeId Value for Integer
     */
    @JsonSetter("invitee_id")
    public void setInviteeId(Integer inviteeId) {
        this.inviteeId = inviteeId;
    }

    /**
     * Getter for Email.
     * **Required unless you provide `invitee_id`**. Email address of the person you are inviting,
     * which can be an existing GitHub user.
     * @return Returns the String
     */
    @JsonGetter("email")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEmail() {
        return email;
    }

    /**
     * Setter for Email.
     * **Required unless you provide `invitee_id`**. Email address of the person you are inviting,
     * which can be an existing GitHub user.
     * @param email Value for String
     */
    @JsonSetter("email")
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Getter for Role.
     * @return Returns the Role2Enum
     */
    @JsonGetter("role")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Role2Enum getRole() {
        return role;
    }

    /**
     * Setter for Role.
     * @param role Value for Role2Enum
     */
    @JsonSetter("role")
    public void setRole(Role2Enum role) {
        this.role = role;
    }

    /**
     * Getter for TeamIds.
     * Specify IDs for the teams you want to invite new members to.
     * @return Returns the List of Integer
     */
    @JsonGetter("team_ids")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Integer> getTeamIds() {
        return teamIds;
    }

    /**
     * Setter for TeamIds.
     * Specify IDs for the teams you want to invite new members to.
     * @param teamIds Value for List of Integer
     */
    @JsonSetter("team_ids")
    public void setTeamIds(List<Integer> teamIds) {
        this.teamIds = teamIds;
    }

    /**
     * Converts this OrgsInvitationsRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "OrgsInvitationsRequest [" + "inviteeId=" + inviteeId + ", email=" + email
                + ", role=" + role + ", teamIds=" + teamIds + "]";
    }

    /**
     * Builds a new {@link OrgsInvitationsRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link OrgsInvitationsRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .inviteeId(getInviteeId())
                .email(getEmail())
                .role(getRole())
                .teamIds(getTeamIds());
        return builder;
    }

    /**
     * Class to build instances of {@link OrgsInvitationsRequest}.
     */
    public static class Builder {
        private Integer inviteeId;
        private String email;
        private Role2Enum role;
        private List<Integer> teamIds;



        /**
         * Setter for inviteeId.
         * @param  inviteeId  Integer value for inviteeId.
         * @return Builder
         */
        public Builder inviteeId(Integer inviteeId) {
            this.inviteeId = inviteeId;
            return this;
        }

        /**
         * Setter for email.
         * @param  email  String value for email.
         * @return Builder
         */
        public Builder email(String email) {
            this.email = email;
            return this;
        }

        /**
         * Setter for role.
         * @param  role  Role2Enum value for role.
         * @return Builder
         */
        public Builder role(Role2Enum role) {
            this.role = role;
            return this;
        }

        /**
         * Setter for teamIds.
         * @param  teamIds  List of Integer value for teamIds.
         * @return Builder
         */
        public Builder teamIds(List<Integer> teamIds) {
            this.teamIds = teamIds;
            return this;
        }

        /**
         * Builds a new {@link OrgsInvitationsRequest} object using the set fields.
         * @return {@link OrgsInvitationsRequest}
         */
        public OrgsInvitationsRequest build() {
            return new OrgsInvitationsRequest(inviteeId, email, role, teamIds);
        }
    }
}

/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;

/**
 * This is a model class for UserCodespacesExportsResponse type.
 */
public class UserCodespacesExportsResponse {
    private OptionalNullable<String> state;
    private OptionalNullable<LocalDateTime> completedAt;
    private OptionalNullable<String> branch;
    private OptionalNullable<String> sha;
    private String id;
    private String exportUrl;
    private OptionalNullable<String> htmlUrl;

    /**
     * Default constructor.
     */
    public UserCodespacesExportsResponse() {
    }

    /**
     * Initialization constructor.
     * @param  state  String value for state.
     * @param  completedAt  LocalDateTime value for completedAt.
     * @param  branch  String value for branch.
     * @param  sha  String value for sha.
     * @param  id  String value for id.
     * @param  exportUrl  String value for exportUrl.
     * @param  htmlUrl  String value for htmlUrl.
     */
    public UserCodespacesExportsResponse(
            String state,
            LocalDateTime completedAt,
            String branch,
            String sha,
            String id,
            String exportUrl,
            String htmlUrl) {
        this.state = OptionalNullable.of(state);
        this.completedAt = OptionalNullable.of(completedAt);
        this.branch = OptionalNullable.of(branch);
        this.sha = OptionalNullable.of(sha);
        this.id = id;
        this.exportUrl = exportUrl;
        this.htmlUrl = OptionalNullable.of(htmlUrl);
    }

    /**
     * Internal initialization constructor.
     */
    protected UserCodespacesExportsResponse(OptionalNullable<String> state,
            OptionalNullable<LocalDateTime> completedAt, OptionalNullable<String> branch,
            OptionalNullable<String> sha, String id, String exportUrl,
            OptionalNullable<String> htmlUrl) {
        this.state = state;
        this.completedAt = completedAt;
        this.branch = branch;
        this.sha = sha;
        this.id = id;
        this.exportUrl = exportUrl;
        this.htmlUrl = htmlUrl;
    }

    /**
     * Internal Getter for State.
     * State of the latest export
     * @return Returns the Internal String
     */
    @JsonGetter("state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetState() {
        return this.state;
    }

    /**
     * Getter for State.
     * State of the latest export
     * @return Returns the String
     */
    public String getState() {
        return OptionalNullable.getFrom(state);
    }

    /**
     * Setter for State.
     * State of the latest export
     * @param state Value for String
     */
    @JsonSetter("state")
    public void setState(String state) {
        this.state = OptionalNullable.of(state);
    }

    /**
     * UnSetter for State.
     * State of the latest export
     */
    public void unsetState() {
        state = null;
    }

    /**
     * Internal Getter for CompletedAt.
     * Completion time of the last export operation
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("completed_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetCompletedAt() {
        return this.completedAt;
    }

    /**
     * Getter for CompletedAt.
     * Completion time of the last export operation
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getCompletedAt() {
        return OptionalNullable.getFrom(completedAt);
    }

    /**
     * Setter for CompletedAt.
     * Completion time of the last export operation
     * @param completedAt Value for LocalDateTime
     */
    @JsonSetter("completed_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCompletedAt(LocalDateTime completedAt) {
        this.completedAt = OptionalNullable.of(completedAt);
    }

    /**
     * UnSetter for CompletedAt.
     * Completion time of the last export operation
     */
    public void unsetCompletedAt() {
        completedAt = null;
    }

    /**
     * Internal Getter for Branch.
     * Name of the exported branch
     * @return Returns the Internal String
     */
    @JsonGetter("branch")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBranch() {
        return this.branch;
    }

    /**
     * Getter for Branch.
     * Name of the exported branch
     * @return Returns the String
     */
    public String getBranch() {
        return OptionalNullable.getFrom(branch);
    }

    /**
     * Setter for Branch.
     * Name of the exported branch
     * @param branch Value for String
     */
    @JsonSetter("branch")
    public void setBranch(String branch) {
        this.branch = OptionalNullable.of(branch);
    }

    /**
     * UnSetter for Branch.
     * Name of the exported branch
     */
    public void unsetBranch() {
        branch = null;
    }

    /**
     * Internal Getter for Sha.
     * Git commit SHA of the exported branch
     * @return Returns the Internal String
     */
    @JsonGetter("sha")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSha() {
        return this.sha;
    }

    /**
     * Getter for Sha.
     * Git commit SHA of the exported branch
     * @return Returns the String
     */
    public String getSha() {
        return OptionalNullable.getFrom(sha);
    }

    /**
     * Setter for Sha.
     * Git commit SHA of the exported branch
     * @param sha Value for String
     */
    @JsonSetter("sha")
    public void setSha(String sha) {
        this.sha = OptionalNullable.of(sha);
    }

    /**
     * UnSetter for Sha.
     * Git commit SHA of the exported branch
     */
    public void unsetSha() {
        sha = null;
    }

    /**
     * Getter for Id.
     * Id for the export details
     * @return Returns the String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Id for the export details
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for ExportUrl.
     * Url for fetching export details
     * @return Returns the String
     */
    @JsonGetter("export_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getExportUrl() {
        return exportUrl;
    }

    /**
     * Setter for ExportUrl.
     * Url for fetching export details
     * @param exportUrl Value for String
     */
    @JsonSetter("export_url")
    public void setExportUrl(String exportUrl) {
        this.exportUrl = exportUrl;
    }

    /**
     * Internal Getter for HtmlUrl.
     * Web url for the exported branch
     * @return Returns the Internal String
     */
    @JsonGetter("html_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetHtmlUrl() {
        return this.htmlUrl;
    }

    /**
     * Getter for HtmlUrl.
     * Web url for the exported branch
     * @return Returns the String
     */
    public String getHtmlUrl() {
        return OptionalNullable.getFrom(htmlUrl);
    }

    /**
     * Setter for HtmlUrl.
     * Web url for the exported branch
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = OptionalNullable.of(htmlUrl);
    }

    /**
     * UnSetter for HtmlUrl.
     * Web url for the exported branch
     */
    public void unsetHtmlUrl() {
        htmlUrl = null;
    }

    /**
     * Converts this UserCodespacesExportsResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "UserCodespacesExportsResponse [" + "state=" + state + ", completedAt=" + completedAt
                + ", branch=" + branch + ", sha=" + sha + ", id=" + id + ", exportUrl=" + exportUrl
                + ", htmlUrl=" + htmlUrl + "]";
    }

    /**
     * Builds a new {@link UserCodespacesExportsResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link UserCodespacesExportsResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .id(getId())
                .exportUrl(getExportUrl());
        builder.state = internalGetState();
        builder.completedAt = internalGetCompletedAt();
        builder.branch = internalGetBranch();
        builder.sha = internalGetSha();
        builder.htmlUrl = internalGetHtmlUrl();
        return builder;
    }

    /**
     * Class to build instances of {@link UserCodespacesExportsResponse}.
     */
    public static class Builder {
        private OptionalNullable<String> state;
        private OptionalNullable<LocalDateTime> completedAt;
        private OptionalNullable<String> branch;
        private OptionalNullable<String> sha;
        private String id;
        private String exportUrl;
        private OptionalNullable<String> htmlUrl;



        /**
         * Setter for state.
         * @param  state  String value for state.
         * @return Builder
         */
        public Builder state(String state) {
            this.state = OptionalNullable.of(state);
            return this;
        }

        /**
         * UnSetter for state.
         * @return Builder
         */
        public Builder unsetState() {
            state = null;
            return this;
        }

        /**
         * Setter for completedAt.
         * @param  completedAt  LocalDateTime value for completedAt.
         * @return Builder
         */
        public Builder completedAt(LocalDateTime completedAt) {
            this.completedAt = OptionalNullable.of(completedAt);
            return this;
        }

        /**
         * UnSetter for completedAt.
         * @return Builder
         */
        public Builder unsetCompletedAt() {
            completedAt = null;
            return this;
        }

        /**
         * Setter for branch.
         * @param  branch  String value for branch.
         * @return Builder
         */
        public Builder branch(String branch) {
            this.branch = OptionalNullable.of(branch);
            return this;
        }

        /**
         * UnSetter for branch.
         * @return Builder
         */
        public Builder unsetBranch() {
            branch = null;
            return this;
        }

        /**
         * Setter for sha.
         * @param  sha  String value for sha.
         * @return Builder
         */
        public Builder sha(String sha) {
            this.sha = OptionalNullable.of(sha);
            return this;
        }

        /**
         * UnSetter for sha.
         * @return Builder
         */
        public Builder unsetSha() {
            sha = null;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for exportUrl.
         * @param  exportUrl  String value for exportUrl.
         * @return Builder
         */
        public Builder exportUrl(String exportUrl) {
            this.exportUrl = exportUrl;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = OptionalNullable.of(htmlUrl);
            return this;
        }

        /**
         * UnSetter for htmlUrl.
         * @return Builder
         */
        public Builder unsetHtmlUrl() {
            htmlUrl = null;
            return this;
        }

        /**
         * Builds a new {@link UserCodespacesExportsResponse} object using the set fields.
         * @return {@link UserCodespacesExportsResponse}
         */
        public UserCodespacesExportsResponse build() {
            return new UserCodespacesExportsResponse(state, completedAt, branch, sha, id, exportUrl,
                    htmlUrl);
        }
    }
}

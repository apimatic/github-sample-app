/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for OrgsTeamsRequest type.
 */
public class OrgsTeamsRequest {
    private String name;
    private String description;
    private List<String> maintainers;
    private List<String> repoNames;
    private Privacy146Enum privacy;
    private Permission2Enum permission;
    private Integer parentTeamId;

    /**
     * Default constructor.
     */
    public OrgsTeamsRequest() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  description  String value for description.
     * @param  maintainers  List of String value for maintainers.
     * @param  repoNames  List of String value for repoNames.
     * @param  privacy  Privacy146Enum value for privacy.
     * @param  permission  Permission2Enum value for permission.
     * @param  parentTeamId  Integer value for parentTeamId.
     */
    public OrgsTeamsRequest(
            String name,
            String description,
            List<String> maintainers,
            List<String> repoNames,
            Privacy146Enum privacy,
            Permission2Enum permission,
            Integer parentTeamId) {
        this.name = name;
        this.description = description;
        this.maintainers = maintainers;
        this.repoNames = repoNames;
        this.privacy = privacy;
        this.permission = permission;
        this.parentTeamId = parentTeamId;
    }

    /**
     * Getter for Name.
     * The name of the team.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the team.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Description.
     * The description of the team.
     * @return Returns the String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * The description of the team.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Maintainers.
     * List GitHub IDs for organization members who will become team maintainers.
     * @return Returns the List of String
     */
    @JsonGetter("maintainers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getMaintainers() {
        return maintainers;
    }

    /**
     * Setter for Maintainers.
     * List GitHub IDs for organization members who will become team maintainers.
     * @param maintainers Value for List of String
     */
    @JsonSetter("maintainers")
    public void setMaintainers(List<String> maintainers) {
        this.maintainers = maintainers;
    }

    /**
     * Getter for RepoNames.
     * The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
     * @return Returns the List of String
     */
    @JsonGetter("repo_names")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getRepoNames() {
        return repoNames;
    }

    /**
     * Setter for RepoNames.
     * The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
     * @param repoNames Value for List of String
     */
    @JsonSetter("repo_names")
    public void setRepoNames(List<String> repoNames) {
        this.repoNames = repoNames;
    }

    /**
     * Getter for Privacy.
     * @return Returns the Privacy146Enum
     */
    @JsonGetter("privacy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Privacy146Enum getPrivacy() {
        return privacy;
    }

    /**
     * Setter for Privacy.
     * @param privacy Value for Privacy146Enum
     */
    @JsonSetter("privacy")
    public void setPrivacy(Privacy146Enum privacy) {
        this.privacy = privacy;
    }

    /**
     * Getter for Permission.
     * @return Returns the Permission2Enum
     */
    @JsonGetter("permission")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Permission2Enum getPermission() {
        return permission;
    }

    /**
     * Setter for Permission.
     * @param permission Value for Permission2Enum
     */
    @JsonSetter("permission")
    public void setPermission(Permission2Enum permission) {
        this.permission = permission;
    }

    /**
     * Getter for ParentTeamId.
     * The ID of a team to set as the parent team.
     * @return Returns the Integer
     */
    @JsonGetter("parent_team_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getParentTeamId() {
        return parentTeamId;
    }

    /**
     * Setter for ParentTeamId.
     * The ID of a team to set as the parent team.
     * @param parentTeamId Value for Integer
     */
    @JsonSetter("parent_team_id")
    public void setParentTeamId(Integer parentTeamId) {
        this.parentTeamId = parentTeamId;
    }

    /**
     * Converts this OrgsTeamsRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "OrgsTeamsRequest [" + "name=" + name + ", description=" + description
                + ", maintainers=" + maintainers + ", repoNames=" + repoNames + ", privacy="
                + privacy + ", permission=" + permission + ", parentTeamId=" + parentTeamId + "]";
    }

    /**
     * Builds a new {@link OrgsTeamsRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link OrgsTeamsRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(name)
                .description(getDescription())
                .maintainers(getMaintainers())
                .repoNames(getRepoNames())
                .privacy(getPrivacy())
                .permission(getPermission())
                .parentTeamId(getParentTeamId());
        return builder;
    }

    /**
     * Class to build instances of {@link OrgsTeamsRequest}.
     */
    public static class Builder {
        private String name;
        private String description;
        private List<String> maintainers;
        private List<String> repoNames;
        private Privacy146Enum privacy;
        private Permission2Enum permission;
        private Integer parentTeamId;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  name  String value for name.
         */
        public Builder(String name) {
            this.name = name;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for maintainers.
         * @param  maintainers  List of String value for maintainers.
         * @return Builder
         */
        public Builder maintainers(List<String> maintainers) {
            this.maintainers = maintainers;
            return this;
        }

        /**
         * Setter for repoNames.
         * @param  repoNames  List of String value for repoNames.
         * @return Builder
         */
        public Builder repoNames(List<String> repoNames) {
            this.repoNames = repoNames;
            return this;
        }

        /**
         * Setter for privacy.
         * @param  privacy  Privacy146Enum value for privacy.
         * @return Builder
         */
        public Builder privacy(Privacy146Enum privacy) {
            this.privacy = privacy;
            return this;
        }

        /**
         * Setter for permission.
         * @param  permission  Permission2Enum value for permission.
         * @return Builder
         */
        public Builder permission(Permission2Enum permission) {
            this.permission = permission;
            return this;
        }

        /**
         * Setter for parentTeamId.
         * @param  parentTeamId  Integer value for parentTeamId.
         * @return Builder
         */
        public Builder parentTeamId(Integer parentTeamId) {
            this.parentTeamId = parentTeamId;
            return this;
        }

        /**
         * Builds a new {@link OrgsTeamsRequest} object using the set fields.
         * @return {@link OrgsTeamsRequest}
         */
        public OrgsTeamsRequest build() {
            return new OrgsTeamsRequest(name, description, maintainers, repoNames, privacy,
                    permission, parentTeamId);
        }
    }
}

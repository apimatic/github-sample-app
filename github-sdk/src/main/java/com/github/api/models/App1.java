/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for App1 type.
 */
public class App1 {
    private Integer id;
    private String slug;
    private String nodeId;
    private Owner2 owner;
    private String name;
    private String description;
    private String externalUrl;
    private String htmlUrl;
    private String createdAt;
    private String updatedAt;
    private Permissions13 permissions;
    private List<String> events;

    /**
     * Default constructor.
     */
    public App1() {
    }

    /**
     * Initialization constructor.
     * @param  id  Integer value for id.
     * @param  slug  String value for slug.
     * @param  nodeId  String value for nodeId.
     * @param  owner  Owner2 value for owner.
     * @param  name  String value for name.
     * @param  description  String value for description.
     * @param  externalUrl  String value for externalUrl.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  createdAt  String value for createdAt.
     * @param  updatedAt  String value for updatedAt.
     * @param  permissions  Permissions13 value for permissions.
     * @param  events  List of String value for events.
     */
    public App1(
            Integer id,
            String slug,
            String nodeId,
            Owner2 owner,
            String name,
            String description,
            String externalUrl,
            String htmlUrl,
            String createdAt,
            String updatedAt,
            Permissions13 permissions,
            List<String> events) {
        this.id = id;
        this.slug = slug;
        this.nodeId = nodeId;
        this.owner = owner;
        this.name = name;
        this.description = description;
        this.externalUrl = externalUrl;
        this.htmlUrl = htmlUrl;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.permissions = permissions;
        this.events = events;
    }

    /**
     * Getter for Id.
     * @return Returns the Integer
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for Integer
     */
    @JsonSetter("id")
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for Slug.
     * @return Returns the String
     */
    @JsonGetter("slug")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSlug() {
        return slug;
    }

    /**
     * Setter for Slug.
     * @param slug Value for String
     */
    @JsonSetter("slug")
    public void setSlug(String slug) {
        this.slug = slug;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Owner.
     * @return Returns the Owner2
     */
    @JsonGetter("owner")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Owner2 getOwner() {
        return owner;
    }

    /**
     * Setter for Owner.
     * @param owner Value for Owner2
     */
    @JsonSetter("owner")
    public void setOwner(Owner2 owner) {
        this.owner = owner;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for ExternalUrl.
     * @return Returns the String
     */
    @JsonGetter("external_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getExternalUrl() {
        return externalUrl;
    }

    /**
     * Setter for ExternalUrl.
     * @param externalUrl Value for String
     */
    @JsonSetter("external_url")
    public void setExternalUrl(String externalUrl) {
        this.externalUrl = externalUrl;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the String
     */
    @JsonGetter("created_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for String
     */
    @JsonSetter("created_at")
    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the String
     */
    @JsonGetter("updated_at")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for String
     */
    @JsonSetter("updated_at")
    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Permissions.
     * @return Returns the Permissions13
     */
    @JsonGetter("permissions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Permissions13 getPermissions() {
        return permissions;
    }

    /**
     * Setter for Permissions.
     * @param permissions Value for Permissions13
     */
    @JsonSetter("permissions")
    public void setPermissions(Permissions13 permissions) {
        this.permissions = permissions;
    }

    /**
     * Getter for Events.
     * @return Returns the List of String
     */
    @JsonGetter("events")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getEvents() {
        return events;
    }

    /**
     * Setter for Events.
     * @param events Value for List of String
     */
    @JsonSetter("events")
    public void setEvents(List<String> events) {
        this.events = events;
    }

    /**
     * Converts this App1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "App1 [" + "id=" + id + ", slug=" + slug + ", nodeId=" + nodeId + ", owner=" + owner
                + ", name=" + name + ", description=" + description + ", externalUrl=" + externalUrl
                + ", htmlUrl=" + htmlUrl + ", createdAt=" + createdAt + ", updatedAt=" + updatedAt
                + ", permissions=" + permissions + ", events=" + events + "]";
    }

    /**
     * Builds a new {@link App1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link App1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .id(getId())
                .slug(getSlug())
                .nodeId(getNodeId())
                .owner(getOwner())
                .name(getName())
                .description(getDescription())
                .externalUrl(getExternalUrl())
                .htmlUrl(getHtmlUrl())
                .createdAt(getCreatedAt())
                .updatedAt(getUpdatedAt())
                .permissions(getPermissions())
                .events(getEvents());
        return builder;
    }

    /**
     * Class to build instances of {@link App1}.
     */
    public static class Builder {
        private Integer id;
        private String slug;
        private String nodeId;
        private Owner2 owner;
        private String name;
        private String description;
        private String externalUrl;
        private String htmlUrl;
        private String createdAt;
        private String updatedAt;
        private Permissions13 permissions;
        private List<String> events;



        /**
         * Setter for id.
         * @param  id  Integer value for id.
         * @return Builder
         */
        public Builder id(Integer id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for slug.
         * @param  slug  String value for slug.
         * @return Builder
         */
        public Builder slug(String slug) {
            this.slug = slug;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for owner.
         * @param  owner  Owner2 value for owner.
         * @return Builder
         */
        public Builder owner(Owner2 owner) {
            this.owner = owner;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for externalUrl.
         * @param  externalUrl  String value for externalUrl.
         * @return Builder
         */
        public Builder externalUrl(String externalUrl) {
            this.externalUrl = externalUrl;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  String value for createdAt.
         * @return Builder
         */
        public Builder createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  String value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for permissions.
         * @param  permissions  Permissions13 value for permissions.
         * @return Builder
         */
        public Builder permissions(Permissions13 permissions) {
            this.permissions = permissions;
            return this;
        }

        /**
         * Setter for events.
         * @param  events  List of String value for events.
         * @return Builder
         */
        public Builder events(List<String> events) {
            this.events = events;
            return this;
        }

        /**
         * Builds a new {@link App1} object using the set fields.
         * @return {@link App1}
         */
        public App1 build() {
            return new App1(id, slug, nodeId, owner, name, description, externalUrl, htmlUrl,
                    createdAt, updatedAt, permissions, events);
        }
    }
}

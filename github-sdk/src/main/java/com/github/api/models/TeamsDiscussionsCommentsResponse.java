/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.github.api.DateTimeHelper;
import io.apimatic.core.types.BaseModel;
import java.time.LocalDateTime;

/**
 * This is a model class for TeamsDiscussionsCommentsResponse type.
 */
public class TeamsDiscussionsCommentsResponse {
    private Object author;
    private String body;
    private String bodyHtml;
    private String bodyVersion;
    private LocalDateTime createdAt;
    private LocalDateTime lastEditedAt;
    private String discussionUrl;
    private String htmlUrl;
    private String nodeId;
    private int number;
    private LocalDateTime updatedAt;
    private String url;
    private ReactionRollup reactions;

    /**
     * Default constructor.
     */
    public TeamsDiscussionsCommentsResponse() {
    }

    /**
     * Initialization constructor.
     * @param  author  Object value for author.
     * @param  body  String value for body.
     * @param  bodyHtml  String value for bodyHtml.
     * @param  bodyVersion  String value for bodyVersion.
     * @param  createdAt  LocalDateTime value for createdAt.
     * @param  lastEditedAt  LocalDateTime value for lastEditedAt.
     * @param  discussionUrl  String value for discussionUrl.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  nodeId  String value for nodeId.
     * @param  number  int value for number.
     * @param  updatedAt  LocalDateTime value for updatedAt.
     * @param  url  String value for url.
     * @param  reactions  ReactionRollup value for reactions.
     */
    public TeamsDiscussionsCommentsResponse(
            Object author,
            String body,
            String bodyHtml,
            String bodyVersion,
            LocalDateTime createdAt,
            LocalDateTime lastEditedAt,
            String discussionUrl,
            String htmlUrl,
            String nodeId,
            int number,
            LocalDateTime updatedAt,
            String url,
            ReactionRollup reactions) {
        this.author = author;
        this.body = body;
        this.bodyHtml = bodyHtml;
        this.bodyVersion = bodyVersion;
        this.createdAt = createdAt;
        this.lastEditedAt = lastEditedAt;
        this.discussionUrl = discussionUrl;
        this.htmlUrl = htmlUrl;
        this.nodeId = nodeId;
        this.number = number;
        this.updatedAt = updatedAt;
        this.url = url;
        this.reactions = reactions;
    }

    /**
     * Getter for Author.
     * @return Returns the Object
     */
    @JsonGetter("author")
    public Object getAuthor() {
        return author;
    }

    /**
     * Setter for Author.
     * @param author Value for Object
     */
    @JsonSetter("author")
    public void setAuthor(Object author) {
        this.author = author;
    }

    /**
     * Getter for Body.
     * The main text of the comment.
     * @return Returns the String
     */
    @JsonGetter("body")
    public String getBody() {
        return body;
    }

    /**
     * Setter for Body.
     * The main text of the comment.
     * @param body Value for String
     */
    @JsonSetter("body")
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Getter for BodyHtml.
     * @return Returns the String
     */
    @JsonGetter("body_html")
    public String getBodyHtml() {
        return bodyHtml;
    }

    /**
     * Setter for BodyHtml.
     * @param bodyHtml Value for String
     */
    @JsonSetter("body_html")
    public void setBodyHtml(String bodyHtml) {
        this.bodyHtml = bodyHtml;
    }

    /**
     * Getter for BodyVersion.
     * The current version of the body content. If provided, this update operation will be rejected
     * if the given version does not match the latest version on the server.
     * @return Returns the String
     */
    @JsonGetter("body_version")
    public String getBodyVersion() {
        return bodyVersion;
    }

    /**
     * Setter for BodyVersion.
     * The current version of the body content. If provided, this update operation will be rejected
     * if the given version does not match the latest version on the server.
     * @param bodyVersion Value for String
     */
    @JsonSetter("body_version")
    public void setBodyVersion(String bodyVersion) {
        this.bodyVersion = bodyVersion;
    }

    /**
     * Getter for CreatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter for CreatedAt.
     * @param createdAt Value for LocalDateTime
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for LastEditedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("last_edited_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getLastEditedAt() {
        return lastEditedAt;
    }

    /**
     * Setter for LastEditedAt.
     * @param lastEditedAt Value for LocalDateTime
     */
    @JsonSetter("last_edited_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setLastEditedAt(LocalDateTime lastEditedAt) {
        this.lastEditedAt = lastEditedAt;
    }

    /**
     * Getter for DiscussionUrl.
     * @return Returns the String
     */
    @JsonGetter("discussion_url")
    public String getDiscussionUrl() {
        return discussionUrl;
    }

    /**
     * Setter for DiscussionUrl.
     * @param discussionUrl Value for String
     */
    @JsonSetter("discussion_url")
    public void setDiscussionUrl(String discussionUrl) {
        this.discussionUrl = discussionUrl;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for NodeId.
     * @return Returns the String
     */
    @JsonGetter("node_id")
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Setter for NodeId.
     * @param nodeId Value for String
     */
    @JsonSetter("node_id")
    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    /**
     * Getter for Number.
     * The unique sequence number of a team discussion comment.
     * @return Returns the int
     */
    @JsonGetter("number")
    public int getNumber() {
        return number;
    }

    /**
     * Setter for Number.
     * The unique sequence number of a team discussion comment.
     * @param number Value for int
     */
    @JsonSetter("number")
    public void setNumber(int number) {
        this.number = number;
    }

    /**
     * Getter for UpdatedAt.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter for UpdatedAt.
     * @param updatedAt Value for LocalDateTime
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for Reactions.
     * @return Returns the ReactionRollup
     */
    @JsonGetter("reactions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ReactionRollup getReactions() {
        return reactions;
    }

    /**
     * Setter for Reactions.
     * @param reactions Value for ReactionRollup
     */
    @JsonSetter("reactions")
    public void setReactions(ReactionRollup reactions) {
        this.reactions = reactions;
    }

    /**
     * Converts this TeamsDiscussionsCommentsResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TeamsDiscussionsCommentsResponse [" + "author=" + author + ", body=" + body
                + ", bodyHtml=" + bodyHtml + ", bodyVersion=" + bodyVersion + ", createdAt="
                + createdAt + ", lastEditedAt=" + lastEditedAt + ", discussionUrl=" + discussionUrl
                + ", htmlUrl=" + htmlUrl + ", nodeId=" + nodeId + ", number=" + number
                + ", updatedAt=" + updatedAt + ", url=" + url + ", reactions=" + reactions + "]";
    }

    /**
     * Builds a new {@link TeamsDiscussionsCommentsResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TeamsDiscussionsCommentsResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(author, body, bodyHtml, bodyVersion, createdAt, lastEditedAt,
                discussionUrl, htmlUrl, nodeId, number, updatedAt, url)
                .reactions(getReactions());
        return builder;
    }

    /**
     * Class to build instances of {@link TeamsDiscussionsCommentsResponse}.
     */
    public static class Builder {
        private Object author;
        private String body;
        private String bodyHtml;
        private String bodyVersion;
        private LocalDateTime createdAt;
        private LocalDateTime lastEditedAt;
        private String discussionUrl;
        private String htmlUrl;
        private String nodeId;
        private int number;
        private LocalDateTime updatedAt;
        private String url;
        private ReactionRollup reactions;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  author  Object value for author.
         * @param  body  String value for body.
         * @param  bodyHtml  String value for bodyHtml.
         * @param  bodyVersion  String value for bodyVersion.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @param  lastEditedAt  LocalDateTime value for lastEditedAt.
         * @param  discussionUrl  String value for discussionUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  nodeId  String value for nodeId.
         * @param  number  int value for number.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @param  url  String value for url.
         */
        public Builder(Object author, String body, String bodyHtml, String bodyVersion,
                LocalDateTime createdAt, LocalDateTime lastEditedAt, String discussionUrl,
                String htmlUrl, String nodeId, int number, LocalDateTime updatedAt, String url) {
            this.author = author;
            this.body = body;
            this.bodyHtml = bodyHtml;
            this.bodyVersion = bodyVersion;
            this.createdAt = createdAt;
            this.lastEditedAt = lastEditedAt;
            this.discussionUrl = discussionUrl;
            this.htmlUrl = htmlUrl;
            this.nodeId = nodeId;
            this.number = number;
            this.updatedAt = updatedAt;
            this.url = url;
        }

        /**
         * Setter for author.
         * @param  author  Object value for author.
         * @return Builder
         */
        public Builder author(Object author) {
            this.author = author;
            return this;
        }

        /**
         * Setter for body.
         * @param  body  String value for body.
         * @return Builder
         */
        public Builder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Setter for bodyHtml.
         * @param  bodyHtml  String value for bodyHtml.
         * @return Builder
         */
        public Builder bodyHtml(String bodyHtml) {
            this.bodyHtml = bodyHtml;
            return this;
        }

        /**
         * Setter for bodyVersion.
         * @param  bodyVersion  String value for bodyVersion.
         * @return Builder
         */
        public Builder bodyVersion(String bodyVersion) {
            this.bodyVersion = bodyVersion;
            return this;
        }

        /**
         * Setter for createdAt.
         * @param  createdAt  LocalDateTime value for createdAt.
         * @return Builder
         */
        public Builder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Setter for lastEditedAt.
         * @param  lastEditedAt  LocalDateTime value for lastEditedAt.
         * @return Builder
         */
        public Builder lastEditedAt(LocalDateTime lastEditedAt) {
            this.lastEditedAt = lastEditedAt;
            return this;
        }

        /**
         * Setter for discussionUrl.
         * @param  discussionUrl  String value for discussionUrl.
         * @return Builder
         */
        public Builder discussionUrl(String discussionUrl) {
            this.discussionUrl = discussionUrl;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for nodeId.
         * @param  nodeId  String value for nodeId.
         * @return Builder
         */
        public Builder nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        /**
         * Setter for number.
         * @param  number  int value for number.
         * @return Builder
         */
        public Builder number(int number) {
            this.number = number;
            return this;
        }

        /**
         * Setter for updatedAt.
         * @param  updatedAt  LocalDateTime value for updatedAt.
         * @return Builder
         */
        public Builder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for reactions.
         * @param  reactions  ReactionRollup value for reactions.
         * @return Builder
         */
        public Builder reactions(ReactionRollup reactions) {
            this.reactions = reactions;
            return this;
        }

        /**
         * Builds a new {@link TeamsDiscussionsCommentsResponse} object using the set fields.
         * @return {@link TeamsDiscussionsCommentsResponse}
         */
        public TeamsDiscussionsCommentsResponse build() {
            return new TeamsDiscussionsCommentsResponse(author, body, bodyHtml, bodyVersion,
                    createdAt, lastEditedAt, discussionUrl, htmlUrl, nodeId, number, updatedAt, url,
                    reactions);
        }
    }
}

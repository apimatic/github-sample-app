/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.github.api.ApiHelper;
import com.github.api.models.GistsRequest1;
import com.github.api.models.GistsRequest11;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = GistsUpdateBody.GistsUpdateBodyDeserializer.class)
public abstract class GistsUpdateBody {
    
    /**
     * Any-of type initialization method.
     * @param gistsRequest1 GistsRequest1 value for gistsRequest1.
     * @return The GistsRequest1Case object.
     */
    public static GistsUpdateBody fromGistsRequest1(GistsRequest1 gistsRequest1) {
        return gistsRequest1 == null ? null : new GistsRequest1Case(gistsRequest1);
    }

    /**
     * Any-of type initialization method.
     * @param gistsRequest11 GistsRequest11 value for gistsRequest11.
     * @return The GistsRequest11Case object.
     */
    public static GistsUpdateBody fromGistsRequest11(GistsRequest11 gistsRequest11) {
        return gistsRequest11 == null ? null : new GistsRequest11Case(gistsRequest11);
    }

    /**
     * Any-of type initialization method.
     * @param object Map of String, value for object.
     * @return The ObjectCase object.
     */
    public static GistsUpdateBody fromObject(Map<String, Object> object) {
        return object == null ? null : new ObjectCase(object);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R gistsRequest1(GistsRequest1 gistsRequest1);

        R gistsRequest11(GistsRequest11 gistsRequest11);

        R object(Map<String, Object> object);
    }

    /**
     * This is a implementation class for GistsRequest1Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class GistsRequest1Case extends GistsUpdateBody {

        @JsonValue
        private GistsRequest1 gistsRequest1;

        GistsRequest1Case(GistsRequest1 gistsRequest1) {
            this.gistsRequest1 = gistsRequest1;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.gistsRequest1(this.gistsRequest1);
        }

        @JsonCreator
        private GistsRequest1Case(JsonNode jsonNode) throws IOException {
            this.gistsRequest1 = ApiHelper.deserialize(jsonNode,
                GistsRequest1.class);
        }

        @Override
        public String toString() {
            return gistsRequest1.toString();
        }
    }

    /**
     * This is a implementation class for GistsRequest11Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class GistsRequest11Case extends GistsUpdateBody {

        @JsonValue
        private GistsRequest11 gistsRequest11;

        GistsRequest11Case(GistsRequest11 gistsRequest11) {
            this.gistsRequest11 = gistsRequest11;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.gistsRequest11(this.gistsRequest11);
        }

        @JsonCreator
        private GistsRequest11Case(JsonNode jsonNode) throws IOException {
            this.gistsRequest11 = ApiHelper.deserialize(jsonNode,
                GistsRequest11.class);
        }

        @Override
        public String toString() {
            return gistsRequest11.toString();
        }
    }

    /**
     * This is a implementation class for ObjectCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase
    private static class ObjectCase extends GistsUpdateBody {

        @JsonValue
        private Map<String, Object> object;

        ObjectCase(Map<String, Object> object) {
            this.object = object;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.object(this.object);
        }

        @JsonCreator
        private ObjectCase(JsonNode jsonNode) throws IOException {
            this.object = ApiHelper.deserialize(jsonNode,
                new TypeReference<Map<String, Object>>(){});
        }

        @Override
        public String toString() {
            return object.toString();
        }
    }

    /**
     * This is a custom deserializer class for GistsUpdateBody.
     */
    protected static class GistsUpdateBodyDeserializer
            extends JsonDeserializer<GistsUpdateBody> {

        @Override
        public GistsUpdateBody deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(GistsRequest1Case.class,
                    GistsRequest11Case.class, ObjectCase.class), false);
        }
    }

}

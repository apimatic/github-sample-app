/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for ReposCompareBaseheadResponse type.
 */
public class ReposCompareBaseheadResponse {
    private String url;
    private String htmlUrl;
    private String permalinkUrl;
    private String diffUrl;
    private String patchUrl;
    private BaseCommit baseCommit;
    private MergeBaseCommit mergeBaseCommit;
    private Status9Enum status;
    private int aheadBy;
    private int behindBy;
    private int totalCommits;
    private List<Commit> commits;
    private List<DiffEntry> files;

    /**
     * Default constructor.
     */
    public ReposCompareBaseheadResponse() {
    }

    /**
     * Initialization constructor.
     * @param  url  String value for url.
     * @param  htmlUrl  String value for htmlUrl.
     * @param  permalinkUrl  String value for permalinkUrl.
     * @param  diffUrl  String value for diffUrl.
     * @param  patchUrl  String value for patchUrl.
     * @param  baseCommit  BaseCommit value for baseCommit.
     * @param  mergeBaseCommit  MergeBaseCommit value for mergeBaseCommit.
     * @param  status  Status9Enum value for status.
     * @param  aheadBy  int value for aheadBy.
     * @param  behindBy  int value for behindBy.
     * @param  totalCommits  int value for totalCommits.
     * @param  commits  List of Commit value for commits.
     * @param  files  List of DiffEntry value for files.
     */
    public ReposCompareBaseheadResponse(
            String url,
            String htmlUrl,
            String permalinkUrl,
            String diffUrl,
            String patchUrl,
            BaseCommit baseCommit,
            MergeBaseCommit mergeBaseCommit,
            Status9Enum status,
            int aheadBy,
            int behindBy,
            int totalCommits,
            List<Commit> commits,
            List<DiffEntry> files) {
        this.url = url;
        this.htmlUrl = htmlUrl;
        this.permalinkUrl = permalinkUrl;
        this.diffUrl = diffUrl;
        this.patchUrl = patchUrl;
        this.baseCommit = baseCommit;
        this.mergeBaseCommit = mergeBaseCommit;
        this.status = status;
        this.aheadBy = aheadBy;
        this.behindBy = behindBy;
        this.totalCommits = totalCommits;
        this.commits = commits;
        this.files = files;
    }

    /**
     * Getter for Url.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for HtmlUrl.
     * @return Returns the String
     */
    @JsonGetter("html_url")
    public String getHtmlUrl() {
        return htmlUrl;
    }

    /**
     * Setter for HtmlUrl.
     * @param htmlUrl Value for String
     */
    @JsonSetter("html_url")
    public void setHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
    }

    /**
     * Getter for PermalinkUrl.
     * @return Returns the String
     */
    @JsonGetter("permalink_url")
    public String getPermalinkUrl() {
        return permalinkUrl;
    }

    /**
     * Setter for PermalinkUrl.
     * @param permalinkUrl Value for String
     */
    @JsonSetter("permalink_url")
    public void setPermalinkUrl(String permalinkUrl) {
        this.permalinkUrl = permalinkUrl;
    }

    /**
     * Getter for DiffUrl.
     * @return Returns the String
     */
    @JsonGetter("diff_url")
    public String getDiffUrl() {
        return diffUrl;
    }

    /**
     * Setter for DiffUrl.
     * @param diffUrl Value for String
     */
    @JsonSetter("diff_url")
    public void setDiffUrl(String diffUrl) {
        this.diffUrl = diffUrl;
    }

    /**
     * Getter for PatchUrl.
     * @return Returns the String
     */
    @JsonGetter("patch_url")
    public String getPatchUrl() {
        return patchUrl;
    }

    /**
     * Setter for PatchUrl.
     * @param patchUrl Value for String
     */
    @JsonSetter("patch_url")
    public void setPatchUrl(String patchUrl) {
        this.patchUrl = patchUrl;
    }

    /**
     * Getter for BaseCommit.
     * @return Returns the BaseCommit
     */
    @JsonGetter("base_commit")
    public BaseCommit getBaseCommit() {
        return baseCommit;
    }

    /**
     * Setter for BaseCommit.
     * @param baseCommit Value for BaseCommit
     */
    @JsonSetter("base_commit")
    public void setBaseCommit(BaseCommit baseCommit) {
        this.baseCommit = baseCommit;
    }

    /**
     * Getter for MergeBaseCommit.
     * @return Returns the MergeBaseCommit
     */
    @JsonGetter("merge_base_commit")
    public MergeBaseCommit getMergeBaseCommit() {
        return mergeBaseCommit;
    }

    /**
     * Setter for MergeBaseCommit.
     * @param mergeBaseCommit Value for MergeBaseCommit
     */
    @JsonSetter("merge_base_commit")
    public void setMergeBaseCommit(MergeBaseCommit mergeBaseCommit) {
        this.mergeBaseCommit = mergeBaseCommit;
    }

    /**
     * Getter for Status.
     * @return Returns the Status9Enum
     */
    @JsonGetter("status")
    public Status9Enum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * @param status Value for Status9Enum
     */
    @JsonSetter("status")
    public void setStatus(Status9Enum status) {
        this.status = status;
    }

    /**
     * Getter for AheadBy.
     * @return Returns the int
     */
    @JsonGetter("ahead_by")
    public int getAheadBy() {
        return aheadBy;
    }

    /**
     * Setter for AheadBy.
     * @param aheadBy Value for int
     */
    @JsonSetter("ahead_by")
    public void setAheadBy(int aheadBy) {
        this.aheadBy = aheadBy;
    }

    /**
     * Getter for BehindBy.
     * @return Returns the int
     */
    @JsonGetter("behind_by")
    public int getBehindBy() {
        return behindBy;
    }

    /**
     * Setter for BehindBy.
     * @param behindBy Value for int
     */
    @JsonSetter("behind_by")
    public void setBehindBy(int behindBy) {
        this.behindBy = behindBy;
    }

    /**
     * Getter for TotalCommits.
     * @return Returns the int
     */
    @JsonGetter("total_commits")
    public int getTotalCommits() {
        return totalCommits;
    }

    /**
     * Setter for TotalCommits.
     * @param totalCommits Value for int
     */
    @JsonSetter("total_commits")
    public void setTotalCommits(int totalCommits) {
        this.totalCommits = totalCommits;
    }

    /**
     * Getter for Commits.
     * @return Returns the List of Commit
     */
    @JsonGetter("commits")
    public List<Commit> getCommits() {
        return commits;
    }

    /**
     * Setter for Commits.
     * @param commits Value for List of Commit
     */
    @JsonSetter("commits")
    public void setCommits(List<Commit> commits) {
        this.commits = commits;
    }

    /**
     * Getter for Files.
     * @return Returns the List of DiffEntry
     */
    @JsonGetter("files")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<DiffEntry> getFiles() {
        return files;
    }

    /**
     * Setter for Files.
     * @param files Value for List of DiffEntry
     */
    @JsonSetter("files")
    public void setFiles(List<DiffEntry> files) {
        this.files = files;
    }

    /**
     * Converts this ReposCompareBaseheadResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReposCompareBaseheadResponse [" + "url=" + url + ", htmlUrl=" + htmlUrl
                + ", permalinkUrl=" + permalinkUrl + ", diffUrl=" + diffUrl + ", patchUrl="
                + patchUrl + ", baseCommit=" + baseCommit + ", mergeBaseCommit=" + mergeBaseCommit
                + ", status=" + status + ", aheadBy=" + aheadBy + ", behindBy=" + behindBy
                + ", totalCommits=" + totalCommits + ", commits=" + commits + ", files=" + files
                + "]";
    }

    /**
     * Builds a new {@link ReposCompareBaseheadResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReposCompareBaseheadResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(url, htmlUrl, permalinkUrl, diffUrl, patchUrl, baseCommit,
                mergeBaseCommit, status, aheadBy, behindBy, totalCommits, commits)
                .files(getFiles());
        return builder;
    }

    /**
     * Class to build instances of {@link ReposCompareBaseheadResponse}.
     */
    public static class Builder {
        private String url;
        private String htmlUrl;
        private String permalinkUrl;
        private String diffUrl;
        private String patchUrl;
        private BaseCommit baseCommit;
        private MergeBaseCommit mergeBaseCommit;
        private Status9Enum status;
        private int aheadBy;
        private int behindBy;
        private int totalCommits;
        private List<Commit> commits;
        private List<DiffEntry> files;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  url  String value for url.
         * @param  htmlUrl  String value for htmlUrl.
         * @param  permalinkUrl  String value for permalinkUrl.
         * @param  diffUrl  String value for diffUrl.
         * @param  patchUrl  String value for patchUrl.
         * @param  baseCommit  BaseCommit value for baseCommit.
         * @param  mergeBaseCommit  MergeBaseCommit value for mergeBaseCommit.
         * @param  status  Status9Enum value for status.
         * @param  aheadBy  int value for aheadBy.
         * @param  behindBy  int value for behindBy.
         * @param  totalCommits  int value for totalCommits.
         * @param  commits  List of Commit value for commits.
         */
        public Builder(String url, String htmlUrl, String permalinkUrl, String diffUrl,
                String patchUrl, BaseCommit baseCommit, MergeBaseCommit mergeBaseCommit,
                Status9Enum status, int aheadBy, int behindBy, int totalCommits,
                List<Commit> commits) {
            this.url = url;
            this.htmlUrl = htmlUrl;
            this.permalinkUrl = permalinkUrl;
            this.diffUrl = diffUrl;
            this.patchUrl = patchUrl;
            this.baseCommit = baseCommit;
            this.mergeBaseCommit = mergeBaseCommit;
            this.status = status;
            this.aheadBy = aheadBy;
            this.behindBy = behindBy;
            this.totalCommits = totalCommits;
            this.commits = commits;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for htmlUrl.
         * @param  htmlUrl  String value for htmlUrl.
         * @return Builder
         */
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * Setter for permalinkUrl.
         * @param  permalinkUrl  String value for permalinkUrl.
         * @return Builder
         */
        public Builder permalinkUrl(String permalinkUrl) {
            this.permalinkUrl = permalinkUrl;
            return this;
        }

        /**
         * Setter for diffUrl.
         * @param  diffUrl  String value for diffUrl.
         * @return Builder
         */
        public Builder diffUrl(String diffUrl) {
            this.diffUrl = diffUrl;
            return this;
        }

        /**
         * Setter for patchUrl.
         * @param  patchUrl  String value for patchUrl.
         * @return Builder
         */
        public Builder patchUrl(String patchUrl) {
            this.patchUrl = patchUrl;
            return this;
        }

        /**
         * Setter for baseCommit.
         * @param  baseCommit  BaseCommit value for baseCommit.
         * @return Builder
         */
        public Builder baseCommit(BaseCommit baseCommit) {
            this.baseCommit = baseCommit;
            return this;
        }

        /**
         * Setter for mergeBaseCommit.
         * @param  mergeBaseCommit  MergeBaseCommit value for mergeBaseCommit.
         * @return Builder
         */
        public Builder mergeBaseCommit(MergeBaseCommit mergeBaseCommit) {
            this.mergeBaseCommit = mergeBaseCommit;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  Status9Enum value for status.
         * @return Builder
         */
        public Builder status(Status9Enum status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for aheadBy.
         * @param  aheadBy  int value for aheadBy.
         * @return Builder
         */
        public Builder aheadBy(int aheadBy) {
            this.aheadBy = aheadBy;
            return this;
        }

        /**
         * Setter for behindBy.
         * @param  behindBy  int value for behindBy.
         * @return Builder
         */
        public Builder behindBy(int behindBy) {
            this.behindBy = behindBy;
            return this;
        }

        /**
         * Setter for totalCommits.
         * @param  totalCommits  int value for totalCommits.
         * @return Builder
         */
        public Builder totalCommits(int totalCommits) {
            this.totalCommits = totalCommits;
            return this;
        }

        /**
         * Setter for commits.
         * @param  commits  List of Commit value for commits.
         * @return Builder
         */
        public Builder commits(List<Commit> commits) {
            this.commits = commits;
            return this;
        }

        /**
         * Setter for files.
         * @param  files  List of DiffEntry value for files.
         * @return Builder
         */
        public Builder files(List<DiffEntry> files) {
            this.files = files;
            return this;
        }

        /**
         * Builds a new {@link ReposCompareBaseheadResponse} object using the set fields.
         * @return {@link ReposCompareBaseheadResponse}
         */
        public ReposCompareBaseheadResponse build() {
            return new ReposCompareBaseheadResponse(url, htmlUrl, permalinkUrl, diffUrl, patchUrl,
                    baseCommit, mergeBaseCommit, status, aheadBy, behindBy, totalCommits, commits,
                    files);
        }
    }
}

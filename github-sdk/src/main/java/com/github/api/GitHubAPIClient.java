/*
 * GitHubAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.github.api;

import com.github.api.controllers.ActionsController;
import com.github.api.controllers.ActivityController;
import com.github.api.controllers.AppsController;
import com.github.api.controllers.BillingController;
import com.github.api.controllers.ChecksController;
import com.github.api.controllers.CodeScanningController;
import com.github.api.controllers.CodesOfConductController;
import com.github.api.controllers.CodespacesController;
import com.github.api.controllers.DependabotController;
import com.github.api.controllers.DependencyGraphController;
import com.github.api.controllers.EmojisController;
import com.github.api.controllers.EnterpriseAdminController;
import com.github.api.controllers.GistsController;
import com.github.api.controllers.GitController;
import com.github.api.controllers.GitignoreController;
import com.github.api.controllers.InteractionsController;
import com.github.api.controllers.IssuesController;
import com.github.api.controllers.LicensesController;
import com.github.api.controllers.MarkdownController;
import com.github.api.controllers.MetaController;
import com.github.api.controllers.MigrationsController;
import com.github.api.controllers.OidcController;
import com.github.api.controllers.OrgsController;
import com.github.api.controllers.PackagesController;
import com.github.api.controllers.ProjectsController;
import com.github.api.controllers.PullsController;
import com.github.api.controllers.RateLimitController;
import com.github.api.controllers.ReactionsController;
import com.github.api.controllers.ReposController;
import com.github.api.controllers.SearchController;
import com.github.api.controllers.SecretScanningController;
import com.github.api.controllers.TeamsController;
import com.github.api.controllers.UsersController;
import com.github.api.http.client.HttpCallback;
import com.github.api.http.client.HttpClientConfiguration;
import com.github.api.http.client.ReadonlyHttpClientConfiguration;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.authentication.Authentication;
import io.apimatic.coreinterfaces.compatibility.CompatibilityFactory;
import io.apimatic.coreinterfaces.http.HttpClient;
import io.apimatic.okhttpclient.adapter.OkClient;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class GitHubAPIClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private ActionsController actions;
    private ActivityController activity;
    private AppsController apps;
    private BillingController billing;
    private ChecksController checks;
    private CodeScanningController codeScanning;
    private CodesOfConductController codesOfConduct;
    private CodespacesController codespaces;
    private EmojisController emojis;
    private EnterpriseAdminController enterpriseAdmin;
    private DependabotController dependabot;
    private DependencyGraphController dependencyGraph;
    private GistsController gists;
    private GitController git;
    private GitignoreController gitignore;
    private InteractionsController interactions;
    private IssuesController issues;
    private LicensesController licenses;
    private MarkdownController markdown;
    private MetaController meta;
    private MigrationsController migrations;
    private OrgsController orgs;
    private PackagesController packages;
    private ProjectsController projects;
    private PullsController pulls;
    private RateLimitController rateLimit;
    private ReactionsController reactions;
    private ReposController repos;
    private SearchController search;
    private SecretScanningController secretScanning;
    private TeamsController teams;
    private UsersController users;
    private OidcController oidc;

    private static final CompatibilityFactory compatibilityFactory = new CompatibilityFactoryImpl();

    private static String userAgent = "APIMATIC 3.0";

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * BearerAuthManager.
     */
    private BearerAuthManager bearerAuthManager;

    /**
     * Map of authentication Managers.
     */
    private Map<String, Authentication> authentications;


    /**
     * Callback to be called before and after the HTTP call for an endpoint is made.
     */
    private final HttpCallback httpCallback;

    private GitHubAPIClient(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig, String accessToken,
            Map<String, Authentication> authentications, HttpCallback httpCallback) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;
        this.httpCallback = httpCallback;
        this.authentications = 
                (authentications == null) ? new HashMap<>() : new HashMap<>(authentications);
        if (this.authentications.containsKey("global")) {
            this.bearerAuthManager = (BearerAuthManager) this.authentications.get("global");
        }

        if (!this.authentications.containsKey("global")
                || !getBearerAuthCredentials().equals(accessToken)) {
            this.bearerAuthManager = new BearerAuthManager(accessToken);
            this.authentications.put("global", bearerAuthManager);
        }

        GlobalConfiguration globalConfig = new GlobalConfiguration.Builder()
                .authentication(this.authentications).compatibilityFactory(compatibilityFactory)
                .httpClient(httpClient).baseUri(server -> getBaseUri(server))
                .callback(httpCallback)
                .userAgent(userAgent)
                .build();
        actions = new ActionsController(globalConfig);
        activity = new ActivityController(globalConfig);
        apps = new AppsController(globalConfig);
        billing = new BillingController(globalConfig);
        checks = new ChecksController(globalConfig);
        codeScanning = new CodeScanningController(globalConfig);
        codesOfConduct = new CodesOfConductController(globalConfig);
        codespaces = new CodespacesController(globalConfig);
        emojis = new EmojisController(globalConfig);
        enterpriseAdmin = new EnterpriseAdminController(globalConfig);
        dependabot = new DependabotController(globalConfig);
        dependencyGraph = new DependencyGraphController(globalConfig);
        gists = new GistsController(globalConfig);
        git = new GitController(globalConfig);
        gitignore = new GitignoreController(globalConfig);
        interactions = new InteractionsController(globalConfig);
        issues = new IssuesController(globalConfig);
        licenses = new LicensesController(globalConfig);
        markdown = new MarkdownController(globalConfig);
        meta = new MetaController(globalConfig);
        migrations = new MigrationsController(globalConfig);
        orgs = new OrgsController(globalConfig);
        packages = new PackagesController(globalConfig);
        projects = new ProjectsController(globalConfig);
        pulls = new PullsController(globalConfig);
        rateLimit = new RateLimitController(globalConfig);
        reactions = new ReactionsController(globalConfig);
        repos = new ReposController(globalConfig);
        search = new SearchController(globalConfig);
        secretScanning = new SecretScanningController(globalConfig);
        teams = new TeamsController(globalConfig);
        users = new UsersController(globalConfig);
        oidc = new OidcController(globalConfig);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of ActionsController.
     * @return actions
     */
    public ActionsController getActionsController() {
        return actions;
    }

    /**
     * Get the instance of ActivityController.
     * @return activity
     */
    public ActivityController getActivityController() {
        return activity;
    }

    /**
     * Get the instance of AppsController.
     * @return apps
     */
    public AppsController getAppsController() {
        return apps;
    }

    /**
     * Get the instance of BillingController.
     * @return billing
     */
    public BillingController getBillingController() {
        return billing;
    }

    /**
     * Get the instance of ChecksController.
     * @return checks
     */
    public ChecksController getChecksController() {
        return checks;
    }

    /**
     * Get the instance of CodeScanningController.
     * @return codeScanning
     */
    public CodeScanningController getCodeScanningController() {
        return codeScanning;
    }

    /**
     * Get the instance of CodesOfConductController.
     * @return codesOfConduct
     */
    public CodesOfConductController getCodesOfConductController() {
        return codesOfConduct;
    }

    /**
     * Get the instance of CodespacesController.
     * @return codespaces
     */
    public CodespacesController getCodespacesController() {
        return codespaces;
    }

    /**
     * Get the instance of EmojisController.
     * @return emojis
     */
    public EmojisController getEmojisController() {
        return emojis;
    }

    /**
     * Get the instance of EnterpriseAdminController.
     * @return enterpriseAdmin
     */
    public EnterpriseAdminController getEnterpriseAdminController() {
        return enterpriseAdmin;
    }

    /**
     * Get the instance of DependabotController.
     * @return dependabot
     */
    public DependabotController getDependabotController() {
        return dependabot;
    }

    /**
     * Get the instance of DependencyGraphController.
     * @return dependencyGraph
     */
    public DependencyGraphController getDependencyGraphController() {
        return dependencyGraph;
    }

    /**
     * Get the instance of GistsController.
     * @return gists
     */
    public GistsController getGistsController() {
        return gists;
    }

    /**
     * Get the instance of GitController.
     * @return git
     */
    public GitController getGitController() {
        return git;
    }

    /**
     * Get the instance of GitignoreController.
     * @return gitignore
     */
    public GitignoreController getGitignoreController() {
        return gitignore;
    }

    /**
     * Get the instance of InteractionsController.
     * @return interactions
     */
    public InteractionsController getInteractionsController() {
        return interactions;
    }

    /**
     * Get the instance of IssuesController.
     * @return issues
     */
    public IssuesController getIssuesController() {
        return issues;
    }

    /**
     * Get the instance of LicensesController.
     * @return licenses
     */
    public LicensesController getLicensesController() {
        return licenses;
    }

    /**
     * Get the instance of MarkdownController.
     * @return markdown
     */
    public MarkdownController getMarkdownController() {
        return markdown;
    }

    /**
     * Get the instance of MetaController.
     * @return meta
     */
    public MetaController getMetaController() {
        return meta;
    }

    /**
     * Get the instance of MigrationsController.
     * @return migrations
     */
    public MigrationsController getMigrationsController() {
        return migrations;
    }

    /**
     * Get the instance of OrgsController.
     * @return orgs
     */
    public OrgsController getOrgsController() {
        return orgs;
    }

    /**
     * Get the instance of PackagesController.
     * @return packages
     */
    public PackagesController getPackagesController() {
        return packages;
    }

    /**
     * Get the instance of ProjectsController.
     * @return projects
     */
    public ProjectsController getProjectsController() {
        return projects;
    }

    /**
     * Get the instance of PullsController.
     * @return pulls
     */
    public PullsController getPullsController() {
        return pulls;
    }

    /**
     * Get the instance of RateLimitController.
     * @return rateLimit
     */
    public RateLimitController getRateLimitController() {
        return rateLimit;
    }

    /**
     * Get the instance of ReactionsController.
     * @return reactions
     */
    public ReactionsController getReactionsController() {
        return reactions;
    }

    /**
     * Get the instance of ReposController.
     * @return repos
     */
    public ReposController getReposController() {
        return repos;
    }

    /**
     * Get the instance of SearchController.
     * @return search
     */
    public SearchController getSearchController() {
        return search;
    }

    /**
     * Get the instance of SecretScanningController.
     * @return secretScanning
     */
    public SecretScanningController getSecretScanningController() {
        return secretScanning;
    }

    /**
     * Get the instance of TeamsController.
     * @return teams
     */
    public TeamsController getTeamsController() {
        return teams;
    }

    /**
     * Get the instance of UsersController.
     * @return users
     */
    public UsersController getUsersController() {
        return users;
    }

    /**
     * Get the instance of OidcController.
     * @return oidc
     */
    public OidcController getOidcController() {
        return oidc;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The credentials to use with BearerAuth.
     * @return bearerAuthCredentials
     */
    private BearerAuthCredentials getBearerAuthCredentials() {
        return bearerAuthManager;
    }

    /**
     * OAuth 2.0 Access Token.
     * @return accessToken
     */
    public String getAccessToken() {
        return getBearerAuthCredentials().getAccessToken();
    }
    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }


    /**
     * Get base URI by current environment.
     * 
     * @param server string for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(String server) {
        return getBaseUri(Server.fromString(server));
    }


    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://api.github.com";
            }
        }
        if (environment.equals(Environment.ENVIRONMENT2)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://uploads.github.com";
            }
        }
        return "https://api.github.com";
    }

    /**
     * Converts this GitHubAPIClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GitHubAPIClient [" + "environment=" + environment + ", httpClientConfig="
                + httpClientConfig + ", authentications=" + authentications + "]";
    }

    /**
     * Builds a new {@link GitHubAPIClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link GitHubAPIClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.accessToken = getBearerAuthCredentials().getAccessToken();
        builder.authentications = authentications;
        builder.httpCallback = httpCallback;
        builder.httpClientConfig(configBldr -> configBldr =
                ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link GitHubAPIClient}.
     */
    public static class Builder {

        private Environment environment = Environment.PRODUCTION;
        private HttpClient httpClient;
        private String accessToken = "";
        private Map<String, Authentication> authentications = null;
        private HttpCallback httpCallback = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Credentials setter for BearerAuth.
         * @param accessToken String value for accessToken.
         * @return Builder
         */
        public Builder accessToken(String accessToken) {
            if (accessToken == null) {
                throw new NullPointerException("AccessToken cannot be null.");
            }
            this.accessToken = accessToken;
            return this;
        }

        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * HttpCallback.
         * @param httpCallback Callback to be called before and after the HTTP call.
         * @return Builder
         */
        public Builder httpCallback(HttpCallback httpCallback) {
            this.httpCallback = httpCallback;
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Builds a new GitHubAPIClient object using the set fields.
         * @return GitHubAPIClient
         */
        public GitHubAPIClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig.getConfiguration(), compatibilityFactory);

            return new GitHubAPIClient(environment, httpClient, httpClientConfig, accessToken,
                    authentications, httpCallback);
        }
    }
}